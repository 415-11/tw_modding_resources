{	
	"docgen:global:script_error": {
		"scope": "lua",
		"prefix": "script_error",
		"description": "script_error()\n- battle|campaign|frontend -\n\nThrows a script error with the supplied message, printing the lua callstack to the <code>Lua</code> console output spool.\n",
		"body": [
			"script_error(${1:string message})"
		],
	},
	"docgen:global:global:script_error": {
		"scope": "lua",
		"prefix": "global:script_error",
		"description": "script_error()\n- battle|campaign|frontend -\n\nThrows a script error with the supplied message, printing the lua callstack to the <code>Lua</code> console output spool.\n",
		"body": [
			"global:script_error(${1:string message})"
		],
	},
	"docgen:global:out": {
		"scope": "lua",
		"prefix": "out",
		"description": "out()\n- battle|campaign|frontend -\n\n<code>out</code> is a table that provides multiple methods for outputting text to the various available debug console spools.\n",
		"body": [
			"out(${1:string output})"
		],
	},
	"docgen:global:global:out": {
		"scope": "lua",
		"prefix": "global:out",
		"description": "out()\n- battle|campaign|frontend -\n\n<code>out</code> is a table that provides multiple methods for outputting text to the various available debug console spools.\n",
		"body": [
			"global:out(${1:string output})"
		],
	},
	"docgen:global:force_require": {
		"scope": "lua",
		"prefix": "force_require",
		"description": "force_require()\n- battle|campaign|frontend -\n\nForceably unloads and requires a file by name.\n",
		"body": [
			"force_require(${1:string filename})"
		],
	},
	"docgen:global:global:force_require": {
		"scope": "lua",
		"prefix": "global:force_require",
		"description": "force_require()\n- battle|campaign|frontend -\n\nForceably unloads and requires a file by name.\n",
		"body": [
			"global:force_require(${1:string filename})"
		],
	},
	"docgen:global:load_script_libraries": {
		"scope": "lua",
		"prefix": "load_script_libraries",
		"description": "load_script_libraries()\n- battle|campaign|frontend -\n\nOne-shot function to load the script libraries.\n",
		"body": [
			"load_script_libraries()"
		],
	},
	"docgen:global:global:load_script_libraries": {
		"scope": "lua",
		"prefix": "global:load_script_libraries",
		"description": "load_script_libraries()\n- battle|campaign|frontend -\n\nOne-shot function to load the script libraries.\n",
		"body": [
			"global:load_script_libraries()"
		],
	},
	"docgen:global:get_bm": {
		"scope": "lua",
		"prefix": "get_bm",
		"description": "get_bm()\n- battle -\n\nGlobal function to get a battle manager from anywhere (battle only, obviously).\n",
		"body": [
			"get_bm()"
		],
	},
	"docgen:global:global:get_bm": {
		"scope": "lua",
		"prefix": "global:get_bm",
		"description": "get_bm()\n- battle -\n\nGlobal function to get a battle manager from anywhere (battle only, obviously).\n",
		"body": [
			"global:get_bm()"
		],
	},
	"docgen:global:v": {
		"scope": "lua",
		"prefix": "v",
		"description": "v()\n- battle -\n\nA shorthand method for creating a battle_vector.\n",
		"body": [
			"v(${1:number x position}, ${2:number y position}, ${3:number z position})"
		],
	},
	"docgen:global:global:v": {
		"scope": "lua",
		"prefix": "global:v",
		"description": "v()\n- battle -\n\nA shorthand method for creating a battle_vector.\n",
		"body": [
			"global:v(${1:number x position}, ${2:number y position}, ${3:number z position})"
		],
	},
	"docgen:global:new_sfx": {
		"scope": "lua",
		"prefix": "new_sfx",
		"description": "new_sfx()\n- battle -\n\nA shorthand method for creating a sound effect object.\n",
		"body": [
			"new_sfx(${1:string sound event})"
		],
	},
	"docgen:global:global:new_sfx": {
		"scope": "lua",
		"prefix": "global:new_sfx",
		"description": "new_sfx()\n- battle -\n\nA shorthand method for creating a sound effect object.\n",
		"body": [
			"global:new_sfx(${1:string sound event})"
		],
	},
	"docgen:global:play_sound": {
		"scope": "lua",
		"prefix": "play_sound",
		"description": "play_sound()\n- battle -\n\nPlays a sound effect at a position.\n",
		"body": [
			"play_sound(${1:vector position}, ${2:battle_sound_effect sound effect})"
		],
	},
	"docgen:global:global:play_sound": {
		"scope": "lua",
		"prefix": "global:play_sound",
		"description": "play_sound()\n- battle -\n\nPlays a sound effect at a position.\n",
		"body": [
			"global:play_sound(${1:vector position}, ${2:battle_sound_effect sound effect})"
		],
	},
	"docgen:global:play_sound_2D": {
		"scope": "lua",
		"prefix": "play_sound_2D",
		"description": "play_sound_2D()\n- battle -\n\nPlays a sound effect.\n",
		"body": [
			"play_sound_2D(${1:battle_sound_effect sound effect})"
		],
	},
	"docgen:global:global:play_sound_2D": {
		"scope": "lua",
		"prefix": "global:play_sound_2D",
		"description": "play_sound_2D()\n- battle -\n\nPlays a sound effect.\n",
		"body": [
			"global:play_sound_2D(${1:battle_sound_effect sound effect})"
		],
	},
	"docgen:global:stop_sound": {
		"scope": "lua",
		"prefix": "stop_sound",
		"description": "stop_sound()\n- battle -\n\nStops a sound, if it's playing.\n",
		"body": [
			"stop_sound(${1:battle_sound_effect sound effect})"
		],
	},
	"docgen:global:global:stop_sound": {
		"scope": "lua",
		"prefix": "global:stop_sound",
		"description": "stop_sound()\n- battle -\n\nStops a sound, if it's playing.\n",
		"body": [
			"global:stop_sound(${1:battle_sound_effect sound effect})"
		],
	},
	"docgen:global:create_unitcontroller": {
		"scope": "lua",
		"prefix": "create_unitcontroller",
		"description": "create_unitcontroller()\n- battle -\n\nShorthand method for creating a unitcontroller.\n",
		"body": [
			"create_unitcontroller(${1:army host army}, ${2:... list of units})"
		],
	},
	"docgen:global:global:create_unitcontroller": {
		"scope": "lua",
		"prefix": "global:create_unitcontroller",
		"description": "create_unitcontroller()\n- battle -\n\nShorthand method for creating a unitcontroller.\n",
		"body": [
			"global:create_unitcontroller(${1:army host army}, ${2:... list of units})"
		],
	},
	"docgen:global:unitcontroller_from_army": {
		"scope": "lua",
		"prefix": "unitcontroller_from_army",
		"description": "unitcontroller_from_army()\n- battle -\n\nCreates a unitcontroller from a supplied army, containing all the units within that army.\n",
		"body": [
			"unitcontroller_from_army(${1:army host army})"
		],
	},
	"docgen:global:global:unitcontroller_from_army": {
		"scope": "lua",
		"prefix": "global:unitcontroller_from_army",
		"description": "unitcontroller_from_army()\n- battle -\n\nCreates a unitcontroller from a supplied army, containing all the units within that army.\n",
		"body": [
			"global:unitcontroller_from_army(${1:army host army})"
		],
	},
	"docgen:global:is_routing_or_dead": {
		"scope": "lua",
		"prefix": "is_routing_or_dead",
		"description": "is_routing_or_dead()\n- battle -\n\nReturns true if all units in the supplied object/collection are routing or dead.\n",
		"body": [
			"is_routing_or_dead(${1:object collection to test}, ${2:[opt=false] boolean shattered only}, ${3:[opt=false] boolean permit rampaging})"
		],
	},
	"docgen:global:global:is_routing_or_dead": {
		"scope": "lua",
		"prefix": "global:is_routing_or_dead",
		"description": "is_routing_or_dead()\n- battle -\n\nReturns true if all units in the supplied object/collection are routing or dead.\n",
		"body": [
			"global:is_routing_or_dead(${1:object collection to test}, ${2:[opt=false] boolean shattered only}, ${3:[opt=false] boolean permit rampaging})"
		],
	},
	"docgen:global:is_shattered_or_dead": {
		"scope": "lua",
		"prefix": "is_shattered_or_dead",
		"description": "is_shattered_or_dead()\n- battle -\n\nAlias for <code>is_routing_or_dead(obj, <strong>true</strong>, permit_rampaging)</code>.\n",
		"body": [
			"is_shattered_or_dead(${1:object collection to test}, ${2:[opt=false] boolean permit rampaging})"
		],
	},
	"docgen:global:global:is_shattered_or_dead": {
		"scope": "lua",
		"prefix": "global:is_shattered_or_dead",
		"description": "is_shattered_or_dead()\n- battle -\n\nAlias for <code>is_routing_or_dead(obj, <strong>true</strong>, permit_rampaging)</code>.\n",
		"body": [
			"global:is_shattered_or_dead(${1:object collection to test}, ${2:[opt=false] boolean permit rampaging})"
		],
	},
	"docgen:global:num_units_routing": {
		"scope": "lua",
		"prefix": "num_units_routing",
		"description": "num_units_routing()\n- battle -\n\nReturns the number of units in the supplied collection that are routing or dead.\n",
		"body": [
			"num_units_routing(${1:object collection to test}, ${2:[opt=false] boolean shattered only}, ${3:[opt=false] boolean permit rampaging})"
		],
	},
	"docgen:global:global:num_units_routing": {
		"scope": "lua",
		"prefix": "global:num_units_routing",
		"description": "num_units_routing()\n- battle -\n\nReturns the number of units in the supplied collection that are routing or dead.\n",
		"body": [
			"global:num_units_routing(${1:object collection to test}, ${2:[opt=false] boolean shattered only}, ${3:[opt=false] boolean permit rampaging})"
		],
	},
	"docgen:global:num_units_shattered": {
		"scope": "lua",
		"prefix": "num_units_shattered",
		"description": "num_units_shattered()\n- battle -\n\nAlias of <code>num_units_routing(obj, <strong>true</strong>, permit_rampaging)</code>.\n",
		"body": [
			"num_units_shattered(${1:object collection to test}, ${2:[opt=false] boolean permit rampaging})"
		],
	},
	"docgen:global:global:num_units_shattered": {
		"scope": "lua",
		"prefix": "global:num_units_shattered",
		"description": "num_units_shattered()\n- battle -\n\nAlias of <code>num_units_routing(obj, <strong>true</strong>, permit_rampaging)</code>.\n",
		"body": [
			"global:num_units_shattered(${1:object collection to test}, ${2:[opt=false] boolean permit rampaging})"
		],
	},
	"docgen:global:num_units_engaged": {
		"scope": "lua",
		"prefix": "num_units_engaged",
		"description": "num_units_engaged()\n- battle -\n\nReturns the number of units in the supplied collection which are currently engaged in melee.\n",
		"body": [
			"num_units_engaged(${1:object collection to test})"
		],
	},
	"docgen:global:global:num_units_engaged": {
		"scope": "lua",
		"prefix": "global:num_units_engaged",
		"description": "num_units_engaged()\n- battle -\n\nReturns the number of units in the supplied collection which are currently engaged in melee.\n",
		"body": [
			"global:num_units_engaged(${1:object collection to test})"
		],
	},
	"docgen:global:num_units_under_fire": {
		"scope": "lua",
		"prefix": "num_units_under_fire",
		"description": "num_units_under_fire()\n- battle -\n\nReturns the number of units in the supplied collection which are currently under missile fire.\n",
		"body": [
			"num_units_under_fire(${1:object collection to test})"
		],
	},
	"docgen:global:global:num_units_under_fire": {
		"scope": "lua",
		"prefix": "global:num_units_under_fire",
		"description": "num_units_under_fire()\n- battle -\n\nReturns the number of units in the supplied collection which are currently under missile fire.\n",
		"body": [
			"global:num_units_under_fire(${1:object collection to test})"
		],
	},
	"docgen:global:rout_all_units": {
		"scope": "lua",
		"prefix": "rout_all_units",
		"description": "rout_all_units()\n- battle -\n\nInstantly rout all units in the supplied collection.\n",
		"body": [
			"rout_all_units(${1:object collection of units})"
		],
	},
	"docgen:global:global:rout_all_units": {
		"scope": "lua",
		"prefix": "global:rout_all_units",
		"description": "rout_all_units()\n- battle -\n\nInstantly rout all units in the supplied collection.\n",
		"body": [
			"global:rout_all_units(${1:object collection of units})"
		],
	},
	"docgen:global:number_close_to_position": {
		"scope": "lua",
		"prefix": "number_close_to_position",
		"description": "number_close_to_position()\n- battle -\n\nReturns the number of units or sunits in a supplied collection within a given range of a given position.\n",
		"body": [
			"number_close_to_position(${1:object collection of units}, ${2:vector position}, ${3:number range in m}, ${4:boolean 2D only}, ${5:boolean non-routing only})"
		],
	},
	"docgen:global:global:number_close_to_position": {
		"scope": "lua",
		"prefix": "global:number_close_to_position",
		"description": "number_close_to_position()\n- battle -\n\nReturns the number of units or sunits in a supplied collection within a given range of a given position.\n",
		"body": [
			"global:number_close_to_position(${1:object collection of units}, ${2:vector position}, ${3:number range in m}, ${4:boolean 2D only}, ${5:boolean non-routing only})"
		],
	},
	"docgen:global:standing_number_close_to_position": {
		"scope": "lua",
		"prefix": "standing_number_close_to_position",
		"description": "standing_number_close_to_position()\n- battle -\n\nAlias of <code>number_close_to_position(obj, pos, range, two_d, <strong>true</strong>)</code>.\n",
		"body": [
			"standing_number_close_to_position(${1:object collection of units}, ${2:vector position}, ${3:number range in m}, ${4:boolean 2D only})"
		],
	},
	"docgen:global:global:standing_number_close_to_position": {
		"scope": "lua",
		"prefix": "global:standing_number_close_to_position",
		"description": "standing_number_close_to_position()\n- battle -\n\nAlias of <code>number_close_to_position(obj, pos, range, two_d, <strong>true</strong>)</code>.\n",
		"body": [
			"global:standing_number_close_to_position(${1:object collection of units}, ${2:vector position}, ${3:number range in m}, ${4:boolean 2D only})"
		],
	},
	"docgen:global:is_close_to_position": {
		"scope": "lua",
		"prefix": "is_close_to_position",
		"description": "is_close_to_position()\n- battle -\n\nReturns true if any units or sunits in a supplied collection are within a given range of a given position, false otherwise.\n",
		"body": [
			"is_close_to_position(${1:object collection of units}, ${2:vector position}, ${3:number range in m}, ${4:boolean 2D only}, ${5:boolean non-routing only})"
		],
	},
	"docgen:global:global:is_close_to_position": {
		"scope": "lua",
		"prefix": "global:is_close_to_position",
		"description": "is_close_to_position()\n- battle -\n\nReturns true if any units or sunits in a supplied collection are within a given range of a given position, false otherwise.\n",
		"body": [
			"global:is_close_to_position(${1:object collection of units}, ${2:vector position}, ${3:number range in m}, ${4:boolean 2D only}, ${5:boolean non-routing only})"
		],
	},
	"docgen:global:standing_is_close_to_position": {
		"scope": "lua",
		"prefix": "standing_is_close_to_position",
		"description": "standing_is_close_to_position()\n- battle -\n\nAlias of <code>is_close_to_position(obj, pos, range, two_d, <strong>true</strong>)</code>.\n",
		"body": [
			"standing_is_close_to_position(${1:object collection of units}, ${2:vector position}, ${3:number range in m}, ${4:boolean 2D only})"
		],
	},
	"docgen:global:global:standing_is_close_to_position": {
		"scope": "lua",
		"prefix": "global:standing_is_close_to_position",
		"description": "standing_is_close_to_position()\n- battle -\n\nAlias of <code>is_close_to_position(obj, pos, range, two_d, <strong>true</strong>)</code>.\n",
		"body": [
			"global:standing_is_close_to_position(${1:object collection of units}, ${2:vector position}, ${3:number range in m}, ${4:boolean 2D only})"
		],
	},
	"docgen:global:distance_between_forces": {
		"scope": "lua",
		"prefix": "distance_between_forces",
		"description": "distance_between_forces()\n- battle -\n\nReturns the closest distance between two collections of units.\n",
		"body": [
			"distance_between_forces(${1:object first collection}, ${2:object second collection}, ${3:[opt=false] boolean non-routing only}, ${4:return number closest distance in m between forces})"
		],
	},
	"docgen:global:global:distance_between_forces": {
		"scope": "lua",
		"prefix": "global:distance_between_forces",
		"description": "distance_between_forces()\n- battle -\n\nReturns the closest distance between two collections of units.\n",
		"body": [
			"global:distance_between_forces(${1:object first collection}, ${2:object second collection}, ${3:[opt=false] boolean non-routing only}, ${4:return number closest distance in m between forces})"
		],
	},
	"docgen:global:get_closest_unit": {
		"scope": "lua",
		"prefix": "get_closest_unit",
		"description": "get_closest_unit()\n- battle -\n\nReturns the closest unit in the supplied container to a supplied position, as well as its distance to that position.\n",
		"body": [
			"get_closest_unit(${1:object unit collection}, ${2:vector position}, ${3:[opt=false] boolean non-routing only}, ${4:[opt=nil] function additional test})"
		],
	},
	"docgen:global:global:get_closest_unit": {
		"scope": "lua",
		"prefix": "global:get_closest_unit",
		"description": "get_closest_unit()\n- battle -\n\nReturns the closest unit in the supplied container to a supplied position, as well as its distance to that position.\n",
		"body": [
			"global:get_closest_unit(${1:object unit collection}, ${2:vector position}, ${3:[opt=false] boolean non-routing only}, ${4:[opt=nil] function additional test})"
		],
	},
	"docgen:global:get_closest_standing_unit": {
		"scope": "lua",
		"prefix": "get_closest_standing_unit",
		"description": "get_closest_standing_unit()\n- battle -\n\nAlias of <code>get_closest_unit(obj, pos, <strong>true</strong>, test)</code>.\n",
		"body": [
			"get_closest_standing_unit(${1:object unit collection}, ${2:vector position}, ${3:[opt=nil] function additional test})"
		],
	},
	"docgen:global:global:get_closest_standing_unit": {
		"scope": "lua",
		"prefix": "global:get_closest_standing_unit",
		"description": "get_closest_standing_unit()\n- battle -\n\nAlias of <code>get_closest_unit(obj, pos, <strong>true</strong>, test)</code>.\n",
		"body": [
			"global:get_closest_standing_unit(${1:object unit collection}, ${2:vector position}, ${3:[opt=nil] function additional test})"
		],
	},
	"docgen:global:get_average_altitude": {
		"scope": "lua",
		"prefix": "get_average_altitude",
		"description": "get_average_altitude()\n- battle -\n\nReturns the average altitude in m and the total number of units in the supplied collection.\n",
		"body": [
			"get_average_altitude(${1:object unit collection})"
		],
	},
	"docgen:global:global:get_average_altitude": {
		"scope": "lua",
		"prefix": "global:get_average_altitude",
		"description": "get_average_altitude()\n- battle -\n\nReturns the average altitude in m and the total number of units in the supplied collection.\n",
		"body": [
			"global:get_average_altitude(${1:object unit collection})"
		],
	},
	"docgen:global:num_units_in_collection": {
		"scope": "lua",
		"prefix": "num_units_in_collection",
		"description": "num_units_in_collection()\n- battle -\n\nReturns the number of units in the supplied collection.\n",
		"body": [
			"num_units_in_collection(${1:object collection to test})"
		],
	},
	"docgen:global:global:num_units_in_collection": {
		"scope": "lua",
		"prefix": "global:num_units_in_collection",
		"description": "num_units_in_collection()\n- battle -\n\nReturns the number of units in the supplied collection.\n",
		"body": [
			"global:num_units_in_collection(${1:object collection to test})"
		],
	},
	"docgen:global:contains_unit": {
		"scope": "lua",
		"prefix": "contains_unit",
		"description": "contains_unit()\n- battle -\n\nReturns true is the supplied container contains the supplied unit, otherwise returns false.\n",
		"body": [
			"contains_unit(${1:object collection to test}, ${2:unit subject unit})"
		],
	},
	"docgen:global:global:contains_unit": {
		"scope": "lua",
		"prefix": "global:contains_unit",
		"description": "contains_unit()\n- battle -\n\nReturns true is the supplied container contains the supplied unit, otherwise returns false.\n",
		"body": [
			"global:contains_unit(${1:object collection to test}, ${2:unit subject unit})"
		],
	},
	"docgen:global:num_units_passing_test": {
		"scope": "lua",
		"prefix": "num_units_passing_test",
		"description": "num_units_passing_test()\n- battle -\n\nReturns the number of units in the supplied collection that pass a supplied test, as well as the total number of units.\n",
		"body": [
			"num_units_passing_test(${1:object collection to test}, ${2:function test function})"
		],
	},
	"docgen:global:global:num_units_passing_test": {
		"scope": "lua",
		"prefix": "global:num_units_passing_test",
		"description": "num_units_passing_test()\n- battle -\n\nReturns the number of units in the supplied collection that pass a supplied test, as well as the total number of units.\n",
		"body": [
			"global:num_units_passing_test(${1:object collection to test}, ${2:function test function})"
		],
	},
	"docgen:global:get_all_matching_units": {
		"scope": "lua",
		"prefix": "get_all_matching_units",
		"description": "get_all_matching_units()\n- battle -\n\nReturns a table containing all units in the supplied collection that pass a supplied test.\n",
		"body": [
			"get_all_matching_units(${1:object collection to test}, ${2:function test function})"
		],
	},
	"docgen:global:global:get_all_matching_units": {
		"scope": "lua",
		"prefix": "global:get_all_matching_units",
		"description": "get_all_matching_units()\n- battle -\n\nReturns a table containing all units in the supplied collection that pass a supplied test.\n",
		"body": [
			"global:get_all_matching_units(${1:object collection to test}, ${2:function test function})"
		],
	},
	"docgen:global:number_alive": {
		"scope": "lua",
		"prefix": "number_alive",
		"description": "number_alive()\n- battle -\n\nReturns the number of soldiers in a collection that are alive, as well as the initial number of soldiers that collection started with.\n",
		"body": [
			"number_alive(${1:object collection to test})"
		],
	},
	"docgen:global:global:number_alive": {
		"scope": "lua",
		"prefix": "global:number_alive",
		"description": "number_alive()\n- battle -\n\nReturns the number of soldiers in a collection that are alive, as well as the initial number of soldiers that collection started with.\n",
		"body": [
			"global:number_alive(${1:object collection to test})"
		],
	},
	"docgen:global:is_visible": {
		"scope": "lua",
		"prefix": "is_visible",
		"description": "is_visible()\n- battle -\n\nReturns true if any part of the supplied collection object is visible to the supplied alliance by the rules of the visibility system.\n",
		"body": [
			"is_visible(${1:object collection to test}, ${2:alliance alliance})"
		],
	},
	"docgen:global:global:is_visible": {
		"scope": "lua",
		"prefix": "global:is_visible",
		"description": "is_visible()\n- battle -\n\nReturns true if any part of the supplied collection object is visible to the supplied alliance by the rules of the visibility system.\n",
		"body": [
			"global:is_visible(${1:object collection to test}, ${2:alliance alliance})"
		],
	},
	"docgen:global:has_deployed": {
		"scope": "lua",
		"prefix": "has_deployed",
		"description": "has_deployed()\n- battle -\n\nReturns true if all units in the supplied collection object are valid targets and are not routing or dead, and are therefore considered to be deployed.\n",
		"body": [
			"has_deployed(${1:object collection to test})"
		],
	},
	"docgen:global:global:has_deployed": {
		"scope": "lua",
		"prefix": "global:has_deployed",
		"description": "has_deployed()\n- battle -\n\nReturns true if all units in the supplied collection object are valid targets and are not routing or dead, and are therefore considered to be deployed.\n",
		"body": [
			"global:has_deployed(${1:object collection to test})"
		],
	},
	"docgen:global:scriptunits_from_army": {
		"scope": "lua",
		"prefix": "scriptunits_from_army",
		"description": "scriptunits_from_army()\n- battle -\n\nMethod of automatically deriving a script_units collection from an army.\n",
		"body": [
			"scriptunits_from_army(${1:string name}, ${2:army, Subject army.})"
		],
	},
	"docgen:global:global:scriptunits_from_army": {
		"scope": "lua",
		"prefix": "global:scriptunits_from_army",
		"description": "scriptunits_from_army()\n- battle -\n\nMethod of automatically deriving a script_units collection from an army.\n",
		"body": [
			"global:scriptunits_from_army(${1:string name}, ${2:army, Subject army.})"
		],
	},
	"docgen:global:r_to_d": {
		"scope": "lua",
		"prefix": "r_to_d",
		"description": "r_to_d()\n- battle|campaign|frontend -\n\nConverts a supplied angle in radians to degrees.\n",
		"body": [
			"r_to_d(${1:number angle})"
		],
	},
	"docgen:global:global:r_to_d": {
		"scope": "lua",
		"prefix": "global:r_to_d",
		"description": "r_to_d()\n- battle|campaign|frontend -\n\nConverts a supplied angle in radians to degrees.\n",
		"body": [
			"global:r_to_d(${1:number angle})"
		],
	},
	"docgen:global:d_to_r": {
		"scope": "lua",
		"prefix": "d_to_r",
		"description": "d_to_r()\n- battle|campaign|frontend -\n\nConverts a supplied angle in degrees to radians.\n",
		"body": [
			"d_to_r(${1:number angle})"
		],
	},
	"docgen:global:global:d_to_r": {
		"scope": "lua",
		"prefix": "global:d_to_r",
		"description": "d_to_r()\n- battle|campaign|frontend -\n\nConverts a supplied angle in degrees to radians.\n",
		"body": [
			"global:d_to_r(${1:number angle})"
		],
	},
	"docgen:global:get_file_and_folder_path_as_table": {
		"scope": "lua",
		"prefix": "get_file_and_folder_path_as_table",
		"description": "get_file_and_folder_path_as_table()\n- battle|campaign|frontend -\n\nReturns the file and path of the calling script as a table of strings.\n",
		"body": [
			"get_file_and_folder_path_as_table(${1:[opt=0] integer stack offset})"
		],
	},
	"docgen:global:global:get_file_and_folder_path_as_table": {
		"scope": "lua",
		"prefix": "global:get_file_and_folder_path_as_table",
		"description": "get_file_and_folder_path_as_table()\n- battle|campaign|frontend -\n\nReturns the file and path of the calling script as a table of strings.\n",
		"body": [
			"global:get_file_and_folder_path_as_table(${1:[opt=0] integer stack offset})"
		],
	},
	"docgen:global:get_folder_name_and_shortform": {
		"scope": "lua",
		"prefix": "get_folder_name_and_shortform",
		"description": "get_folder_name_and_shortform()\n- battle|campaign|frontend -\n\nReturns the folder name of the calling file and the shortform of its filename as separate return parameters.\n",
		"body": [
			"get_folder_name_and_shortform(${1:[opt=0] integer stack offset})"
		],
	},
	"docgen:global:global:get_folder_name_and_shortform": {
		"scope": "lua",
		"prefix": "global:get_folder_name_and_shortform",
		"description": "get_folder_name_and_shortform()\n- battle|campaign|frontend -\n\nReturns the folder name of the calling file and the shortform of its filename as separate return parameters.\n",
		"body": [
			"global:get_folder_name_and_shortform(${1:[opt=0] integer stack offset})"
		],
	},
	"docgen:global:get_full_file_path": {
		"scope": "lua",
		"prefix": "get_full_file_path",
		"description": "get_full_file_path()\n- battle|campaign|frontend -\n\nGets the full filepath and name of the calling file.\n",
		"body": [
			"get_full_file_path(${1:[opt=0] integer stack offset})"
		],
	},
	"docgen:global:global:get_full_file_path": {
		"scope": "lua",
		"prefix": "global:get_full_file_path",
		"description": "get_full_file_path()\n- battle|campaign|frontend -\n\nGets the full filepath and name of the calling file.\n",
		"body": [
			"global:get_full_file_path(${1:[opt=0] integer stack offset})"
		],
	},
	"docgen:global:get_file_name_and_path": {
		"scope": "lua",
		"prefix": "get_file_name_and_path",
		"description": "get_file_name_and_path()\n- battle|campaign|frontend -\n\nReturns the filename and the filepath of the calling file as separate return parameters.\n",
		"body": [
			"get_file_name_and_path(${1:[opt=0] integer stack offset})"
		],
	},
	"docgen:global:global:get_file_name_and_path": {
		"scope": "lua",
		"prefix": "global:get_file_name_and_path",
		"description": "get_file_name_and_path()\n- battle|campaign|frontend -\n\nReturns the filename and the filepath of the calling file as separate return parameters.\n",
		"body": [
			"global:get_file_name_and_path(${1:[opt=0] integer stack offset})"
		],
	},
	"docgen:global:is_nil": {
		"scope": "lua",
		"prefix": "is_nil",
		"description": "is_nil()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is nil, false otherwise.\n",
		"body": [
			"is_nil(${1:object object})"
		],
	},
	"docgen:global:global:is_nil": {
		"scope": "lua",
		"prefix": "global:is_nil",
		"description": "is_nil()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is nil, false otherwise.\n",
		"body": [
			"global:is_nil(${1:object object})"
		],
	},
	"docgen:global:is_number": {
		"scope": "lua",
		"prefix": "is_number",
		"description": "is_number()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is a number, false otherwise.\n",
		"body": [
			"is_number(${1:object object})"
		],
	},
	"docgen:global:global:is_number": {
		"scope": "lua",
		"prefix": "global:is_number",
		"description": "is_number()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is a number, false otherwise.\n",
		"body": [
			"global:is_number(${1:object object})"
		],
	},
	"docgen:global:is_function": {
		"scope": "lua",
		"prefix": "is_function",
		"description": "is_function()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is a function, false otherwise.\n",
		"body": [
			"is_function(${1:object object})"
		],
	},
	"docgen:global:global:is_function": {
		"scope": "lua",
		"prefix": "global:is_function",
		"description": "is_function()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is a function, false otherwise.\n",
		"body": [
			"global:is_function(${1:object object})"
		],
	},
	"docgen:global:is_string": {
		"scope": "lua",
		"prefix": "is_string",
		"description": "is_string()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is a string, false otherwise.\n",
		"body": [
			"is_string(${1:object object})"
		],
	},
	"docgen:global:global:is_string": {
		"scope": "lua",
		"prefix": "global:is_string",
		"description": "is_string()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is a string, false otherwise.\n",
		"body": [
			"global:is_string(${1:object object})"
		],
	},
	"docgen:global:is_boolean": {
		"scope": "lua",
		"prefix": "is_boolean",
		"description": "is_boolean()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is a boolean, false otherwise.\n",
		"body": [
			"is_boolean(${1:object object})"
		],
	},
	"docgen:global:global:is_boolean": {
		"scope": "lua",
		"prefix": "global:is_boolean",
		"description": "is_boolean()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is a boolean, false otherwise.\n",
		"body": [
			"global:is_boolean(${1:object object})"
		],
	},
	"docgen:global:is_table": {
		"scope": "lua",
		"prefix": "is_table",
		"description": "is_table()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is a table, false otherwise.\n",
		"body": [
			"is_table(${1:object object})"
		],
	},
	"docgen:global:global:is_table": {
		"scope": "lua",
		"prefix": "global:is_table",
		"description": "is_table()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is a table, false otherwise.\n",
		"body": [
			"global:is_table(${1:object object})"
		],
	},
	"docgen:global:is_eventcontext": {
		"scope": "lua",
		"prefix": "is_eventcontext",
		"description": "is_eventcontext()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is an event context, false otherwise.\n",
		"body": [
			"is_eventcontext(${1:object object})"
		],
	},
	"docgen:global:global:is_eventcontext": {
		"scope": "lua",
		"prefix": "global:is_eventcontext",
		"description": "is_eventcontext()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is an event context, false otherwise.\n",
		"body": [
			"global:is_eventcontext(${1:object object})"
		],
	},
	"docgen:global:is_battlesoundeffect": {
		"scope": "lua",
		"prefix": "is_battlesoundeffect",
		"description": "is_battlesoundeffect()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is a battle sound effect, false otherwise.\n",
		"body": [
			"is_battlesoundeffect(${1:object object})"
		],
	},
	"docgen:global:global:is_battlesoundeffect": {
		"scope": "lua",
		"prefix": "global:is_battlesoundeffect",
		"description": "is_battlesoundeffect()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is a battle sound effect, false otherwise.\n",
		"body": [
			"global:is_battlesoundeffect(${1:object object})"
		],
	},
	"docgen:global:is_battle": {
		"scope": "lua",
		"prefix": "is_battle",
		"description": "is_battle()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is an empire battle object, false otherwise.\n",
		"body": [
			"is_battle(${1:object object})"
		],
	},
	"docgen:global:global:is_battle": {
		"scope": "lua",
		"prefix": "global:is_battle",
		"description": "is_battle()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is an empire battle object, false otherwise.\n",
		"body": [
			"global:is_battle(${1:object object})"
		],
	},
	"docgen:global:is_alliances": {
		"scope": "lua",
		"prefix": "is_alliances",
		"description": "is_alliances()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is an alliances object, false otherwise.\n",
		"body": [
			"is_alliances(${1:object object})"
		],
	},
	"docgen:global:global:is_alliances": {
		"scope": "lua",
		"prefix": "global:is_alliances",
		"description": "is_alliances()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is an alliances object, false otherwise.\n",
		"body": [
			"global:is_alliances(${1:object object})"
		],
	},
	"docgen:global:is_alliance": {
		"scope": "lua",
		"prefix": "is_alliance",
		"description": "is_alliance()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is an alliance, false otherwise.\n",
		"body": [
			"is_alliance(${1:object object})"
		],
	},
	"docgen:global:global:is_alliance": {
		"scope": "lua",
		"prefix": "global:is_alliance",
		"description": "is_alliance()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is an alliance, false otherwise.\n",
		"body": [
			"global:is_alliance(${1:object object})"
		],
	},
	"docgen:global:is_armies": {
		"scope": "lua",
		"prefix": "is_armies",
		"description": "is_armies()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is an armies object, false otherwise.\n",
		"body": [
			"is_armies(${1:object object})"
		],
	},
	"docgen:global:global:is_armies": {
		"scope": "lua",
		"prefix": "global:is_armies",
		"description": "is_armies()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is an armies object, false otherwise.\n",
		"body": [
			"global:is_armies(${1:object object})"
		],
	},
	"docgen:global:is_army": {
		"scope": "lua",
		"prefix": "is_army",
		"description": "is_army()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is an army object, false otherwise.\n",
		"body": [
			"is_army(${1:object object})"
		],
	},
	"docgen:global:global:is_army": {
		"scope": "lua",
		"prefix": "global:is_army",
		"description": "is_army()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is an army object, false otherwise.\n",
		"body": [
			"global:is_army(${1:object object})"
		],
	},
	"docgen:global:is_units": {
		"scope": "lua",
		"prefix": "is_units",
		"description": "is_units()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is a units object, false otherwise.\n",
		"body": [
			"is_units(${1:object object})"
		],
	},
	"docgen:global:global:is_units": {
		"scope": "lua",
		"prefix": "global:is_units",
		"description": "is_units()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is a units object, false otherwise.\n",
		"body": [
			"global:is_units(${1:object object})"
		],
	},
	"docgen:global:is_unit": {
		"scope": "lua",
		"prefix": "is_unit",
		"description": "is_unit()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is a unit object, false otherwise.\n",
		"body": [
			"is_unit(${1:object object})"
		],
	},
	"docgen:global:global:is_unit": {
		"scope": "lua",
		"prefix": "global:is_unit",
		"description": "is_unit()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is a unit object, false otherwise.\n",
		"body": [
			"global:is_unit(${1:object object})"
		],
	},
	"docgen:global:is_unitcontroller": {
		"scope": "lua",
		"prefix": "is_unitcontroller",
		"description": "is_unitcontroller()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is a unitcontroller, false otherwise.\n",
		"body": [
			"is_unitcontroller(${1:object object})"
		],
	},
	"docgen:global:global:is_unitcontroller": {
		"scope": "lua",
		"prefix": "global:is_unitcontroller",
		"description": "is_unitcontroller()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is a unitcontroller, false otherwise.\n",
		"body": [
			"global:is_unitcontroller(${1:object object})"
		],
	},
	"docgen:global:is_core": {
		"scope": "lua",
		"prefix": "is_core",
		"description": "is_core()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is a core object, false otherwise.\n",
		"body": [
			"is_core(${1:object object})"
		],
	},
	"docgen:global:global:is_core": {
		"scope": "lua",
		"prefix": "global:is_core",
		"description": "is_core()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is a core object, false otherwise.\n",
		"body": [
			"global:is_core(${1:object object})"
		],
	},
	"docgen:global:is_battlemanager": {
		"scope": "lua",
		"prefix": "is_battlemanager",
		"description": "is_battlemanager()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is a battle_manager, false otherwise.\n",
		"body": [
			"is_battlemanager(${1:object object})"
		],
	},
	"docgen:global:global:is_battlemanager": {
		"scope": "lua",
		"prefix": "global:is_battlemanager",
		"description": "is_battlemanager()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is a battle_manager, false otherwise.\n",
		"body": [
			"global:is_battlemanager(${1:object object})"
		],
	},
	"docgen:global:is_campaignmanager": {
		"scope": "lua",
		"prefix": "is_campaignmanager",
		"description": "is_campaignmanager()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is a campaign manager, false otherwise.\n",
		"body": [
			"is_campaignmanager(${1:object object})"
		],
	},
	"docgen:global:global:is_campaignmanager": {
		"scope": "lua",
		"prefix": "global:is_campaignmanager",
		"description": "is_campaignmanager()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is a campaign manager, false otherwise.\n",
		"body": [
			"global:is_campaignmanager(${1:object object})"
		],
	},
	"docgen:global:is_factionstart": {
		"scope": "lua",
		"prefix": "is_factionstart",
		"description": "is_factionstart()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is a faction start object, false otherwise.\n",
		"body": [
			"is_factionstart(${1:object object})"
		],
	},
	"docgen:global:global:is_factionstart": {
		"scope": "lua",
		"prefix": "global:is_factionstart",
		"description": "is_factionstart()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is a faction start object, false otherwise.\n",
		"body": [
			"global:is_factionstart(${1:object object})"
		],
	},
	"docgen:global:is_campaigncutscene": {
		"scope": "lua",
		"prefix": "is_campaigncutscene",
		"description": "is_campaigncutscene()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is a campaign cutscene, false otherwise.\n",
		"body": [
			"is_campaigncutscene(${1:object object})"
		],
	},
	"docgen:global:global:is_campaigncutscene": {
		"scope": "lua",
		"prefix": "global:is_campaigncutscene",
		"description": "is_campaigncutscene()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is a campaign cutscene, false otherwise.\n",
		"body": [
			"global:is_campaigncutscene(${1:object object})"
		],
	},
	"docgen:global:is_cutscene": {
		"scope": "lua",
		"prefix": "is_cutscene",
		"description": "is_cutscene()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is a battle cutscene, false otherwise.\n",
		"body": [
			"is_cutscene(${1:object object})"
		],
	},
	"docgen:global:global:is_cutscene": {
		"scope": "lua",
		"prefix": "global:is_cutscene",
		"description": "is_cutscene()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is a battle cutscene, false otherwise.\n",
		"body": [
			"global:is_cutscene(${1:object object})"
		],
	},
	"docgen:global:is_vector": {
		"scope": "lua",
		"prefix": "is_vector",
		"description": "is_vector()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is a vector object, false otherwise.\n",
		"body": [
			"is_vector(${1:object object})"
		],
	},
	"docgen:global:global:is_vector": {
		"scope": "lua",
		"prefix": "global:is_vector",
		"description": "is_vector()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is a vector object, false otherwise.\n",
		"body": [
			"global:is_vector(${1:object object})"
		],
	},
	"docgen:global:is_building": {
		"scope": "lua",
		"prefix": "is_building",
		"description": "is_building()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is a building object, false otherwise.\n",
		"body": [
			"is_building(${1:object object})"
		],
	},
	"docgen:global:global:is_building": {
		"scope": "lua",
		"prefix": "global:is_building",
		"description": "is_building()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is a building object, false otherwise.\n",
		"body": [
			"global:is_building(${1:object object})"
		],
	},
	"docgen:global:is_buildings": {
		"scope": "lua",
		"prefix": "is_buildings",
		"description": "is_buildings()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is a buildings object, false otherwise.\n",
		"body": [
			"is_buildings(${1:object object})"
		],
	},
	"docgen:global:global:is_buildings": {
		"scope": "lua",
		"prefix": "global:is_buildings",
		"description": "is_buildings()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is a buildings object, false otherwise.\n",
		"body": [
			"global:is_buildings(${1:object object})"
		],
	},
	"docgen:global:is_buildinglist": {
		"scope": "lua",
		"prefix": "is_buildinglist",
		"description": "is_buildinglist()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is a building list object, false otherwise.\n",
		"body": [
			"is_buildinglist(${1:object object})"
		],
	},
	"docgen:global:global:is_buildinglist": {
		"scope": "lua",
		"prefix": "global:is_buildinglist",
		"description": "is_buildinglist()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is a building list object, false otherwise.\n",
		"body": [
			"global:is_buildinglist(${1:object object})"
		],
	},
	"docgen:global:is_convexarea": {
		"scope": "lua",
		"prefix": "is_convexarea",
		"description": "is_convexarea()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is a convex_area, false otherwise.\n",
		"body": [
			"is_convexarea(${1:object object})"
		],
	},
	"docgen:global:global:is_convexarea": {
		"scope": "lua",
		"prefix": "global:is_convexarea",
		"description": "is_convexarea()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is a convex_area, false otherwise.\n",
		"body": [
			"global:is_convexarea(${1:object object})"
		],
	},
	"docgen:global:is_scriptunit": {
		"scope": "lua",
		"prefix": "is_scriptunit",
		"description": "is_scriptunit()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is a script_unit, false otherwise.\n",
		"body": [
			"is_scriptunit(${1:object object})"
		],
	},
	"docgen:global:global:is_scriptunit": {
		"scope": "lua",
		"prefix": "global:is_scriptunit",
		"description": "is_scriptunit()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is a script_unit, false otherwise.\n",
		"body": [
			"global:is_scriptunit(${1:object object})"
		],
	},
	"docgen:global:is_scriptunits": {
		"scope": "lua",
		"prefix": "is_scriptunits",
		"description": "is_scriptunits()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is a script_units object, false otherwise.\n",
		"body": [
			"is_scriptunits(${1:object object})"
		],
	},
	"docgen:global:global:is_scriptunits": {
		"scope": "lua",
		"prefix": "global:is_scriptunits",
		"description": "is_scriptunits()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is a script_units object, false otherwise.\n",
		"body": [
			"global:is_scriptunits(${1:object object})"
		],
	},
	"docgen:global:is_subtitles": {
		"scope": "lua",
		"prefix": "is_subtitles",
		"description": "is_subtitles()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is a battle subtitles object, false otherwise.\n",
		"body": [
			"is_subtitles(${1:object object})"
		],
	},
	"docgen:global:global:is_subtitles": {
		"scope": "lua",
		"prefix": "global:is_subtitles",
		"description": "is_subtitles()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is a battle subtitles object, false otherwise.\n",
		"body": [
			"global:is_subtitles(${1:object object})"
		],
	},
	"docgen:global:is_patrolmanager": {
		"scope": "lua",
		"prefix": "is_patrolmanager",
		"description": "is_patrolmanager()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is a patrol manager, false otherwise.\n",
		"body": [
			"is_patrolmanager(${1:object object})"
		],
	},
	"docgen:global:global:is_patrolmanager": {
		"scope": "lua",
		"prefix": "global:is_patrolmanager",
		"description": "is_patrolmanager()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is a patrol manager, false otherwise.\n",
		"body": [
			"global:is_patrolmanager(${1:object object})"
		],
	},
	"docgen:global:is_waypoint": {
		"scope": "lua",
		"prefix": "is_waypoint",
		"description": "is_waypoint()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is a patrol manager waypoint, false otherwise.\n",
		"body": [
			"is_waypoint(${1:object object})"
		],
	},
	"docgen:global:global:is_waypoint": {
		"scope": "lua",
		"prefix": "global:is_waypoint",
		"description": "is_waypoint()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is a patrol manager waypoint, false otherwise.\n",
		"body": [
			"global:is_waypoint(${1:object object})"
		],
	},
	"docgen:global:is_eventhandler": {
		"scope": "lua",
		"prefix": "is_eventhandler",
		"description": "is_eventhandler()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is an event handler, false otherwise.\n",
		"body": [
			"is_eventhandler(${1:object object})"
		],
	},
	"docgen:global:global:is_eventhandler": {
		"scope": "lua",
		"prefix": "global:is_eventhandler",
		"description": "is_eventhandler()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is an event handler, false otherwise.\n",
		"body": [
			"global:is_eventhandler(${1:object object})"
		],
	},
	"docgen:global:is_scriptaiplanner": {
		"scope": "lua",
		"prefix": "is_scriptaiplanner",
		"description": "is_scriptaiplanner()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is a script ai planner, false otherwise.\n",
		"body": [
			"is_scriptaiplanner(${1:object object})"
		],
	},
	"docgen:global:global:is_scriptaiplanner": {
		"scope": "lua",
		"prefix": "global:is_scriptaiplanner",
		"description": "is_scriptaiplanner()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is a script ai planner, false otherwise.\n",
		"body": [
			"global:is_scriptaiplanner(${1:object object})"
		],
	},
	"docgen:global:is_timermanager": {
		"scope": "lua",
		"prefix": "is_timermanager",
		"description": "is_timermanager()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is a timer manager, false otherwise.\n",
		"body": [
			"is_timermanager(${1:object object})"
		],
	},
	"docgen:global:global:is_timermanager": {
		"scope": "lua",
		"prefix": "global:is_timermanager",
		"description": "is_timermanager()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is a timer manager, false otherwise.\n",
		"body": [
			"global:is_timermanager(${1:object object})"
		],
	},
	"docgen:global:is_uioverride": {
		"scope": "lua",
		"prefix": "is_uioverride",
		"description": "is_uioverride()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is a ui override, false otherwise.\n",
		"body": [
			"is_uioverride(${1:object object})"
		],
	},
	"docgen:global:global:is_uioverride": {
		"scope": "lua",
		"prefix": "global:is_uioverride",
		"description": "is_uioverride()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is a ui override, false otherwise.\n",
		"body": [
			"global:is_uioverride(${1:object object})"
		],
	},
	"docgen:global:is_uicomponent": {
		"scope": "lua",
		"prefix": "is_uicomponent",
		"description": "is_uicomponent()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is a uicomponent, false otherwise.\n",
		"body": [
			"is_uicomponent(${1:object object})"
		],
	},
	"docgen:global:global:is_uicomponent": {
		"scope": "lua",
		"prefix": "global:is_uicomponent",
		"description": "is_uicomponent()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is a uicomponent, false otherwise.\n",
		"body": [
			"global:is_uicomponent(${1:object object})"
		],
	},
	"docgen:global:is_component": {
		"scope": "lua",
		"prefix": "is_component",
		"description": "is_component()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is a component, false otherwise.\n",
		"body": [
			"is_component(${1:object object})"
		],
	},
	"docgen:global:global:is_component": {
		"scope": "lua",
		"prefix": "global:is_component",
		"description": "is_component()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is a component, false otherwise.\n",
		"body": [
			"global:is_component(${1:object object})"
		],
	},
	"docgen:global:is_scriptmessager": {
		"scope": "lua",
		"prefix": "is_scriptmessager",
		"description": "is_scriptmessager()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is a script messager, false otherwise.\n",
		"body": [
			"is_scriptmessager(${1:object object})"
		],
	},
	"docgen:global:global:is_scriptmessager": {
		"scope": "lua",
		"prefix": "global:is_scriptmessager",
		"description": "is_scriptmessager()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is a script messager, false otherwise.\n",
		"body": [
			"global:is_scriptmessager(${1:object object})"
		],
	},
	"docgen:global:is_generatedbattle": {
		"scope": "lua",
		"prefix": "is_generatedbattle",
		"description": "is_generatedbattle()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is a generated battle, false otherwise.\n",
		"body": [
			"is_generatedbattle(${1:object object})"
		],
	},
	"docgen:global:global:is_generatedbattle": {
		"scope": "lua",
		"prefix": "global:is_generatedbattle",
		"description": "is_generatedbattle()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is a generated battle, false otherwise.\n",
		"body": [
			"global:is_generatedbattle(${1:object object})"
		],
	},
	"docgen:global:is_generatedarmy": {
		"scope": "lua",
		"prefix": "is_generatedarmy",
		"description": "is_generatedarmy()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is a generated army, false otherwise.\n",
		"body": [
			"is_generatedarmy(${1:object object})"
		],
	},
	"docgen:global:global:is_generatedarmy": {
		"scope": "lua",
		"prefix": "global:is_generatedarmy",
		"description": "is_generatedarmy()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is a generated army, false otherwise.\n",
		"body": [
			"global:is_generatedarmy(${1:object object})"
		],
	},
	"docgen:global:is_generatedcutscene": {
		"scope": "lua",
		"prefix": "is_generatedcutscene",
		"description": "is_generatedcutscene()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is a generated cutscene, false otherwise.\n",
		"body": [
			"is_generatedcutscene(${1:object object})"
		],
	},
	"docgen:global:global:is_generatedcutscene": {
		"scope": "lua",
		"prefix": "global:is_generatedcutscene",
		"description": "is_generatedcutscene()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is a generated cutscene, false otherwise.\n",
		"body": [
			"global:is_generatedcutscene(${1:object object})"
		],
	},
	"docgen:global:is_null": {
		"scope": "lua",
		"prefix": "is_null",
		"description": "is_null()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is a campaign null script interface, false otherwise.\n",
		"body": [
			"is_null(${1:object object})"
		],
	},
	"docgen:global:global:is_null": {
		"scope": "lua",
		"prefix": "global:is_null",
		"description": "is_null()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is a campaign null script interface, false otherwise.\n",
		"body": [
			"global:is_null(${1:object object})"
		],
	},
	"docgen:global:is_model": {
		"scope": "lua",
		"prefix": "is_model",
		"description": "is_model()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is a campaign model interface, false otherwise.\n",
		"body": [
			"is_model(${1:object object})"
		],
	},
	"docgen:global:global:is_model": {
		"scope": "lua",
		"prefix": "global:is_model",
		"description": "is_model()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is a campaign model interface, false otherwise.\n",
		"body": [
			"global:is_model(${1:object object})"
		],
	},
	"docgen:global:is_world": {
		"scope": "lua",
		"prefix": "is_world",
		"description": "is_world()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is a campaign world interface, false otherwise.\n",
		"body": [
			"is_world(${1:object object})"
		],
	},
	"docgen:global:global:is_world": {
		"scope": "lua",
		"prefix": "global:is_world",
		"description": "is_world()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is a campaign world interface, false otherwise.\n",
		"body": [
			"global:is_world(${1:object object})"
		],
	},
	"docgen:global:is_faction": {
		"scope": "lua",
		"prefix": "is_faction",
		"description": "is_faction()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is a campaign faction interface, false otherwise.\n",
		"body": [
			"is_faction(${1:object object})"
		],
	},
	"docgen:global:global:is_faction": {
		"scope": "lua",
		"prefix": "global:is_faction",
		"description": "is_faction()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is a campaign faction interface, false otherwise.\n",
		"body": [
			"global:is_faction(${1:object object})"
		],
	},
	"docgen:global:is_factionlist": {
		"scope": "lua",
		"prefix": "is_factionlist",
		"description": "is_factionlist()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is a campaign faction list interface, false otherwise.\n",
		"body": [
			"is_factionlist(${1:object object})"
		],
	},
	"docgen:global:global:is_factionlist": {
		"scope": "lua",
		"prefix": "global:is_factionlist",
		"description": "is_factionlist()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is a campaign faction list interface, false otherwise.\n",
		"body": [
			"global:is_factionlist(${1:object object})"
		],
	},
	"docgen:global:is_character": {
		"scope": "lua",
		"prefix": "is_character",
		"description": "is_character()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is a campaign character interface, false otherwise.\n",
		"body": [
			"is_character(${1:object object})"
		],
	},
	"docgen:global:global:is_character": {
		"scope": "lua",
		"prefix": "global:is_character",
		"description": "is_character()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is a campaign character interface, false otherwise.\n",
		"body": [
			"global:is_character(${1:object object})"
		],
	},
	"docgen:global:is_characterlist": {
		"scope": "lua",
		"prefix": "is_characterlist",
		"description": "is_characterlist()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is a campaign character list interface, false otherwise.\n",
		"body": [
			"is_characterlist(${1:object object})"
		],
	},
	"docgen:global:global:is_characterlist": {
		"scope": "lua",
		"prefix": "global:is_characterlist",
		"description": "is_characterlist()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is a campaign character list interface, false otherwise.\n",
		"body": [
			"global:is_characterlist(${1:object object})"
		],
	},
	"docgen:global:is_regionmanager": {
		"scope": "lua",
		"prefix": "is_regionmanager",
		"description": "is_regionmanager()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is a campaign region manager interface, false otherwise.\n",
		"body": [
			"is_regionmanager(${1:object object})"
		],
	},
	"docgen:global:global:is_regionmanager": {
		"scope": "lua",
		"prefix": "global:is_regionmanager",
		"description": "is_regionmanager()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is a campaign region manager interface, false otherwise.\n",
		"body": [
			"global:is_regionmanager(${1:object object})"
		],
	},
	"docgen:global:is_region": {
		"scope": "lua",
		"prefix": "is_region",
		"description": "is_region()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is a campaign region interface, false otherwise.\n",
		"body": [
			"is_region(${1:object object})"
		],
	},
	"docgen:global:global:is_region": {
		"scope": "lua",
		"prefix": "global:is_region",
		"description": "is_region()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is a campaign region interface, false otherwise.\n",
		"body": [
			"global:is_region(${1:object object})"
		],
	},
	"docgen:global:is_regionlist": {
		"scope": "lua",
		"prefix": "is_regionlist",
		"description": "is_regionlist()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is a campaign region list interface, false otherwise.\n",
		"body": [
			"is_regionlist(${1:object object})"
		],
	},
	"docgen:global:global:is_regionlist": {
		"scope": "lua",
		"prefix": "global:is_regionlist",
		"description": "is_regionlist()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is a campaign region list interface, false otherwise.\n",
		"body": [
			"global:is_regionlist(${1:object object})"
		],
	},
	"docgen:global:is_garrisonresidence": {
		"scope": "lua",
		"prefix": "is_garrisonresidence",
		"description": "is_garrisonresidence()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is a campaign garrison residence interface, false otherwise.\n",
		"body": [
			"is_garrisonresidence(${1:object object})"
		],
	},
	"docgen:global:global:is_garrisonresidence": {
		"scope": "lua",
		"prefix": "global:is_garrisonresidence",
		"description": "is_garrisonresidence()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is a campaign garrison residence interface, false otherwise.\n",
		"body": [
			"global:is_garrisonresidence(${1:object object})"
		],
	},
	"docgen:global:is_settlement": {
		"scope": "lua",
		"prefix": "is_settlement",
		"description": "is_settlement()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is a campaign settlement interface, false otherwise.\n",
		"body": [
			"is_settlement(${1:object object})"
		],
	},
	"docgen:global:global:is_settlement": {
		"scope": "lua",
		"prefix": "global:is_settlement",
		"description": "is_settlement()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is a campaign settlement interface, false otherwise.\n",
		"body": [
			"global:is_settlement(${1:object object})"
		],
	},
	"docgen:global:is_slot": {
		"scope": "lua",
		"prefix": "is_slot",
		"description": "is_slot()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is a campaign slot interface, false otherwise.\n",
		"body": [
			"is_slot(${1:object object})"
		],
	},
	"docgen:global:global:is_slot": {
		"scope": "lua",
		"prefix": "global:is_slot",
		"description": "is_slot()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is a campaign slot interface, false otherwise.\n",
		"body": [
			"global:is_slot(${1:object object})"
		],
	},
	"docgen:global:is_slotlist": {
		"scope": "lua",
		"prefix": "is_slotlist",
		"description": "is_slotlist()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is a campaign slot list interface, false otherwise.\n",
		"body": [
			"is_slotlist(${1:object object})"
		],
	},
	"docgen:global:global:is_slotlist": {
		"scope": "lua",
		"prefix": "global:is_slotlist",
		"description": "is_slotlist()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is a campaign slot list interface, false otherwise.\n",
		"body": [
			"global:is_slotlist(${1:object object})"
		],
	},
	"docgen:global:is_militaryforce": {
		"scope": "lua",
		"prefix": "is_militaryforce",
		"description": "is_militaryforce()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is a campaign military force interface, false otherwise.\n",
		"body": [
			"is_militaryforce(${1:object object})"
		],
	},
	"docgen:global:global:is_militaryforce": {
		"scope": "lua",
		"prefix": "global:is_militaryforce",
		"description": "is_militaryforce()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is a campaign military force interface, false otherwise.\n",
		"body": [
			"global:is_militaryforce(${1:object object})"
		],
	},
	"docgen:global:is_militaryforcelist": {
		"scope": "lua",
		"prefix": "is_militaryforcelist",
		"description": "is_militaryforcelist()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is a campaign military force list interface, false otherwise.\n",
		"body": [
			"is_militaryforcelist(${1:object object})"
		],
	},
	"docgen:global:global:is_militaryforcelist": {
		"scope": "lua",
		"prefix": "global:is_militaryforcelist",
		"description": "is_militaryforcelist()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is a campaign military force list interface, false otherwise.\n",
		"body": [
			"global:is_militaryforcelist(${1:object object})"
		],
	},
	"docgen:global:is_unitlist": {
		"scope": "lua",
		"prefix": "is_unitlist",
		"description": "is_unitlist()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is a campaign unit list interface, false otherwise.\n",
		"body": [
			"is_unitlist(${1:object object})"
		],
	},
	"docgen:global:global:is_unitlist": {
		"scope": "lua",
		"prefix": "global:is_unitlist",
		"description": "is_unitlist()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is a campaign unit list interface, false otherwise.\n",
		"body": [
			"global:is_unitlist(${1:object object})"
		],
	},
	"docgen:global:is_pendingbattle": {
		"scope": "lua",
		"prefix": "is_pendingbattle",
		"description": "is_pendingbattle()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is a campaign pending battle interface, false otherwise.\n",
		"body": [
			"is_pendingbattle(${1:object object})"
		],
	},
	"docgen:global:global:is_pendingbattle": {
		"scope": "lua",
		"prefix": "global:is_pendingbattle",
		"description": "is_pendingbattle()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is a campaign pending battle interface, false otherwise.\n",
		"body": [
			"global:is_pendingbattle(${1:object object})"
		],
	},
	"docgen:global:is_campaignmission": {
		"scope": "lua",
		"prefix": "is_campaignmission",
		"description": "is_campaignmission()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is a campaign mission interface, false otherwise.\n",
		"body": [
			"is_campaignmission(${1:object object})"
		],
	},
	"docgen:global:global:is_campaignmission": {
		"scope": "lua",
		"prefix": "global:is_campaignmission",
		"description": "is_campaignmission()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is a campaign mission interface, false otherwise.\n",
		"body": [
			"global:is_campaignmission(${1:object object})"
		],
	},
	"docgen:global:is_campaignai": {
		"scope": "lua",
		"prefix": "is_campaignai",
		"description": "is_campaignai()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is a campaign ai interface, false otherwise.\n",
		"body": [
			"is_campaignai(${1:object object})"
		],
	},
	"docgen:global:global:is_campaignai": {
		"scope": "lua",
		"prefix": "global:is_campaignai",
		"description": "is_campaignai()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is a campaign ai interface, false otherwise.\n",
		"body": [
			"global:is_campaignai(${1:object object})"
		],
	},
	"docgen:global:is_campaignuimanager": {
		"scope": "lua",
		"prefix": "is_campaignuimanager",
		"description": "is_campaignuimanager()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is a campaign ui manager, false otherwise.\n",
		"body": [
			"is_campaignuimanager(${1:object object})"
		],
	},
	"docgen:global:global:is_campaignuimanager": {
		"scope": "lua",
		"prefix": "global:is_campaignuimanager",
		"description": "is_campaignuimanager()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is a campaign ui manager, false otherwise.\n",
		"body": [
			"global:is_campaignuimanager(${1:object object})"
		],
	},
	"docgen:global:is_objectivesmanager": {
		"scope": "lua",
		"prefix": "is_objectivesmanager",
		"description": "is_objectivesmanager()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is an objectives_manager, false otherwise.\n",
		"body": [
			"is_objectivesmanager(${1:object object})"
		],
	},
	"docgen:global:global:is_objectivesmanager": {
		"scope": "lua",
		"prefix": "global:is_objectivesmanager",
		"description": "is_objectivesmanager()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is an objectives_manager, false otherwise.\n",
		"body": [
			"global:is_objectivesmanager(${1:object object})"
		],
	},
	"docgen:global:is_infotextmanager": {
		"scope": "lua",
		"prefix": "is_infotextmanager",
		"description": "is_infotextmanager()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is an infotext_manager, false otherwise.\n",
		"body": [
			"is_infotextmanager(${1:object object})"
		],
	},
	"docgen:global:global:is_infotextmanager": {
		"scope": "lua",
		"prefix": "global:is_infotextmanager",
		"description": "is_infotextmanager()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is an infotext_manager, false otherwise.\n",
		"body": [
			"global:is_infotextmanager(${1:object object})"
		],
	},
	"docgen:global:is_missionmanager": {
		"scope": "lua",
		"prefix": "is_missionmanager",
		"description": "is_missionmanager()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is a mission manager, false otherwise.\n",
		"body": [
			"is_missionmanager(${1:object object})"
		],
	},
	"docgen:global:global:is_missionmanager": {
		"scope": "lua",
		"prefix": "global:is_missionmanager",
		"description": "is_missionmanager()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is a mission manager, false otherwise.\n",
		"body": [
			"global:is_missionmanager(${1:object object})"
		],
	},
	"docgen:global:is_intervention": {
		"scope": "lua",
		"prefix": "is_intervention",
		"description": "is_intervention()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is an intervention, false otherwise.\n",
		"body": [
			"is_intervention(${1:object object})"
		],
	},
	"docgen:global:global:is_intervention": {
		"scope": "lua",
		"prefix": "global:is_intervention",
		"description": "is_intervention()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is an intervention, false otherwise.\n",
		"body": [
			"global:is_intervention(${1:object object})"
		],
	},
	"docgen:global:is_interventionmanager": {
		"scope": "lua",
		"prefix": "is_interventionmanager",
		"description": "is_interventionmanager()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is an intervention manager, false otherwise.\n",
		"body": [
			"is_interventionmanager(${1:object object})"
		],
	},
	"docgen:global:global:is_interventionmanager": {
		"scope": "lua",
		"prefix": "global:is_interventionmanager",
		"description": "is_interventionmanager()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is an intervention manager, false otherwise.\n",
		"body": [
			"global:is_interventionmanager(${1:object object})"
		],
	},
	"docgen:global:is_linkparser": {
		"scope": "lua",
		"prefix": "is_linkparser",
		"description": "is_linkparser()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is a link parser, false otherwise.\n",
		"body": [
			"is_linkparser(${1:object object})"
		],
	},
	"docgen:global:global:is_linkparser": {
		"scope": "lua",
		"prefix": "global:is_linkparser",
		"description": "is_linkparser()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is a link parser, false otherwise.\n",
		"body": [
			"global:is_linkparser(${1:object object})"
		],
	},
	"docgen:global:is_advicemanager": {
		"scope": "lua",
		"prefix": "is_advicemanager",
		"description": "is_advicemanager()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is an advice manager, false otherwise.\n",
		"body": [
			"is_advicemanager(${1:object object})"
		],
	},
	"docgen:global:global:is_advicemanager": {
		"scope": "lua",
		"prefix": "global:is_advicemanager",
		"description": "is_advicemanager()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is an advice manager, false otherwise.\n",
		"body": [
			"global:is_advicemanager(${1:object object})"
		],
	},
	"docgen:global:is_advicemonitor": {
		"scope": "lua",
		"prefix": "is_advicemonitor",
		"description": "is_advicemonitor()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is an advice monitor, false otherwise.\n",
		"body": [
			"is_advicemonitor(${1:object object})"
		],
	},
	"docgen:global:global:is_advicemonitor": {
		"scope": "lua",
		"prefix": "global:is_advicemonitor",
		"description": "is_advicemonitor()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is an advice monitor, false otherwise.\n",
		"body": [
			"global:is_advicemonitor(${1:object object})"
		],
	},
	"docgen:global:table_contains": {
		"scope": "lua",
		"prefix": "table_contains",
		"description": "table_contains()\n- battle|campaign|frontend -\n\nReturns true if the supplied indexed table contains the supplied object.\n",
		"body": [
			"table_contains(${1:table subject table}, ${2:object object})"
		],
	},
	"docgen:global:global:table_contains": {
		"scope": "lua",
		"prefix": "global:table_contains",
		"description": "table_contains()\n- battle|campaign|frontend -\n\nReturns true if the supplied indexed table contains the supplied object.\n",
		"body": [
			"global:table_contains(${1:table subject table}, ${2:object object})"
		],
	},
	"docgen:global:find_child_uicomponent": {
		"scope": "lua",
		"prefix": "find_child_uicomponent",
		"description": "find_child_uicomponent()\n- battle|campaign|frontend -\n\nTakes a uicomponent and a string name.\n",
		"body": [
			"find_child_uicomponent(${1:uicomponent parent ui component}, ${2:string name})"
		],
	},
	"docgen:global:global:find_child_uicomponent": {
		"scope": "lua",
		"prefix": "global:find_child_uicomponent",
		"description": "find_child_uicomponent()\n- battle|campaign|frontend -\n\nTakes a uicomponent and a string name.\n",
		"body": [
			"global:find_child_uicomponent(${1:uicomponent parent ui component}, ${2:string name})"
		],
	},
	"docgen:global:find_uicomponent": {
		"scope": "lua",
		"prefix": "find_uicomponent",
		"description": "find_uicomponent()\n- battle|campaign|frontend -\n\nTakes a start uicomponent and one or more string uicomponent names.\n",
		"body": [
			"find_uicomponent(${1:uicomponent parent ui component}, ${2:... list of string names})"
		],
	},
	"docgen:global:global:find_uicomponent": {
		"scope": "lua",
		"prefix": "global:find_uicomponent",
		"description": "find_uicomponent()\n- battle|campaign|frontend -\n\nTakes a start uicomponent and one or more string uicomponent names.\n",
		"body": [
			"global:find_uicomponent(${1:uicomponent parent ui component}, ${2:... list of string names})"
		],
	},
	"docgen:global:find_uicomponent_from_table": {
		"scope": "lua",
		"prefix": "find_uicomponent_from_table",
		"description": "find_uicomponent_from_table()\n- battle|campaign|frontend -\n\nTakes a start uicomponent and a numerically-indexed table of string uicomponent names.\n",
		"body": [
			"find_uicomponent_from_table(${1:uicomponent parent ui component}, ${2:table table of string names}, ${3:[opt=false] assert on failure})"
		],
	},
	"docgen:global:global:find_uicomponent_from_table": {
		"scope": "lua",
		"prefix": "global:find_uicomponent_from_table",
		"description": "find_uicomponent_from_table()\n- battle|campaign|frontend -\n\nTakes a start uicomponent and a numerically-indexed table of string uicomponent names.\n",
		"body": [
			"global:find_uicomponent_from_table(${1:uicomponent parent ui component}, ${2:table table of string names}, ${3:[opt=false] assert on failure})"
		],
	},
	"docgen:global:uicomponent_descended_from": {
		"scope": "lua",
		"prefix": "uicomponent_descended_from",
		"description": "uicomponent_descended_from()\n- battle|campaign|frontend -\n\nTakes a uicomponent and a string name.\n",
		"body": [
			"uicomponent_descended_from(${1:uicomponent subject uic}, ${2:string parent name})"
		],
	},
	"docgen:global:global:uicomponent_descended_from": {
		"scope": "lua",
		"prefix": "global:uicomponent_descended_from",
		"description": "uicomponent_descended_from()\n- battle|campaign|frontend -\n\nTakes a uicomponent and a string name.\n",
		"body": [
			"global:uicomponent_descended_from(${1:uicomponent subject uic}, ${2:string parent name})"
		],
	},
	"docgen:global:uicomponent_to_str": {
		"scope": "lua",
		"prefix": "uicomponent_to_str",
		"description": "uicomponent_to_str()\n- battle|campaign|frontend -\n\nConverts a uicomponent to a string showing its path, for output purposes.\n",
		"body": [
			"uicomponent_to_str(${1:uicomponent subject uic})"
		],
	},
	"docgen:global:global:uicomponent_to_str": {
		"scope": "lua",
		"prefix": "global:uicomponent_to_str",
		"description": "uicomponent_to_str()\n- battle|campaign|frontend -\n\nConverts a uicomponent to a string showing its path, for output purposes.\n",
		"body": [
			"global:uicomponent_to_str(${1:uicomponent subject uic})"
		],
	},
	"docgen:global:output_uicomponent": {
		"scope": "lua",
		"prefix": "output_uicomponent",
		"description": "output_uicomponent()\n- battle|campaign|frontend -\n\nOutputs extensive debug information about a supplied uicomponent to the <code>Lua - UI</code> console spool.\n",
		"body": [
			"output_uicomponent(${1:uicomponent subject uic}, ${2:[opt=false] boolean omit children})"
		],
	},
	"docgen:global:global:output_uicomponent": {
		"scope": "lua",
		"prefix": "global:output_uicomponent",
		"description": "output_uicomponent()\n- battle|campaign|frontend -\n\nOutputs extensive debug information about a supplied uicomponent to the <code>Lua - UI</code> console spool.\n",
		"body": [
			"global:output_uicomponent(${1:uicomponent subject uic}, ${2:[opt=false] boolean omit children})"
		],
	},
	"docgen:global:output_uicomponent_on_click": {
		"scope": "lua",
		"prefix": "output_uicomponent_on_click",
		"description": "output_uicomponent_on_click()\n- battle|campaign|frontend -\n\nStarts a listener which outputs debug information to the <code>Lua - UI</code> console spool about every uicomponent that's clicked on.\n",
		"body": [
			"output_uicomponent_on_click()"
		],
	},
	"docgen:global:global:output_uicomponent_on_click": {
		"scope": "lua",
		"prefix": "global:output_uicomponent_on_click",
		"description": "output_uicomponent_on_click()\n- battle|campaign|frontend -\n\nStarts a listener which outputs debug information to the <code>Lua - UI</code> console spool about every uicomponent that's clicked on.\n",
		"body": [
			"global:output_uicomponent_on_click()"
		],
	},
	"docgen:global:print_all_uicomponent_children": {
		"scope": "lua",
		"prefix": "print_all_uicomponent_children",
		"description": "print_all_uicomponent_children()\n- battle|campaign|frontend -\n\nPrints the name and path of the supplied uicomponent and all its descendents.\n",
		"body": [
			"print_all_uicomponent_children(${1:uicomponent subject uic})"
		],
	},
	"docgen:global:global:print_all_uicomponent_children": {
		"scope": "lua",
		"prefix": "global:print_all_uicomponent_children",
		"description": "print_all_uicomponent_children()\n- battle|campaign|frontend -\n\nPrints the name and path of the supplied uicomponent and all its descendents.\n",
		"body": [
			"global:print_all_uicomponent_children(${1:uicomponent subject uic})"
		],
	},
	"docgen:global:pulse_uicomponent": {
		"scope": "lua",
		"prefix": "pulse_uicomponent",
		"description": "pulse_uicomponent()\n- battle|campaign|frontend -\n\nActivates or deactivates a pulsing highlight effect on the supplied uicomponent.\n",
		"body": [
			"pulse_uicomponent(${1:uicomponent ui component}, ${2:boolean should pulse}, ${3:[opt=0] number brightness}, ${4:[opt=false] boolean progagate}, ${5:[opt=nil] string state name})"
		],
	},
	"docgen:global:global:pulse_uicomponent": {
		"scope": "lua",
		"prefix": "global:pulse_uicomponent",
		"description": "pulse_uicomponent()\n- battle|campaign|frontend -\n\nActivates or deactivates a pulsing highlight effect on the supplied uicomponent.\n",
		"body": [
			"global:pulse_uicomponent(${1:uicomponent ui component}, ${2:boolean should pulse}, ${3:[opt=0] number brightness}, ${4:[opt=false] boolean progagate}, ${5:[opt=nil] string state name})"
		],
	},
	"docgen:global:is_fully_onscreen": {
		"scope": "lua",
		"prefix": "is_fully_onscreen",
		"description": "is_fully_onscreen()\n- battle|campaign|frontend -\n\nReturns true if the uicomponent is fully on-screen, false otherwise.\n",
		"body": [
			"is_fully_onscreen(${1:uicomponent uicomponent})"
		],
	},
	"docgen:global:global:is_fully_onscreen": {
		"scope": "lua",
		"prefix": "global:is_fully_onscreen",
		"description": "is_fully_onscreen()\n- battle|campaign|frontend -\n\nReturns true if the uicomponent is fully on-screen, false otherwise.\n",
		"body": [
			"global:is_fully_onscreen(${1:uicomponent uicomponent})"
		],
	},
	"docgen:global:is_partially_onscreen": {
		"scope": "lua",
		"prefix": "is_partially_onscreen",
		"description": "is_partially_onscreen()\n- battle|campaign|frontend -\n\nReturns true if the uicomponent is partially on-screen, false otherwise.\n",
		"body": [
			"is_partially_onscreen(${1:uicomponent uicomponent})"
		],
	},
	"docgen:global:global:is_partially_onscreen": {
		"scope": "lua",
		"prefix": "global:is_partially_onscreen",
		"description": "is_partially_onscreen()\n- battle|campaign|frontend -\n\nReturns true if the uicomponent is partially on-screen, false otherwise.\n",
		"body": [
			"global:is_partially_onscreen(${1:uicomponent uicomponent})"
		],
	},
	"docgen:global:set_component_visible": {
		"scope": "lua",
		"prefix": "set_component_visible",
		"description": "set_component_visible()\n- battle|campaign|frontend -\n\nSets a uicomponent visible or invisible by its path.\n",
		"body": [
			"set_component_visible(${1:boolean set visible}, ${2:... list of string names})"
		],
	},
	"docgen:global:global:set_component_visible": {
		"scope": "lua",
		"prefix": "global:set_component_visible",
		"description": "set_component_visible()\n- battle|campaign|frontend -\n\nSets a uicomponent visible or invisible by its path.\n",
		"body": [
			"global:set_component_visible(${1:boolean set visible}, ${2:... list of string names})"
		],
	},
	"docgen:global:set_component_visible_with_parent": {
		"scope": "lua",
		"prefix": "set_component_visible_with_parent",
		"description": "set_component_visible_with_parent()\n- battle|campaign|frontend -\n\nSets a uicomponent visible or invisible by its path.\n",
		"body": [
			"set_component_visible_with_parent(${1:boolean set visible}, ${2:uicomponent parent uicomponent}, ${3:... list of string names})"
		],
	},
	"docgen:global:global:set_component_visible_with_parent": {
		"scope": "lua",
		"prefix": "global:set_component_visible_with_parent",
		"description": "set_component_visible_with_parent()\n- battle|campaign|frontend -\n\nSets a uicomponent visible or invisible by its path.\n",
		"body": [
			"global:set_component_visible_with_parent(${1:boolean set visible}, ${2:uicomponent parent uicomponent}, ${3:... list of string names})"
		],
	},
	"docgen:global:set_component_active": {
		"scope": "lua",
		"prefix": "set_component_active",
		"description": "set_component_active()\n- battle|campaign|frontend -\n\nSets a uicomponent to be active or inactive by its path.\n",
		"body": [
			"set_component_active(${1:boolean set active}, ${2:... list of string names})"
		],
	},
	"docgen:global:global:set_component_active": {
		"scope": "lua",
		"prefix": "global:set_component_active",
		"description": "set_component_active()\n- battle|campaign|frontend -\n\nSets a uicomponent to be active or inactive by its path.\n",
		"body": [
			"global:set_component_active(${1:boolean set active}, ${2:... list of string names})"
		],
	},
	"docgen:global:set_component_active_with_parent": {
		"scope": "lua",
		"prefix": "set_component_active_with_parent",
		"description": "set_component_active_with_parent()\n- battle|campaign|frontend -\n\nSets a uicomponent to be active or inactive by its path.\n",
		"body": [
			"set_component_active_with_parent(${1:boolean set active}, ${2:uicomponent parent uicomponent}, ${3:... list of string names})"
		],
	},
	"docgen:global:global:set_component_active_with_parent": {
		"scope": "lua",
		"prefix": "global:set_component_active_with_parent",
		"description": "set_component_active_with_parent()\n- battle|campaign|frontend -\n\nSets a uicomponent to be active or inactive by its path.\n",
		"body": [
			"global:set_component_active_with_parent(${1:boolean set active}, ${2:uicomponent parent uicomponent}, ${3:... list of string names})"
		],
	},
	"docgen:global:highlight_component": {
		"scope": "lua",
		"prefix": "highlight_component",
		"description": "highlight_component()\n- battle|campaign|frontend -\n\nHighlights or unhighlights a uicomponent by its path.\n",
		"body": [
			"highlight_component(${1:boolean activate highlight}, ${2:boolean is square}, ${3:... list of string names})"
		],
	},
	"docgen:global:global:highlight_component": {
		"scope": "lua",
		"prefix": "global:highlight_component",
		"description": "highlight_component()\n- battle|campaign|frontend -\n\nHighlights or unhighlights a uicomponent by its path.\n",
		"body": [
			"global:highlight_component(${1:boolean activate highlight}, ${2:boolean is square}, ${3:... list of string names})"
		],
	},
	"docgen:global:highlight_visible_component": {
		"scope": "lua",
		"prefix": "highlight_visible_component",
		"description": "highlight_visible_component()\n- battle|campaign|frontend -\n\nHighlights or unhighlights a uicomponent by its path, but only if it's visible.\n",
		"body": [
			"highlight_visible_component(${1:boolean activate highlight}, ${2:boolean is square}, ${3:... list of string names})"
		],
	},
	"docgen:global:global:highlight_visible_component": {
		"scope": "lua",
		"prefix": "global:highlight_visible_component",
		"description": "highlight_visible_component()\n- battle|campaign|frontend -\n\nHighlights or unhighlights a uicomponent by its path, but only if it's visible.\n",
		"body": [
			"global:highlight_visible_component(${1:boolean activate highlight}, ${2:boolean is square}, ${3:... list of string names})"
		],
	},
	"docgen:global:highlight_all_visible_children": {
		"scope": "lua",
		"prefix": "highlight_all_visible_children",
		"description": "highlight_all_visible_children()\n- battle|campaign|frontend -\n\nDraws a box highlight around all visible children of the supplied uicomponent.\n",
		"body": [
			"highlight_all_visible_children(${1:uicomponent parent}, ${2:[opt=0] number visual padding})"
		],
	},
	"docgen:global:global:highlight_all_visible_children": {
		"scope": "lua",
		"prefix": "global:highlight_all_visible_children",
		"description": "highlight_all_visible_children()\n- battle|campaign|frontend -\n\nDraws a box highlight around all visible children of the supplied uicomponent.\n",
		"body": [
			"global:highlight_all_visible_children(${1:uicomponent parent}, ${2:[opt=0] number visual padding})"
		],
	},
	"docgen:global:unhighlight_all_visible_children": {
		"scope": "lua",
		"prefix": "unhighlight_all_visible_children",
		"description": "unhighlight_all_visible_children()\n- battle|campaign|frontend -\n\nCancels any and all highlights created with global:highlight_all_visible_children.\n",
		"body": [
			"unhighlight_all_visible_children()"
		],
	},
	"docgen:global:global:unhighlight_all_visible_children": {
		"scope": "lua",
		"prefix": "global:unhighlight_all_visible_children",
		"description": "unhighlight_all_visible_children()\n- battle|campaign|frontend -\n\nCancels any and all highlights created with global:highlight_all_visible_children.\n",
		"body": [
			"global:unhighlight_all_visible_children()"
		],
	},
	"docgen:global:highlight_component_table": {
		"scope": "lua",
		"prefix": "highlight_component_table",
		"description": "highlight_component_table()\n- battle|campaign|frontend -\n\nDraws a box highlight stretching around the supplied list of components.\n",
		"body": [
			"highlight_component_table(${1:number visual padding}, ${2:... uicomponents})"
		],
	},
	"docgen:global:global:highlight_component_table": {
		"scope": "lua",
		"prefix": "global:highlight_component_table",
		"description": "highlight_component_table()\n- battle|campaign|frontend -\n\nDraws a box highlight stretching around the supplied list of components.\n",
		"body": [
			"global:highlight_component_table(${1:number visual padding}, ${2:... uicomponents})"
		],
	},
	"docgen:global:unhighlight_component_table": {
		"scope": "lua",
		"prefix": "unhighlight_component_table",
		"description": "unhighlight_component_table()\n- battle|campaign|frontend -\n\nCancels any and all highlights created with global:highlight_component_table.\n",
		"body": [
			"unhighlight_component_table()"
		],
	},
	"docgen:global:global:unhighlight_component_table": {
		"scope": "lua",
		"prefix": "global:unhighlight_component_table",
		"description": "unhighlight_component_table()\n- battle|campaign|frontend -\n\nCancels any and all highlights created with global:highlight_component_table.\n",
		"body": [
			"global:unhighlight_component_table()"
		],
	},
	"docgen:global:play_component_animation": {
		"scope": "lua",
		"prefix": "play_component_animation",
		"description": "play_component_animation()\n- battle|campaign|frontend -\n\nPlays a specified component animation on a uicomponent by its path.\n",
		"body": [
			"play_component_animation(${1:string animation name}, ${2:... list of string names})"
		],
	},
	"docgen:global:global:play_component_animation": {
		"scope": "lua",
		"prefix": "global:play_component_animation",
		"description": "play_component_animation()\n- battle|campaign|frontend -\n\nPlays a specified component animation on a uicomponent by its path.\n",
		"body": [
			"global:play_component_animation(${1:string animation name}, ${2:... list of string names})"
		],
	},
	"docgen:global:get_advisor_progress_button": {
		"scope": "lua",
		"prefix": "get_advisor_progress_button",
		"description": "get_advisor_progress_button()\n- battle|campaign|frontend -\n\nReturns the advisor progress/close button uicomponent.\n",
		"body": [
			"get_advisor_progress_button()"
		],
	},
	"docgen:global:global:get_advisor_progress_button": {
		"scope": "lua",
		"prefix": "global:get_advisor_progress_button",
		"description": "get_advisor_progress_button()\n- battle|campaign|frontend -\n\nReturns the advisor progress/close button uicomponent.\n",
		"body": [
			"global:get_advisor_progress_button()"
		],
	},
	"docgen:global:show_advisor_progress_button": {
		"scope": "lua",
		"prefix": "show_advisor_progress_button",
		"description": "show_advisor_progress_button()\n- battle|campaign|frontend -\n\nShows or hides the advisor progress/close button.\n",
		"body": [
			"show_advisor_progress_button(${1:[opt=true] boolean show button})"
		],
	},
	"docgen:global:global:show_advisor_progress_button": {
		"scope": "lua",
		"prefix": "global:show_advisor_progress_button",
		"description": "show_advisor_progress_button()\n- battle|campaign|frontend -\n\nShows or hides the advisor progress/close button.\n",
		"body": [
			"global:show_advisor_progress_button(${1:[opt=true] boolean show button})"
		],
	},
	"docgen:global:highlight_advisor_progress_button": {
		"scope": "lua",
		"prefix": "highlight_advisor_progress_button",
		"description": "highlight_advisor_progress_button()\n- battle|campaign|frontend -\n\nActivates or deactivates a highlight on the advisor progress/close button.\n",
		"body": [
			"highlight_advisor_progress_button(${1:[opt=true] boolean show button})"
		],
	},
	"docgen:global:global:highlight_advisor_progress_button": {
		"scope": "lua",
		"prefix": "global:highlight_advisor_progress_button",
		"description": "highlight_advisor_progress_button()\n- battle|campaign|frontend -\n\nActivates or deactivates a highlight on the advisor progress/close button.\n",
		"body": [
			"global:highlight_advisor_progress_button(${1:[opt=true] boolean show button})"
		],
	},
	"docgen:global:is_textpointer": {
		"scope": "lua",
		"prefix": "is_textpointer",
		"description": "is_textpointer()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is a text pointer, false otherwise.\n",
		"body": [
			"is_textpointer(${1:object object})"
		],
	},
	"docgen:global:global:is_textpointer": {
		"scope": "lua",
		"prefix": "global:is_textpointer",
		"description": "is_textpointer()\n- battle|campaign|frontend -\n\nReturns true if the supplied object is a text pointer, false otherwise.\n",
		"body": [
			"global:is_textpointer(${1:object object})"
		],
	},
	"docgen:global:v_to_s": {
		"scope": "lua",
		"prefix": "v_to_s",
		"description": "v_to_s()\n- battle|campaign -\n\nConverts a vector to a string, for debug output\n",
		"body": [
			"v_to_s(${1:vector subject vector})"
		],
	},
	"docgen:global:global:v_to_s": {
		"scope": "lua",
		"prefix": "global:v_to_s",
		"description": "v_to_s()\n- battle|campaign -\n\nConverts a vector to a string, for debug output\n",
		"body": [
			"global:v_to_s(${1:vector subject vector})"
		],
	},
	"docgen:global:v_offset": {
		"scope": "lua",
		"prefix": "v_offset",
		"description": "v_offset()\n- battle|campaign -\n\nTakes a source vector and some x/y/z offset values.\n",
		"body": [
			"v_offset(${1:vector source vector}, ${2:[opt=0] number x offset}, ${3:[opt=0] number y offset}, ${4:[opt=0] number z offset})"
		],
	},
	"docgen:global:global:v_offset": {
		"scope": "lua",
		"prefix": "global:v_offset",
		"description": "v_offset()\n- battle|campaign -\n\nTakes a source vector and some x/y/z offset values.\n",
		"body": [
			"global:v_offset(${1:vector source vector}, ${2:[opt=0] number x offset}, ${3:[opt=0] number y offset}, ${4:[opt=0] number z offset})"
		],
	},
	"docgen:global:v_add": {
		"scope": "lua",
		"prefix": "v_add",
		"description": "v_add()\n- battle|campaign -\n\nTakes two vectors, and returns a third which is the sum of both.\n",
		"body": [
			"v_add(${1:vector vector a}, ${2:vector vector b})"
		],
	},
	"docgen:global:global:v_add": {
		"scope": "lua",
		"prefix": "global:v_add",
		"description": "v_add()\n- battle|campaign -\n\nTakes two vectors, and returns a third which is the sum of both.\n",
		"body": [
			"global:v_add(${1:vector vector a}, ${2:vector vector b})"
		],
	},
	"docgen:global:v_subtract": {
		"scope": "lua",
		"prefix": "v_subtract",
		"description": "v_subtract()\n- battle|campaign -\n\nTakes two vectors, and returns a third which is the second subtracted from the first.\n",
		"body": [
			"v_subtract(${1:vector vector a}, ${2:vector vector b})"
		],
	},
	"docgen:global:global:v_subtract": {
		"scope": "lua",
		"prefix": "global:v_subtract",
		"description": "v_subtract()\n- battle|campaign -\n\nTakes two vectors, and returns a third which is the second subtracted from the first.\n",
		"body": [
			"global:v_subtract(${1:vector vector a}, ${2:vector vector b})"
		],
	},
	"docgen:global:centre_point_table": {
		"scope": "lua",
		"prefix": "centre_point_table",
		"description": "centre_point_table()\n- battle|campaign -\n\nTakes a table of vectors, buildings, units or scriptunits, and returns a vector which is the mean centre of the positions described by those objects.\n",
		"body": [
			"centre_point_table(${1:table position collection})"
		],
	},
	"docgen:global:global:centre_point_table": {
		"scope": "lua",
		"prefix": "global:centre_point_table",
		"description": "centre_point_table()\n- battle|campaign -\n\nTakes a table of vectors, buildings, units or scriptunits, and returns a vector which is the mean centre of the positions described by those objects.\n",
		"body": [
			"global:centre_point_table(${1:table position collection})"
		],
	},
	"docgen:global:get_position_near_target": {
		"scope": "lua",
		"prefix": "get_position_near_target",
		"description": "get_position_near_target()\n- battle|campaign -\n\nReturns a vector at a random position near to a supplied vector.\n",
		"body": [
			"get_position_near_target(${1:vector source position}, ${2:[opt=20] number min distance}, ${3:[opt=50] number max distance}, ${4:[opt=0] number min bearing}, ${5:[opt=360] number max bearing})"
		],
	},
	"docgen:global:global:get_position_near_target": {
		"scope": "lua",
		"prefix": "global:get_position_near_target",
		"description": "get_position_near_target()\n- battle|campaign -\n\nReturns a vector at a random position near to a supplied vector.\n",
		"body": [
			"global:get_position_near_target(${1:vector source position}, ${2:[opt=20] number min distance}, ${3:[opt=50] number max distance}, ${4:[opt=0] number min bearing}, ${5:[opt=360] number max bearing})"
		],
	},
	"docgen:global:get_furthest": {
		"scope": "lua",
		"prefix": "get_furthest",
		"description": "get_furthest()\n- battle|campaign -\n\nTakes a subject vector and a table of vectors/units/sunits/buildings (or a scriptunits collection).\n",
		"body": [
			"get_furthest(${1:vector source position}, ${2:table position collection})"
		],
	},
	"docgen:global:global:get_furthest": {
		"scope": "lua",
		"prefix": "global:get_furthest",
		"description": "get_furthest()\n- battle|campaign -\n\nTakes a subject vector and a table of vectors/units/sunits/buildings (or a scriptunits collection).\n",
		"body": [
			"global:get_furthest(${1:vector source position}, ${2:table position collection})"
		],
	},
	"docgen:global:get_nearest": {
		"scope": "lua",
		"prefix": "get_nearest",
		"description": "get_nearest()\n- battle|campaign -\n\nTakes a subject vector and a table of vectors/units/sunits/buildings (or a scriptunits collection).\n",
		"body": [
			"get_nearest(${1:vector source position}, ${2:table position collection})"
		],
	},
	"docgen:global:global:get_nearest": {
		"scope": "lua",
		"prefix": "global:get_nearest",
		"description": "get_nearest()\n- battle|campaign -\n\nTakes a subject vector and a table of vectors/units/sunits/buildings (or a scriptunits collection).\n",
		"body": [
			"global:get_nearest(${1:vector source position}, ${2:table position collection})"
		],
	},
	"docgen:global:position_along_line": {
		"scope": "lua",
		"prefix": "position_along_line",
		"description": "position_along_line()\n- battle|campaign -\n\nTakes two vector positions as parameters and a distance in metres, and returns a position which is that distance from the first vector in the direction of the second vector.\n",
		"body": [
			"position_along_line(${1:vector first position}, ${2:vector second position}, ${3:number distance})"
		],
	},
	"docgen:global:global:position_along_line": {
		"scope": "lua",
		"prefix": "global:position_along_line",
		"description": "position_along_line()\n- battle|campaign -\n\nTakes two vector positions as parameters and a distance in metres, and returns a position which is that distance from the first vector in the direction of the second vector.\n",
		"body": [
			"global:position_along_line(${1:vector first position}, ${2:vector second position}, ${3:number distance})"
		],
	},
	"docgen:global:dot": {
		"scope": "lua",
		"prefix": "dot",
		"description": "dot()\n- battle|campaign -\n\nReturns the dot product of two supplied vectors.\n",
		"body": [
			"dot(${1:vector first position}, ${2:vector second position})"
		],
	},
	"docgen:global:global:dot": {
		"scope": "lua",
		"prefix": "global:dot",
		"description": "dot()\n- battle|campaign -\n\nReturns the dot product of two supplied vectors.\n",
		"body": [
			"global:dot(${1:vector first position}, ${2:vector second position})"
		],
	},
	"docgen:global:dot3d": {
		"scope": "lua",
		"prefix": "dot3d",
		"description": "dot3d()\n- battle|campaign -\n\nReturns the dot product of two supplied vectors in three dimensions.\n",
		"body": [
			"dot3d(${1:vector first position}, ${2:vector second position})"
		],
	},
	"docgen:global:global:dot3d": {
		"scope": "lua",
		"prefix": "global:dot3d",
		"description": "dot3d()\n- battle|campaign -\n\nReturns the dot product of two supplied vectors in three dimensions.\n",
		"body": [
			"global:dot3d(${1:vector first position}, ${2:vector second position})"
		],
	},
	"docgen:global:normal": {
		"scope": "lua",
		"prefix": "normal",
		"description": "normal()\n- battle|campaign -\n\nReturns the normal vector of two supplied vectors.\n",
		"body": [
			"normal(${1:vector first position}, ${2:vector second position})"
		],
	},
	"docgen:global:global:normal": {
		"scope": "lua",
		"prefix": "global:normal",
		"description": "normal()\n- battle|campaign -\n\nReturns the normal vector of two supplied vectors.\n",
		"body": [
			"global:normal(${1:vector first position}, ${2:vector second position})"
		],
	},
	"docgen:global:distance_to_line": {
		"scope": "lua",
		"prefix": "distance_to_line",
		"description": "distance_to_line()\n- battle|campaign -\n\nTakes two vector positions that describe a 2D line of infinite length, and a target vector position.\n",
		"body": [
			"distance_to_line(${1:vector line position a}, ${2:vector line position b}, ${3:vector target position})"
		],
	},
	"docgen:global:global:distance_to_line": {
		"scope": "lua",
		"prefix": "global:distance_to_line",
		"description": "distance_to_line()\n- battle|campaign -\n\nTakes two vector positions that describe a 2D line of infinite length, and a target vector position.\n",
		"body": [
			"global:distance_to_line(${1:vector line position a}, ${2:vector line position b}, ${3:vector target position})"
		],
	},
	"docgen:global:has_crossed_line": {
		"scope": "lua",
		"prefix": "has_crossed_line",
		"description": "has_crossed_line()\n- battle|campaign -\n\nTakes a vector, unit, scriptunit or collection of objects and returns true if any element within it has crossed a line demarked by two supplied vector positions.\n",
		"body": [
			"has_crossed_line(${1:object position collection}, ${2:vector line position a}, ${3:vector line position b}, ${4:boolean standing only})"
		],
	},
	"docgen:global:global:has_crossed_line": {
		"scope": "lua",
		"prefix": "global:has_crossed_line",
		"description": "has_crossed_line()\n- battle|campaign -\n\nTakes a vector, unit, scriptunit or collection of objects and returns true if any element within it has crossed a line demarked by two supplied vector positions.\n",
		"body": [
			"global:has_crossed_line(${1:object position collection}, ${2:vector line position a}, ${3:vector line position b}, ${4:boolean standing only})"
		],
	},
	"docgen:global:distance_along_line": {
		"scope": "lua",
		"prefix": "distance_along_line",
		"description": "distance_along_line()\n- battle|campaign -\n\nTakes two vectors that describe a 3D line of infinite length, and a numeric distance in metres.\n",
		"body": [
			"distance_along_line(${1:vector line position a}, ${2:vector line position b}, ${3:number distance})"
		],
	},
	"docgen:global:global:distance_along_line": {
		"scope": "lua",
		"prefix": "global:distance_along_line",
		"description": "distance_along_line()\n- battle|campaign -\n\nTakes two vectors that describe a 3D line of infinite length, and a numeric distance in metres.\n",
		"body": [
			"global:distance_along_line(${1:vector line position a}, ${2:vector line position b}, ${3:number distance})"
		],
	},
	"docgen:global:get_infotext_manager": {
		"scope": "lua",
		"prefix": "get_infotext_manager",
		"description": "get_infotext_manager()\n- battle|campaign -\n\nGets an infotext manager, or creates one if one doesn't already exist.\n",
		"body": [
			"get_infotext_manager()"
		],
	},
	"docgen:global:global:get_infotext_manager": {
		"scope": "lua",
		"prefix": "global:get_infotext_manager",
		"description": "get_infotext_manager()\n- battle|campaign -\n\nGets an infotext manager, or creates one if one doesn't already exist.\n",
		"body": [
			"global:get_infotext_manager()"
		],
	},
	"docgen:global:get_objectives_manager": {
		"scope": "lua",
		"prefix": "get_objectives_manager",
		"description": "get_objectives_manager()\n- battle|campaign -\n\nGets an objectives manager, or creates one if one doesn't already exist.\n",
		"body": [
			"get_objectives_manager()"
		],
	},
	"docgen:global:global:get_objectives_manager": {
		"scope": "lua",
		"prefix": "global:get_objectives_manager",
		"description": "get_objectives_manager()\n- battle|campaign -\n\nGets an objectives manager, or creates one if one doesn't already exist.\n",
		"body": [
			"global:get_objectives_manager()"
		],
	},
	"docgen:global:get_messager": {
		"scope": "lua",
		"prefix": "get_messager",
		"description": "get_messager()\n- battle|campaign|frontend -\n\nGets or creates a script_messager object.\n",
		"body": [
			"get_messager()"
		],
	},
	"docgen:global:global:get_messager": {
		"scope": "lua",
		"prefix": "global:get_messager",
		"description": "get_messager()\n- battle|campaign|frontend -\n\nGets or creates a script_messager object.\n",
		"body": [
			"global:get_messager()"
		],
	},
	"docgen:global:get_tm": {
		"scope": "lua",
		"prefix": "get_tm",
		"description": "get_tm()\n- battle|frontend -\n\nGets or creates a timer_manager.\n",
		"body": [
			"get_tm()"
		],
	},
	"docgen:global:global:get_tm": {
		"scope": "lua",
		"prefix": "global:get_tm",
		"description": "get_tm()\n- battle|frontend -\n\nGets or creates a timer_manager.\n",
		"body": [
			"global:get_tm()"
		],
	},
	"docgen:global:ModLog": {
		"scope": "lua",
		"prefix": "ModLog",
		"description": "ModLog()\n- battle|campaign|frontend -\n\nWrites output to the <code>lua_mod_log.\n",
		"body": [
			"ModLog(${1:string output text})"
		],
	},
	"docgen:global:global:ModLog": {
		"scope": "lua",
		"prefix": "global:ModLog",
		"description": "ModLog()\n- battle|campaign|frontend -\n\nWrites output to the <code>lua_mod_log.\n",
		"body": [
			"global:ModLog(${1:string output text})"
		],
	},
	"docgen:global:UIComponent": {
		"scope": "lua",
		"prefix": "UIComponent",
		"description": "UIComponent()\n- battle|campaign|frontend -\n\nCasts a component memory address, returned by several functions such as uicomponent:Find, into a valid uicomponent script object so that functions in the uicomponent script interface may be called on it.\n",
		"body": [
			"UIComponent(${1:address component address})"
		],
	},
	"docgen:global:global:UIComponent": {
		"scope": "lua",
		"prefix": "global:UIComponent",
		"description": "UIComponent()\n- battle|campaign|frontend -\n\nCasts a component memory address, returned by several functions such as uicomponent:Find, into a valid uicomponent script object so that functions in the uicomponent script interface may be called on it.\n",
		"body": [
			"global:UIComponent(${1:address component address})"
		],
	},
	"docgen:advice_manager:new": {
		"scope": "lua",
		"prefix": "new",
		"description": "advice_manager:new()\n-  -\n\nCreates and returns a new advice manager.\n",
		"body": [
			"new(${1:[opt=false] boolean debug mode})"
		],
	},
	"docgen:advice_manager:advice_manager:new": {
		"scope": "lua",
		"prefix": "advice_manager:new",
		"description": "advice_manager:new()\n-  -\n\nCreates and returns a new advice manager.\n",
		"body": [
			"advice_manager:new(${1:[opt=false] boolean debug mode})"
		],
	},
	"docgen:advice_manager:set_debug": {
		"scope": "lua",
		"prefix": "set_debug",
		"description": "advice_manager:set_debug()\n-  -\n\nSets debug mode on the advice manager for more output\n",
		"body": [
			"set_debug(${1:[opt=true] boolean debug mode})"
		],
	},
	"docgen:advice_manager:advice_manager:set_debug": {
		"scope": "lua",
		"prefix": "advice_manager:set_debug",
		"description": "advice_manager:set_debug()\n-  -\n\nSets debug mode on the advice manager for more output\n",
		"body": [
			"advice_manager:set_debug(${1:[opt=true] boolean debug mode})"
		],
	},
	"docgen:advice_manager:set_advice_enabled": {
		"scope": "lua",
		"prefix": "set_advice_enabled",
		"description": "advice_manager:set_advice_enabled()\n-  -\n\nAllows client scripts to enable or disable advice triggered by the advice manager system.\n",
		"body": [
			"set_advice_enabled(${1:[opt=true] boolean enable advice})"
		],
	},
	"docgen:advice_manager:advice_manager:set_advice_enabled": {
		"scope": "lua",
		"prefix": "advice_manager:set_advice_enabled",
		"description": "advice_manager:set_advice_enabled()\n-  -\n\nAllows client scripts to enable or disable advice triggered by the advice manager system.\n",
		"body": [
			"advice_manager:set_advice_enabled(${1:[opt=true] boolean enable advice})"
		],
	},
	"docgen:advice_monitor:new": {
		"scope": "lua",
		"prefix": "new",
		"description": "advice_monitor:new()\n-  -\n\nCreates and returns a new advice monitor.\n",
		"body": [
			"new(${1:string name}, ${2:number priority}, ${3:string advice key}, ${4:[opt=nil] table infotext})"
		],
	},
	"docgen:advice_monitor:advice_monitor:new": {
		"scope": "lua",
		"prefix": "advice_monitor:new",
		"description": "advice_monitor:new()\n-  -\n\nCreates and returns a new advice monitor.\n",
		"body": [
			"advice_monitor:new(${1:string name}, ${2:number priority}, ${3:string advice key}, ${4:[opt=nil] table infotext})"
		],
	},
	"docgen:advice_monitor:set_advice_level": {
		"scope": "lua",
		"prefix": "set_advice_level",
		"description": "advice_monitor:set_advice_level()\n-  -\n\nSets the minimum advice level at which the advice may be allowed to trigger.\n",
		"body": [
			"set_advice_level(${1:number advice level})"
		],
	},
	"docgen:advice_monitor:advice_monitor:set_advice_level": {
		"scope": "lua",
		"prefix": "advice_monitor:set_advice_level",
		"description": "advice_monitor:set_advice_level()\n-  -\n\nSets the minimum advice level at which the advice may be allowed to trigger.\n",
		"body": [
			"advice_monitor:set_advice_level(${1:number advice level})"
		],
	},
	"docgen:advice_monitor:set_can_interrupt_other_advice": {
		"scope": "lua",
		"prefix": "set_can_interrupt_other_advice",
		"description": "advice_monitor:set_can_interrupt_other_advice()\n-  -\n\nSets whether this advice can interrupt other advice.\n",
		"body": [
			"set_can_interrupt_other_advice(${1:[opt=true] boolean can interrupt})"
		],
	},
	"docgen:advice_monitor:advice_monitor:set_can_interrupt_other_advice": {
		"scope": "lua",
		"prefix": "advice_monitor:set_can_interrupt_other_advice",
		"description": "advice_monitor:set_can_interrupt_other_advice()\n-  -\n\nSets whether this advice can interrupt other advice.\n",
		"body": [
			"advice_monitor:set_can_interrupt_other_advice(${1:[opt=true] boolean can interrupt})"
		],
	},
	"docgen:advice_monitor:set_delay_before_triggering": {
		"scope": "lua",
		"prefix": "set_delay_before_triggering",
		"description": "advice_monitor:set_delay_before_triggering()\n-  -\n\nSets a delay period before the advice is actually triggered.\n",
		"body": [
			"set_delay_before_triggering(${1:number delay in ms})"
		],
	},
	"docgen:advice_monitor:advice_monitor:set_delay_before_triggering": {
		"scope": "lua",
		"prefix": "advice_monitor:set_delay_before_triggering",
		"description": "advice_monitor:set_delay_before_triggering()\n-  -\n\nSets a delay period before the advice is actually triggered.\n",
		"body": [
			"advice_monitor:set_delay_before_triggering(${1:number delay in ms})"
		],
	},
	"docgen:advice_monitor:set_trigger_callback": {
		"scope": "lua",
		"prefix": "set_trigger_callback",
		"description": "advice_monitor:set_trigger_callback()\n-  -\n\nSets a callback for the advice monitor to call at the point the advice is triggered (i.\n",
		"body": [
			"set_trigger_callback(${1:function callback}, ${2:[opt=false] boolean dont trigger advice})"
		],
	},
	"docgen:advice_monitor:advice_monitor:set_trigger_callback": {
		"scope": "lua",
		"prefix": "advice_monitor:set_trigger_callback",
		"description": "advice_monitor:set_trigger_callback()\n-  -\n\nSets a callback for the advice monitor to call at the point the advice is triggered (i.\n",
		"body": [
			"advice_monitor:set_trigger_callback(${1:function callback}, ${2:[opt=false] boolean dont trigger advice})"
		],
	},
	"docgen:advice_monitor:set_halt_callback": {
		"scope": "lua",
		"prefix": "set_halt_callback",
		"description": "advice_monitor:set_halt_callback()\n-  -\n\nSets a callback for the advice monitor to call at the point the advice is halted.\n",
		"body": [
			"set_halt_callback(${1:function callback})"
		],
	},
	"docgen:advice_monitor:advice_monitor:set_halt_callback": {
		"scope": "lua",
		"prefix": "advice_monitor:set_halt_callback",
		"description": "advice_monitor:set_halt_callback()\n-  -\n\nSets a callback for the advice monitor to call at the point the advice is halted.\n",
		"body": [
			"advice_monitor:set_halt_callback(${1:function callback})"
		],
	},
	"docgen:advice_monitor:set_halt_advice_on_battle_end": {
		"scope": "lua",
		"prefix": "set_halt_advice_on_battle_end",
		"description": "advice_monitor:set_halt_advice_on_battle_end()\n-  -\n\nSets the advice monitor to automatically halt or not when the battle ends.\n",
		"body": [
			"set_halt_advice_on_battle_end(${1:[opt=true] boolean halt on end})"
		],
	},
	"docgen:advice_monitor:advice_monitor:set_halt_advice_on_battle_end": {
		"scope": "lua",
		"prefix": "advice_monitor:set_halt_advice_on_battle_end",
		"description": "advice_monitor:set_halt_advice_on_battle_end()\n-  -\n\nSets the advice monitor to automatically halt or not when the battle ends.\n",
		"body": [
			"advice_monitor:set_halt_advice_on_battle_end(${1:[opt=true] boolean halt on end})"
		],
	},
	"docgen:advice_monitor:add_start_condition": {
		"scope": "lua",
		"prefix": "add_start_condition",
		"description": "advice_monitor:add_start_condition()\n-  -\n\nAdds a start condition for the advice monitor, which determines when the advice monitor will begin monitoring its trigger conditions.\n",
		"body": [
			"add_start_condition(${1:function condition}, ${2:[opt=nil] string event})"
		],
	},
	"docgen:advice_monitor:advice_monitor:add_start_condition": {
		"scope": "lua",
		"prefix": "advice_monitor:add_start_condition",
		"description": "advice_monitor:add_start_condition()\n-  -\n\nAdds a start condition for the advice monitor, which determines when the advice monitor will begin monitoring its trigger conditions.\n",
		"body": [
			"advice_monitor:add_start_condition(${1:function condition}, ${2:[opt=nil] string event})"
		],
	},
	"docgen:advice_monitor:add_trigger_condition": {
		"scope": "lua",
		"prefix": "add_trigger_condition",
		"description": "advice_monitor:add_trigger_condition()\n-  -\n\nAdds a trigger condition for the advice monitor.\n",
		"body": [
			"add_trigger_condition(${1:function condition}, ${2:[opt=nil] string event})"
		],
	},
	"docgen:advice_monitor:advice_monitor:add_trigger_condition": {
		"scope": "lua",
		"prefix": "advice_monitor:add_trigger_condition",
		"description": "advice_monitor:add_trigger_condition()\n-  -\n\nAdds a trigger condition for the advice monitor.\n",
		"body": [
			"advice_monitor:add_trigger_condition(${1:function condition}, ${2:[opt=nil] string event})"
		],
	},
	"docgen:advice_monitor:add_halt_condition": {
		"scope": "lua",
		"prefix": "add_halt_condition",
		"description": "advice_monitor:add_halt_condition()\n-  -\n\nAdds a halt condition for the advice monitor.\n",
		"body": [
			"add_halt_condition(${1:function condition}, ${2:[opt=nil] string event})"
		],
	},
	"docgen:advice_monitor:advice_monitor:add_halt_condition": {
		"scope": "lua",
		"prefix": "advice_monitor:add_halt_condition",
		"description": "advice_monitor:add_halt_condition()\n-  -\n\nAdds a halt condition for the advice monitor.\n",
		"body": [
			"advice_monitor:add_halt_condition(${1:function condition}, ${2:[opt=nil] string event})"
		],
	},
	"docgen:advice_monitor:add_halt_on_advice_monitor_triggering": {
		"scope": "lua",
		"prefix": "add_halt_on_advice_monitor_triggering",
		"description": "advice_monitor:add_halt_on_advice_monitor_triggering()\n-  -\n\nHalts this advice monitor when another advice monitor successfully triggers its advice.\n",
		"body": [
			"add_halt_on_advice_monitor_triggering(${1:string name})"
		],
	},
	"docgen:advice_monitor:advice_monitor:add_halt_on_advice_monitor_triggering": {
		"scope": "lua",
		"prefix": "advice_monitor:add_halt_on_advice_monitor_triggering",
		"description": "advice_monitor:add_halt_on_advice_monitor_triggering()\n-  -\n\nHalts this advice monitor when another advice monitor successfully triggers its advice.\n",
		"body": [
			"advice_monitor:add_halt_on_advice_monitor_triggering(${1:string name})"
		],
	},
	"docgen:advice_monitor:add_halt_advice_monitor_on_trigger": {
		"scope": "lua",
		"prefix": "add_halt_advice_monitor_on_trigger",
		"description": "advice_monitor:add_halt_advice_monitor_on_trigger()\n-  -\n\nHalts another advice monitor when this monitor successfully triggers.\n",
		"body": [
			"add_halt_advice_monitor_on_trigger(${1:string name})"
		],
	},
	"docgen:advice_monitor:advice_monitor:add_halt_advice_monitor_on_trigger": {
		"scope": "lua",
		"prefix": "advice_monitor:add_halt_advice_monitor_on_trigger",
		"description": "advice_monitor:add_halt_advice_monitor_on_trigger()\n-  -\n\nHalts another advice monitor when this monitor successfully triggers.\n",
		"body": [
			"advice_monitor:add_halt_advice_monitor_on_trigger(${1:string name})"
		],
	},
	"docgen:cutscene:new": {
		"scope": "lua",
		"prefix": "new",
		"description": "cutscene:new()\n-  -\n\nCreates a cutscene object.\n",
		"body": [
			"new(${1:string name}, ${2:object unit controller}, ${3:number length}, ${4:[opt=nil] function end callback})"
		],
	},
	"docgen:cutscene:cutscene:new": {
		"scope": "lua",
		"prefix": "cutscene:new",
		"description": "cutscene:new()\n-  -\n\nCreates a cutscene object.\n",
		"body": [
			"cutscene:new(${1:string name}, ${2:object unit controller}, ${3:number length}, ${4:[opt=nil] function end callback})"
		],
	},
	"docgen:cutscene:set_debug": {
		"scope": "lua",
		"prefix": "set_debug",
		"description": "cutscene:set_debug()\n-  -\n\nSets the cutscene into debug mode for more output.\n",
		"body": [
			"set_debug(${1:[opt=true] boolean set debug}, ${2:[opt=false] boolean Hide UI in debug mode.})"
		],
	},
	"docgen:cutscene:cutscene:set_debug": {
		"scope": "lua",
		"prefix": "cutscene:set_debug",
		"description": "cutscene:set_debug()\n-  -\n\nSets the cutscene into debug mode for more output.\n",
		"body": [
			"cutscene:set_debug(${1:[opt=true] boolean set debug}, ${2:[opt=false] boolean Hide UI in debug mode.})"
		],
	},
	"docgen:cutscene:enable_debug_timestamps": {
		"scope": "lua",
		"prefix": "enable_debug_timestamps",
		"description": "cutscene:enable_debug_timestamps()\n-  -\n\nInstructs the cutscene to print a debug timestamp every model tick.\n",
		"body": [
			"enable_debug_timestamps(${1:[opt=true] boolean enable timestamps})"
		],
	},
	"docgen:cutscene:cutscene:enable_debug_timestamps": {
		"scope": "lua",
		"prefix": "cutscene:enable_debug_timestamps",
		"description": "cutscene:enable_debug_timestamps()\n-  -\n\nInstructs the cutscene to print a debug timestamp every model tick.\n",
		"body": [
			"cutscene:enable_debug_timestamps(${1:[opt=true] boolean enable timestamps})"
		],
	},
	"docgen:cutscene:action": {
		"scope": "lua",
		"prefix": "action",
		"description": "cutscene:action()\n-  -\n\nAdds an action to the cutscene.\n",
		"body": [
			"action(${1:function action callback}, ${2:number action time})"
		],
	},
	"docgen:cutscene:cutscene:action": {
		"scope": "lua",
		"prefix": "cutscene:action",
		"description": "cutscene:action()\n-  -\n\nAdds an action to the cutscene.\n",
		"body": [
			"cutscene:action(${1:function action callback}, ${2:number action time})"
		],
	},
	"docgen:cutscene:play_sound": {
		"scope": "lua",
		"prefix": "play_sound",
		"description": "cutscene:play_sound()\n-  -\n\nInstructs the cutscene to play a sound.\n",
		"body": [
			"play_sound(${1:battle_sound_effect sound})"
		],
	},
	"docgen:cutscene:cutscene:play_sound": {
		"scope": "lua",
		"prefix": "cutscene:play_sound",
		"description": "cutscene:play_sound()\n-  -\n\nInstructs the cutscene to play a sound.\n",
		"body": [
			"cutscene:play_sound(${1:battle_sound_effect sound})"
		],
	},
	"docgen:cutscene:play_vo": {
		"scope": "lua",
		"prefix": "play_vo",
		"description": "cutscene:play_vo()\n-  -\n\nInstructs the cutscene to play a sound at a specified script_unit in 3D space.\n",
		"body": [
			"play_vo(${1:battle_sound_effect sound}, ${2:script_unit target sunit})"
		],
	},
	"docgen:cutscene:cutscene:play_vo": {
		"scope": "lua",
		"prefix": "cutscene:play_vo",
		"description": "cutscene:play_vo()\n-  -\n\nInstructs the cutscene to play a sound at a specified script_unit in 3D space.\n",
		"body": [
			"cutscene:play_vo(${1:battle_sound_effect sound}, ${2:script_unit target sunit})"
		],
	},
	"docgen:cutscene:wait_for_advisor": {
		"scope": "lua",
		"prefix": "wait_for_advisor",
		"description": "cutscene:wait_for_advisor()\n-  -\n\nInstructs a running cutscene to stall its progress until the advisor has finished speaking.\n",
		"body": [
			"wait_for_advisor()"
		],
	},
	"docgen:cutscene:cutscene:wait_for_advisor": {
		"scope": "lua",
		"prefix": "cutscene:wait_for_advisor",
		"description": "cutscene:wait_for_advisor()\n-  -\n\nInstructs a running cutscene to stall its progress until the advisor has finished speaking.\n",
		"body": [
			"cutscene:wait_for_advisor()"
		],
	},
	"docgen:cutscene:wait_for_vo": {
		"scope": "lua",
		"prefix": "wait_for_vo",
		"description": "cutscene:wait_for_vo()\n-  -\n\nInstructs a running cutscene to stall its progress until any sounds started with cutscene:play_sound or cutscene:play_vo have finished.\n",
		"body": [
			"wait_for_vo()"
		],
	},
	"docgen:cutscene:cutscene:wait_for_vo": {
		"scope": "lua",
		"prefix": "cutscene:wait_for_vo",
		"description": "cutscene:wait_for_vo()\n-  -\n\nInstructs a running cutscene to stall its progress until any sounds started with cutscene:play_sound or cutscene:play_vo have finished.\n",
		"body": [
			"cutscene:wait_for_vo()"
		],
	},
	"docgen:cutscene:subtitles": {
		"scope": "lua",
		"prefix": "subtitles",
		"description": "cutscene:subtitles()\n-  -\n\nReturns a subtitles object stored internally by the cutscene.\n",
		"body": [
			"subtitles()"
		],
	},
	"docgen:cutscene:cutscene:subtitles": {
		"scope": "lua",
		"prefix": "cutscene:subtitles",
		"description": "cutscene:subtitles()\n-  -\n\nReturns a subtitles object stored internally by the cutscene.\n",
		"body": [
			"cutscene:subtitles()"
		],
	},
	"docgen:cutscene:camera": {
		"scope": "lua",
		"prefix": "camera",
		"description": "cutscene:camera()\n-  -\n\nReturns a camera object stored internally by the cutscene.\n",
		"body": [
			"camera()"
		],
	},
	"docgen:cutscene:cutscene:camera": {
		"scope": "lua",
		"prefix": "cutscene:camera",
		"description": "cutscene:camera()\n-  -\n\nReturns a camera object stored internally by the cutscene.\n",
		"body": [
			"cutscene:camera()"
		],
	},
	"docgen:cutscene:length": {
		"scope": "lua",
		"prefix": "length",
		"description": "cutscene:length()\n-  -\n\nReturns the cutscene length in ms\n",
		"body": [
			"length()"
		],
	},
	"docgen:cutscene:cutscene:length": {
		"scope": "lua",
		"prefix": "cutscene:length",
		"description": "cutscene:length()\n-  -\n\nReturns the cutscene length in ms\n",
		"body": [
			"cutscene:length()"
		],
	},
	"docgen:cutscene:is_playing_sound": {
		"scope": "lua",
		"prefix": "is_playing_sound",
		"description": "cutscene:is_playing_sound()\n-  -\n\nReturns true if any of the sounds the cutscene has been told to play with cutscene:play_sound or cutscene:play_vo are still playing, false otherwise.\n",
		"body": [
			"is_playing_sound()"
		],
	},
	"docgen:cutscene:cutscene:is_playing_sound": {
		"scope": "lua",
		"prefix": "cutscene:is_playing_sound",
		"description": "cutscene:is_playing_sound()\n-  -\n\nReturns true if any of the sounds the cutscene has been told to play with cutscene:play_sound or cutscene:play_vo are still playing, false otherwise.\n",
		"body": [
			"cutscene:is_playing_sound()"
		],
	},
	"docgen:cutscene:is_playing_camera": {
		"scope": "lua",
		"prefix": "is_playing_camera",
		"description": "cutscene:is_playing_camera()\n-  -\n\nReturns true if a scripted camera movement is currently happening, false otherwise.\n",
		"body": [
			"is_playing_camera()"
		],
	},
	"docgen:cutscene:cutscene:is_playing_camera": {
		"scope": "lua",
		"prefix": "cutscene:is_playing_camera",
		"description": "cutscene:is_playing_camera()\n-  -\n\nReturns true if a scripted camera movement is currently happening, false otherwise.\n",
		"body": [
			"cutscene:is_playing_camera()"
		],
	},
	"docgen:cutscene:is_any_cutscene_running": {
		"scope": "lua",
		"prefix": "is_any_cutscene_running",
		"description": "cutscene:is_any_cutscene_running()\n-  -\n\nReturns true if this or any other scripted cutscene is currently running, false otherwise.\n",
		"body": [
			"is_any_cutscene_running()"
		],
	},
	"docgen:cutscene:cutscene:is_any_cutscene_running": {
		"scope": "lua",
		"prefix": "cutscene:is_any_cutscene_running",
		"description": "cutscene:is_any_cutscene_running()\n-  -\n\nReturns true if this or any other scripted cutscene is currently running, false otherwise.\n",
		"body": [
			"cutscene:is_any_cutscene_running()"
		],
	},
	"docgen:cutscene:is_active": {
		"scope": "lua",
		"prefix": "is_active",
		"description": "cutscene:is_active()\n-  -\n\nReturns true if this cutscene is currently running, false otherwise.\n",
		"body": [
			"is_active()"
		],
	},
	"docgen:cutscene:cutscene:is_active": {
		"scope": "lua",
		"prefix": "cutscene:is_active",
		"description": "cutscene:is_active()\n-  -\n\nReturns true if this cutscene is currently running, false otherwise.\n",
		"body": [
			"cutscene:is_active()"
		],
	},
	"docgen:cutscene:set_skippable": {
		"scope": "lua",
		"prefix": "set_skippable",
		"description": "cutscene:set_skippable()\n-  -\n\nSets the cutscene to be skippable, and optionally also sets a function to be called when the player skips the cutscene.\n",
		"body": [
			"set_skippable(${1:boolean skippable}, ${2:[opt=nil] function skip callback})"
		],
	},
	"docgen:cutscene:cutscene:set_skippable": {
		"scope": "lua",
		"prefix": "cutscene:set_skippable",
		"description": "cutscene:set_skippable()\n-  -\n\nSets the cutscene to be skippable, and optionally also sets a function to be called when the player skips the cutscene.\n",
		"body": [
			"cutscene:set_skippable(${1:boolean skippable}, ${2:[opt=nil] function skip callback})"
		],
	},
	"docgen:cutscene:set_skip_camera": {
		"scope": "lua",
		"prefix": "set_skip_camera",
		"description": "cutscene:set_skip_camera()\n-  -\n\nSets a position/target to immediately reposition the camera at if the cutscene is skipped.\n",
		"body": [
			"set_skip_camera(${1:vector camera position}, ${2:vector camera target})"
		],
	},
	"docgen:cutscene:cutscene:set_skip_camera": {
		"scope": "lua",
		"prefix": "cutscene:set_skip_camera",
		"description": "cutscene:set_skip_camera()\n-  -\n\nSets a position/target to immediately reposition the camera at if the cutscene is skipped.\n",
		"body": [
			"cutscene:set_skip_camera(${1:vector camera position}, ${2:vector camera target})"
		],
	},
	"docgen:cutscene:set_restore_cam": {
		"scope": "lua",
		"prefix": "set_restore_cam",
		"description": "cutscene:set_restore_cam()\n-  -\n\nInstructs the cutscene to restore the camera to either the position it occupied when the cutscene started, or a different position/target entirely.\n",
		"body": [
			"set_restore_cam(${1:number move time}, ${2:[opt=nil] vector override position}, ${3:[opt=nil] vector override target})"
		],
	},
	"docgen:cutscene:cutscene:set_restore_cam": {
		"scope": "lua",
		"prefix": "cutscene:set_restore_cam",
		"description": "cutscene:set_restore_cam()\n-  -\n\nInstructs the cutscene to restore the camera to either the position it occupied when the cutscene started, or a different position/target entirely.\n",
		"body": [
			"cutscene:set_restore_cam(${1:number move time}, ${2:[opt=nil] vector override position}, ${3:[opt=nil] vector override target})"
		],
	},
	"docgen:cutscene:set_post_cutscene_fade_time": {
		"scope": "lua",
		"prefix": "set_post_cutscene_fade_time",
		"description": "cutscene:set_post_cutscene_fade_time()\n-  -\n\nSets a duration for the post-cutscene fade time, in seconds.\n",
		"body": [
			"set_post_cutscene_fade_time(${1:number duration}, ${2:[opt=0] number duration})"
		],
	},
	"docgen:cutscene:cutscene:set_post_cutscene_fade_time": {
		"scope": "lua",
		"prefix": "cutscene:set_post_cutscene_fade_time",
		"description": "cutscene:set_post_cutscene_fade_time()\n-  -\n\nSets a duration for the post-cutscene fade time, in seconds.\n",
		"body": [
			"cutscene:set_post_cutscene_fade_time(${1:number duration}, ${2:[opt=0] number duration})"
		],
	},
	"docgen:cutscene:set_music": {
		"scope": "lua",
		"prefix": "set_music",
		"description": "cutscene:set_music()\n-  -\n\nSets a music sound event to play during the cutscene.\n",
		"body": [
			"set_music(${1:string music event}, ${2:number fade in}, ${3:number fade out})"
		],
	},
	"docgen:cutscene:cutscene:set_music": {
		"scope": "lua",
		"prefix": "cutscene:set_music",
		"description": "cutscene:set_music()\n-  -\n\nSets a music sound event to play during the cutscene.\n",
		"body": [
			"cutscene:set_music(${1:string music event}, ${2:number fade in}, ${3:number fade out})"
		],
	},
	"docgen:cutscene:set_music_resume_auto_playback": {
		"scope": "lua",
		"prefix": "set_music_resume_auto_playback",
		"description": "cutscene:set_music_resume_auto_playback()\n-  -\n\nSets the sound system to return to automatically selecting music events after the cutscene ends.\n",
		"body": [
			"set_music_resume_auto_playback(${1:boolean set auto playback})"
		],
	},
	"docgen:cutscene:cutscene:set_music_resume_auto_playback": {
		"scope": "lua",
		"prefix": "cutscene:set_music_resume_auto_playback",
		"description": "cutscene:set_music_resume_auto_playback()\n-  -\n\nSets the sound system to return to automatically selecting music events after the cutscene ends.\n",
		"body": [
			"cutscene:set_music_resume_auto_playback(${1:boolean set auto playback})"
		],
	},
	"docgen:cutscene:set_relative_mode": {
		"scope": "lua",
		"prefix": "set_relative_mode",
		"description": "cutscene:set_relative_mode()\n-  -\n\nSets relative mode for enqueuing actions on the cutscene.\n",
		"body": [
			"set_relative_mode()"
		],
	},
	"docgen:cutscene:cutscene:set_relative_mode": {
		"scope": "lua",
		"prefix": "cutscene:set_relative_mode",
		"description": "cutscene:set_relative_mode()\n-  -\n\nSets relative mode for enqueuing actions on the cutscene.\n",
		"body": [
			"cutscene:set_relative_mode()"
		],
	},
	"docgen:cutscene:set_is_ambush": {
		"scope": "lua",
		"prefix": "set_is_ambush",
		"description": "cutscene:set_is_ambush()\n-  -\n\nSets up the cutscene as an intro cutscene of an ambush battle.\n",
		"body": [
			"set_is_ambush(${1:[opt=true] boolean is ambush}, ${2:[opt=false] boolean teleport units on end})"
		],
	},
	"docgen:cutscene:cutscene:set_is_ambush": {
		"scope": "lua",
		"prefix": "cutscene:set_is_ambush",
		"description": "cutscene:set_is_ambush()\n-  -\n\nSets up the cutscene as an intro cutscene of an ambush battle.\n",
		"body": [
			"cutscene:set_is_ambush(${1:[opt=true] boolean is ambush}, ${2:[opt=false] boolean teleport units on end})"
		],
	},
	"docgen:cutscene:set_do_not_end": {
		"scope": "lua",
		"prefix": "set_do_not_end",
		"description": "cutscene:set_do_not_end()\n-  -\n\nSets the cutscene to not end naturally.\n",
		"body": [
			"set_do_not_end(${1:[opt=true] boolean do not end})"
		],
	},
	"docgen:cutscene:cutscene:set_do_not_end": {
		"scope": "lua",
		"prefix": "cutscene:set_do_not_end",
		"description": "cutscene:set_do_not_end()\n-  -\n\nSets the cutscene to not end naturally.\n",
		"body": [
			"cutscene:set_do_not_end(${1:[opt=true] boolean do not end})"
		],
	},
	"docgen:cutscene:set_should_disable_unit_ids": {
		"scope": "lua",
		"prefix": "set_should_disable_unit_ids",
		"description": "cutscene:set_should_disable_unit_ids()\n-  -\n\nSets whether unit ID uicomponents should be disabled during the cutscene.\n",
		"body": [
			"set_should_disable_unit_ids(${1:[opt=true] boolean disable unit ids})"
		],
	},
	"docgen:cutscene:cutscene:set_should_disable_unit_ids": {
		"scope": "lua",
		"prefix": "cutscene:set_should_disable_unit_ids",
		"description": "cutscene:set_should_disable_unit_ids()\n-  -\n\nSets whether unit ID uicomponents should be disabled during the cutscene.\n",
		"body": [
			"cutscene:set_should_disable_unit_ids(${1:[opt=true] boolean disable unit ids})"
		],
	},
	"docgen:cutscene:suppress_unit_voices": {
		"scope": "lua",
		"prefix": "suppress_unit_voices",
		"description": "cutscene:suppress_unit_voices()\n-  -\n\nSets whether to suppress unit voices during the cutscene duration.\n",
		"body": [
			"suppress_unit_voices(${1:[opt=true] boolean suppress voices})"
		],
	},
	"docgen:cutscene:cutscene:suppress_unit_voices": {
		"scope": "lua",
		"prefix": "cutscene:suppress_unit_voices",
		"description": "cutscene:suppress_unit_voices()\n-  -\n\nSets whether to suppress unit voices during the cutscene duration.\n",
		"body": [
			"cutscene:suppress_unit_voices(${1:[opt=true] boolean suppress voices})"
		],
	},
	"docgen:cutscene:set_should_enable_cinematic_camera": {
		"scope": "lua",
		"prefix": "set_should_enable_cinematic_camera",
		"description": "cutscene:set_should_enable_cinematic_camera()\n-  -\n\nSets whether to enable the cinematic camera during the cutscene.\n",
		"body": [
			"set_should_enable_cinematic_camera(${1:[opt=true] boolean enable cinematic camera})"
		],
	},
	"docgen:cutscene:cutscene:set_should_enable_cinematic_camera": {
		"scope": "lua",
		"prefix": "cutscene:set_should_enable_cinematic_camera",
		"description": "cutscene:set_should_enable_cinematic_camera()\n-  -\n\nSets whether to enable the cinematic camera during the cutscene.\n",
		"body": [
			"cutscene:set_should_enable_cinematic_camera(${1:[opt=true] boolean enable cinematic camera})"
		],
	},
	"docgen:cutscene:set_wait_for_advisor_on_end": {
		"scope": "lua",
		"prefix": "set_wait_for_advisor_on_end",
		"description": "cutscene:set_wait_for_advisor_on_end()\n-  -\n\nSets whether to wait for the advisor to finish before ending the cutscene.\n",
		"body": [
			"set_wait_for_advisor_on_end(${1:[opt=true] boolean wait for advisor})"
		],
	},
	"docgen:cutscene:cutscene:set_wait_for_advisor_on_end": {
		"scope": "lua",
		"prefix": "cutscene:set_wait_for_advisor_on_end",
		"description": "cutscene:set_wait_for_advisor_on_end()\n-  -\n\nSets whether to wait for the advisor to finish before ending the cutscene.\n",
		"body": [
			"cutscene:set_wait_for_advisor_on_end(${1:[opt=true] boolean wait for advisor})"
		],
	},
	"docgen:cutscene:set_wait_for_vo_on_end": {
		"scope": "lua",
		"prefix": "set_wait_for_vo_on_end",
		"description": "cutscene:set_wait_for_vo_on_end()\n-  -\n\nSets whether to wait for any sounds registered with cutscene:play_sound or cutscene:play_vo to finish before ending the cutscene.\n",
		"body": [
			"set_wait_for_vo_on_end(${1:[opt=true] boolean wait for sounds})"
		],
	},
	"docgen:cutscene:cutscene:set_wait_for_vo_on_end": {
		"scope": "lua",
		"prefix": "cutscene:set_wait_for_vo_on_end",
		"description": "cutscene:set_wait_for_vo_on_end()\n-  -\n\nSets whether to wait for any sounds registered with cutscene:play_sound or cutscene:play_vo to finish before ending the cutscene.\n",
		"body": [
			"cutscene:set_wait_for_vo_on_end(${1:[opt=true] boolean wait for sounds})"
		],
	},
	"docgen:cutscene:set_close_advisor_on_end": {
		"scope": "lua",
		"prefix": "set_close_advisor_on_end",
		"description": "cutscene:set_close_advisor_on_end()\n-  -\n\nSets whether to close the advisor at the end of the cutscene.\n",
		"body": [
			"set_close_advisor_on_end(${1:[opt=true] boolean should close advisor})"
		],
	},
	"docgen:cutscene:cutscene:set_close_advisor_on_end": {
		"scope": "lua",
		"prefix": "cutscene:set_close_advisor_on_end",
		"description": "cutscene:set_close_advisor_on_end()\n-  -\n\nSets whether to close the advisor at the end of the cutscene.\n",
		"body": [
			"cutscene:set_close_advisor_on_end(${1:[opt=true] boolean should close advisor})"
		],
	},
	"docgen:cutscene:set_close_advisor_on_start": {
		"scope": "lua",
		"prefix": "set_close_advisor_on_start",
		"description": "cutscene:set_close_advisor_on_start()\n-  -\n\nSets whether to close the advisor when the cutscene begins.\n",
		"body": [
			"set_close_advisor_on_start(${1:[opt=true] boolean should close advisor})"
		],
	},
	"docgen:cutscene:cutscene:set_close_advisor_on_start": {
		"scope": "lua",
		"prefix": "cutscene:set_close_advisor_on_start",
		"description": "cutscene:set_close_advisor_on_start()\n-  -\n\nSets whether to close the advisor when the cutscene begins.\n",
		"body": [
			"cutscene:set_close_advisor_on_start(${1:[opt=true] boolean should close advisor})"
		],
	},
	"docgen:cutscene:enable_ui_on_end": {
		"scope": "lua",
		"prefix": "enable_ui_on_end",
		"description": "cutscene:enable_ui_on_end()\n-  -\n\nSets whether the cutscene should re-enable the UI when it finishes.\n",
		"body": [
			"enable_ui_on_end(${1:[opt=true] boolean should enable ui})"
		],
	},
	"docgen:cutscene:cutscene:enable_ui_on_end": {
		"scope": "lua",
		"prefix": "cutscene:enable_ui_on_end",
		"description": "cutscene:enable_ui_on_end()\n-  -\n\nSets whether the cutscene should re-enable the UI when it finishes.\n",
		"body": [
			"cutscene:enable_ui_on_end(${1:[opt=true] boolean should enable ui})"
		],
	},
	"docgen:cutscene:set_call_end_callback_when_skipped": {
		"scope": "lua",
		"prefix": "set_call_end_callback_when_skipped",
		"description": "cutscene:set_call_end_callback_when_skipped()\n-  -\n\nSets whether the cutscene should call the end callback (supplied when the cutscene is created with cutscene:new) when skipped.\n",
		"body": [
			"set_call_end_callback_when_skipped(${1:[opt=true] boolean should call callback})"
		],
	},
	"docgen:cutscene:cutscene:set_call_end_callback_when_skipped": {
		"scope": "lua",
		"prefix": "cutscene:set_call_end_callback_when_skipped",
		"description": "cutscene:set_call_end_callback_when_skipped()\n-  -\n\nSets whether the cutscene should call the end callback (supplied when the cutscene is created with cutscene:new) when skipped.\n",
		"body": [
			"cutscene:set_call_end_callback_when_skipped(${1:[opt=true] boolean should call callback})"
		],
	},
	"docgen:cutscene:set_should_release_players_army": {
		"scope": "lua",
		"prefix": "set_should_release_players_army",
		"description": "cutscene:set_should_release_players_army()\n-  -\n\nSets whether the cutscene should release script control of the player's army when finishing.\n",
		"body": [
			"set_should_release_players_army(${1:[opt=true] boolean should call callback})"
		],
	},
	"docgen:cutscene:cutscene:set_should_release_players_army": {
		"scope": "lua",
		"prefix": "cutscene:set_should_release_players_army",
		"description": "cutscene:set_should_release_players_army()\n-  -\n\nSets whether the cutscene should release script control of the player's army when finishing.\n",
		"body": [
			"cutscene:set_should_release_players_army(${1:[opt=true] boolean should call callback})"
		],
	},
	"docgen:cutscene:set_show_cinematic_bars": {
		"scope": "lua",
		"prefix": "set_show_cinematic_bars",
		"description": "cutscene:set_show_cinematic_bars()\n-  -\n\nSets whether the cutscene should show cinematic bars while playing.\n",
		"body": [
			"set_show_cinematic_bars(${1:[opt=true] boolean show bars})"
		],
	},
	"docgen:cutscene:cutscene:set_show_cinematic_bars": {
		"scope": "lua",
		"prefix": "cutscene:set_show_cinematic_bars",
		"description": "cutscene:set_show_cinematic_bars()\n-  -\n\nSets whether the cutscene should show cinematic bars while playing.\n",
		"body": [
			"cutscene:set_show_cinematic_bars(${1:[opt=true] boolean show bars})"
		],
	},
	"docgen:cutscene:set_should_hide_ui": {
		"scope": "lua",
		"prefix": "set_should_hide_ui",
		"description": "cutscene:set_should_hide_ui()\n-  -\n\nSets whether the cutscene should show hide the UI while playing.\n",
		"body": [
			"set_should_hide_ui(${1:[opt=true] boolean hide UI})"
		],
	},
	"docgen:cutscene:cutscene:set_should_hide_ui": {
		"scope": "lua",
		"prefix": "cutscene:set_should_hide_ui",
		"description": "cutscene:set_should_hide_ui()\n-  -\n\nSets whether the cutscene should show hide the UI while playing.\n",
		"body": [
			"cutscene:set_should_hide_ui(${1:[opt=true] boolean hide UI})"
		],
	},
	"docgen:cutscene:set_steal_input_focus": {
		"scope": "lua",
		"prefix": "set_steal_input_focus",
		"description": "cutscene:set_steal_input_focus()\n-  -\n\nSets whether the cutscene should steal input focus while playing, preventing player input.\n",
		"body": [
			"set_steal_input_focus(${1:[opt=true] boolean steal input})"
		],
	},
	"docgen:cutscene:cutscene:set_steal_input_focus": {
		"scope": "lua",
		"prefix": "cutscene:set_steal_input_focus",
		"description": "cutscene:set_steal_input_focus()\n-  -\n\nSets whether the cutscene should steal input focus while playing, preventing player input.\n",
		"body": [
			"cutscene:set_steal_input_focus(${1:[opt=true] boolean steal input})"
		],
	},
	"docgen:cutscene:start": {
		"scope": "lua",
		"prefix": "start",
		"description": "cutscene:start()\n-  -\n\nStarts the cutscene.\n",
		"body": [
			"start()"
		],
	},
	"docgen:cutscene:cutscene:start": {
		"scope": "lua",
		"prefix": "cutscene:start",
		"description": "cutscene:start()\n-  -\n\nStarts the cutscene.\n",
		"body": [
			"cutscene:start()"
		],
	},
	"docgen:cutscene:show_custom_cutscene_subtitle": {
		"scope": "lua",
		"prefix": "show_custom_cutscene_subtitle",
		"description": "cutscene:show_custom_cutscene_subtitle()\n-  -\n\nStreams a line of subtitles.\n",
		"body": [
			"show_custom_cutscene_subtitle(${1:string subtitle key}, ${2:string style}, ${3:number duration}, ${4:[opt=false] boolean force})"
		],
	},
	"docgen:cutscene:cutscene:show_custom_cutscene_subtitle": {
		"scope": "lua",
		"prefix": "cutscene:show_custom_cutscene_subtitle",
		"description": "cutscene:show_custom_cutscene_subtitle()\n-  -\n\nStreams a line of subtitles.\n",
		"body": [
			"cutscene:show_custom_cutscene_subtitle(${1:string subtitle key}, ${2:string style}, ${3:number duration}, ${4:[opt=false] boolean force})"
		],
	},
	"docgen:cutscene:hide_custom_cutscene_subtitles": {
		"scope": "lua",
		"prefix": "hide_custom_cutscene_subtitles",
		"description": "cutscene:hide_custom_cutscene_subtitles()\n-  -\n\nHides any visible custom cutscene subtitles.\n",
		"body": [
			"hide_custom_cutscene_subtitles(${1:[opt=false] boolean hide immediately})"
		],
	},
	"docgen:cutscene:cutscene:hide_custom_cutscene_subtitles": {
		"scope": "lua",
		"prefix": "cutscene:hide_custom_cutscene_subtitles",
		"description": "cutscene:hide_custom_cutscene_subtitles()\n-  -\n\nHides any visible custom cutscene subtitles.\n",
		"body": [
			"cutscene:hide_custom_cutscene_subtitles(${1:[opt=false] boolean hide immediately})"
		],
	},
	"docgen:cutscene:show_esc_prompt": {
		"scope": "lua",
		"prefix": "show_esc_prompt",
		"description": "cutscene:show_esc_prompt()\n-  -\n\nShows or hides a \"Press ESC to continue\" subtitle prompt.\n",
		"body": [
			"show_esc_prompt(${1:[opt=false] boolean should show})"
		],
	},
	"docgen:cutscene:cutscene:show_esc_prompt": {
		"scope": "lua",
		"prefix": "cutscene:show_esc_prompt",
		"description": "cutscene:show_esc_prompt()\n-  -\n\nShows or hides a \"Press ESC to continue\" subtitle prompt.\n",
		"body": [
			"cutscene:show_esc_prompt(${1:[opt=false] boolean should show})"
		],
	},
	"docgen:cutscene:skip": {
		"scope": "lua",
		"prefix": "skip",
		"description": "cutscene:skip()\n-  -\n\nCauses the cutscene to skip.\n",
		"body": [
			"skip()"
		],
	},
	"docgen:cutscene:cutscene:skip": {
		"scope": "lua",
		"prefix": "cutscene:skip",
		"description": "cutscene:skip()\n-  -\n\nCauses the cutscene to skip.\n",
		"body": [
			"cutscene:skip()"
		],
	},
	"docgen:battle_manager:new": {
		"scope": "lua",
		"prefix": "new",
		"description": "battle_manager:new()\n-  -\n\nCreates a battle_manager object.\n",
		"body": [
			"new()"
		],
	},
	"docgen:battle_manager:battle_manager:new": {
		"scope": "lua",
		"prefix": "battle_manager:new",
		"description": "battle_manager:new()\n-  -\n\nCreates a battle_manager object.\n",
		"body": [
			"battle_manager:new()"
		],
	},
	"docgen:battle_manager:bm:new": {
		"scope": "lua",
		"prefix": "bm:new",
		"description": "battle_manager:new()\n-  -\n\nCreates a battle_manager object.\n",
		"body": [
			"bm:new()"
		],
	},
	"docgen:battle_manager:out": {
		"scope": "lua",
		"prefix": "out",
		"description": "battle_manager:out()\n-  -\n\nPrints a string to the debug output spool.\n",
		"body": [
			"out(${1:string output})"
		],
	},
	"docgen:battle_manager:battle_manager:out": {
		"scope": "lua",
		"prefix": "battle_manager:out",
		"description": "battle_manager:out()\n-  -\n\nPrints a string to the debug output spool.\n",
		"body": [
			"battle_manager:out(${1:string output})"
		],
	},
	"docgen:battle_manager:bm:out": {
		"scope": "lua",
		"prefix": "bm:out",
		"description": "battle_manager:out()\n-  -\n\nPrints a string to the debug output spool.\n",
		"body": [
			"bm:out(${1:string output})"
		],
	},
	"docgen:battle_manager:get_tm": {
		"scope": "lua",
		"prefix": "get_tm",
		"description": "battle_manager:get_tm()\n-  -\n\nDirectly access the timer_manager object the battle manager creates and stores internally.\n",
		"body": [
			"get_tm()"
		],
	},
	"docgen:battle_manager:battle_manager:get_tm": {
		"scope": "lua",
		"prefix": "battle_manager:get_tm",
		"description": "battle_manager:get_tm()\n-  -\n\nDirectly access the timer_manager object the battle manager creates and stores internally.\n",
		"body": [
			"battle_manager:get_tm()"
		],
	},
	"docgen:battle_manager:bm:get_tm": {
		"scope": "lua",
		"prefix": "bm:get_tm",
		"description": "battle_manager:get_tm()\n-  -\n\nDirectly access the timer_manager object the battle manager creates and stores internally.\n",
		"body": [
			"bm:get_tm()"
		],
	},
	"docgen:battle_manager:get_battle_ui_manager": {
		"scope": "lua",
		"prefix": "get_battle_ui_manager",
		"description": "battle_manager:get_battle_ui_manager()\n-  -\n\nRetrieves a handle to a battle_ui_manager object from the battle manager.\n",
		"body": [
			"get_battle_ui_manager()"
		],
	},
	"docgen:battle_manager:battle_manager:get_battle_ui_manager": {
		"scope": "lua",
		"prefix": "battle_manager:get_battle_ui_manager",
		"description": "battle_manager:get_battle_ui_manager()\n-  -\n\nRetrieves a handle to a battle_ui_manager object from the battle manager.\n",
		"body": [
			"battle_manager:get_battle_ui_manager()"
		],
	},
	"docgen:battle_manager:bm:get_battle_ui_manager": {
		"scope": "lua",
		"prefix": "bm:get_battle_ui_manager",
		"description": "battle_manager:get_battle_ui_manager()\n-  -\n\nRetrieves a handle to a battle_ui_manager object from the battle manager.\n",
		"body": [
			"bm:get_battle_ui_manager()"
		],
	},
	"docgen:battle_manager:get_battle_folder": {
		"scope": "lua",
		"prefix": "get_battle_folder",
		"description": "battle_manager:get_battle_folder()\n-  -\n\nReturns the path to the battle script folder.\n",
		"body": [
			"get_battle_folder()"
		],
	},
	"docgen:battle_manager:battle_manager:get_battle_folder": {
		"scope": "lua",
		"prefix": "battle_manager:get_battle_folder",
		"description": "battle_manager:get_battle_folder()\n-  -\n\nReturns the path to the battle script folder.\n",
		"body": [
			"battle_manager:get_battle_folder()"
		],
	},
	"docgen:battle_manager:bm:get_battle_folder": {
		"scope": "lua",
		"prefix": "bm:get_battle_folder",
		"description": "battle_manager:get_battle_folder()\n-  -\n\nReturns the path to the battle script folder.\n",
		"body": [
			"bm:get_battle_folder()"
		],
	},
	"docgen:battle_manager:get_origin": {
		"scope": "lua",
		"prefix": "get_origin",
		"description": "battle_manager:get_origin()\n-  -\n\nReturns a vector position at the world origin.\n",
		"body": [
			"get_origin()"
		],
	},
	"docgen:battle_manager:battle_manager:get_origin": {
		"scope": "lua",
		"prefix": "battle_manager:get_origin",
		"description": "battle_manager:get_origin()\n-  -\n\nReturns a vector position at the world origin.\n",
		"body": [
			"battle_manager:get_origin()"
		],
	},
	"docgen:battle_manager:bm:get_origin": {
		"scope": "lua",
		"prefix": "bm:get_origin",
		"description": "battle_manager:get_origin()\n-  -\n\nReturns a vector position at the world origin.\n",
		"body": [
			"bm:get_origin()"
		],
	},
	"docgen:battle_manager:ui_component": {
		"scope": "lua",
		"prefix": "ui_component",
		"description": "battle_manager:ui_component()\n-  -\n\nA wrapper for ui_component.\n",
		"body": [
			"ui_component()"
		],
	},
	"docgen:battle_manager:battle_manager:ui_component": {
		"scope": "lua",
		"prefix": "battle_manager:ui_component",
		"description": "battle_manager:ui_component()\n-  -\n\nA wrapper for ui_component.\n",
		"body": [
			"battle_manager:ui_component()"
		],
	},
	"docgen:battle_manager:bm:ui_component": {
		"scope": "lua",
		"prefix": "bm:ui_component",
		"description": "battle_manager:ui_component()\n-  -\n\nA wrapper for ui_component.\n",
		"body": [
			"bm:ui_component()"
		],
	},
	"docgen:battle_manager:is_any_cutscene_running": {
		"scope": "lua",
		"prefix": "is_any_cutscene_running",
		"description": "battle_manager:is_any_cutscene_running()\n-  -\n\nReturns true if any cutscene object is currently showing a cutscene.\n",
		"body": [
			"is_any_cutscene_running()"
		],
	},
	"docgen:battle_manager:battle_manager:is_any_cutscene_running": {
		"scope": "lua",
		"prefix": "battle_manager:is_any_cutscene_running",
		"description": "battle_manager:is_any_cutscene_running()\n-  -\n\nReturns true if any cutscene object is currently showing a cutscene.\n",
		"body": [
			"battle_manager:is_any_cutscene_running()"
		],
	},
	"docgen:battle_manager:bm:is_any_cutscene_running": {
		"scope": "lua",
		"prefix": "bm:is_any_cutscene_running",
		"description": "battle_manager:is_any_cutscene_running()\n-  -\n\nReturns true if any cutscene object is currently showing a cutscene.\n",
		"body": [
			"bm:is_any_cutscene_running()"
		],
	},
	"docgen:battle_manager:is_any_unit_selected": {
		"scope": "lua",
		"prefix": "is_any_unit_selected",
		"description": "battle_manager:is_any_unit_selected()\n-  -\n\nQueries the UI and returns true if any unit cards are selected.\n",
		"body": [
			"is_any_unit_selected()"
		],
	},
	"docgen:battle_manager:battle_manager:is_any_unit_selected": {
		"scope": "lua",
		"prefix": "battle_manager:is_any_unit_selected",
		"description": "battle_manager:is_any_unit_selected()\n-  -\n\nQueries the UI and returns true if any unit cards are selected.\n",
		"body": [
			"battle_manager:is_any_unit_selected()"
		],
	},
	"docgen:battle_manager:bm:is_any_unit_selected": {
		"scope": "lua",
		"prefix": "bm:is_any_unit_selected",
		"description": "battle_manager:is_any_unit_selected()\n-  -\n\nQueries the UI and returns true if any unit cards are selected.\n",
		"body": [
			"bm:is_any_unit_selected()"
		],
	},
	"docgen:battle_manager:are_all_units_selected": {
		"scope": "lua",
		"prefix": "are_all_units_selected",
		"description": "battle_manager:are_all_units_selected()\n-  -\n\nQueries the UI and returns true if all unit cards are selected.\n",
		"body": [
			"are_all_units_selected()"
		],
	},
	"docgen:battle_manager:battle_manager:are_all_units_selected": {
		"scope": "lua",
		"prefix": "battle_manager:are_all_units_selected",
		"description": "battle_manager:are_all_units_selected()\n-  -\n\nQueries the UI and returns true if all unit cards are selected.\n",
		"body": [
			"battle_manager:are_all_units_selected()"
		],
	},
	"docgen:battle_manager:bm:are_all_units_selected": {
		"scope": "lua",
		"prefix": "bm:are_all_units_selected",
		"description": "battle_manager:are_all_units_selected()\n-  -\n\nQueries the UI and returns true if all unit cards are selected.\n",
		"body": [
			"bm:are_all_units_selected()"
		],
	},
	"docgen:battle_manager:get_player_alliance_num": {
		"scope": "lua",
		"prefix": "get_player_alliance_num",
		"description": "battle_manager:get_player_alliance_num()\n-  -\n\nReturns the alliance number of the player's alliance.\n",
		"body": [
			"get_player_alliance_num()"
		],
	},
	"docgen:battle_manager:battle_manager:get_player_alliance_num": {
		"scope": "lua",
		"prefix": "battle_manager:get_player_alliance_num",
		"description": "battle_manager:get_player_alliance_num()\n-  -\n\nReturns the alliance number of the player's alliance.\n",
		"body": [
			"battle_manager:get_player_alliance_num()"
		],
	},
	"docgen:battle_manager:bm:get_player_alliance_num": {
		"scope": "lua",
		"prefix": "bm:get_player_alliance_num",
		"description": "battle_manager:get_player_alliance_num()\n-  -\n\nReturns the alliance number of the player's alliance.\n",
		"body": [
			"bm:get_player_alliance_num()"
		],
	},
	"docgen:battle_manager:get_non_player_alliance_num": {
		"scope": "lua",
		"prefix": "get_non_player_alliance_num",
		"description": "battle_manager:get_non_player_alliance_num()\n-  -\n\nReturns the alliance number of the non-player alliance.\n",
		"body": [
			"get_non_player_alliance_num()"
		],
	},
	"docgen:battle_manager:battle_manager:get_non_player_alliance_num": {
		"scope": "lua",
		"prefix": "battle_manager:get_non_player_alliance_num",
		"description": "battle_manager:get_non_player_alliance_num()\n-  -\n\nReturns the alliance number of the non-player alliance.\n",
		"body": [
			"battle_manager:get_non_player_alliance_num()"
		],
	},
	"docgen:battle_manager:bm:get_non_player_alliance_num": {
		"scope": "lua",
		"prefix": "bm:get_non_player_alliance_num",
		"description": "battle_manager:get_non_player_alliance_num()\n-  -\n\nReturns the alliance number of the non-player alliance.\n",
		"body": [
			"bm:get_non_player_alliance_num()"
		],
	},
	"docgen:battle_manager:get_player_alliance": {
		"scope": "lua",
		"prefix": "get_player_alliance",
		"description": "battle_manager:get_player_alliance()\n-  -\n\nReturns the local player's alliance object.\n",
		"body": [
			"get_player_alliance()"
		],
	},
	"docgen:battle_manager:battle_manager:get_player_alliance": {
		"scope": "lua",
		"prefix": "battle_manager:get_player_alliance",
		"description": "battle_manager:get_player_alliance()\n-  -\n\nReturns the local player's alliance object.\n",
		"body": [
			"battle_manager:get_player_alliance()"
		],
	},
	"docgen:battle_manager:bm:get_player_alliance": {
		"scope": "lua",
		"prefix": "bm:get_player_alliance",
		"description": "battle_manager:get_player_alliance()\n-  -\n\nReturns the local player's alliance object.\n",
		"body": [
			"bm:get_player_alliance()"
		],
	},
	"docgen:battle_manager:get_non_player_alliance": {
		"scope": "lua",
		"prefix": "get_non_player_alliance",
		"description": "battle_manager:get_non_player_alliance()\n-  -\n\nReturns the alliance object of the local player's enemy.\n",
		"body": [
			"get_non_player_alliance()"
		],
	},
	"docgen:battle_manager:battle_manager:get_non_player_alliance": {
		"scope": "lua",
		"prefix": "battle_manager:get_non_player_alliance",
		"description": "battle_manager:get_non_player_alliance()\n-  -\n\nReturns the alliance object of the local player's enemy.\n",
		"body": [
			"battle_manager:get_non_player_alliance()"
		],
	},
	"docgen:battle_manager:bm:get_non_player_alliance": {
		"scope": "lua",
		"prefix": "bm:get_non_player_alliance",
		"description": "battle_manager:get_non_player_alliance()\n-  -\n\nReturns the alliance object of the local player's enemy.\n",
		"body": [
			"bm:get_non_player_alliance()"
		],
	},
	"docgen:battle_manager:player_is_attacker": {
		"scope": "lua",
		"prefix": "player_is_attacker",
		"description": "battle_manager:player_is_attacker()\n-  -\n\nReturns true if the local player is the attacker in the battle.\n",
		"body": [
			"player_is_attacker()"
		],
	},
	"docgen:battle_manager:battle_manager:player_is_attacker": {
		"scope": "lua",
		"prefix": "battle_manager:player_is_attacker",
		"description": "battle_manager:player_is_attacker()\n-  -\n\nReturns true if the local player is the attacker in the battle.\n",
		"body": [
			"battle_manager:player_is_attacker()"
		],
	},
	"docgen:battle_manager:bm:player_is_attacker": {
		"scope": "lua",
		"prefix": "bm:player_is_attacker",
		"description": "battle_manager:player_is_attacker()\n-  -\n\nReturns true if the local player is the attacker in the battle.\n",
		"body": [
			"bm:player_is_attacker()"
		],
	},
	"docgen:battle_manager:get_player_army": {
		"scope": "lua",
		"prefix": "get_player_army",
		"description": "battle_manager:get_player_army()\n-  -\n\nReturns the local player's army object.\n",
		"body": [
			"get_player_army()"
		],
	},
	"docgen:battle_manager:battle_manager:get_player_army": {
		"scope": "lua",
		"prefix": "battle_manager:get_player_army",
		"description": "battle_manager:get_player_army()\n-  -\n\nReturns the local player's army object.\n",
		"body": [
			"battle_manager:get_player_army()"
		],
	},
	"docgen:battle_manager:bm:get_player_army": {
		"scope": "lua",
		"prefix": "bm:get_player_army",
		"description": "battle_manager:get_player_army()\n-  -\n\nReturns the local player's army object.\n",
		"body": [
			"bm:get_player_army()"
		],
	},
	"docgen:battle_manager:get_first_non_player_army": {
		"scope": "lua",
		"prefix": "get_first_non_player_army",
		"description": "battle_manager:get_first_non_player_army()\n-  -\n\nReturns the first army of the enemy alliance to the local player.\n",
		"body": [
			"get_first_non_player_army()"
		],
	},
	"docgen:battle_manager:battle_manager:get_first_non_player_army": {
		"scope": "lua",
		"prefix": "battle_manager:get_first_non_player_army",
		"description": "battle_manager:get_first_non_player_army()\n-  -\n\nReturns the first army of the enemy alliance to the local player.\n",
		"body": [
			"battle_manager:get_first_non_player_army()"
		],
	},
	"docgen:battle_manager:bm:get_first_non_player_army": {
		"scope": "lua",
		"prefix": "bm:get_first_non_player_army",
		"description": "battle_manager:get_first_non_player_army()\n-  -\n\nReturns the first army of the enemy alliance to the local player.\n",
		"body": [
			"bm:get_first_non_player_army()"
		],
	},
	"docgen:battle_manager:random_number": {
		"scope": "lua",
		"prefix": "random_number",
		"description": "battle_manager:random_number()\n-  -\n\nReturns a random number.\n",
		"body": [
			"random_number(${1:[opt=nil] number max value})"
		],
	},
	"docgen:battle_manager:battle_manager:random_number": {
		"scope": "lua",
		"prefix": "battle_manager:random_number",
		"description": "battle_manager:random_number()\n-  -\n\nReturns a random number.\n",
		"body": [
			"battle_manager:random_number(${1:[opt=nil] number max value})"
		],
	},
	"docgen:battle_manager:bm:random_number": {
		"scope": "lua",
		"prefix": "bm:random_number",
		"description": "battle_manager:random_number()\n-  -\n\nReturns a random number.\n",
		"body": [
			"bm:random_number(${1:[opt=nil] number max value})"
		],
	},
	"docgen:battle_manager:random_sort": {
		"scope": "lua",
		"prefix": "random_sort",
		"description": "battle_manager:random_sort()\n-  -\n\nRandomly sorts a numerically-indexed table.\n",
		"body": [
			"random_sort(${1:table numerically-indexed table})"
		],
	},
	"docgen:battle_manager:battle_manager:random_sort": {
		"scope": "lua",
		"prefix": "battle_manager:random_sort",
		"description": "battle_manager:random_sort()\n-  -\n\nRandomly sorts a numerically-indexed table.\n",
		"body": [
			"battle_manager:random_sort(${1:table numerically-indexed table})"
		],
	},
	"docgen:battle_manager:bm:random_sort": {
		"scope": "lua",
		"prefix": "bm:random_sort",
		"description": "battle_manager:random_sort()\n-  -\n\nRandomly sorts a numerically-indexed table.\n",
		"body": [
			"bm:random_sort(${1:table numerically-indexed table})"
		],
	},
	"docgen:battle_manager:random_sort_copy": {
		"scope": "lua",
		"prefix": "random_sort_copy",
		"description": "battle_manager:random_sort_copy()\n-  -\n\nRandomly sorts a numerically-indexed table.\n",
		"body": [
			"random_sort_copy(${1:table numerically-indexed table})"
		],
	},
	"docgen:battle_manager:battle_manager:random_sort_copy": {
		"scope": "lua",
		"prefix": "battle_manager:random_sort_copy",
		"description": "battle_manager:random_sort_copy()\n-  -\n\nRandomly sorts a numerically-indexed table.\n",
		"body": [
			"battle_manager:random_sort_copy(${1:table numerically-indexed table})"
		],
	},
	"docgen:battle_manager:bm:random_sort_copy": {
		"scope": "lua",
		"prefix": "bm:random_sort_copy",
		"description": "battle_manager:random_sort_copy()\n-  -\n\nRandomly sorts a numerically-indexed table.\n",
		"body": [
			"bm:random_sort_copy(${1:table numerically-indexed table})"
		],
	},
	"docgen:battle_manager:setup_battle": {
		"scope": "lua",
		"prefix": "setup_battle",
		"description": "battle_manager:setup_battle()\n-  -\n\nPackaged function to set up a scripted battle on startup, and register a function to be called when the deployment phase ends (i.\n",
		"body": [
			"setup_battle(${1:function deployment end callback})"
		],
	},
	"docgen:battle_manager:battle_manager:setup_battle": {
		"scope": "lua",
		"prefix": "battle_manager:setup_battle",
		"description": "battle_manager:setup_battle()\n-  -\n\nPackaged function to set up a scripted battle on startup, and register a function to be called when the deployment phase ends (i.\n",
		"body": [
			"battle_manager:setup_battle(${1:function deployment end callback})"
		],
	},
	"docgen:battle_manager:bm:setup_battle": {
		"scope": "lua",
		"prefix": "bm:setup_battle",
		"description": "battle_manager:setup_battle()\n-  -\n\nPackaged function to set up a scripted battle on startup, and register a function to be called when the deployment phase ends (i.\n",
		"body": [
			"bm:setup_battle(${1:function deployment end callback})"
		],
	},
	"docgen:battle_manager:register_phase_change_callback": {
		"scope": "lua",
		"prefix": "register_phase_change_callback",
		"description": "battle_manager:register_phase_change_callback()\n-  -\n\nRegisters a function to be called when a specified phase change occurs.\n",
		"body": [
			"register_phase_change_callback(${1:string phase change name}, ${2:function callback})"
		],
	},
	"docgen:battle_manager:battle_manager:register_phase_change_callback": {
		"scope": "lua",
		"prefix": "battle_manager:register_phase_change_callback",
		"description": "battle_manager:register_phase_change_callback()\n-  -\n\nRegisters a function to be called when a specified phase change occurs.\n",
		"body": [
			"battle_manager:register_phase_change_callback(${1:string phase change name}, ${2:function callback})"
		],
	},
	"docgen:battle_manager:bm:register_phase_change_callback": {
		"scope": "lua",
		"prefix": "bm:register_phase_change_callback",
		"description": "battle_manager:register_phase_change_callback()\n-  -\n\nRegisters a function to be called when a specified phase change occurs.\n",
		"body": [
			"bm:register_phase_change_callback(${1:string phase change name}, ${2:function callback})"
		],
	},
	"docgen:battle_manager:register_unit_selection_callback": {
		"scope": "lua",
		"prefix": "register_unit_selection_callback",
		"description": "battle_manager:register_unit_selection_callback()\n-  -\n\nRegisters a function to be called when a specified unit is selected by the player.\n",
		"body": [
			"register_unit_selection_callback(${1:unit subject unit}, ${2:function callback})"
		],
	},
	"docgen:battle_manager:battle_manager:register_unit_selection_callback": {
		"scope": "lua",
		"prefix": "battle_manager:register_unit_selection_callback",
		"description": "battle_manager:register_unit_selection_callback()\n-  -\n\nRegisters a function to be called when a specified unit is selected by the player.\n",
		"body": [
			"battle_manager:register_unit_selection_callback(${1:unit subject unit}, ${2:function callback})"
		],
	},
	"docgen:battle_manager:bm:register_unit_selection_callback": {
		"scope": "lua",
		"prefix": "bm:register_unit_selection_callback",
		"description": "battle_manager:register_unit_selection_callback()\n-  -\n\nRegisters a function to be called when a specified unit is selected by the player.\n",
		"body": [
			"bm:register_unit_selection_callback(${1:unit subject unit}, ${2:function callback})"
		],
	},
	"docgen:battle_manager:unregister_unit_selection_callback": {
		"scope": "lua",
		"prefix": "unregister_unit_selection_callback",
		"description": "battle_manager:unregister_unit_selection_callback()\n-  -\n\nUnregisters a function registered with battle_manager:register_unit_selection_callback.\n",
		"body": [
			"unregister_unit_selection_callback(${1:unit subject unit})"
		],
	},
	"docgen:battle_manager:battle_manager:unregister_unit_selection_callback": {
		"scope": "lua",
		"prefix": "battle_manager:unregister_unit_selection_callback",
		"description": "battle_manager:unregister_unit_selection_callback()\n-  -\n\nUnregisters a function registered with battle_manager:register_unit_selection_callback.\n",
		"body": [
			"battle_manager:unregister_unit_selection_callback(${1:unit subject unit})"
		],
	},
	"docgen:battle_manager:bm:unregister_unit_selection_callback": {
		"scope": "lua",
		"prefix": "bm:unregister_unit_selection_callback",
		"description": "battle_manager:unregister_unit_selection_callback()\n-  -\n\nUnregisters a function registered with battle_manager:register_unit_selection_callback.\n",
		"body": [
			"bm:unregister_unit_selection_callback(${1:unit subject unit})"
		],
	},
	"docgen:battle_manager:register_command_handler_callback": {
		"scope": "lua",
		"prefix": "register_command_handler_callback",
		"description": "battle_manager:register_command_handler_callback()\n-  -\n\nRegisters a function to be called when a command event is issued by the game.\n",
		"body": [
			"register_command_handler_callback(${1:string command}, ${2:function callback}, ${3:[opt=nil] string callback name})"
		],
	},
	"docgen:battle_manager:battle_manager:register_command_handler_callback": {
		"scope": "lua",
		"prefix": "battle_manager:register_command_handler_callback",
		"description": "battle_manager:register_command_handler_callback()\n-  -\n\nRegisters a function to be called when a command event is issued by the game.\n",
		"body": [
			"battle_manager:register_command_handler_callback(${1:string command}, ${2:function callback}, ${3:[opt=nil] string callback name})"
		],
	},
	"docgen:battle_manager:bm:register_command_handler_callback": {
		"scope": "lua",
		"prefix": "bm:register_command_handler_callback",
		"description": "battle_manager:register_command_handler_callback()\n-  -\n\nRegisters a function to be called when a command event is issued by the game.\n",
		"body": [
			"bm:register_command_handler_callback(${1:string command}, ${2:function callback}, ${3:[opt=nil] string callback name})"
		],
	},
	"docgen:battle_manager:unregister_command_handler_callback": {
		"scope": "lua",
		"prefix": "unregister_command_handler_callback",
		"description": "battle_manager:unregister_command_handler_callback()\n-  -\n\nUnregisters a callback function registered with battle_manager:register_command_handler_callback.\n",
		"body": [
			"unregister_command_handler_callback(${1:string command name}, ${2:string callback name})"
		],
	},
	"docgen:battle_manager:battle_manager:unregister_command_handler_callback": {
		"scope": "lua",
		"prefix": "battle_manager:unregister_command_handler_callback",
		"description": "battle_manager:unregister_command_handler_callback()\n-  -\n\nUnregisters a callback function registered with battle_manager:register_command_handler_callback.\n",
		"body": [
			"battle_manager:unregister_command_handler_callback(${1:string command name}, ${2:string callback name})"
		],
	},
	"docgen:battle_manager:bm:unregister_command_handler_callback": {
		"scope": "lua",
		"prefix": "bm:unregister_command_handler_callback",
		"description": "battle_manager:unregister_command_handler_callback()\n-  -\n\nUnregisters a callback function registered with battle_manager:register_command_handler_callback.\n",
		"body": [
			"bm:unregister_command_handler_callback(${1:string command name}, ${2:string callback name})"
		],
	},
	"docgen:battle_manager:register_input_handler_callback": {
		"scope": "lua",
		"prefix": "register_input_handler_callback",
		"description": "battle_manager:register_input_handler_callback()\n-  -\n\nRegisters a function to be called when an input event is issued by the game.\n",
		"body": [
			"register_input_handler_callback(${1:string input}, ${2:function callback}, ${3:[opt=nil] string callback name})"
		],
	},
	"docgen:battle_manager:battle_manager:register_input_handler_callback": {
		"scope": "lua",
		"prefix": "battle_manager:register_input_handler_callback",
		"description": "battle_manager:register_input_handler_callback()\n-  -\n\nRegisters a function to be called when an input event is issued by the game.\n",
		"body": [
			"battle_manager:register_input_handler_callback(${1:string input}, ${2:function callback}, ${3:[opt=nil] string callback name})"
		],
	},
	"docgen:battle_manager:bm:register_input_handler_callback": {
		"scope": "lua",
		"prefix": "bm:register_input_handler_callback",
		"description": "battle_manager:register_input_handler_callback()\n-  -\n\nRegisters a function to be called when an input event is issued by the game.\n",
		"body": [
			"bm:register_input_handler_callback(${1:string input}, ${2:function callback}, ${3:[opt=nil] string callback name})"
		],
	},
	"docgen:battle_manager:unregister_input_handler_callback": {
		"scope": "lua",
		"prefix": "unregister_input_handler_callback",
		"description": "battle_manager:unregister_input_handler_callback()\n-  -\n\nUnregisters a callback function registered with battle_manager:register_input_handler_callback.\n",
		"body": [
			"unregister_input_handler_callback(${1:string command name}, ${2:string callback name})"
		],
	},
	"docgen:battle_manager:battle_manager:unregister_input_handler_callback": {
		"scope": "lua",
		"prefix": "battle_manager:unregister_input_handler_callback",
		"description": "battle_manager:unregister_input_handler_callback()\n-  -\n\nUnregisters a callback function registered with battle_manager:register_input_handler_callback.\n",
		"body": [
			"battle_manager:unregister_input_handler_callback(${1:string command name}, ${2:string callback name})"
		],
	},
	"docgen:battle_manager:bm:unregister_input_handler_callback": {
		"scope": "lua",
		"prefix": "bm:unregister_input_handler_callback",
		"description": "battle_manager:unregister_input_handler_callback()\n-  -\n\nUnregisters a callback function registered with battle_manager:register_input_handler_callback.\n",
		"body": [
			"bm:unregister_input_handler_callback(${1:string command name}, ${2:string callback name})"
		],
	},
	"docgen:battle_manager:steal_escape_key_with_callback": {
		"scope": "lua",
		"prefix": "steal_escape_key_with_callback",
		"description": "battle_manager:steal_escape_key_with_callback()\n-  -\n\nSteals the escape key if it wasn't stolen before, and registers a callback to be called if the player presses it.\n",
		"body": [
			"steal_escape_key_with_callback(${1:string callback name}, ${2:function callback})"
		],
	},
	"docgen:battle_manager:battle_manager:steal_escape_key_with_callback": {
		"scope": "lua",
		"prefix": "battle_manager:steal_escape_key_with_callback",
		"description": "battle_manager:steal_escape_key_with_callback()\n-  -\n\nSteals the escape key if it wasn't stolen before, and registers a callback to be called if the player presses it.\n",
		"body": [
			"battle_manager:steal_escape_key_with_callback(${1:string callback name}, ${2:function callback})"
		],
	},
	"docgen:battle_manager:bm:steal_escape_key_with_callback": {
		"scope": "lua",
		"prefix": "bm:steal_escape_key_with_callback",
		"description": "battle_manager:steal_escape_key_with_callback()\n-  -\n\nSteals the escape key if it wasn't stolen before, and registers a callback to be called if the player presses it.\n",
		"body": [
			"bm:steal_escape_key_with_callback(${1:string callback name}, ${2:function callback})"
		],
	},
	"docgen:battle_manager:release_escape_key_with_callback": {
		"scope": "lua",
		"prefix": "release_escape_key_with_callback",
		"description": "battle_manager:release_escape_key_with_callback()\n-  -\n\nCancels an escape key callback registered with battle_manager:steal_escape_key_with_callback by name.\n",
		"body": [
			"release_escape_key_with_callback(${1:string callback name to cancel})"
		],
	},
	"docgen:battle_manager:battle_manager:release_escape_key_with_callback": {
		"scope": "lua",
		"prefix": "battle_manager:release_escape_key_with_callback",
		"description": "battle_manager:release_escape_key_with_callback()\n-  -\n\nCancels an escape key callback registered with battle_manager:steal_escape_key_with_callback by name.\n",
		"body": [
			"battle_manager:release_escape_key_with_callback(${1:string callback name to cancel})"
		],
	},
	"docgen:battle_manager:bm:release_escape_key_with_callback": {
		"scope": "lua",
		"prefix": "bm:release_escape_key_with_callback",
		"description": "battle_manager:release_escape_key_with_callback()\n-  -\n\nCancels an escape key callback registered with battle_manager:steal_escape_key_with_callback by name.\n",
		"body": [
			"bm:release_escape_key_with_callback(${1:string callback name to cancel})"
		],
	},
	"docgen:battle_manager:setup_victory_callback": {
		"scope": "lua",
		"prefix": "setup_victory_callback",
		"description": "battle_manager:setup_victory_callback()\n-  -\n\nEstablishes a function to be called when the battle enters VictoryCountdown phase i.\n",
		"body": [
			"setup_victory_callback(${1:function callback to call})"
		],
	},
	"docgen:battle_manager:battle_manager:setup_victory_callback": {
		"scope": "lua",
		"prefix": "battle_manager:setup_victory_callback",
		"description": "battle_manager:setup_victory_callback()\n-  -\n\nEstablishes a function to be called when the battle enters VictoryCountdown phase i.\n",
		"body": [
			"battle_manager:setup_victory_callback(${1:function callback to call})"
		],
	},
	"docgen:battle_manager:bm:setup_victory_callback": {
		"scope": "lua",
		"prefix": "bm:setup_victory_callback",
		"description": "battle_manager:setup_victory_callback()\n-  -\n\nEstablishes a function to be called when the battle enters VictoryCountdown phase i.\n",
		"body": [
			"bm:setup_victory_callback(${1:function callback to call})"
		],
	},
	"docgen:battle_manager:end_battle": {
		"scope": "lua",
		"prefix": "end_battle",
		"description": "battle_manager:end_battle()\n-  -\n\nCauses a battle to immediately end when it enters the VictoryCountdown phase, or to immediately end if it is already in that phase.\n",
		"body": [
			"end_battle()"
		],
	},
	"docgen:battle_manager:battle_manager:end_battle": {
		"scope": "lua",
		"prefix": "battle_manager:end_battle",
		"description": "battle_manager:end_battle()\n-  -\n\nCauses a battle to immediately end when it enters the VictoryCountdown phase, or to immediately end if it is already in that phase.\n",
		"body": [
			"battle_manager:end_battle()"
		],
	},
	"docgen:battle_manager:bm:end_battle": {
		"scope": "lua",
		"prefix": "bm:end_battle",
		"description": "battle_manager:end_battle()\n-  -\n\nCauses a battle to immediately end when it enters the VictoryCountdown phase, or to immediately end if it is already in that phase.\n",
		"body": [
			"bm:end_battle()"
		],
	},
	"docgen:battle_manager:register_results_callbacks": {
		"scope": "lua",
		"prefix": "register_results_callbacks",
		"description": "battle_manager:register_results_callbacks()\n-  -\n\nOld-style battle-ending handlers.\n",
		"body": [
			"register_results_callbacks(${1:function player victory callback}, ${2:function player defeat callback})"
		],
	},
	"docgen:battle_manager:battle_manager:register_results_callbacks": {
		"scope": "lua",
		"prefix": "battle_manager:register_results_callbacks",
		"description": "battle_manager:register_results_callbacks()\n-  -\n\nOld-style battle-ending handlers.\n",
		"body": [
			"battle_manager:register_results_callbacks(${1:function player victory callback}, ${2:function player defeat callback})"
		],
	},
	"docgen:battle_manager:bm:register_results_callbacks": {
		"scope": "lua",
		"prefix": "bm:register_results_callbacks",
		"description": "battle_manager:register_results_callbacks()\n-  -\n\nOld-style battle-ending handlers.\n",
		"body": [
			"bm:register_results_callbacks(${1:function player victory callback}, ${2:function player defeat callback})"
		],
	},
	"docgen:battle_manager:slow_game_over_time": {
		"scope": "lua",
		"prefix": "slow_game_over_time",
		"description": "battle_manager:slow_game_over_time()\n-  -\n\nChanges game speed from one value to another over a total time (note that this will be elongated by the slowing action) over a given number of steps.\n",
		"body": [
			"slow_game_over_time(${1:number start game speed}, ${2:number target game speed}, ${3:number duration in ms}, ${4:number steps})"
		],
	},
	"docgen:battle_manager:battle_manager:slow_game_over_time": {
		"scope": "lua",
		"prefix": "battle_manager:slow_game_over_time",
		"description": "battle_manager:slow_game_over_time()\n-  -\n\nChanges game speed from one value to another over a total time (note that this will be elongated by the slowing action) over a given number of steps.\n",
		"body": [
			"battle_manager:slow_game_over_time(${1:number start game speed}, ${2:number target game speed}, ${3:number duration in ms}, ${4:number steps})"
		],
	},
	"docgen:battle_manager:bm:slow_game_over_time": {
		"scope": "lua",
		"prefix": "bm:slow_game_over_time",
		"description": "battle_manager:slow_game_over_time()\n-  -\n\nChanges game speed from one value to another over a total time (note that this will be elongated by the slowing action) over a given number of steps.\n",
		"body": [
			"bm:slow_game_over_time(${1:number start game speed}, ${2:number target game speed}, ${3:number duration in ms}, ${4:number steps})"
		],
	},
	"docgen:battle_manager:pause": {
		"scope": "lua",
		"prefix": "pause",
		"description": "battle_manager:pause()\n-  -\n\nPauses the battle.\n",
		"body": [
			"pause()"
		],
	},
	"docgen:battle_manager:battle_manager:pause": {
		"scope": "lua",
		"prefix": "battle_manager:pause",
		"description": "battle_manager:pause()\n-  -\n\nPauses the battle.\n",
		"body": [
			"battle_manager:pause()"
		],
	},
	"docgen:battle_manager:bm:pause": {
		"scope": "lua",
		"prefix": "bm:pause",
		"description": "battle_manager:pause()\n-  -\n\nPauses the battle.\n",
		"body": [
			"bm:pause()"
		],
	},
	"docgen:battle_manager:callback": {
		"scope": "lua",
		"prefix": "callback",
		"description": "battle_manager:callback()\n-  -\n\nExposes the callback function from the timer_manager object.\n",
		"body": [
			"callback(${1:function callback to call}, ${2:number delay in ms}, ${3:[opt=nil] string callback name})"
		],
	},
	"docgen:battle_manager:battle_manager:callback": {
		"scope": "lua",
		"prefix": "battle_manager:callback",
		"description": "battle_manager:callback()\n-  -\n\nExposes the callback function from the timer_manager object.\n",
		"body": [
			"battle_manager:callback(${1:function callback to call}, ${2:number delay in ms}, ${3:[opt=nil] string callback name})"
		],
	},
	"docgen:battle_manager:bm:callback": {
		"scope": "lua",
		"prefix": "bm:callback",
		"description": "battle_manager:callback()\n-  -\n\nExposes the callback function from the timer_manager object.\n",
		"body": [
			"bm:callback(${1:function callback to call}, ${2:number delay in ms}, ${3:[opt=nil] string callback name})"
		],
	},
	"docgen:battle_manager:repeat_callback": {
		"scope": "lua",
		"prefix": "repeat_callback",
		"description": "battle_manager:repeat_callback()\n-  -\n\nExposes the repeat_callback function from the timer_manager object.\n",
		"body": [
			"repeat_callback(${1:function callback to call}, ${2:number delay in ms}, ${3:[opt=nil] string callback name})"
		],
	},
	"docgen:battle_manager:battle_manager:repeat_callback": {
		"scope": "lua",
		"prefix": "battle_manager:repeat_callback",
		"description": "battle_manager:repeat_callback()\n-  -\n\nExposes the repeat_callback function from the timer_manager object.\n",
		"body": [
			"battle_manager:repeat_callback(${1:function callback to call}, ${2:number delay in ms}, ${3:[opt=nil] string callback name})"
		],
	},
	"docgen:battle_manager:bm:repeat_callback": {
		"scope": "lua",
		"prefix": "bm:repeat_callback",
		"description": "battle_manager:repeat_callback()\n-  -\n\nExposes the repeat_callback function from the timer_manager object.\n",
		"body": [
			"bm:repeat_callback(${1:function callback to call}, ${2:number delay in ms}, ${3:[opt=nil] string callback name})"
		],
	},
	"docgen:battle_manager:register_singleshot_timer": {
		"scope": "lua",
		"prefix": "register_singleshot_timer",
		"description": "battle_manager:register_singleshot_timer()\n-  -\n\nExposes the register_singleshot_timer function from the timer_manager object.\n",
		"body": [
			"register_singleshot_timer(${1:string function name}, ${2:number time in ms})"
		],
	},
	"docgen:battle_manager:battle_manager:register_singleshot_timer": {
		"scope": "lua",
		"prefix": "battle_manager:register_singleshot_timer",
		"description": "battle_manager:register_singleshot_timer()\n-  -\n\nExposes the register_singleshot_timer function from the timer_manager object.\n",
		"body": [
			"battle_manager:register_singleshot_timer(${1:string function name}, ${2:number time in ms})"
		],
	},
	"docgen:battle_manager:bm:register_singleshot_timer": {
		"scope": "lua",
		"prefix": "bm:register_singleshot_timer",
		"description": "battle_manager:register_singleshot_timer()\n-  -\n\nExposes the register_singleshot_timer function from the timer_manager object.\n",
		"body": [
			"bm:register_singleshot_timer(${1:string function name}, ${2:number time in ms})"
		],
	},
	"docgen:battle_manager:register_repeating_timer": {
		"scope": "lua",
		"prefix": "register_repeating_timer",
		"description": "battle_manager:register_repeating_timer()\n-  -\n\nExposes the register_repeating_timer function from the timer_manager object.\n",
		"body": [
			"register_repeating_timer(${1:string function name}, ${2:number time in ms})"
		],
	},
	"docgen:battle_manager:battle_manager:register_repeating_timer": {
		"scope": "lua",
		"prefix": "battle_manager:register_repeating_timer",
		"description": "battle_manager:register_repeating_timer()\n-  -\n\nExposes the register_repeating_timer function from the timer_manager object.\n",
		"body": [
			"battle_manager:register_repeating_timer(${1:string function name}, ${2:number time in ms})"
		],
	},
	"docgen:battle_manager:bm:register_repeating_timer": {
		"scope": "lua",
		"prefix": "bm:register_repeating_timer",
		"description": "battle_manager:register_repeating_timer()\n-  -\n\nExposes the register_repeating_timer function from the timer_manager object.\n",
		"body": [
			"bm:register_repeating_timer(${1:string function name}, ${2:number time in ms})"
		],
	},
	"docgen:battle_manager:unregister_timer": {
		"scope": "lua",
		"prefix": "unregister_timer",
		"description": "battle_manager:unregister_timer()\n-  -\n\nExposes the unregister_timer function from the timer_manager object.\n",
		"body": [
			"unregister_timer(${1:string function name})"
		],
	},
	"docgen:battle_manager:battle_manager:unregister_timer": {
		"scope": "lua",
		"prefix": "battle_manager:unregister_timer",
		"description": "battle_manager:unregister_timer()\n-  -\n\nExposes the unregister_timer function from the timer_manager object.\n",
		"body": [
			"battle_manager:unregister_timer(${1:string function name})"
		],
	},
	"docgen:battle_manager:bm:unregister_timer": {
		"scope": "lua",
		"prefix": "bm:unregister_timer",
		"description": "battle_manager:unregister_timer()\n-  -\n\nExposes the unregister_timer function from the timer_manager object.\n",
		"body": [
			"bm:unregister_timer(${1:string function name})"
		],
	},
	"docgen:battle_manager:watch": {
		"scope": "lua",
		"prefix": "watch",
		"description": "battle_manager:watch()\n-  -\n\nEstablishes a new watch.\n",
		"body": [
			"watch(${1:function condition}, ${2:function condition}, ${3:number wait time}, ${4:function target callback}, ${5:[opt=nil] string watch name})"
		],
	},
	"docgen:battle_manager:battle_manager:watch": {
		"scope": "lua",
		"prefix": "battle_manager:watch",
		"description": "battle_manager:watch()\n-  -\n\nEstablishes a new watch.\n",
		"body": [
			"battle_manager:watch(${1:function condition}, ${2:function condition}, ${3:number wait time}, ${4:function target callback}, ${5:[opt=nil] string watch name})"
		],
	},
	"docgen:battle_manager:bm:watch": {
		"scope": "lua",
		"prefix": "bm:watch",
		"description": "battle_manager:watch()\n-  -\n\nEstablishes a new watch.\n",
		"body": [
			"bm:watch(${1:function condition}, ${2:function condition}, ${3:number wait time}, ${4:function target callback}, ${5:[opt=nil] string watch name})"
		],
	},
	"docgen:battle_manager:remove_process": {
		"scope": "lua",
		"prefix": "remove_process",
		"description": "battle_manager:remove_process()\n-  -\n\nStops and removes any watch OR callback with the supplied name.\n",
		"body": [
			"remove_process(${1:string name})"
		],
	},
	"docgen:battle_manager:battle_manager:remove_process": {
		"scope": "lua",
		"prefix": "battle_manager:remove_process",
		"description": "battle_manager:remove_process()\n-  -\n\nStops and removes any watch OR callback with the supplied name.\n",
		"body": [
			"battle_manager:remove_process(${1:string name})"
		],
	},
	"docgen:battle_manager:bm:remove_process": {
		"scope": "lua",
		"prefix": "bm:remove_process",
		"description": "battle_manager:remove_process()\n-  -\n\nStops and removes any watch OR callback with the supplied name.\n",
		"body": [
			"bm:remove_process(${1:string name})"
		],
	},
	"docgen:battle_manager:remove_process_from_watch_list": {
		"scope": "lua",
		"prefix": "remove_process_from_watch_list",
		"description": "battle_manager:remove_process_from_watch_list()\n-  -\n\nStops and removes any watch with the supplied name.\n",
		"body": [
			"remove_process_from_watch_list(${1:string name})"
		],
	},
	"docgen:battle_manager:battle_manager:remove_process_from_watch_list": {
		"scope": "lua",
		"prefix": "battle_manager:remove_process_from_watch_list",
		"description": "battle_manager:remove_process_from_watch_list()\n-  -\n\nStops and removes any watch with the supplied name.\n",
		"body": [
			"battle_manager:remove_process_from_watch_list(${1:string name})"
		],
	},
	"docgen:battle_manager:bm:remove_process_from_watch_list": {
		"scope": "lua",
		"prefix": "bm:remove_process_from_watch_list",
		"description": "battle_manager:remove_process_from_watch_list()\n-  -\n\nStops and removes any watch with the supplied name.\n",
		"body": [
			"bm:remove_process_from_watch_list(${1:string name})"
		],
	},
	"docgen:battle_manager:print_watch_list": {
		"scope": "lua",
		"prefix": "print_watch_list",
		"description": "battle_manager:print_watch_list()\n-  -\n\nDebug command to dump the watch list to the console output spool.\n",
		"body": [
			"print_watch_list()"
		],
	},
	"docgen:battle_manager:battle_manager:print_watch_list": {
		"scope": "lua",
		"prefix": "battle_manager:print_watch_list",
		"description": "battle_manager:print_watch_list()\n-  -\n\nDebug command to dump the watch list to the console output spool.\n",
		"body": [
			"battle_manager:print_watch_list()"
		],
	},
	"docgen:battle_manager:bm:print_watch_list": {
		"scope": "lua",
		"prefix": "bm:print_watch_list",
		"description": "battle_manager:print_watch_list()\n-  -\n\nDebug command to dump the watch list to the console output spool.\n",
		"body": [
			"bm:print_watch_list()"
		],
	},
	"docgen:battle_manager:clear_watches_and_callbacks": {
		"scope": "lua",
		"prefix": "clear_watches_and_callbacks",
		"description": "battle_manager:clear_watches_and_callbacks()\n-  -\n\nCancels all running watches and callbacks.\n",
		"body": [
			"clear_watches_and_callbacks()"
		],
	},
	"docgen:battle_manager:battle_manager:clear_watches_and_callbacks": {
		"scope": "lua",
		"prefix": "battle_manager:clear_watches_and_callbacks",
		"description": "battle_manager:clear_watches_and_callbacks()\n-  -\n\nCancels all running watches and callbacks.\n",
		"body": [
			"battle_manager:clear_watches_and_callbacks()"
		],
	},
	"docgen:battle_manager:bm:clear_watches_and_callbacks": {
		"scope": "lua",
		"prefix": "bm:clear_watches_and_callbacks",
		"description": "battle_manager:clear_watches_and_callbacks()\n-  -\n\nCancels all running watches and callbacks.\n",
		"body": [
			"bm:clear_watches_and_callbacks()"
		],
	},
	"docgen:battle_manager:set_load_balancing": {
		"scope": "lua",
		"prefix": "set_load_balancing",
		"description": "battle_manager:set_load_balancing()\n-  -\n\nBy default the watch system performs load balancing, where it tries to stagger its running watches so they don't all process on the same tick.\n",
		"body": [
			"set_load_balancing()"
		],
	},
	"docgen:battle_manager:battle_manager:set_load_balancing": {
		"scope": "lua",
		"prefix": "battle_manager:set_load_balancing",
		"description": "battle_manager:set_load_balancing()\n-  -\n\nBy default the watch system performs load balancing, where it tries to stagger its running watches so they don't all process on the same tick.\n",
		"body": [
			"battle_manager:set_load_balancing()"
		],
	},
	"docgen:battle_manager:bm:set_load_balancing": {
		"scope": "lua",
		"prefix": "bm:set_load_balancing",
		"description": "battle_manager:set_load_balancing()\n-  -\n\nBy default the watch system performs load balancing, where it tries to stagger its running watches so they don't all process on the same tick.\n",
		"body": [
			"bm:set_load_balancing()"
		],
	},
	"docgen:battle_manager:queue_advisor": {
		"scope": "lua",
		"prefix": "queue_advisor",
		"description": "battle_manager:queue_advisor()\n-  -\n\nEnqueues a line of advice for delivery to the player.\n",
		"body": [
			"queue_advisor(${1:string advice key}, ${2:[opt=0] number forced duration}, ${3:[opt=false] boolean debug}, ${4:[opt=nil] function start callback}, ${5:[opt=0] number start callback wait}, ${6:[opt=nil] playback condition})"
		],
	},
	"docgen:battle_manager:battle_manager:queue_advisor": {
		"scope": "lua",
		"prefix": "battle_manager:queue_advisor",
		"description": "battle_manager:queue_advisor()\n-  -\n\nEnqueues a line of advice for delivery to the player.\n",
		"body": [
			"battle_manager:queue_advisor(${1:string advice key}, ${2:[opt=0] number forced duration}, ${3:[opt=false] boolean debug}, ${4:[opt=nil] function start callback}, ${5:[opt=0] number start callback wait}, ${6:[opt=nil] playback condition})"
		],
	},
	"docgen:battle_manager:bm:queue_advisor": {
		"scope": "lua",
		"prefix": "bm:queue_advisor",
		"description": "battle_manager:queue_advisor()\n-  -\n\nEnqueues a line of advice for delivery to the player.\n",
		"body": [
			"bm:queue_advisor(${1:string advice key}, ${2:[opt=0] number forced duration}, ${3:[opt=false] boolean debug}, ${4:[opt=nil] function start callback}, ${5:[opt=0] number start callback wait}, ${6:[opt=nil] playback condition})"
		],
	},
	"docgen:battle_manager:stop_advisor_queue": {
		"scope": "lua",
		"prefix": "stop_advisor_queue",
		"description": "battle_manager:stop_advisor_queue()\n-  -\n\nCancels any running advice, and clears any subsequent advice that may be queued.\n",
		"body": [
			"stop_advisor_queue(${1:[opt=false] boolean close advisor}, ${2:[opt=false] boolean force immediate stop})"
		],
	},
	"docgen:battle_manager:battle_manager:stop_advisor_queue": {
		"scope": "lua",
		"prefix": "battle_manager:stop_advisor_queue",
		"description": "battle_manager:stop_advisor_queue()\n-  -\n\nCancels any running advice, and clears any subsequent advice that may be queued.\n",
		"body": [
			"battle_manager:stop_advisor_queue(${1:[opt=false] boolean close advisor}, ${2:[opt=false] boolean force immediate stop})"
		],
	},
	"docgen:battle_manager:bm:stop_advisor_queue": {
		"scope": "lua",
		"prefix": "bm:stop_advisor_queue",
		"description": "battle_manager:stop_advisor_queue()\n-  -\n\nCancels any running advice, and clears any subsequent advice that may be queued.\n",
		"body": [
			"bm:stop_advisor_queue(${1:[opt=false] boolean close advisor}, ${2:[opt=false] boolean force immediate stop})"
		],
	},
	"docgen:battle_manager:advice_cease": {
		"scope": "lua",
		"prefix": "advice_cease",
		"description": "battle_manager:advice_cease()\n-  -\n\nStops the advisor queue and prevents any more advice from being queued.\n",
		"body": [
			"advice_cease()"
		],
	},
	"docgen:battle_manager:battle_manager:advice_cease": {
		"scope": "lua",
		"prefix": "battle_manager:advice_cease",
		"description": "battle_manager:advice_cease()\n-  -\n\nStops the advisor queue and prevents any more advice from being queued.\n",
		"body": [
			"battle_manager:advice_cease()"
		],
	},
	"docgen:battle_manager:bm:advice_cease": {
		"scope": "lua",
		"prefix": "bm:advice_cease",
		"description": "battle_manager:advice_cease()\n-  -\n\nStops the advisor queue and prevents any more advice from being queued.\n",
		"body": [
			"bm:advice_cease()"
		],
	},
	"docgen:battle_manager:advice_resume": {
		"scope": "lua",
		"prefix": "advice_resume",
		"description": "battle_manager:advice_resume()\n-  -\n\nAllows advice to resume after battle_manager:advice_cease called.\n",
		"body": [
			"advice_resume()"
		],
	},
	"docgen:battle_manager:battle_manager:advice_resume": {
		"scope": "lua",
		"prefix": "battle_manager:advice_resume",
		"description": "battle_manager:advice_resume()\n-  -\n\nAllows advice to resume after battle_manager:advice_cease called.\n",
		"body": [
			"battle_manager:advice_resume()"
		],
	},
	"docgen:battle_manager:bm:advice_resume": {
		"scope": "lua",
		"prefix": "bm:advice_resume",
		"description": "battle_manager:advice_resume()\n-  -\n\nAllows advice to resume after battle_manager:advice_cease called.\n",
		"body": [
			"bm:advice_resume()"
		],
	},
	"docgen:battle_manager:stop_advice_on_battle_end": {
		"scope": "lua",
		"prefix": "stop_advice_on_battle_end",
		"description": "battle_manager:stop_advice_on_battle_end()\n-  -\n\nEstablishes a listener which stops the advice system as soon as the battle results panel appears.\n",
		"body": [
			"stop_advice_on_battle_end()"
		],
	},
	"docgen:battle_manager:battle_manager:stop_advice_on_battle_end": {
		"scope": "lua",
		"prefix": "battle_manager:stop_advice_on_battle_end",
		"description": "battle_manager:stop_advice_on_battle_end()\n-  -\n\nEstablishes a listener which stops the advice system as soon as the battle results panel appears.\n",
		"body": [
			"battle_manager:stop_advice_on_battle_end()"
		],
	},
	"docgen:battle_manager:bm:stop_advice_on_battle_end": {
		"scope": "lua",
		"prefix": "bm:stop_advice_on_battle_end",
		"description": "battle_manager:stop_advice_on_battle_end()\n-  -\n\nEstablishes a listener which stops the advice system as soon as the battle results panel appears.\n",
		"body": [
			"bm:stop_advice_on_battle_end()"
		],
	},
	"docgen:battle_manager:set_close_queue_advice": {
		"scope": "lua",
		"prefix": "set_close_queue_advice",
		"description": "battle_manager:set_close_queue_advice()\n-  -\n\nSets whether the advisor system should close the advisor panel once an item of advice has finished playing.\n",
		"body": [
			"set_close_queue_advice(${1:[opt=true] boolean value})"
		],
	},
	"docgen:battle_manager:battle_manager:set_close_queue_advice": {
		"scope": "lua",
		"prefix": "battle_manager:set_close_queue_advice",
		"description": "battle_manager:set_close_queue_advice()\n-  -\n\nSets whether the advisor system should close the advisor panel once an item of advice has finished playing.\n",
		"body": [
			"battle_manager:set_close_queue_advice(${1:[opt=true] boolean value})"
		],
	},
	"docgen:battle_manager:bm:set_close_queue_advice": {
		"scope": "lua",
		"prefix": "bm:set_close_queue_advice",
		"description": "battle_manager:set_close_queue_advice()\n-  -\n\nSets whether the advisor system should close the advisor panel once an item of advice has finished playing.\n",
		"body": [
			"bm:set_close_queue_advice(${1:[opt=true] boolean value})"
		],
	},
	"docgen:battle_manager:has_advice_played_this_battle": {
		"scope": "lua",
		"prefix": "has_advice_played_this_battle",
		"description": "battle_manager:has_advice_played_this_battle()\n-  -\n\nReturns true if any advice has played in this battle session\n",
		"body": [
			"has_advice_played_this_battle()"
		],
	},
	"docgen:battle_manager:battle_manager:has_advice_played_this_battle": {
		"scope": "lua",
		"prefix": "battle_manager:has_advice_played_this_battle",
		"description": "battle_manager:has_advice_played_this_battle()\n-  -\n\nReturns true if any advice has played in this battle session\n",
		"body": [
			"battle_manager:has_advice_played_this_battle()"
		],
	},
	"docgen:battle_manager:bm:has_advice_played_this_battle": {
		"scope": "lua",
		"prefix": "bm:has_advice_played_this_battle",
		"description": "battle_manager:has_advice_played_this_battle()\n-  -\n\nReturns true if any advice has played in this battle session\n",
		"body": [
			"bm:has_advice_played_this_battle()"
		],
	},
	"docgen:battle_manager:modify_advice": {
		"scope": "lua",
		"prefix": "modify_advice",
		"description": "battle_manager:modify_advice()\n-  -\n\nModifies the advisor panel to show the progress/close button in the bottom right, and also to highlight this button with an animated ring around it.\n",
		"body": [
			"modify_advice(${1:[opt=false] boolean show button}, ${2:[opt=false] boolean show highlight})"
		],
	},
	"docgen:battle_manager:battle_manager:modify_advice": {
		"scope": "lua",
		"prefix": "battle_manager:modify_advice",
		"description": "battle_manager:modify_advice()\n-  -\n\nModifies the advisor panel to show the progress/close button in the bottom right, and also to highlight this button with an animated ring around it.\n",
		"body": [
			"battle_manager:modify_advice(${1:[opt=false] boolean show button}, ${2:[opt=false] boolean show highlight})"
		],
	},
	"docgen:battle_manager:bm:modify_advice": {
		"scope": "lua",
		"prefix": "bm:modify_advice",
		"description": "battle_manager:modify_advice()\n-  -\n\nModifies the advisor panel to show the progress/close button in the bottom right, and also to highlight this button with an animated ring around it.\n",
		"body": [
			"bm:modify_advice(${1:[opt=false] boolean show button}, ${2:[opt=false] boolean show highlight})"
		],
	},
	"docgen:battle_manager:progress_on_advice_dismissed": {
		"scope": "lua",
		"prefix": "progress_on_advice_dismissed",
		"description": "battle_manager:progress_on_advice_dismissed()\n-  -\n\nCalls a supplied callback when the advisor panel is closed for any reason.\n",
		"body": [
			"progress_on_advice_dismissed(${1:function callback to call}, ${2:[opt=0] number delay}, ${3:[opt=false] boolean highlight on finish})"
		],
	},
	"docgen:battle_manager:battle_manager:progress_on_advice_dismissed": {
		"scope": "lua",
		"prefix": "battle_manager:progress_on_advice_dismissed",
		"description": "battle_manager:progress_on_advice_dismissed()\n-  -\n\nCalls a supplied callback when the advisor panel is closed for any reason.\n",
		"body": [
			"battle_manager:progress_on_advice_dismissed(${1:function callback to call}, ${2:[opt=0] number delay}, ${3:[opt=false] boolean highlight on finish})"
		],
	},
	"docgen:battle_manager:bm:progress_on_advice_dismissed": {
		"scope": "lua",
		"prefix": "bm:progress_on_advice_dismissed",
		"description": "battle_manager:progress_on_advice_dismissed()\n-  -\n\nCalls a supplied callback when the advisor panel is closed for any reason.\n",
		"body": [
			"bm:progress_on_advice_dismissed(${1:function callback to call}, ${2:[opt=0] number delay}, ${3:[opt=false] boolean highlight on finish})"
		],
	},
	"docgen:battle_manager:cancel_progress_on_advice_dismissed": {
		"scope": "lua",
		"prefix": "cancel_progress_on_advice_dismissed",
		"description": "battle_manager:cancel_progress_on_advice_dismissed()\n-  -\n\nCancels a running battle_manager:progress_on_advice_dismissed process.\n",
		"body": [
			"cancel_progress_on_advice_dismissed()"
		],
	},
	"docgen:battle_manager:battle_manager:cancel_progress_on_advice_dismissed": {
		"scope": "lua",
		"prefix": "battle_manager:cancel_progress_on_advice_dismissed",
		"description": "battle_manager:cancel_progress_on_advice_dismissed()\n-  -\n\nCancels a running battle_manager:progress_on_advice_dismissed process.\n",
		"body": [
			"battle_manager:cancel_progress_on_advice_dismissed()"
		],
	},
	"docgen:battle_manager:bm:cancel_progress_on_advice_dismissed": {
		"scope": "lua",
		"prefix": "bm:cancel_progress_on_advice_dismissed",
		"description": "battle_manager:cancel_progress_on_advice_dismissed()\n-  -\n\nCancels a running battle_manager:progress_on_advice_dismissed process.\n",
		"body": [
			"bm:cancel_progress_on_advice_dismissed()"
		],
	},
	"docgen:battle_manager:progress_on_advice_dismissed_immediate_highlight": {
		"scope": "lua",
		"prefix": "progress_on_advice_dismissed_immediate_highlight",
		"description": "battle_manager:progress_on_advice_dismissed_immediate_highlight()\n-  -\n\nCauses a battle_manager:progress_on_advice_dismissed process that is listening for the advice to finish so that it can highlight the close button (i.\n",
		"body": [
			"progress_on_advice_dismissed_immediate_highlight()"
		],
	},
	"docgen:battle_manager:battle_manager:progress_on_advice_dismissed_immediate_highlight": {
		"scope": "lua",
		"prefix": "battle_manager:progress_on_advice_dismissed_immediate_highlight",
		"description": "battle_manager:progress_on_advice_dismissed_immediate_highlight()\n-  -\n\nCauses a battle_manager:progress_on_advice_dismissed process that is listening for the advice to finish so that it can highlight the close button (i.\n",
		"body": [
			"battle_manager:progress_on_advice_dismissed_immediate_highlight()"
		],
	},
	"docgen:battle_manager:bm:progress_on_advice_dismissed_immediate_highlight": {
		"scope": "lua",
		"prefix": "bm:progress_on_advice_dismissed_immediate_highlight",
		"description": "battle_manager:progress_on_advice_dismissed_immediate_highlight()\n-  -\n\nCauses a battle_manager:progress_on_advice_dismissed process that is listening for the advice to finish so that it can highlight the close button (i.\n",
		"body": [
			"bm:progress_on_advice_dismissed_immediate_highlight()"
		],
	},
	"docgen:battle_manager:progress_on_advice_finished": {
		"scope": "lua",
		"prefix": "progress_on_advice_finished",
		"description": "battle_manager:progress_on_advice_finished()\n-  -\n\nCalls a supplied callback when the advisor has stopped playing an audible sound.\n",
		"body": [
			"progress_on_advice_finished(${1:function callback to call}, ${2:[opt=0] number delay}, ${3:[opt=5000] number playtime})"
		],
	},
	"docgen:battle_manager:battle_manager:progress_on_advice_finished": {
		"scope": "lua",
		"prefix": "battle_manager:progress_on_advice_finished",
		"description": "battle_manager:progress_on_advice_finished()\n-  -\n\nCalls a supplied callback when the advisor has stopped playing an audible sound.\n",
		"body": [
			"battle_manager:progress_on_advice_finished(${1:function callback to call}, ${2:[opt=0] number delay}, ${3:[opt=5000] number playtime})"
		],
	},
	"docgen:battle_manager:bm:progress_on_advice_finished": {
		"scope": "lua",
		"prefix": "bm:progress_on_advice_finished",
		"description": "battle_manager:progress_on_advice_finished()\n-  -\n\nCalls a supplied callback when the advisor has stopped playing an audible sound.\n",
		"body": [
			"bm:progress_on_advice_finished(${1:function callback to call}, ${2:[opt=0] number delay}, ${3:[opt=5000] number playtime})"
		],
	},
	"docgen:battle_manager:cancel_progress_on_advice_finished": {
		"scope": "lua",
		"prefix": "cancel_progress_on_advice_finished",
		"description": "battle_manager:cancel_progress_on_advice_finished()\n-  -\n\nCancels a running battle_manager:progress_on_advice_finished process.\n",
		"body": [
			"cancel_progress_on_advice_finished()"
		],
	},
	"docgen:battle_manager:battle_manager:cancel_progress_on_advice_finished": {
		"scope": "lua",
		"prefix": "battle_manager:cancel_progress_on_advice_finished",
		"description": "battle_manager:cancel_progress_on_advice_finished()\n-  -\n\nCancels a running battle_manager:progress_on_advice_finished process.\n",
		"body": [
			"battle_manager:cancel_progress_on_advice_finished()"
		],
	},
	"docgen:battle_manager:bm:cancel_progress_on_advice_finished": {
		"scope": "lua",
		"prefix": "bm:cancel_progress_on_advice_finished",
		"description": "battle_manager:cancel_progress_on_advice_finished()\n-  -\n\nCancels a running battle_manager:progress_on_advice_finished process.\n",
		"body": [
			"bm:cancel_progress_on_advice_finished()"
		],
	},
	"docgen:battle_manager:set_objective": {
		"scope": "lua",
		"prefix": "set_objective",
		"description": "battle_manager:set_objective()\n-  -\n\nPass-through function for objectives_manager:set_objective on the objectives manager.\n",
		"body": [
			"set_objective(${1:string objective key}, ${2:[opt=nil] number param a, First numeric objective parameter. If set, the objective will be presented to the player in the form [objective text]: [param a] number param a}, ${3:[opt=nil] number param b, Second numeric objective parameter. A value for the first must be set if this is used. If set, the objective will be presented to the player in the form [objective text]: [param a] / [param b] number param b})"
		],
	},
	"docgen:battle_manager:battle_manager:set_objective": {
		"scope": "lua",
		"prefix": "battle_manager:set_objective",
		"description": "battle_manager:set_objective()\n-  -\n\nPass-through function for objectives_manager:set_objective on the objectives manager.\n",
		"body": [
			"battle_manager:set_objective(${1:string objective key}, ${2:[opt=nil] number param a, First numeric objective parameter. If set, the objective will be presented to the player in the form [objective text]: [param a] number param a}, ${3:[opt=nil] number param b, Second numeric objective parameter. A value for the first must be set if this is used. If set, the objective will be presented to the player in the form [objective text]: [param a] / [param b] number param b})"
		],
	},
	"docgen:battle_manager:bm:set_objective": {
		"scope": "lua",
		"prefix": "bm:set_objective",
		"description": "battle_manager:set_objective()\n-  -\n\nPass-through function for objectives_manager:set_objective on the objectives manager.\n",
		"body": [
			"bm:set_objective(${1:string objective key}, ${2:[opt=nil] number param a, First numeric objective parameter. If set, the objective will be presented to the player in the form [objective text]: [param a] number param a}, ${3:[opt=nil] number param b, Second numeric objective parameter. A value for the first must be set if this is used. If set, the objective will be presented to the player in the form [objective text]: [param a] / [param b] number param b})"
		],
	},
	"docgen:battle_manager:complete_objective": {
		"scope": "lua",
		"prefix": "complete_objective",
		"description": "battle_manager:complete_objective()\n-  -\n\nPass-through function for objectives_manager:complete_objective on the objectives manager.\n",
		"body": [
			"complete_objective(${1:string objective key})"
		],
	},
	"docgen:battle_manager:battle_manager:complete_objective": {
		"scope": "lua",
		"prefix": "battle_manager:complete_objective",
		"description": "battle_manager:complete_objective()\n-  -\n\nPass-through function for objectives_manager:complete_objective on the objectives manager.\n",
		"body": [
			"battle_manager:complete_objective(${1:string objective key})"
		],
	},
	"docgen:battle_manager:bm:complete_objective": {
		"scope": "lua",
		"prefix": "bm:complete_objective",
		"description": "battle_manager:complete_objective()\n-  -\n\nPass-through function for objectives_manager:complete_objective on the objectives manager.\n",
		"body": [
			"bm:complete_objective(${1:string objective key})"
		],
	},
	"docgen:battle_manager:fail_objective": {
		"scope": "lua",
		"prefix": "fail_objective",
		"description": "battle_manager:fail_objective()\n-  -\n\nPass-through function for objectives_manager:fail_objective on the objectives manager.\n",
		"body": [
			"fail_objective(${1:string objective key})"
		],
	},
	"docgen:battle_manager:battle_manager:fail_objective": {
		"scope": "lua",
		"prefix": "battle_manager:fail_objective",
		"description": "battle_manager:fail_objective()\n-  -\n\nPass-through function for objectives_manager:fail_objective on the objectives manager.\n",
		"body": [
			"battle_manager:fail_objective(${1:string objective key})"
		],
	},
	"docgen:battle_manager:bm:fail_objective": {
		"scope": "lua",
		"prefix": "bm:fail_objective",
		"description": "battle_manager:fail_objective()\n-  -\n\nPass-through function for objectives_manager:fail_objective on the objectives manager.\n",
		"body": [
			"bm:fail_objective(${1:string objective key})"
		],
	},
	"docgen:battle_manager:remove_objective": {
		"scope": "lua",
		"prefix": "remove_objective",
		"description": "battle_manager:remove_objective()\n-  -\n\nPass-through function for objectives_manager:remove_objective on the objectives manager.\n",
		"body": [
			"remove_objective(${1:string objective key})"
		],
	},
	"docgen:battle_manager:battle_manager:remove_objective": {
		"scope": "lua",
		"prefix": "battle_manager:remove_objective",
		"description": "battle_manager:remove_objective()\n-  -\n\nPass-through function for objectives_manager:remove_objective on the objectives manager.\n",
		"body": [
			"battle_manager:remove_objective(${1:string objective key})"
		],
	},
	"docgen:battle_manager:bm:remove_objective": {
		"scope": "lua",
		"prefix": "bm:remove_objective",
		"description": "battle_manager:remove_objective()\n-  -\n\nPass-through function for objectives_manager:remove_objective on the objectives manager.\n",
		"body": [
			"bm:remove_objective(${1:string objective key})"
		],
	},
	"docgen:battle_manager:activate_objective_chain": {
		"scope": "lua",
		"prefix": "activate_objective_chain",
		"description": "battle_manager:activate_objective_chain()\n-  -\n\nPass-through function for objectives_manager:activate_objective_chain.\n",
		"body": [
			"activate_objective_chain(${1:string chain name}, ${2:string objective key}, ${3:[opt=nil] number number param a}, ${4:[opt=nil] number number param b})"
		],
	},
	"docgen:battle_manager:battle_manager:activate_objective_chain": {
		"scope": "lua",
		"prefix": "battle_manager:activate_objective_chain",
		"description": "battle_manager:activate_objective_chain()\n-  -\n\nPass-through function for objectives_manager:activate_objective_chain.\n",
		"body": [
			"battle_manager:activate_objective_chain(${1:string chain name}, ${2:string objective key}, ${3:[opt=nil] number number param a}, ${4:[opt=nil] number number param b})"
		],
	},
	"docgen:battle_manager:bm:activate_objective_chain": {
		"scope": "lua",
		"prefix": "bm:activate_objective_chain",
		"description": "battle_manager:activate_objective_chain()\n-  -\n\nPass-through function for objectives_manager:activate_objective_chain.\n",
		"body": [
			"bm:activate_objective_chain(${1:string chain name}, ${2:string objective key}, ${3:[opt=nil] number number param a}, ${4:[opt=nil] number number param b})"
		],
	},
	"docgen:battle_manager:update_objective_chain": {
		"scope": "lua",
		"prefix": "update_objective_chain",
		"description": "battle_manager:update_objective_chain()\n-  -\n\nPass-through function for objectives_manager:update_objective_chain.\n",
		"body": [
			"update_objective_chain(${1:string chain name}, ${2:string objective key}, ${3:[opt=nil] number number param a}, ${4:[opt=nil] number number param b})"
		],
	},
	"docgen:battle_manager:battle_manager:update_objective_chain": {
		"scope": "lua",
		"prefix": "battle_manager:update_objective_chain",
		"description": "battle_manager:update_objective_chain()\n-  -\n\nPass-through function for objectives_manager:update_objective_chain.\n",
		"body": [
			"battle_manager:update_objective_chain(${1:string chain name}, ${2:string objective key}, ${3:[opt=nil] number number param a}, ${4:[opt=nil] number number param b})"
		],
	},
	"docgen:battle_manager:bm:update_objective_chain": {
		"scope": "lua",
		"prefix": "bm:update_objective_chain",
		"description": "battle_manager:update_objective_chain()\n-  -\n\nPass-through function for objectives_manager:update_objective_chain.\n",
		"body": [
			"bm:update_objective_chain(${1:string chain name}, ${2:string objective key}, ${3:[opt=nil] number number param a}, ${4:[opt=nil] number number param b})"
		],
	},
	"docgen:battle_manager:end_objective_chain": {
		"scope": "lua",
		"prefix": "end_objective_chain",
		"description": "battle_manager:end_objective_chain()\n-  -\n\nPass-through function for objectives_manager:end_objective_chain.\n",
		"body": [
			"end_objective_chain(${1:string chain name})"
		],
	},
	"docgen:battle_manager:battle_manager:end_objective_chain": {
		"scope": "lua",
		"prefix": "battle_manager:end_objective_chain",
		"description": "battle_manager:end_objective_chain()\n-  -\n\nPass-through function for objectives_manager:end_objective_chain.\n",
		"body": [
			"battle_manager:end_objective_chain(${1:string chain name})"
		],
	},
	"docgen:battle_manager:bm:end_objective_chain": {
		"scope": "lua",
		"prefix": "bm:end_objective_chain",
		"description": "battle_manager:end_objective_chain()\n-  -\n\nPass-through function for objectives_manager:end_objective_chain.\n",
		"body": [
			"bm:end_objective_chain(${1:string chain name})"
		],
	},
	"docgen:battle_manager:reset_objective_chain": {
		"scope": "lua",
		"prefix": "reset_objective_chain",
		"description": "battle_manager:reset_objective_chain()\n-  -\n\nPass-through function for objectives_manager:reset_objective_chain.\n",
		"body": [
			"reset_objective_chain(${1:string chain name})"
		],
	},
	"docgen:battle_manager:battle_manager:reset_objective_chain": {
		"scope": "lua",
		"prefix": "battle_manager:reset_objective_chain",
		"description": "battle_manager:reset_objective_chain()\n-  -\n\nPass-through function for objectives_manager:reset_objective_chain.\n",
		"body": [
			"battle_manager:reset_objective_chain(${1:string chain name})"
		],
	},
	"docgen:battle_manager:bm:reset_objective_chain": {
		"scope": "lua",
		"prefix": "bm:reset_objective_chain",
		"description": "battle_manager:reset_objective_chain()\n-  -\n\nPass-through function for objectives_manager:reset_objective_chain.\n",
		"body": [
			"bm:reset_objective_chain(${1:string chain name})"
		],
	},
	"docgen:battle_manager:set_locatable_objective": {
		"scope": "lua",
		"prefix": "set_locatable_objective",
		"description": "battle_manager:set_locatable_objective()\n-  -\n\nSets up a locatable objective in battle.\n",
		"body": [
			"set_locatable_objective(${1:string objective key}, ${2:vector camera position}, ${3:vector camera target}, ${4:number zoom duration})"
		],
	},
	"docgen:battle_manager:battle_manager:set_locatable_objective": {
		"scope": "lua",
		"prefix": "battle_manager:set_locatable_objective",
		"description": "battle_manager:set_locatable_objective()\n-  -\n\nSets up a locatable objective in battle.\n",
		"body": [
			"battle_manager:set_locatable_objective(${1:string objective key}, ${2:vector camera position}, ${3:vector camera target}, ${4:number zoom duration})"
		],
	},
	"docgen:battle_manager:bm:set_locatable_objective": {
		"scope": "lua",
		"prefix": "bm:set_locatable_objective",
		"description": "battle_manager:set_locatable_objective()\n-  -\n\nSets up a locatable objective in battle.\n",
		"body": [
			"bm:set_locatable_objective(${1:string objective key}, ${2:vector camera position}, ${3:vector camera target}, ${4:number zoom duration})"
		],
	},
	"docgen:battle_manager:add_infotext": {
		"scope": "lua",
		"prefix": "add_infotext",
		"description": "battle_manager:add_infotext()\n-  -\n\nPass-through function for infotext_manager:add_infotext.\n",
		"body": [
			"add_infotext(${1:object first param}, ${2:... additional infotext strings})"
		],
	},
	"docgen:battle_manager:battle_manager:add_infotext": {
		"scope": "lua",
		"prefix": "battle_manager:add_infotext",
		"description": "battle_manager:add_infotext()\n-  -\n\nPass-through function for infotext_manager:add_infotext.\n",
		"body": [
			"battle_manager:add_infotext(${1:object first param}, ${2:... additional infotext strings})"
		],
	},
	"docgen:battle_manager:bm:add_infotext": {
		"scope": "lua",
		"prefix": "bm:add_infotext",
		"description": "battle_manager:add_infotext()\n-  -\n\nPass-through function for infotext_manager:add_infotext.\n",
		"body": [
			"bm:add_infotext(${1:object first param}, ${2:... additional infotext strings})"
		],
	},
	"docgen:battle_manager:remove_infotext": {
		"scope": "lua",
		"prefix": "remove_infotext",
		"description": "battle_manager:remove_infotext()\n-  -\n\nPass-through function for infotext_manager:remove_infotext.\n",
		"body": [
			"remove_infotext(${1:string infotext key})"
		],
	},
	"docgen:battle_manager:battle_manager:remove_infotext": {
		"scope": "lua",
		"prefix": "battle_manager:remove_infotext",
		"description": "battle_manager:remove_infotext()\n-  -\n\nPass-through function for infotext_manager:remove_infotext.\n",
		"body": [
			"battle_manager:remove_infotext(${1:string infotext key})"
		],
	},
	"docgen:battle_manager:bm:remove_infotext": {
		"scope": "lua",
		"prefix": "bm:remove_infotext",
		"description": "battle_manager:remove_infotext()\n-  -\n\nPass-through function for infotext_manager:remove_infotext.\n",
		"body": [
			"bm:remove_infotext(${1:string infotext key})"
		],
	},
	"docgen:battle_manager:clear_infotext": {
		"scope": "lua",
		"prefix": "clear_infotext",
		"description": "battle_manager:clear_infotext()\n-  -\n\nPass-through function for infotext_manager:clear_infotext.\n",
		"body": [
			"clear_infotext()"
		],
	},
	"docgen:battle_manager:battle_manager:clear_infotext": {
		"scope": "lua",
		"prefix": "battle_manager:clear_infotext",
		"description": "battle_manager:clear_infotext()\n-  -\n\nPass-through function for infotext_manager:clear_infotext.\n",
		"body": [
			"battle_manager:clear_infotext()"
		],
	},
	"docgen:battle_manager:bm:clear_infotext": {
		"scope": "lua",
		"prefix": "bm:clear_infotext",
		"description": "battle_manager:clear_infotext()\n-  -\n\nPass-through function for infotext_manager:clear_infotext.\n",
		"body": [
			"bm:clear_infotext()"
		],
	},
	"docgen:battle_manager:show_subtitle": {
		"scope": "lua",
		"prefix": "show_subtitle",
		"description": "battle_manager:show_subtitle()\n-  -\n\nShows a cutscene subtitle on-screen.\n",
		"body": [
			"show_subtitle(${1:string subtitle key}, ${2:[opt=false] boolean full key supplied}, ${3:[opt=false] boolean force subtitle on})"
		],
	},
	"docgen:battle_manager:battle_manager:show_subtitle": {
		"scope": "lua",
		"prefix": "battle_manager:show_subtitle",
		"description": "battle_manager:show_subtitle()\n-  -\n\nShows a cutscene subtitle on-screen.\n",
		"body": [
			"battle_manager:show_subtitle(${1:string subtitle key}, ${2:[opt=false] boolean full key supplied}, ${3:[opt=false] boolean force subtitle on})"
		],
	},
	"docgen:battle_manager:bm:show_subtitle": {
		"scope": "lua",
		"prefix": "bm:show_subtitle",
		"description": "battle_manager:show_subtitle()\n-  -\n\nShows a cutscene subtitle on-screen.\n",
		"body": [
			"bm:show_subtitle(${1:string subtitle key}, ${2:[opt=false] boolean full key supplied}, ${3:[opt=false] boolean force subtitle on})"
		],
	},
	"docgen:battle_manager:hide_subtitles": {
		"scope": "lua",
		"prefix": "hide_subtitles",
		"description": "battle_manager:hide_subtitles()\n-  -\n\nHides any currently-shown subtitle.\n",
		"body": [
			"hide_subtitles()"
		],
	},
	"docgen:battle_manager:battle_manager:hide_subtitles": {
		"scope": "lua",
		"prefix": "battle_manager:hide_subtitles",
		"description": "battle_manager:hide_subtitles()\n-  -\n\nHides any currently-shown subtitle.\n",
		"body": [
			"battle_manager:hide_subtitles()"
		],
	},
	"docgen:battle_manager:bm:hide_subtitles": {
		"scope": "lua",
		"prefix": "bm:hide_subtitles",
		"description": "battle_manager:hide_subtitles()\n-  -\n\nHides any currently-shown subtitle.\n",
		"body": [
			"bm:hide_subtitles()"
		],
	},
	"docgen:battle_manager:queue_help_message": {
		"scope": "lua",
		"prefix": "queue_help_message",
		"description": "battle_manager:queue_help_message()\n-  -\n\nEnqueues a help message for showing on-screen.\n",
		"body": [
			"queue_help_message(${1:string key}, ${2:[opt=5000] number duration}, ${3:[opt=2000] number fade time}, ${4:[opt=false] boolean high priority}, ${5:[opt=false] boolean play after battle victory}, ${6:[opt=nil] function callback})"
		],
	},
	"docgen:battle_manager:battle_manager:queue_help_message": {
		"scope": "lua",
		"prefix": "battle_manager:queue_help_message",
		"description": "battle_manager:queue_help_message()\n-  -\n\nEnqueues a help message for showing on-screen.\n",
		"body": [
			"battle_manager:queue_help_message(${1:string key}, ${2:[opt=5000] number duration}, ${3:[opt=2000] number fade time}, ${4:[opt=false] boolean high priority}, ${5:[opt=false] boolean play after battle victory}, ${6:[opt=nil] function callback})"
		],
	},
	"docgen:battle_manager:bm:queue_help_message": {
		"scope": "lua",
		"prefix": "bm:queue_help_message",
		"description": "battle_manager:queue_help_message()\n-  -\n\nEnqueues a help message for showing on-screen.\n",
		"body": [
			"bm:queue_help_message(${1:string key}, ${2:[opt=5000] number duration}, ${3:[opt=2000] number fade time}, ${4:[opt=false] boolean high priority}, ${5:[opt=false] boolean play after battle victory}, ${6:[opt=nil] function callback})"
		],
	},
	"docgen:battle_manager:enable_camera_movement": {
		"scope": "lua",
		"prefix": "enable_camera_movement",
		"description": "battle_manager:enable_camera_movement()\n-  -\n\nAllows script to prevents player movement of the camera without stealing input - other game interactions are still permitted.\n",
		"body": [
			"enable_camera_movement(${1:[opt=true] boolean enable movement})"
		],
	},
	"docgen:battle_manager:battle_manager:enable_camera_movement": {
		"scope": "lua",
		"prefix": "battle_manager:enable_camera_movement",
		"description": "battle_manager:enable_camera_movement()\n-  -\n\nAllows script to prevents player movement of the camera without stealing input - other game interactions are still permitted.\n",
		"body": [
			"battle_manager:enable_camera_movement(${1:[opt=true] boolean enable movement})"
		],
	},
	"docgen:battle_manager:bm:enable_camera_movement": {
		"scope": "lua",
		"prefix": "bm:enable_camera_movement",
		"description": "battle_manager:enable_camera_movement()\n-  -\n\nAllows script to prevents player movement of the camera without stealing input - other game interactions are still permitted.\n",
		"body": [
			"bm:enable_camera_movement(${1:[opt=true] boolean enable movement})"
		],
	},
	"docgen:battle_manager:cache_camera": {
		"scope": "lua",
		"prefix": "cache_camera",
		"description": "battle_manager:cache_camera()\n-  -\n\nCaches the current position/target of the camera for later retrieval.\n",
		"body": [
			"cache_camera()"
		],
	},
	"docgen:battle_manager:battle_manager:cache_camera": {
		"scope": "lua",
		"prefix": "battle_manager:cache_camera",
		"description": "battle_manager:cache_camera()\n-  -\n\nCaches the current position/target of the camera for later retrieval.\n",
		"body": [
			"battle_manager:cache_camera()"
		],
	},
	"docgen:battle_manager:bm:cache_camera": {
		"scope": "lua",
		"prefix": "bm:cache_camera",
		"description": "battle_manager:cache_camera()\n-  -\n\nCaches the current position/target of the camera for later retrieval.\n",
		"body": [
			"bm:cache_camera()"
		],
	},
	"docgen:battle_manager:get_cached_camera_pos": {
		"scope": "lua",
		"prefix": "get_cached_camera_pos",
		"description": "battle_manager:get_cached_camera_pos()\n-  -\n\nGets the cached position of the camera.\n",
		"body": [
			"get_cached_camera_pos()"
		],
	},
	"docgen:battle_manager:battle_manager:get_cached_camera_pos": {
		"scope": "lua",
		"prefix": "battle_manager:get_cached_camera_pos",
		"description": "battle_manager:get_cached_camera_pos()\n-  -\n\nGets the cached position of the camera.\n",
		"body": [
			"battle_manager:get_cached_camera_pos()"
		],
	},
	"docgen:battle_manager:bm:get_cached_camera_pos": {
		"scope": "lua",
		"prefix": "bm:get_cached_camera_pos",
		"description": "battle_manager:get_cached_camera_pos()\n-  -\n\nGets the cached position of the camera.\n",
		"body": [
			"bm:get_cached_camera_pos()"
		],
	},
	"docgen:battle_manager:get_cached_camera_targ": {
		"scope": "lua",
		"prefix": "get_cached_camera_targ",
		"description": "battle_manager:get_cached_camera_targ()\n-  -\n\nGets the cached target of the camera.\n",
		"body": [
			"get_cached_camera_targ()"
		],
	},
	"docgen:battle_manager:battle_manager:get_cached_camera_targ": {
		"scope": "lua",
		"prefix": "battle_manager:get_cached_camera_targ",
		"description": "battle_manager:get_cached_camera_targ()\n-  -\n\nGets the cached target of the camera.\n",
		"body": [
			"battle_manager:get_cached_camera_targ()"
		],
	},
	"docgen:battle_manager:bm:get_cached_camera_targ": {
		"scope": "lua",
		"prefix": "bm:get_cached_camera_targ",
		"description": "battle_manager:get_cached_camera_targ()\n-  -\n\nGets the cached target of the camera.\n",
		"body": [
			"bm:get_cached_camera_targ()"
		],
	},
	"docgen:battle_manager:start_camera_movement_tracker": {
		"scope": "lua",
		"prefix": "start_camera_movement_tracker",
		"description": "battle_manager:start_camera_movement_tracker()\n-  -\n\nStarts the camera movement tracker.\n",
		"body": [
			"start_camera_movement_tracker()"
		],
	},
	"docgen:battle_manager:battle_manager:start_camera_movement_tracker": {
		"scope": "lua",
		"prefix": "battle_manager:start_camera_movement_tracker",
		"description": "battle_manager:start_camera_movement_tracker()\n-  -\n\nStarts the camera movement tracker.\n",
		"body": [
			"battle_manager:start_camera_movement_tracker()"
		],
	},
	"docgen:battle_manager:bm:start_camera_movement_tracker": {
		"scope": "lua",
		"prefix": "bm:start_camera_movement_tracker",
		"description": "battle_manager:start_camera_movement_tracker()\n-  -\n\nStarts the camera movement tracker.\n",
		"body": [
			"bm:start_camera_movement_tracker()"
		],
	},
	"docgen:battle_manager:stop_camera_movement_tracker": {
		"scope": "lua",
		"prefix": "stop_camera_movement_tracker",
		"description": "battle_manager:stop_camera_movement_tracker()\n-  -\n\nStops the camera movement tracker.\n",
		"body": [
			"stop_camera_movement_tracker()"
		],
	},
	"docgen:battle_manager:battle_manager:stop_camera_movement_tracker": {
		"scope": "lua",
		"prefix": "battle_manager:stop_camera_movement_tracker",
		"description": "battle_manager:stop_camera_movement_tracker()\n-  -\n\nStops the camera movement tracker.\n",
		"body": [
			"battle_manager:stop_camera_movement_tracker()"
		],
	},
	"docgen:battle_manager:bm:stop_camera_movement_tracker": {
		"scope": "lua",
		"prefix": "bm:stop_camera_movement_tracker",
		"description": "battle_manager:stop_camera_movement_tracker()\n-  -\n\nStops the camera movement tracker.\n",
		"body": [
			"bm:stop_camera_movement_tracker()"
		],
	},
	"docgen:battle_manager:get_camera_altitude_change": {
		"scope": "lua",
		"prefix": "get_camera_altitude_change",
		"description": "battle_manager:get_camera_altitude_change()\n-  -\n\nGets the difference in camera altitude between now and when the tracker was started.\n",
		"body": [
			"get_camera_altitude_change()"
		],
	},
	"docgen:battle_manager:battle_manager:get_camera_altitude_change": {
		"scope": "lua",
		"prefix": "battle_manager:get_camera_altitude_change",
		"description": "battle_manager:get_camera_altitude_change()\n-  -\n\nGets the difference in camera altitude between now and when the tracker was started.\n",
		"body": [
			"battle_manager:get_camera_altitude_change()"
		],
	},
	"docgen:battle_manager:bm:get_camera_altitude_change": {
		"scope": "lua",
		"prefix": "bm:get_camera_altitude_change",
		"description": "battle_manager:get_camera_altitude_change()\n-  -\n\nGets the difference in camera altitude between now and when the tracker was started.\n",
		"body": [
			"bm:get_camera_altitude_change()"
		],
	},
	"docgen:battle_manager:get_camera_distance_travelled": {
		"scope": "lua",
		"prefix": "get_camera_distance_travelled",
		"description": "battle_manager:get_camera_distance_travelled()\n-  -\n\nGets the total distance the camera has travelled between now and when the tracker was started.\n",
		"body": [
			"get_camera_distance_travelled()"
		],
	},
	"docgen:battle_manager:battle_manager:get_camera_distance_travelled": {
		"scope": "lua",
		"prefix": "battle_manager:get_camera_distance_travelled",
		"description": "battle_manager:get_camera_distance_travelled()\n-  -\n\nGets the total distance the camera has travelled between now and when the tracker was started.\n",
		"body": [
			"battle_manager:get_camera_distance_travelled()"
		],
	},
	"docgen:battle_manager:bm:get_camera_distance_travelled": {
		"scope": "lua",
		"prefix": "bm:get_camera_distance_travelled",
		"description": "battle_manager:get_camera_distance_travelled()\n-  -\n\nGets the total distance the camera has travelled between now and when the tracker was started.\n",
		"body": [
			"bm:get_camera_distance_travelled()"
		],
	},
	"docgen:battle_manager:show_ui": {
		"scope": "lua",
		"prefix": "show_ui",
		"description": "battle_manager:show_ui()\n-  -\n\nShows/hides the battle UI from script.\n",
		"body": [
			"show_ui(${1:[opt=true] boolean should show})"
		],
	},
	"docgen:battle_manager:battle_manager:show_ui": {
		"scope": "lua",
		"prefix": "battle_manager:show_ui",
		"description": "battle_manager:show_ui()\n-  -\n\nShows/hides the battle UI from script.\n",
		"body": [
			"battle_manager:show_ui(${1:[opt=true] boolean should show})"
		],
	},
	"docgen:battle_manager:bm:show_ui": {
		"scope": "lua",
		"prefix": "bm:show_ui",
		"description": "battle_manager:show_ui()\n-  -\n\nShows/hides the battle UI from script.\n",
		"body": [
			"bm:show_ui(${1:[opt=true] boolean should show})"
		],
	},
	"docgen:battle_manager:show_army": {
		"scope": "lua",
		"prefix": "show_army",
		"description": "battle_manager:show_army()\n-  -\n\nShows/hides the army panel.\n",
		"body": [
			"show_army(${1:[opt=true] boolean should show}, ${2:[opt=false] boolean immediate})"
		],
	},
	"docgen:battle_manager:battle_manager:show_army": {
		"scope": "lua",
		"prefix": "battle_manager:show_army",
		"description": "battle_manager:show_army()\n-  -\n\nShows/hides the army panel.\n",
		"body": [
			"battle_manager:show_army(${1:[opt=true] boolean should show}, ${2:[opt=false] boolean immediate})"
		],
	},
	"docgen:battle_manager:bm:show_army": {
		"scope": "lua",
		"prefix": "bm:show_army",
		"description": "battle_manager:show_army()\n-  -\n\nShows/hides the army panel.\n",
		"body": [
			"bm:show_army(${1:[opt=true] boolean should show}, ${2:[opt=false] boolean immediate})"
		],
	},
	"docgen:battle_manager:show_winds_of_magic_panel": {
		"scope": "lua",
		"prefix": "show_winds_of_magic_panel",
		"description": "battle_manager:show_winds_of_magic_panel()\n-  -\n\nShows/hides the winds of magic panel\n",
		"body": [
			"show_winds_of_magic_panel(${1:[opt=true] boolean should show}, ${2:[opt=false] boolean immediate})"
		],
	},
	"docgen:battle_manager:battle_manager:show_winds_of_magic_panel": {
		"scope": "lua",
		"prefix": "battle_manager:show_winds_of_magic_panel",
		"description": "battle_manager:show_winds_of_magic_panel()\n-  -\n\nShows/hides the winds of magic panel\n",
		"body": [
			"battle_manager:show_winds_of_magic_panel(${1:[opt=true] boolean should show}, ${2:[opt=false] boolean immediate})"
		],
	},
	"docgen:battle_manager:bm:show_winds_of_magic_panel": {
		"scope": "lua",
		"prefix": "bm:show_winds_of_magic_panel",
		"description": "battle_manager:show_winds_of_magic_panel()\n-  -\n\nShows/hides the winds of magic panel\n",
		"body": [
			"bm:show_winds_of_magic_panel(${1:[opt=true] boolean should show}, ${2:[opt=false] boolean immediate})"
		],
	},
	"docgen:battle_manager:show_portrait_panel": {
		"scope": "lua",
		"prefix": "show_portrait_panel",
		"description": "battle_manager:show_portrait_panel()\n-  -\n\nShows/hides the unit portrait panel.\n",
		"body": [
			"show_portrait_panel(${1:[opt=true] boolean should show}, ${2:[opt=false] boolean immediate})"
		],
	},
	"docgen:battle_manager:battle_manager:show_portrait_panel": {
		"scope": "lua",
		"prefix": "battle_manager:show_portrait_panel",
		"description": "battle_manager:show_portrait_panel()\n-  -\n\nShows/hides the unit portrait panel.\n",
		"body": [
			"battle_manager:show_portrait_panel(${1:[opt=true] boolean should show}, ${2:[opt=false] boolean immediate})"
		],
	},
	"docgen:battle_manager:bm:show_portrait_panel": {
		"scope": "lua",
		"prefix": "bm:show_portrait_panel",
		"description": "battle_manager:show_portrait_panel()\n-  -\n\nShows/hides the unit portrait panel.\n",
		"body": [
			"bm:show_portrait_panel(${1:[opt=true] boolean should show}, ${2:[opt=false] boolean immediate})"
		],
	},
	"docgen:battle_manager:show_top_bar": {
		"scope": "lua",
		"prefix": "show_top_bar",
		"description": "battle_manager:show_top_bar()\n-  -\n\nShows/hides the top bar on the battle interface.\n",
		"body": [
			"show_top_bar(${1:[opt=true] boolean should show}, ${2:[opt=false] boolean immediate})"
		],
	},
	"docgen:battle_manager:battle_manager:show_top_bar": {
		"scope": "lua",
		"prefix": "battle_manager:show_top_bar",
		"description": "battle_manager:show_top_bar()\n-  -\n\nShows/hides the top bar on the battle interface.\n",
		"body": [
			"battle_manager:show_top_bar(${1:[opt=true] boolean should show}, ${2:[opt=false] boolean immediate})"
		],
	},
	"docgen:battle_manager:bm:show_top_bar": {
		"scope": "lua",
		"prefix": "bm:show_top_bar",
		"description": "battle_manager:show_top_bar()\n-  -\n\nShows/hides the top bar on the battle interface.\n",
		"body": [
			"bm:show_top_bar(${1:[opt=true] boolean should show}, ${2:[opt=false] boolean immediate})"
		],
	},
	"docgen:battle_manager:show_radar_frame": {
		"scope": "lua",
		"prefix": "show_radar_frame",
		"description": "battle_manager:show_radar_frame()\n-  -\n\nShows/hides the radar.\n",
		"body": [
			"show_radar_frame(${1:[opt=true] boolean should show}, ${2:[opt=false] boolean immediate})"
		],
	},
	"docgen:battle_manager:battle_manager:show_radar_frame": {
		"scope": "lua",
		"prefix": "battle_manager:show_radar_frame",
		"description": "battle_manager:show_radar_frame()\n-  -\n\nShows/hides the radar.\n",
		"body": [
			"battle_manager:show_radar_frame(${1:[opt=true] boolean should show}, ${2:[opt=false] boolean immediate})"
		],
	},
	"docgen:battle_manager:bm:show_radar_frame": {
		"scope": "lua",
		"prefix": "bm:show_radar_frame",
		"description": "battle_manager:show_radar_frame()\n-  -\n\nShows/hides the radar.\n",
		"body": [
			"bm:show_radar_frame(${1:[opt=true] boolean should show}, ${2:[opt=false] boolean immediate})"
		],
	},
	"docgen:battle_manager:show_start_battle_button": {
		"scope": "lua",
		"prefix": "show_start_battle_button",
		"description": "battle_manager:show_start_battle_button()\n-  -\n\nShows/hides the start battle button.\n",
		"body": [
			"show_start_battle_button(${1:[opt=true] boolean should show}, ${2:[opt=false] boolean is multiplayer})"
		],
	},
	"docgen:battle_manager:battle_manager:show_start_battle_button": {
		"scope": "lua",
		"prefix": "battle_manager:show_start_battle_button",
		"description": "battle_manager:show_start_battle_button()\n-  -\n\nShows/hides the start battle button.\n",
		"body": [
			"battle_manager:show_start_battle_button(${1:[opt=true] boolean should show}, ${2:[opt=false] boolean is multiplayer})"
		],
	},
	"docgen:battle_manager:bm:show_start_battle_button": {
		"scope": "lua",
		"prefix": "bm:show_start_battle_button",
		"description": "battle_manager:show_start_battle_button()\n-  -\n\nShows/hides the start battle button.\n",
		"body": [
			"bm:show_start_battle_button(${1:[opt=true] boolean should show}, ${2:[opt=false] boolean is multiplayer})"
		],
	},
	"docgen:battle_manager:show_ui_options_panel": {
		"scope": "lua",
		"prefix": "show_ui_options_panel",
		"description": "battle_manager:show_ui_options_panel()\n-  -\n\nShows/hides the ui options rollout panel.\n",
		"body": [
			"show_ui_options_panel(${1:[opt=true] boolean should show})"
		],
	},
	"docgen:battle_manager:battle_manager:show_ui_options_panel": {
		"scope": "lua",
		"prefix": "battle_manager:show_ui_options_panel",
		"description": "battle_manager:show_ui_options_panel()\n-  -\n\nShows/hides the ui options rollout panel.\n",
		"body": [
			"battle_manager:show_ui_options_panel(${1:[opt=true] boolean should show})"
		],
	},
	"docgen:battle_manager:bm:show_ui_options_panel": {
		"scope": "lua",
		"prefix": "bm:show_ui_options_panel",
		"description": "battle_manager:show_ui_options_panel()\n-  -\n\nShows/hides the ui options rollout panel.\n",
		"body": [
			"bm:show_ui_options_panel(${1:[opt=true] boolean should show})"
		],
	},
	"docgen:battle_manager:enable_spell_browser_button": {
		"scope": "lua",
		"prefix": "enable_spell_browser_button",
		"description": "battle_manager:enable_spell_browser_button()\n-  -\n\nEnables/disables the spell browser button on the battle interface.\n",
		"body": [
			"enable_spell_browser_button(${1:[opt=true] boolean should enable})"
		],
	},
	"docgen:battle_manager:battle_manager:enable_spell_browser_button": {
		"scope": "lua",
		"prefix": "battle_manager:enable_spell_browser_button",
		"description": "battle_manager:enable_spell_browser_button()\n-  -\n\nEnables/disables the spell browser button on the battle interface.\n",
		"body": [
			"battle_manager:enable_spell_browser_button(${1:[opt=true] boolean should enable})"
		],
	},
	"docgen:battle_manager:bm:enable_spell_browser_button": {
		"scope": "lua",
		"prefix": "bm:enable_spell_browser_button",
		"description": "battle_manager:enable_spell_browser_button()\n-  -\n\nEnables/disables the spell browser button on the battle interface.\n",
		"body": [
			"bm:enable_spell_browser_button(${1:[opt=true] boolean should enable})"
		],
	},
	"docgen:battle_manager:enable_ui_hiding": {
		"scope": "lua",
		"prefix": "enable_ui_hiding",
		"description": "battle_manager:enable_ui_hiding()\n-  -\n\nEnables/disables UI hiding.\n",
		"body": [
			"enable_ui_hiding(${1:[opt=true] boolean should enable})"
		],
	},
	"docgen:battle_manager:battle_manager:enable_ui_hiding": {
		"scope": "lua",
		"prefix": "battle_manager:enable_ui_hiding",
		"description": "battle_manager:enable_ui_hiding()\n-  -\n\nEnables/disables UI hiding.\n",
		"body": [
			"battle_manager:enable_ui_hiding(${1:[opt=true] boolean should enable})"
		],
	},
	"docgen:battle_manager:bm:enable_ui_hiding": {
		"scope": "lua",
		"prefix": "bm:enable_ui_hiding",
		"description": "battle_manager:enable_ui_hiding()\n-  -\n\nEnables/disables UI hiding.\n",
		"body": [
			"bm:enable_ui_hiding(${1:[opt=true] boolean should enable})"
		],
	},
	"docgen:battle_manager:is_ui_hiding_enabled": {
		"scope": "lua",
		"prefix": "is_ui_hiding_enabled",
		"description": "battle_manager:is_ui_hiding_enabled()\n-  -\n\nReturns false if UI hiding has been disabled with battle_manager:enable_ui_hiding, otherwise true.\n",
		"body": [
			"is_ui_hiding_enabled()"
		],
	},
	"docgen:battle_manager:battle_manager:is_ui_hiding_enabled": {
		"scope": "lua",
		"prefix": "battle_manager:is_ui_hiding_enabled",
		"description": "battle_manager:is_ui_hiding_enabled()\n-  -\n\nReturns false if UI hiding has been disabled with battle_manager:enable_ui_hiding, otherwise true.\n",
		"body": [
			"battle_manager:is_ui_hiding_enabled()"
		],
	},
	"docgen:battle_manager:bm:is_ui_hiding_enabled": {
		"scope": "lua",
		"prefix": "bm:is_ui_hiding_enabled",
		"description": "battle_manager:is_ui_hiding_enabled()\n-  -\n\nReturns false if UI hiding has been disabled with battle_manager:enable_ui_hiding, otherwise true.\n",
		"body": [
			"bm:is_ui_hiding_enabled()"
		],
	},
	"docgen:battle_manager:start_engagement_monitor": {
		"scope": "lua",
		"prefix": "start_engagement_monitor",
		"description": "battle_manager:start_engagement_monitor()\n-  -\n\nStarts the engagement monitor.\n",
		"body": [
			"start_engagement_monitor()"
		],
	},
	"docgen:battle_manager:battle_manager:start_engagement_monitor": {
		"scope": "lua",
		"prefix": "battle_manager:start_engagement_monitor",
		"description": "battle_manager:start_engagement_monitor()\n-  -\n\nStarts the engagement monitor.\n",
		"body": [
			"battle_manager:start_engagement_monitor()"
		],
	},
	"docgen:battle_manager:bm:start_engagement_monitor": {
		"scope": "lua",
		"prefix": "bm:start_engagement_monitor",
		"description": "battle_manager:start_engagement_monitor()\n-  -\n\nStarts the engagement monitor.\n",
		"body": [
			"bm:start_engagement_monitor()"
		],
	},
	"docgen:battle_manager:get_distance_between_forces": {
		"scope": "lua",
		"prefix": "get_distance_between_forces",
		"description": "battle_manager:get_distance_between_forces()\n-  -\n\nReturns the cached distance between the two alliances.\n",
		"body": [
			"get_distance_between_forces()"
		],
	},
	"docgen:battle_manager:battle_manager:get_distance_between_forces": {
		"scope": "lua",
		"prefix": "battle_manager:get_distance_between_forces",
		"description": "battle_manager:get_distance_between_forces()\n-  -\n\nReturns the cached distance between the two alliances.\n",
		"body": [
			"battle_manager:get_distance_between_forces()"
		],
	},
	"docgen:battle_manager:bm:get_distance_between_forces": {
		"scope": "lua",
		"prefix": "bm:get_distance_between_forces",
		"description": "battle_manager:get_distance_between_forces()\n-  -\n\nReturns the cached distance between the two alliances.\n",
		"body": [
			"bm:get_distance_between_forces()"
		],
	},
	"docgen:battle_manager:get_num_units_engaged": {
		"scope": "lua",
		"prefix": "get_num_units_engaged",
		"description": "battle_manager:get_num_units_engaged()\n-  -\n\nReturns the number of units in the player's alliance engaged in melee.\n",
		"body": [
			"get_num_units_engaged()"
		],
	},
	"docgen:battle_manager:battle_manager:get_num_units_engaged": {
		"scope": "lua",
		"prefix": "battle_manager:get_num_units_engaged",
		"description": "battle_manager:get_num_units_engaged()\n-  -\n\nReturns the number of units in the player's alliance engaged in melee.\n",
		"body": [
			"battle_manager:get_num_units_engaged()"
		],
	},
	"docgen:battle_manager:bm:get_num_units_engaged": {
		"scope": "lua",
		"prefix": "bm:get_num_units_engaged",
		"description": "battle_manager:get_num_units_engaged()\n-  -\n\nReturns the number of units in the player's alliance engaged in melee.\n",
		"body": [
			"bm:get_num_units_engaged()"
		],
	},
	"docgen:battle_manager:get_proportion_engaged": {
		"scope": "lua",
		"prefix": "get_proportion_engaged",
		"description": "battle_manager:get_proportion_engaged()\n-  -\n\nReturns the proportion of units in the player's alliance engaged in melee.\n",
		"body": [
			"get_proportion_engaged()"
		],
	},
	"docgen:battle_manager:battle_manager:get_proportion_engaged": {
		"scope": "lua",
		"prefix": "battle_manager:get_proportion_engaged",
		"description": "battle_manager:get_proportion_engaged()\n-  -\n\nReturns the proportion of units in the player's alliance engaged in melee.\n",
		"body": [
			"battle_manager:get_proportion_engaged()"
		],
	},
	"docgen:battle_manager:bm:get_proportion_engaged": {
		"scope": "lua",
		"prefix": "bm:get_proportion_engaged",
		"description": "battle_manager:get_proportion_engaged()\n-  -\n\nReturns the proportion of units in the player's alliance engaged in melee.\n",
		"body": [
			"bm:get_proportion_engaged()"
		],
	},
	"docgen:battle_manager:get_num_units_under_fire": {
		"scope": "lua",
		"prefix": "get_num_units_under_fire",
		"description": "battle_manager:get_num_units_under_fire()\n-  -\n\nReturns the number of units in the player's alliance under missile fire.\n",
		"body": [
			"get_num_units_under_fire()"
		],
	},
	"docgen:battle_manager:battle_manager:get_num_units_under_fire": {
		"scope": "lua",
		"prefix": "battle_manager:get_num_units_under_fire",
		"description": "battle_manager:get_num_units_under_fire()\n-  -\n\nReturns the number of units in the player's alliance under missile fire.\n",
		"body": [
			"battle_manager:get_num_units_under_fire()"
		],
	},
	"docgen:battle_manager:bm:get_num_units_under_fire": {
		"scope": "lua",
		"prefix": "bm:get_num_units_under_fire",
		"description": "battle_manager:get_num_units_under_fire()\n-  -\n\nReturns the number of units in the player's alliance under missile fire.\n",
		"body": [
			"bm:get_num_units_under_fire()"
		],
	},
	"docgen:battle_manager:get_proportion_under_fire": {
		"scope": "lua",
		"prefix": "get_proportion_under_fire",
		"description": "battle_manager:get_proportion_under_fire()\n-  -\n\nReturns the proportion of units in the player's alliance engaged in melee.\n",
		"body": [
			"get_proportion_under_fire()"
		],
	},
	"docgen:battle_manager:battle_manager:get_proportion_under_fire": {
		"scope": "lua",
		"prefix": "battle_manager:get_proportion_under_fire",
		"description": "battle_manager:get_proportion_under_fire()\n-  -\n\nReturns the proportion of units in the player's alliance engaged in melee.\n",
		"body": [
			"battle_manager:get_proportion_under_fire()"
		],
	},
	"docgen:battle_manager:bm:get_proportion_under_fire": {
		"scope": "lua",
		"prefix": "bm:get_proportion_under_fire",
		"description": "battle_manager:get_proportion_under_fire()\n-  -\n\nReturns the proportion of units in the player's alliance engaged in melee.\n",
		"body": [
			"bm:get_proportion_under_fire()"
		],
	},
	"docgen:battle_manager:get_player_army_altitude": {
		"scope": "lua",
		"prefix": "get_player_army_altitude",
		"description": "battle_manager:get_player_army_altitude()\n-  -\n\nReturns the average altitude of the player's army in m.\n",
		"body": [
			"get_player_army_altitude()"
		],
	},
	"docgen:battle_manager:battle_manager:get_player_army_altitude": {
		"scope": "lua",
		"prefix": "battle_manager:get_player_army_altitude",
		"description": "battle_manager:get_player_army_altitude()\n-  -\n\nReturns the average altitude of the player's army in m.\n",
		"body": [
			"battle_manager:get_player_army_altitude()"
		],
	},
	"docgen:battle_manager:bm:get_player_army_altitude": {
		"scope": "lua",
		"prefix": "bm:get_player_army_altitude",
		"description": "battle_manager:get_player_army_altitude()\n-  -\n\nReturns the average altitude of the player's army in m.\n",
		"body": [
			"bm:get_player_army_altitude()"
		],
	},
	"docgen:battle_manager:get_enemy_army_altitude": {
		"scope": "lua",
		"prefix": "get_enemy_army_altitude",
		"description": "battle_manager:get_enemy_army_altitude()\n-  -\n\nReturns the average altitude of the enemy army in m.\n",
		"body": [
			"get_enemy_army_altitude()"
		],
	},
	"docgen:battle_manager:battle_manager:get_enemy_army_altitude": {
		"scope": "lua",
		"prefix": "battle_manager:get_enemy_army_altitude",
		"description": "battle_manager:get_enemy_army_altitude()\n-  -\n\nReturns the average altitude of the enemy army in m.\n",
		"body": [
			"battle_manager:get_enemy_army_altitude()"
		],
	},
	"docgen:battle_manager:bm:get_enemy_army_altitude": {
		"scope": "lua",
		"prefix": "bm:get_enemy_army_altitude",
		"description": "battle_manager:get_enemy_army_altitude()\n-  -\n\nReturns the average altitude of the enemy army in m.\n",
		"body": [
			"bm:get_enemy_army_altitude()"
		],
	},
	"docgen:battle_manager:stop_engagement_monitor": {
		"scope": "lua",
		"prefix": "stop_engagement_monitor",
		"description": "battle_manager:stop_engagement_monitor()\n-  -\n\nStops the engagement monitor.\n",
		"body": [
			"stop_engagement_monitor()"
		],
	},
	"docgen:battle_manager:battle_manager:stop_engagement_monitor": {
		"scope": "lua",
		"prefix": "battle_manager:stop_engagement_monitor",
		"description": "battle_manager:stop_engagement_monitor()\n-  -\n\nStops the engagement monitor.\n",
		"body": [
			"battle_manager:stop_engagement_monitor()"
		],
	},
	"docgen:battle_manager:bm:stop_engagement_monitor": {
		"scope": "lua",
		"prefix": "bm:stop_engagement_monitor",
		"description": "battle_manager:stop_engagement_monitor()\n-  -\n\nStops the engagement monitor.\n",
		"body": [
			"bm:stop_engagement_monitor()"
		],
	},
	"docgen:battle_manager:start_terrain_composite_scene": {
		"scope": "lua",
		"prefix": "start_terrain_composite_scene",
		"description": "battle_manager:start_terrain_composite_scene()\n-  -\n\nStarts a composite scene with the supplied key.\n",
		"body": [
			"start_terrain_composite_scene(${1:string key}, ${2:[opt=false] string group name}, ${3:[opt=false] number delay})"
		],
	},
	"docgen:battle_manager:battle_manager:start_terrain_composite_scene": {
		"scope": "lua",
		"prefix": "battle_manager:start_terrain_composite_scene",
		"description": "battle_manager:start_terrain_composite_scene()\n-  -\n\nStarts a composite scene with the supplied key.\n",
		"body": [
			"battle_manager:start_terrain_composite_scene(${1:string key}, ${2:[opt=false] string group name}, ${3:[opt=false] number delay})"
		],
	},
	"docgen:battle_manager:bm:start_terrain_composite_scene": {
		"scope": "lua",
		"prefix": "bm:start_terrain_composite_scene",
		"description": "battle_manager:start_terrain_composite_scene()\n-  -\n\nStarts a composite scene with the supplied key.\n",
		"body": [
			"bm:start_terrain_composite_scene(${1:string key}, ${2:[opt=false] string group name}, ${3:[opt=false] number delay})"
		],
	},
	"docgen:battle_manager:stop_terrain_composite_scene": {
		"scope": "lua",
		"prefix": "stop_terrain_composite_scene",
		"description": "battle_manager:stop_terrain_composite_scene()\n-  -\n\nStops a composite scene with the supplied key.\n",
		"body": [
			"stop_terrain_composite_scene(${1:string key})"
		],
	},
	"docgen:battle_manager:battle_manager:stop_terrain_composite_scene": {
		"scope": "lua",
		"prefix": "battle_manager:stop_terrain_composite_scene",
		"description": "battle_manager:stop_terrain_composite_scene()\n-  -\n\nStops a composite scene with the supplied key.\n",
		"body": [
			"battle_manager:stop_terrain_composite_scene(${1:string key})"
		],
	},
	"docgen:battle_manager:bm:stop_terrain_composite_scene": {
		"scope": "lua",
		"prefix": "bm:stop_terrain_composite_scene",
		"description": "battle_manager:stop_terrain_composite_scene()\n-  -\n\nStops a composite scene with the supplied key.\n",
		"body": [
			"bm:stop_terrain_composite_scene(${1:string key})"
		],
	},
	"docgen:script_ai_planner:new": {
		"scope": "lua",
		"prefix": "new",
		"description": "script_ai_planner:new()\n-  -\n\nCreates a script_ai_planner object.\n",
		"body": [
			"new(${1:string name}, ${2:object units}, ${3:[opt=false] boolean debug mode})"
		],
	},
	"docgen:script_ai_planner:script_ai_planner:new": {
		"scope": "lua",
		"prefix": "script_ai_planner:new",
		"description": "script_ai_planner:new()\n-  -\n\nCreates a script_ai_planner object.\n",
		"body": [
			"script_ai_planner:new(${1:string name}, ${2:object units}, ${3:[opt=false] boolean debug mode})"
		],
	},
	"docgen:script_ai_planner:set_debug": {
		"scope": "lua",
		"prefix": "set_debug",
		"description": "script_ai_planner:set_debug()\n-  -\n\nSets debug mode on this script_ai_planner.\n",
		"body": [
			"set_debug(${1:boolean debug mode})"
		],
	},
	"docgen:script_ai_planner:script_ai_planner:set_debug": {
		"scope": "lua",
		"prefix": "script_ai_planner:set_debug",
		"description": "script_ai_planner:set_debug()\n-  -\n\nSets debug mode on this script_ai_planner.\n",
		"body": [
			"script_ai_planner:set_debug(${1:boolean debug mode})"
		],
	},
	"docgen:script_ai_planner:add_sunits": {
		"scope": "lua",
		"prefix": "add_sunits",
		"description": "script_ai_planner:add_sunits()\n-  -\n\nAdds one or more script_unit objects to the script_ai_planner.\n",
		"body": [
			"add_sunits(${1:object scriptunits to add})"
		],
	},
	"docgen:script_ai_planner:script_ai_planner:add_sunits": {
		"scope": "lua",
		"prefix": "script_ai_planner:add_sunits",
		"description": "script_ai_planner:add_sunits()\n-  -\n\nAdds one or more script_unit objects to the script_ai_planner.\n",
		"body": [
			"script_ai_planner:add_sunits(${1:object scriptunits to add})"
		],
	},
	"docgen:script_ai_planner:remove_sunits": {
		"scope": "lua",
		"prefix": "remove_sunits",
		"description": "script_ai_planner:remove_sunits()\n-  -\n\nRemoves one or more script_unit objects from the script_ai_planner.\n",
		"body": [
			"remove_sunits(${1:object scriptunits to remove})"
		],
	},
	"docgen:script_ai_planner:script_ai_planner:remove_sunits": {
		"scope": "lua",
		"prefix": "script_ai_planner:remove_sunits",
		"description": "script_ai_planner:remove_sunits()\n-  -\n\nRemoves one or more script_unit objects from the script_ai_planner.\n",
		"body": [
			"script_ai_planner:remove_sunits(${1:object scriptunits to remove})"
		],
	},
	"docgen:script_ai_planner:count": {
		"scope": "lua",
		"prefix": "count",
		"description": "script_ai_planner:count()\n-  -\n\nReturns the number of units currently belonging to this ai planner\n",
		"body": [
			"count()"
		],
	},
	"docgen:script_ai_planner:script_ai_planner:count": {
		"scope": "lua",
		"prefix": "script_ai_planner:count",
		"description": "script_ai_planner:count()\n-  -\n\nReturns the number of units currently belonging to this ai planner\n",
		"body": [
			"script_ai_planner:count()"
		],
	},
	"docgen:script_ai_planner:release": {
		"scope": "lua",
		"prefix": "release",
		"description": "script_ai_planner:release()\n-  -\n\nRemoves all units and releases control of them to the ai/player.\n",
		"body": [
			"release()"
		],
	},
	"docgen:script_ai_planner:script_ai_planner:release": {
		"scope": "lua",
		"prefix": "script_ai_planner:release",
		"description": "script_ai_planner:release()\n-  -\n\nRemoves all units and releases control of them to the ai/player.\n",
		"body": [
			"script_ai_planner:release()"
		],
	},
	"docgen:script_ai_planner:any_controlled_sunit_standing": {
		"scope": "lua",
		"prefix": "any_controlled_sunit_standing",
		"description": "script_ai_planner:any_controlled_sunit_standing()\n-  -\n\nReturns true if any controlled unit is still alive/not-routed, false otherwise.\n",
		"body": [
			"any_controlled_sunit_standing()"
		],
	},
	"docgen:script_ai_planner:script_ai_planner:any_controlled_sunit_standing": {
		"scope": "lua",
		"prefix": "script_ai_planner:any_controlled_sunit_standing",
		"description": "script_ai_planner:any_controlled_sunit_standing()\n-  -\n\nReturns true if any controlled unit is still alive/not-routed, false otherwise.\n",
		"body": [
			"script_ai_planner:any_controlled_sunit_standing()"
		],
	},
	"docgen:script_ai_planner:get_centre_point": {
		"scope": "lua",
		"prefix": "get_centre_point",
		"description": "script_ai_planner:get_centre_point()\n-  -\n\nReturns a vector position of the mean centre of all units this script_ai_planner controls.\n",
		"body": [
			"get_centre_point()"
		],
	},
	"docgen:script_ai_planner:script_ai_planner:get_centre_point": {
		"scope": "lua",
		"prefix": "script_ai_planner:get_centre_point",
		"description": "script_ai_planner:get_centre_point()\n-  -\n\nReturns a vector position of the mean centre of all units this script_ai_planner controls.\n",
		"body": [
			"script_ai_planner:get_centre_point()"
		],
	},
	"docgen:script_ai_planner:move_to_position": {
		"scope": "lua",
		"prefix": "move_to_position",
		"description": "script_ai_planner:move_to_position()\n-  -\n\nInstructs the script_ai_planner to move its units to a position.\n",
		"body": [
			"move_to_position(${1:vector position})"
		],
	},
	"docgen:script_ai_planner:script_ai_planner:move_to_position": {
		"scope": "lua",
		"prefix": "script_ai_planner:move_to_position",
		"description": "script_ai_planner:move_to_position()\n-  -\n\nInstructs the script_ai_planner to move its units to a position.\n",
		"body": [
			"script_ai_planner:move_to_position(${1:vector position})"
		],
	},
	"docgen:script_ai_planner:move_to_position_of_sunit": {
		"scope": "lua",
		"prefix": "move_to_position_of_sunit",
		"description": "script_ai_planner:move_to_position_of_sunit()\n-  -\n\nInstructs the script_ai_planner to move its units to the position of a supplied script_unit, tracking the target as it moves.\n",
		"body": [
			"move_to_position_of_sunit(${1:script_unit target sunit}, ${2:function rout callback})"
		],
	},
	"docgen:script_ai_planner:script_ai_planner:move_to_position_of_sunit": {
		"scope": "lua",
		"prefix": "script_ai_planner:move_to_position_of_sunit",
		"description": "script_ai_planner:move_to_position_of_sunit()\n-  -\n\nInstructs the script_ai_planner to move its units to the position of a supplied script_unit, tracking the target as it moves.\n",
		"body": [
			"script_ai_planner:move_to_position_of_sunit(${1:script_unit target sunit}, ${2:function rout callback})"
		],
	},
	"docgen:script_ai_planner:move_to_force": {
		"scope": "lua",
		"prefix": "move_to_force",
		"description": "script_ai_planner:move_to_force()\n-  -\n\nInstructs the script_ai_planner to move its units to the position of a supplied force, tracking the target as it moves.\n",
		"body": [
			"move_to_force(${1:object target force})"
		],
	},
	"docgen:script_ai_planner:script_ai_planner:move_to_force": {
		"scope": "lua",
		"prefix": "script_ai_planner:move_to_force",
		"description": "script_ai_planner:move_to_force()\n-  -\n\nInstructs the script_ai_planner to move its units to the position of a supplied force, tracking the target as it moves.\n",
		"body": [
			"script_ai_planner:move_to_force(${1:object target force})"
		],
	},
	"docgen:script_ai_planner:defend_position": {
		"scope": "lua",
		"prefix": "defend_position",
		"description": "script_ai_planner:defend_position()\n-  -\n\nInstructs the script_ai_planner to defend a position on the battlefield.\n",
		"body": [
			"defend_position(${1:vector position to defend}, ${2:radius radius in m})"
		],
	},
	"docgen:script_ai_planner:script_ai_planner:defend_position": {
		"scope": "lua",
		"prefix": "script_ai_planner:defend_position",
		"description": "script_ai_planner:defend_position()\n-  -\n\nInstructs the script_ai_planner to defend a position on the battlefield.\n",
		"body": [
			"script_ai_planner:defend_position(${1:vector position to defend}, ${2:radius radius in m})"
		],
	},
	"docgen:script_ai_planner:defend_position_of_sunit": {
		"scope": "lua",
		"prefix": "defend_position_of_sunit",
		"description": "script_ai_planner:defend_position_of_sunit()\n-  -\n\nInstructs the script_ai_planner to defend the position of a target script_unit, tracking this target as it moves.\n",
		"body": [
			"defend_position_of_sunit(${1:script_unit sunit}, ${2:radius radius}, ${3:function callback})"
		],
	},
	"docgen:script_ai_planner:script_ai_planner:defend_position_of_sunit": {
		"scope": "lua",
		"prefix": "script_ai_planner:defend_position_of_sunit",
		"description": "script_ai_planner:defend_position_of_sunit()\n-  -\n\nInstructs the script_ai_planner to defend the position of a target script_unit, tracking this target as it moves.\n",
		"body": [
			"script_ai_planner:defend_position_of_sunit(${1:script_unit sunit}, ${2:radius radius}, ${3:function callback})"
		],
	},
	"docgen:script_ai_planner:defend_force": {
		"scope": "lua",
		"prefix": "defend_force",
		"description": "script_ai_planner:defend_force()\n-  -\n\nInstructs the script_ai_planner to defend the position of a target military force, tracking this target as it moves.\n",
		"body": [
			"defend_force(${1:script_unit sunit}, ${2:radius radius})"
		],
	},
	"docgen:script_ai_planner:script_ai_planner:defend_force": {
		"scope": "lua",
		"prefix": "script_ai_planner:defend_force",
		"description": "script_ai_planner:defend_force()\n-  -\n\nInstructs the script_ai_planner to defend the position of a target military force, tracking this target as it moves.\n",
		"body": [
			"script_ai_planner:defend_force(${1:script_unit sunit}, ${2:radius radius})"
		],
	},
	"docgen:script_ai_planner:set_should_reorder": {
		"scope": "lua",
		"prefix": "set_should_reorder",
		"description": "script_ai_planner:set_should_reorder()\n-  -\n\nInstructs the script_ai_planner to reissue defend and movement orders every 30 seconds.\n",
		"body": [
			"set_should_reorder(${1:[opt=true] boolean should reorder})"
		],
	},
	"docgen:script_ai_planner:script_ai_planner:set_should_reorder": {
		"scope": "lua",
		"prefix": "script_ai_planner:set_should_reorder",
		"description": "script_ai_planner:set_should_reorder()\n-  -\n\nInstructs the script_ai_planner to reissue defend and movement orders every 30 seconds.\n",
		"body": [
			"script_ai_planner:set_should_reorder(${1:[opt=true] boolean should reorder})"
		],
	},
	"docgen:script_ai_planner:attack_unit": {
		"scope": "lua",
		"prefix": "attack_unit",
		"description": "script_ai_planner:attack_unit()\n-  -\n\nInstructs the script_ai_planner to attack a target unit.\n",
		"body": [
			"attack_unit(${1:unit target unit})"
		],
	},
	"docgen:script_ai_planner:script_ai_planner:attack_unit": {
		"scope": "lua",
		"prefix": "script_ai_planner:attack_unit",
		"description": "script_ai_planner:attack_unit()\n-  -\n\nInstructs the script_ai_planner to attack a target unit.\n",
		"body": [
			"script_ai_planner:attack_unit(${1:unit target unit})"
		],
	},
	"docgen:script_ai_planner:attack_force": {
		"scope": "lua",
		"prefix": "attack_force",
		"description": "script_ai_planner:attack_force()\n-  -\n\nInstructs the script_ai_planner to attack a target force.\n",
		"body": [
			"attack_force(${1:object enemy force})"
		],
	},
	"docgen:script_ai_planner:script_ai_planner:attack_force": {
		"scope": "lua",
		"prefix": "script_ai_planner:attack_force",
		"description": "script_ai_planner:attack_force()\n-  -\n\nInstructs the script_ai_planner to attack a target force.\n",
		"body": [
			"script_ai_planner:attack_force(${1:object enemy force})"
		],
	},
	"docgen:script_ai_planner:merge_into": {
		"scope": "lua",
		"prefix": "merge_into",
		"description": "script_ai_planner:merge_into()\n-  -\n\nInstructs the script_ai_planner to merge into another.\n",
		"body": [
			"merge_into(${1:script_ai_planner target ai planner})"
		],
	},
	"docgen:script_ai_planner:script_ai_planner:merge_into": {
		"scope": "lua",
		"prefix": "script_ai_planner:merge_into",
		"description": "script_ai_planner:merge_into()\n-  -\n\nInstructs the script_ai_planner to merge into another.\n",
		"body": [
			"script_ai_planner:merge_into(${1:script_ai_planner target ai planner})"
		],
	},
	"docgen:script_ai_planner:patrol": {
		"scope": "lua",
		"prefix": "patrol",
		"description": "script_ai_planner:patrol()\n-  -\n\nInstructs the script_ai_planner to send its units on a patrol path along a series of waypoint positions.\n",
		"body": [
			"patrol(${1:table waypoint list}, ${2:object enemy force}, ${3:[opt=nil] function completion callback})"
		],
	},
	"docgen:script_ai_planner:script_ai_planner:patrol": {
		"scope": "lua",
		"prefix": "script_ai_planner:patrol",
		"description": "script_ai_planner:patrol()\n-  -\n\nInstructs the script_ai_planner to send its units on a patrol path along a series of waypoint positions.\n",
		"body": [
			"script_ai_planner:patrol(${1:table waypoint list}, ${2:object enemy force}, ${3:[opt=nil] function completion callback})"
		],
	},
	"docgen:script_ai_planner:set_patrol_defend_radius": {
		"scope": "lua",
		"prefix": "set_patrol_defend_radius",
		"description": "script_ai_planner:set_patrol_defend_radius()\n-  -\n\nSets the radius at which a script_ai_planner patrol will defend each waypoint along its patrol path.\n",
		"body": [
			"set_patrol_defend_radius(${1:number radius in m})"
		],
	},
	"docgen:script_ai_planner:script_ai_planner:set_patrol_defend_radius": {
		"scope": "lua",
		"prefix": "script_ai_planner:set_patrol_defend_radius",
		"description": "script_ai_planner:set_patrol_defend_radius()\n-  -\n\nSets the radius at which a script_ai_planner patrol will defend each waypoint along its patrol path.\n",
		"body": [
			"script_ai_planner:set_patrol_defend_radius(${1:number radius in m})"
		],
	},
	"docgen:script_ai_planner:set_patrol_enemy_distance": {
		"scope": "lua",
		"prefix": "set_patrol_enemy_distance",
		"description": "script_ai_planner:set_patrol_enemy_distance()\n-  -\n\nSets the distance at which a patrol will intercept an enemy it finds on its path.\n",
		"body": [
			"set_patrol_enemy_distance(${1:number radius in m})"
		],
	},
	"docgen:script_ai_planner:script_ai_planner:set_patrol_enemy_distance": {
		"scope": "lua",
		"prefix": "script_ai_planner:set_patrol_enemy_distance",
		"description": "script_ai_planner:set_patrol_enemy_distance()\n-  -\n\nSets the distance at which a patrol will intercept an enemy it finds on its path.\n",
		"body": [
			"script_ai_planner:set_patrol_enemy_distance(${1:number radius in m})"
		],
	},
	"docgen:script_ai_planner:set_patrol_waypoint_distance": {
		"scope": "lua",
		"prefix": "set_patrol_waypoint_distance",
		"description": "script_ai_planner:set_patrol_waypoint_distance()\n-  -\n\nSets the distance between the controlled units and a patrol waypoint at the patrol will considered to have arrived at the waypoint.\n",
		"body": [
			"set_patrol_waypoint_distance(${1:number radius in m})"
		],
	},
	"docgen:script_ai_planner:script_ai_planner:set_patrol_waypoint_distance": {
		"scope": "lua",
		"prefix": "script_ai_planner:set_patrol_waypoint_distance",
		"description": "script_ai_planner:set_patrol_waypoint_distance()\n-  -\n\nSets the distance between the controlled units and a patrol waypoint at the patrol will considered to have arrived at the waypoint.\n",
		"body": [
			"script_ai_planner:set_patrol_waypoint_distance(${1:number radius in m})"
		],
	},
	"docgen:script_ai_planner:set_perform_patrol_prox_test": {
		"scope": "lua",
		"prefix": "set_perform_patrol_prox_test",
		"description": "script_ai_planner:set_perform_patrol_prox_test()\n-  -\n\nInstructs the script_ai_planner whether to perform its enemy proximity test when on a patrol.\n",
		"body": [
			"set_perform_patrol_prox_test(${1:[opt=true] boolean perform proximity test})"
		],
	},
	"docgen:script_ai_planner:script_ai_planner:set_perform_patrol_prox_test": {
		"scope": "lua",
		"prefix": "script_ai_planner:set_perform_patrol_prox_test",
		"description": "script_ai_planner:set_perform_patrol_prox_test()\n-  -\n\nInstructs the script_ai_planner whether to perform its enemy proximity test when on a patrol.\n",
		"body": [
			"script_ai_planner:set_perform_patrol_prox_test(${1:[opt=true] boolean perform proximity test})"
		],
	},
	"docgen:script_unit:new": {
		"scope": "lua",
		"prefix": "new",
		"description": "script_unit:new()\n-  -\n\nCreates a new script unit.\n",
		"body": [
			"new(${1:army army}, ${2:object reference})"
		],
	},
	"docgen:script_unit:script_unit:new": {
		"scope": "lua",
		"prefix": "script_unit:new",
		"description": "script_unit:new()\n-  -\n\nCreates a new script unit.\n",
		"body": [
			"script_unit:new(${1:army army}, ${2:object reference})"
		],
	},
	"docgen:script_unit:goto_start_location": {
		"scope": "lua",
		"prefix": "goto_start_location",
		"description": "script_unit:goto_start_location()\n-  -\n\nInstructs the scriptunit to move to its start location.\n",
		"body": [
			"goto_start_location(${1:[opt=false] boolean should run})"
		],
	},
	"docgen:script_unit:script_unit:goto_start_location": {
		"scope": "lua",
		"prefix": "script_unit:goto_start_location",
		"description": "script_unit:goto_start_location()\n-  -\n\nInstructs the scriptunit to move to its start location.\n",
		"body": [
			"script_unit:goto_start_location(${1:[opt=false] boolean should run})"
		],
	},
	"docgen:script_unit:teleport_to_start_location": {
		"scope": "lua",
		"prefix": "teleport_to_start_location",
		"description": "script_unit:teleport_to_start_location()\n-  -\n\nTeleports the scriptunit to the position/bearing/width it started the battle at.\n",
		"body": [
			"teleport_to_start_location()"
		],
	},
	"docgen:script_unit:script_unit:teleport_to_start_location": {
		"scope": "lua",
		"prefix": "script_unit:teleport_to_start_location",
		"description": "script_unit:teleport_to_start_location()\n-  -\n\nTeleports the scriptunit to the position/bearing/width it started the battle at.\n",
		"body": [
			"script_unit:teleport_to_start_location()"
		],
	},
	"docgen:script_unit:teleport_to_start_location_offset": {
		"scope": "lua",
		"prefix": "teleport_to_start_location_offset",
		"description": "script_unit:teleport_to_start_location_offset()\n-  -\n\nTeleports the scriptunit to an offset from the position/bearing/width it started the battle at.\n",
		"body": [
			"teleport_to_start_location_offset(${1:number x offset}, ${2:number z offset}, ${3:[opt=nil] number bearing override}, ${4:[opt=false] boolean release control})"
		],
	},
	"docgen:script_unit:script_unit:teleport_to_start_location_offset": {
		"scope": "lua",
		"prefix": "script_unit:teleport_to_start_location_offset",
		"description": "script_unit:teleport_to_start_location_offset()\n-  -\n\nTeleports the scriptunit to an offset from the position/bearing/width it started the battle at.\n",
		"body": [
			"script_unit:teleport_to_start_location_offset(${1:number x offset}, ${2:number z offset}, ${3:[opt=nil] number bearing override}, ${4:[opt=false] boolean release control})"
		],
	},
	"docgen:script_unit:goto_start_location_offset": {
		"scope": "lua",
		"prefix": "goto_start_location_offset",
		"description": "script_unit:goto_start_location_offset()\n-  -\n\nInstructs the scriptunit to move to an offset from the position/bearing/width it started the battle at.\n",
		"body": [
			"goto_start_location_offset(${1:number x offset}, ${2:number z offset}, ${3:[opt=false] boolean should run}, ${4:[opt=nil] number bearing override}, ${5:[opt=false] boolean release control})"
		],
	},
	"docgen:script_unit:script_unit:goto_start_location_offset": {
		"scope": "lua",
		"prefix": "script_unit:goto_start_location_offset",
		"description": "script_unit:goto_start_location_offset()\n-  -\n\nInstructs the scriptunit to move to an offset from the position/bearing/width it started the battle at.\n",
		"body": [
			"script_unit:goto_start_location_offset(${1:number x offset}, ${2:number z offset}, ${3:[opt=false] boolean should run}, ${4:[opt=nil] number bearing override}, ${5:[opt=false] boolean release control})"
		],
	},
	"docgen:script_unit:position_offset": {
		"scope": "lua",
		"prefix": "position_offset",
		"description": "script_unit:position_offset()\n-  -\n\nReturns the position of the scriptunit, offset from its current position.\n",
		"body": [
			"position_offset(${1:number x offset}, ${2:number y offset}, ${3:number z offset}, ${4:[opt=nil] number bearing override})"
		],
	},
	"docgen:script_unit:script_unit:position_offset": {
		"scope": "lua",
		"prefix": "script_unit:position_offset",
		"description": "script_unit:position_offset()\n-  -\n\nReturns the position of the scriptunit, offset from its current position.\n",
		"body": [
			"script_unit:position_offset(${1:number x offset}, ${2:number y offset}, ${3:number z offset}, ${4:[opt=nil] number bearing override})"
		],
	},
	"docgen:script_unit:goto_location_offset": {
		"scope": "lua",
		"prefix": "goto_location_offset",
		"description": "script_unit:goto_location_offset()\n-  -\n\nInstructs the scriptunit to move to an offset from its current position.\n",
		"body": [
			"goto_location_offset(${1:number x offset}, ${2:number z offset}, ${3:[opt=false] boolean should run}, ${4:[opt=nil] number bearing override}, ${5:[opt=false] boolean release control})"
		],
	},
	"docgen:script_unit:script_unit:goto_location_offset": {
		"scope": "lua",
		"prefix": "script_unit:goto_location_offset",
		"description": "script_unit:goto_location_offset()\n-  -\n\nInstructs the scriptunit to move to an offset from its current position.\n",
		"body": [
			"script_unit:goto_location_offset(${1:number x offset}, ${2:number z offset}, ${3:[opt=false] boolean should run}, ${4:[opt=nil] number bearing override}, ${5:[opt=false] boolean release control})"
		],
	},
	"docgen:script_unit:teleport_to_location_offset": {
		"scope": "lua",
		"prefix": "teleport_to_location_offset",
		"description": "script_unit:teleport_to_location_offset()\n-  -\n\nInstructs the scriptunit to teleport to an offset from its current position.\n",
		"body": [
			"teleport_to_location_offset(${1:number x offset}, ${2:number z offset}, ${3:[opt=nil] number bearing override}, ${4:[opt=false] boolean release control})"
		],
	},
	"docgen:script_unit:script_unit:teleport_to_location_offset": {
		"scope": "lua",
		"prefix": "script_unit:teleport_to_location_offset",
		"description": "script_unit:teleport_to_location_offset()\n-  -\n\nInstructs the scriptunit to teleport to an offset from its current position.\n",
		"body": [
			"script_unit:teleport_to_location_offset(${1:number x offset}, ${2:number z offset}, ${3:[opt=nil] number bearing override}, ${4:[opt=false] boolean release control})"
		],
	},
	"docgen:script_unit:goto_location_offset_when_deployed": {
		"scope": "lua",
		"prefix": "goto_location_offset_when_deployed",
		"description": "script_unit:goto_location_offset_when_deployed()\n-  -\n\nInstructs the scriptunit to goto an offset from its location when it deploys.\n",
		"body": [
			"goto_location_offset_when_deployed(${1:number x offset}, ${2:number z offset}, ${3:[opt=false] boolean should run}, ${4:[opt=nil] number bearing override}, ${5:[opt=false] boolean release control})"
		],
	},
	"docgen:script_unit:script_unit:goto_location_offset_when_deployed": {
		"scope": "lua",
		"prefix": "script_unit:goto_location_offset_when_deployed",
		"description": "script_unit:goto_location_offset_when_deployed()\n-  -\n\nInstructs the scriptunit to goto an offset from its location when it deploys.\n",
		"body": [
			"script_unit:goto_location_offset_when_deployed(${1:number x offset}, ${2:number z offset}, ${3:[opt=false] boolean should run}, ${4:[opt=nil] number bearing override}, ${5:[opt=false] boolean release control})"
		],
	},
	"docgen:script_unit:stop_goto_location_offset_when_deployed": {
		"scope": "lua",
		"prefix": "stop_goto_location_offset_when_deployed",
		"description": "script_unit:stop_goto_location_offset_when_deployed()\n-  -\n\nStops a running script_unit:goto_location_offset_when_deployed listener on the current unit.\n",
		"body": [
			"stop_goto_location_offset_when_deployed()"
		],
	},
	"docgen:script_unit:script_unit:stop_goto_location_offset_when_deployed": {
		"scope": "lua",
		"prefix": "script_unit:stop_goto_location_offset_when_deployed",
		"description": "script_unit:stop_goto_location_offset_when_deployed()\n-  -\n\nStops a running script_unit:goto_location_offset_when_deployed listener on the current unit.\n",
		"body": [
			"script_unit:stop_goto_location_offset_when_deployed()"
		],
	},
	"docgen:script_unit:turn_to_face": {
		"scope": "lua",
		"prefix": "turn_to_face",
		"description": "script_unit:turn_to_face()\n-  -\n\nInstructs the scriptunit to turn to face a position vector.\n",
		"body": [
			"turn_to_face(${1:vector position})"
		],
	},
	"docgen:script_unit:script_unit:turn_to_face": {
		"scope": "lua",
		"prefix": "script_unit:turn_to_face",
		"description": "script_unit:turn_to_face()\n-  -\n\nInstructs the scriptunit to turn to face a position vector.\n",
		"body": [
			"script_unit:turn_to_face(${1:vector position})"
		],
	},
	"docgen:script_unit:teleport_to_location": {
		"scope": "lua",
		"prefix": "teleport_to_location",
		"description": "script_unit:teleport_to_location()\n-  -\n\nInstructs the scriptunit to teleport to a location.\n",
		"body": [
			"teleport_to_location(${1:vector position}, ${2:number bearing}, ${3:number width})"
		],
	},
	"docgen:script_unit:script_unit:teleport_to_location": {
		"scope": "lua",
		"prefix": "script_unit:teleport_to_location",
		"description": "script_unit:teleport_to_location()\n-  -\n\nInstructs the scriptunit to teleport to a location.\n",
		"body": [
			"script_unit:teleport_to_location(${1:vector position}, ${2:number bearing}, ${3:number width})"
		],
	},
	"docgen:script_unit:cache_location": {
		"scope": "lua",
		"prefix": "cache_location",
		"description": "script_unit:cache_location()\n-  -\n\nCaches the units current position, bearing and width.\n",
		"body": [
			"cache_location()"
		],
	},
	"docgen:script_unit:script_unit:cache_location": {
		"scope": "lua",
		"prefix": "script_unit:cache_location",
		"description": "script_unit:cache_location()\n-  -\n\nCaches the units current position, bearing and width.\n",
		"body": [
			"script_unit:cache_location()"
		],
	},
	"docgen:script_unit:get_cached_position": {
		"scope": "lua",
		"prefix": "get_cached_position",
		"description": "script_unit:get_cached_position()\n-  -\n\nReturns the vector position of the unit last time it was cached with script_unit:cache_location.\n",
		"body": [
			"get_cached_position()"
		],
	},
	"docgen:script_unit:script_unit:get_cached_position": {
		"scope": "lua",
		"prefix": "script_unit:get_cached_position",
		"description": "script_unit:get_cached_position()\n-  -\n\nReturns the vector position of the unit last time it was cached with script_unit:cache_location.\n",
		"body": [
			"script_unit:get_cached_position()"
		],
	},
	"docgen:script_unit:get_cached_bearing": {
		"scope": "lua",
		"prefix": "get_cached_bearing",
		"description": "script_unit:get_cached_bearing()\n-  -\n\nReturns the bearing of the unit in degrees last time it was cached with script_unit:cache_location.\n",
		"body": [
			"get_cached_bearing()"
		],
	},
	"docgen:script_unit:script_unit:get_cached_bearing": {
		"scope": "lua",
		"prefix": "script_unit:get_cached_bearing",
		"description": "script_unit:get_cached_bearing()\n-  -\n\nReturns the bearing of the unit in degrees last time it was cached with script_unit:cache_location.\n",
		"body": [
			"script_unit:get_cached_bearing()"
		],
	},
	"docgen:script_unit:get_cached_width": {
		"scope": "lua",
		"prefix": "get_cached_width",
		"description": "script_unit:get_cached_width()\n-  -\n\nReturns the width of the unit in m last time it was cached with script_unit:cache_location.\n",
		"body": [
			"get_cached_width()"
		],
	},
	"docgen:script_unit:script_unit:get_cached_width": {
		"scope": "lua",
		"prefix": "script_unit:get_cached_width",
		"description": "script_unit:get_cached_width()\n-  -\n\nReturns the width of the unit in m last time it was cached with script_unit:cache_location.\n",
		"body": [
			"script_unit:get_cached_width()"
		],
	},
	"docgen:script_unit:goto_cached_location": {
		"scope": "lua",
		"prefix": "goto_cached_location",
		"description": "script_unit:goto_cached_location()\n-  -\n\nInstructs the scriptunit to move to the location the unit occupied the last time it was cached with script_unit:cache_location.\n",
		"body": [
			"goto_cached_location(${1:[opt=false] boolean should run})"
		],
	},
	"docgen:script_unit:script_unit:goto_cached_location": {
		"scope": "lua",
		"prefix": "script_unit:goto_cached_location",
		"description": "script_unit:goto_cached_location()\n-  -\n\nInstructs the scriptunit to move to the location the unit occupied the last time it was cached with script_unit:cache_location.\n",
		"body": [
			"script_unit:goto_cached_location(${1:[opt=false] boolean should run})"
		],
	},
	"docgen:script_unit:teleport_to_cached_location": {
		"scope": "lua",
		"prefix": "teleport_to_cached_location",
		"description": "script_unit:teleport_to_cached_location()\n-  -\n\nTeleports the scriptunit to the location the unit occupied the last time it was cached with script_unit:cache_location.\n",
		"body": [
			"teleport_to_cached_location()"
		],
	},
	"docgen:script_unit:script_unit:teleport_to_cached_location": {
		"scope": "lua",
		"prefix": "script_unit:teleport_to_cached_location",
		"description": "script_unit:teleport_to_cached_location()\n-  -\n\nTeleports the scriptunit to the location the unit occupied the last time it was cached with script_unit:cache_location.\n",
		"body": [
			"script_unit:teleport_to_cached_location()"
		],
	},
	"docgen:script_unit:has_moved": {
		"scope": "lua",
		"prefix": "has_moved",
		"description": "script_unit:has_moved()\n-  -\n\nReturns true if the scriptunit has moved from the last cached position, or an optional supplied position.\n",
		"body": [
			"has_moved(${1:[opt=nil] vector position override}, ${2:[opt=1] number threshold distance})"
		],
	},
	"docgen:script_unit:script_unit:has_moved": {
		"scope": "lua",
		"prefix": "script_unit:has_moved",
		"description": "script_unit:has_moved()\n-  -\n\nReturns true if the scriptunit has moved from the last cached position, or an optional supplied position.\n",
		"body": [
			"script_unit:has_moved(${1:[opt=nil] vector position override}, ${2:[opt=1] number threshold distance})"
		],
	},
	"docgen:script_unit:cache_destination": {
		"scope": "lua",
		"prefix": "cache_destination",
		"description": "script_unit:cache_destination()\n-  -\n\nCaches the current destination position of the scriptunit.\n",
		"body": [
			"cache_destination()"
		],
	},
	"docgen:script_unit:script_unit:cache_destination": {
		"scope": "lua",
		"prefix": "script_unit:cache_destination",
		"description": "script_unit:cache_destination()\n-  -\n\nCaches the current destination position of the scriptunit.\n",
		"body": [
			"script_unit:cache_destination()"
		],
	},
	"docgen:script_unit:cache_destination_and_halt": {
		"scope": "lua",
		"prefix": "cache_destination_and_halt",
		"description": "script_unit:cache_destination_and_halt()\n-  -\n\nCaches the current destination position of the scriptunit with script_unit:cache_destination, and then orders the unit to halt.\n",
		"body": [
			"cache_destination_and_halt()"
		],
	},
	"docgen:script_unit:script_unit:cache_destination_and_halt": {
		"scope": "lua",
		"prefix": "script_unit:cache_destination_and_halt",
		"description": "script_unit:cache_destination_and_halt()\n-  -\n\nCaches the current destination position of the scriptunit with script_unit:cache_destination, and then orders the unit to halt.\n",
		"body": [
			"script_unit:cache_destination_and_halt()"
		],
	},
	"docgen:script_unit:get_cached_destination_position": {
		"scope": "lua",
		"prefix": "get_cached_destination_position",
		"description": "script_unit:get_cached_destination_position()\n-  -\n\nReturns the vector destination last cached by script_unit:cache_destination.\n",
		"body": [
			"get_cached_destination_position()"
		],
	},
	"docgen:script_unit:script_unit:get_cached_destination_position": {
		"scope": "lua",
		"prefix": "script_unit:get_cached_destination_position",
		"description": "script_unit:get_cached_destination_position()\n-  -\n\nReturns the vector destination last cached by script_unit:cache_destination.\n",
		"body": [
			"script_unit:get_cached_destination_position()"
		],
	},
	"docgen:script_unit:get_cached_destination_bearing": {
		"scope": "lua",
		"prefix": "get_cached_destination_bearing",
		"description": "script_unit:get_cached_destination_bearing()\n-  -\n\nReturns the ordered bearing in degrees that was last cached by script_unit:cache_destination.\n",
		"body": [
			"get_cached_destination_bearing()"
		],
	},
	"docgen:script_unit:script_unit:get_cached_destination_bearing": {
		"scope": "lua",
		"prefix": "script_unit:get_cached_destination_bearing",
		"description": "script_unit:get_cached_destination_bearing()\n-  -\n\nReturns the ordered bearing in degrees that was last cached by script_unit:cache_destination.\n",
		"body": [
			"script_unit:get_cached_destination_bearing()"
		],
	},
	"docgen:script_unit:get_cached_destination_width": {
		"scope": "lua",
		"prefix": "get_cached_destination_width",
		"description": "script_unit:get_cached_destination_width()\n-  -\n\nReturns the ordered width in m that was last cached by script_unit:cache_destination.\n",
		"body": [
			"get_cached_destination_width()"
		],
	},
	"docgen:script_unit:script_unit:get_cached_destination_width": {
		"scope": "lua",
		"prefix": "script_unit:get_cached_destination_width",
		"description": "script_unit:get_cached_destination_width()\n-  -\n\nReturns the ordered width in m that was last cached by script_unit:cache_destination.\n",
		"body": [
			"script_unit:get_cached_destination_width()"
		],
	},
	"docgen:script_unit:goto_cached_destination": {
		"scope": "lua",
		"prefix": "goto_cached_destination",
		"description": "script_unit:goto_cached_destination()\n-  -\n\nInstructs the unit to move to the location last cached by script_unit:cache_destination.\n",
		"body": [
			"goto_cached_destination(${1:[opt=false] boolean should release})"
		],
	},
	"docgen:script_unit:script_unit:goto_cached_destination": {
		"scope": "lua",
		"prefix": "script_unit:goto_cached_destination",
		"description": "script_unit:goto_cached_destination()\n-  -\n\nInstructs the unit to move to the location last cached by script_unit:cache_destination.\n",
		"body": [
			"script_unit:goto_cached_destination(${1:[opt=false] boolean should release})"
		],
	},
	"docgen:script_unit:cache_health": {
		"scope": "lua",
		"prefix": "cache_health",
		"description": "script_unit:cache_health()\n-  -\n\nCaches the proportion of the scriptunit still alive, so that it can be queried later with script_unit:has_taken_casualties.\n",
		"body": [
			"cache_health()"
		],
	},
	"docgen:script_unit:script_unit:cache_health": {
		"scope": "lua",
		"prefix": "script_unit:cache_health",
		"description": "script_unit:cache_health()\n-  -\n\nCaches the proportion of the scriptunit still alive, so that it can be queried later with script_unit:has_taken_casualties.\n",
		"body": [
			"script_unit:cache_health()"
		],
	},
	"docgen:script_unit:has_taken_casualties": {
		"scope": "lua",
		"prefix": "has_taken_casualties",
		"description": "script_unit:has_taken_casualties()\n-  -\n\nCompares the scriptunits current casualties with that when it was previously cached with script_unit:cache_health, and returns true if they're different.\n",
		"body": [
			"has_taken_casualties(${1:[opt=0] number tolerance})"
		],
	},
	"docgen:script_unit:script_unit:has_taken_casualties": {
		"scope": "lua",
		"prefix": "script_unit:has_taken_casualties",
		"description": "script_unit:has_taken_casualties()\n-  -\n\nCompares the scriptunits current casualties with that when it was previously cached with script_unit:cache_health, and returns true if they're different.\n",
		"body": [
			"script_unit:has_taken_casualties(${1:[opt=0] number tolerance})"
		],
	},
	"docgen:script_unit:is_under_attack": {
		"scope": "lua",
		"prefix": "is_under_attack",
		"description": "script_unit:is_under_attack()\n-  -\n\nReturns true if the unit is under missile attack, in melee, or has casualties since the last time <code>is_under_attack</code> was called.\n",
		"body": [
			"is_under_attack()"
		],
	},
	"docgen:script_unit:script_unit:is_under_attack": {
		"scope": "lua",
		"prefix": "script_unit:is_under_attack",
		"description": "script_unit:is_under_attack()\n-  -\n\nReturns true if the unit is under missile attack, in melee, or has casualties since the last time <code>is_under_attack</code> was called.\n",
		"body": [
			"script_unit:is_under_attack()"
		],
	},
	"docgen:script_unit:is_in_melee": {
		"scope": "lua",
		"prefix": "is_in_melee",
		"description": "script_unit:is_in_melee()\n-  -\n\nReturns true if the unit is in melee.\n",
		"body": [
			"is_in_melee()"
		],
	},
	"docgen:script_unit:script_unit:is_in_melee": {
		"scope": "lua",
		"prefix": "script_unit:is_in_melee",
		"description": "script_unit:is_in_melee()\n-  -\n\nReturns true if the unit is in melee.\n",
		"body": [
			"script_unit:is_in_melee()"
		],
	},
	"docgen:script_unit:halt": {
		"scope": "lua",
		"prefix": "halt",
		"description": "script_unit:halt()\n-  -\n\nInstructs the scriptunit to halt.\n",
		"body": [
			"halt()"
		],
	},
	"docgen:script_unit:script_unit:halt": {
		"scope": "lua",
		"prefix": "script_unit:halt",
		"description": "script_unit:halt()\n-  -\n\nInstructs the scriptunit to halt.\n",
		"body": [
			"script_unit:halt()"
		],
	},
	"docgen:script_unit:celebrate": {
		"scope": "lua",
		"prefix": "celebrate",
		"description": "script_unit:celebrate()\n-  -\n\nInstructs the scriptunit to celebrate.\n",
		"body": [
			"celebrate()"
		],
	},
	"docgen:script_unit:script_unit:celebrate": {
		"scope": "lua",
		"prefix": "script_unit:celebrate",
		"description": "script_unit:celebrate()\n-  -\n\nInstructs the scriptunit to celebrate.\n",
		"body": [
			"script_unit:celebrate()"
		],
	},
	"docgen:script_unit:taunt": {
		"scope": "lua",
		"prefix": "taunt",
		"description": "script_unit:taunt()\n-  -\n\nInstructs the scriptunit to taunt.\n",
		"body": [
			"taunt()"
		],
	},
	"docgen:script_unit:script_unit:taunt": {
		"scope": "lua",
		"prefix": "script_unit:taunt",
		"description": "script_unit:taunt()\n-  -\n\nInstructs the scriptunit to taunt.\n",
		"body": [
			"script_unit:taunt()"
		],
	},
	"docgen:script_unit:play_sound_charge": {
		"scope": "lua",
		"prefix": "play_sound_charge",
		"description": "script_unit:play_sound_charge()\n-  -\n\nInstructs the scriptunit to play a charge sound.\n",
		"body": [
			"play_sound_charge()"
		],
	},
	"docgen:script_unit:script_unit:play_sound_charge": {
		"scope": "lua",
		"prefix": "script_unit:play_sound_charge",
		"description": "script_unit:play_sound_charge()\n-  -\n\nInstructs the scriptunit to play a charge sound.\n",
		"body": [
			"script_unit:play_sound_charge()"
		],
	},
	"docgen:script_unit:play_sound_taunt": {
		"scope": "lua",
		"prefix": "play_sound_taunt",
		"description": "script_unit:play_sound_taunt()\n-  -\n\nInstructs the scriptunit to play a taunt sound.\n",
		"body": [
			"play_sound_taunt()"
		],
	},
	"docgen:script_unit:script_unit:play_sound_taunt": {
		"scope": "lua",
		"prefix": "script_unit:play_sound_taunt",
		"description": "script_unit:play_sound_taunt()\n-  -\n\nInstructs the scriptunit to play a taunt sound.\n",
		"body": [
			"script_unit:play_sound_taunt()"
		],
	},
	"docgen:script_unit:deploy_reinforcement": {
		"scope": "lua",
		"prefix": "deploy_reinforcement",
		"description": "script_unit:deploy_reinforcement()\n-  -\n\nInstructs the scriptunit to deploy or not.\n",
		"body": [
			"deploy_reinforcement(${1:[opt=true] boolean should deploy})"
		],
	},
	"docgen:script_unit:script_unit:deploy_reinforcement": {
		"scope": "lua",
		"prefix": "script_unit:deploy_reinforcement",
		"description": "script_unit:deploy_reinforcement()\n-  -\n\nInstructs the scriptunit to deploy or not.\n",
		"body": [
			"script_unit:deploy_reinforcement(${1:[opt=true] boolean should deploy})"
		],
	},
	"docgen:script_unit:change_behaviour_active": {
		"scope": "lua",
		"prefix": "change_behaviour_active",
		"description": "script_unit:change_behaviour_active()\n-  -\n\nSets a supplied behaviour active on the unit or not.\n",
		"body": [
			"change_behaviour_active(${1:string behaviour name}, ${2:boolean activate})"
		],
	},
	"docgen:script_unit:script_unit:change_behaviour_active": {
		"scope": "lua",
		"prefix": "script_unit:change_behaviour_active",
		"description": "script_unit:change_behaviour_active()\n-  -\n\nSets a supplied behaviour active on the unit or not.\n",
		"body": [
			"script_unit:change_behaviour_active(${1:string behaviour name}, ${2:boolean activate})"
		],
	},
	"docgen:script_unit:withdraw": {
		"scope": "lua",
		"prefix": "withdraw",
		"description": "script_unit:withdraw()\n-  -\n\nInstructs the specified unit to withdraw.\n",
		"body": [
			"withdraw(${1:boolean should run})"
		],
	},
	"docgen:script_unit:script_unit:withdraw": {
		"scope": "lua",
		"prefix": "script_unit:withdraw",
		"description": "script_unit:withdraw()\n-  -\n\nInstructs the specified unit to withdraw.\n",
		"body": [
			"script_unit:withdraw(${1:boolean should run})"
		],
	},
	"docgen:script_unit:set_melee_mode": {
		"scope": "lua",
		"prefix": "set_melee_mode",
		"description": "script_unit:set_melee_mode()\n-  -\n\nActivates or deactivates melee mode.\n",
		"body": [
			"set_melee_mode(${1:[opt=true] boolean activate}, ${2:[opt=false] boolean release control})"
		],
	},
	"docgen:script_unit:script_unit:set_melee_mode": {
		"scope": "lua",
		"prefix": "script_unit:set_melee_mode",
		"description": "script_unit:set_melee_mode()\n-  -\n\nActivates or deactivates melee mode.\n",
		"body": [
			"script_unit:set_melee_mode(${1:[opt=true] boolean activate}, ${2:[opt=false] boolean release control})"
		],
	},
	"docgen:script_unit:set_enabled": {
		"scope": "lua",
		"prefix": "set_enabled",
		"description": "script_unit:set_enabled()\n-  -\n\nSets the unit to be enabled and visible if <code>true</code> is supplied as an argument, or disabled and invisible if <code>false</code> is supplied.\n",
		"body": [
			"set_enabled(${1:[opt=true] boolean enabled})"
		],
	},
	"docgen:script_unit:script_unit:set_enabled": {
		"scope": "lua",
		"prefix": "script_unit:set_enabled",
		"description": "script_unit:set_enabled()\n-  -\n\nSets the unit to be enabled and visible if <code>true</code> is supplied as an argument, or disabled and invisible if <code>false</code> is supplied.\n",
		"body": [
			"script_unit:set_enabled(${1:[opt=true] boolean enabled})"
		],
	},
	"docgen:script_unit:set_always_visible": {
		"scope": "lua",
		"prefix": "set_always_visible",
		"description": "script_unit:set_always_visible()\n-  -\n\nSets the unit to be always visible, according to the rules of the terrain visibility system.\n",
		"body": [
			"set_always_visible(${1:[opt=true] boolean always visible})"
		],
	},
	"docgen:script_unit:script_unit:set_always_visible": {
		"scope": "lua",
		"prefix": "script_unit:set_always_visible",
		"description": "script_unit:set_always_visible()\n-  -\n\nSets the unit to be always visible, according to the rules of the terrain visibility system.\n",
		"body": [
			"script_unit:set_always_visible(${1:[opt=true] boolean always visible})"
		],
	},
	"docgen:script_unit:mark_as_ally": {
		"scope": "lua",
		"prefix": "mark_as_ally",
		"description": "script_unit:mark_as_ally()\n-  -\n\nMakes player unit look like ally (for script where gradually give units in tutorials).\n",
		"body": [
			"mark_as_ally(${1:boolean mark as ally})"
		],
	},
	"docgen:script_unit:script_unit:mark_as_ally": {
		"scope": "lua",
		"prefix": "script_unit:mark_as_ally",
		"description": "script_unit:mark_as_ally()\n-  -\n\nMakes player unit look like ally (for script where gradually give units in tutorials).\n",
		"body": [
			"script_unit:mark_as_ally(${1:boolean mark as ally})"
		],
	},
	"docgen:script_unit:is_hidden": {
		"scope": "lua",
		"prefix": "is_hidden",
		"description": "script_unit:is_hidden()\n-  -\n\nReturns true if the unit is hidden in grass/forests etc.\n",
		"body": [
			"is_hidden()"
		],
	},
	"docgen:script_unit:script_unit:is_hidden": {
		"scope": "lua",
		"prefix": "script_unit:is_hidden",
		"description": "script_unit:is_hidden()\n-  -\n\nReturns true if the unit is hidden in grass/forests etc.\n",
		"body": [
			"script_unit:is_hidden()"
		],
	},
	"docgen:script_unit:set_invisible_to_all": {
		"scope": "lua",
		"prefix": "set_invisible_to_all",
		"description": "script_unit:set_invisible_to_all()\n-  -\n\nMakes the unit invisible.\n",
		"body": [
			"set_invisible_to_all(${1:boolean is hidden})"
		],
	},
	"docgen:script_unit:script_unit:set_invisible_to_all": {
		"scope": "lua",
		"prefix": "script_unit:set_invisible_to_all",
		"description": "script_unit:set_invisible_to_all()\n-  -\n\nMakes the unit invisible.\n",
		"body": [
			"script_unit:set_invisible_to_all(${1:boolean is hidden})"
		],
	},
	"docgen:script_unit:is_visible_to_enemy": {
		"scope": "lua",
		"prefix": "is_visible_to_enemy",
		"description": "script_unit:is_visible_to_enemy()\n-  -\n\nReturns true if this unit is visible to its enemy, by the rules of the visibility system.\n",
		"body": [
			"is_visible_to_enemy(${1:boolean is visible})"
		],
	},
	"docgen:script_unit:script_unit:is_visible_to_enemy": {
		"scope": "lua",
		"prefix": "script_unit:is_visible_to_enemy",
		"description": "script_unit:is_visible_to_enemy()\n-  -\n\nReturns true if this unit is visible to its enemy, by the rules of the visibility system.\n",
		"body": [
			"script_unit:is_visible_to_enemy(${1:boolean is visible})"
		],
	},
	"docgen:script_unit:take_control": {
		"scope": "lua",
		"prefix": "take_control",
		"description": "script_unit:take_control()\n-  -\n\nTakes script control of this unit.\n",
		"body": [
			"take_control()"
		],
	},
	"docgen:script_unit:script_unit:take_control": {
		"scope": "lua",
		"prefix": "script_unit:take_control",
		"description": "script_unit:take_control()\n-  -\n\nTakes script control of this unit.\n",
		"body": [
			"script_unit:take_control()"
		],
	},
	"docgen:script_unit:release_control": {
		"scope": "lua",
		"prefix": "release_control",
		"description": "script_unit:release_control()\n-  -\n\nReleases script control of the subject unit.\n",
		"body": [
			"release_control()"
		],
	},
	"docgen:script_unit:script_unit:release_control": {
		"scope": "lua",
		"prefix": "script_unit:release_control",
		"description": "script_unit:release_control()\n-  -\n\nReleases script control of the subject unit.\n",
		"body": [
			"script_unit:release_control()"
		],
	},
	"docgen:script_unit:modify_ammo": {
		"scope": "lua",
		"prefix": "modify_ammo",
		"description": "script_unit:modify_ammo()\n-  -\n\nModifies this unit's ammo to a specified unary proportion of its starting value.\n",
		"body": [
			"modify_ammo(${1:number proportion})"
		],
	},
	"docgen:script_unit:script_unit:modify_ammo": {
		"scope": "lua",
		"prefix": "script_unit:modify_ammo",
		"description": "script_unit:modify_ammo()\n-  -\n\nModifies this unit's ammo to a specified unary proportion of its starting value.\n",
		"body": [
			"script_unit:modify_ammo(${1:number proportion})"
		],
	},
	"docgen:script_unit:refill_ammo": {
		"scope": "lua",
		"prefix": "refill_ammo",
		"description": "script_unit:refill_ammo()\n-  -\n\nModifies this unit's ammo to a specified unary proportion of its starting value, but only if it has less than the specified amount.\n",
		"body": [
			"refill_ammo(${1:number proportion})"
		],
	},
	"docgen:script_unit:script_unit:refill_ammo": {
		"scope": "lua",
		"prefix": "script_unit:refill_ammo",
		"description": "script_unit:refill_ammo()\n-  -\n\nModifies this unit's ammo to a specified unary proportion of its starting value, but only if it has less than the specified amount.\n",
		"body": [
			"script_unit:refill_ammo(${1:number proportion})"
		],
	},
	"docgen:script_unit:grant_infinite_ammo": {
		"scope": "lua",
		"prefix": "grant_infinite_ammo",
		"description": "script_unit:grant_infinite_ammo()\n-  -\n\nGrants this unit infinite ammo by refilling ammo every 5 seconds.\n",
		"body": [
			"grant_infinite_ammo()"
		],
	},
	"docgen:script_unit:script_unit:grant_infinite_ammo": {
		"scope": "lua",
		"prefix": "script_unit:grant_infinite_ammo",
		"description": "script_unit:grant_infinite_ammo()\n-  -\n\nGrants this unit infinite ammo by refilling ammo every 5 seconds.\n",
		"body": [
			"script_unit:grant_infinite_ammo()"
		],
	},
	"docgen:script_unit:refresh": {
		"scope": "lua",
		"prefix": "refresh",
		"description": "script_unit:refresh()\n-  -\n\nSets this unit to 1/10th its current fatigue level, and tops its ammo back to full.\n",
		"body": [
			"refresh(${1:[opt=false] boolean should release})"
		],
	},
	"docgen:script_unit:script_unit:refresh": {
		"scope": "lua",
		"prefix": "script_unit:refresh",
		"description": "script_unit:refresh()\n-  -\n\nSets this unit to 1/10th its current fatigue level, and tops its ammo back to full.\n",
		"body": [
			"script_unit:refresh(${1:[opt=false] boolean should release})"
		],
	},
	"docgen:script_unit:cache_ammo": {
		"scope": "lua",
		"prefix": "cache_ammo",
		"description": "script_unit:cache_ammo()\n-  -\n\nCaches this unit's current ammunition level.\n",
		"body": [
			"cache_ammo()"
		],
	},
	"docgen:script_unit:script_unit:cache_ammo": {
		"scope": "lua",
		"prefix": "script_unit:cache_ammo",
		"description": "script_unit:cache_ammo()\n-  -\n\nCaches this unit's current ammunition level.\n",
		"body": [
			"script_unit:cache_ammo()"
		],
	},
	"docgen:script_unit:restore_cached_ammo": {
		"scope": "lua",
		"prefix": "restore_cached_ammo",
		"description": "script_unit:restore_cached_ammo()\n-  -\n\nRestores this unit's ammunition level to the value previously cached with script_unit:cache_ammo.\n",
		"body": [
			"restore_cached_ammo()"
		],
	},
	"docgen:script_unit:script_unit:restore_cached_ammo": {
		"scope": "lua",
		"prefix": "script_unit:restore_cached_ammo",
		"description": "script_unit:restore_cached_ammo()\n-  -\n\nRestores this unit's ammunition level to the value previously cached with script_unit:cache_ammo.\n",
		"body": [
			"script_unit:restore_cached_ammo()"
		],
	},
	"docgen:script_unit:unary_hitpoints": {
		"scope": "lua",
		"prefix": "unary_hitpoints",
		"description": "script_unit:unary_hitpoints()\n-  -\n\nReturns this unit's hitpoints as a unary of its initial value.\n",
		"body": [
			"unary_hitpoints()"
		],
	},
	"docgen:script_unit:script_unit:unary_hitpoints": {
		"scope": "lua",
		"prefix": "script_unit:unary_hitpoints",
		"description": "script_unit:unary_hitpoints()\n-  -\n\nReturns this unit's hitpoints as a unary of its initial value.\n",
		"body": [
			"script_unit:unary_hitpoints()"
		],
	},
	"docgen:script_unit:max_casualties": {
		"scope": "lua",
		"prefix": "max_casualties",
		"description": "script_unit:max_casualties()\n-  -\n\nSets the maximum number of casualties that this unit can take.\n",
		"body": [
			"max_casualties(${1:number unary proportion}, ${2:<opt=false> boolean should release}, ${3:object exception sunit(s)}, ${4:<opt=false> boolean silent mode})"
		],
	},
	"docgen:script_unit:script_unit:max_casualties": {
		"scope": "lua",
		"prefix": "script_unit:max_casualties",
		"description": "script_unit:max_casualties()\n-  -\n\nSets the maximum number of casualties that this unit can take.\n",
		"body": [
			"script_unit:max_casualties(${1:number unary proportion}, ${2:<opt=false> boolean should release}, ${3:object exception sunit(s)}, ${4:<opt=false> boolean silent mode})"
		],
	},
	"docgen:script_unit:fearless_until_casualties": {
		"scope": "lua",
		"prefix": "fearless_until_casualties",
		"description": "script_unit:fearless_until_casualties()\n-  -\n\nPrevents this unit from routing until it takes a certain proportion of casualties.\n",
		"body": [
			"fearless_until_casualties(${1:unary proportion}, ${2:[opt=false] boolean should release})"
		],
	},
	"docgen:script_unit:script_unit:fearless_until_casualties": {
		"scope": "lua",
		"prefix": "script_unit:fearless_until_casualties",
		"description": "script_unit:fearless_until_casualties()\n-  -\n\nPrevents this unit from routing until it takes a certain proportion of casualties.\n",
		"body": [
			"script_unit:fearless_until_casualties(${1:unary proportion}, ${2:[opt=false] boolean should release})"
		],
	},
	"docgen:script_unit:rout_on_casualties": {
		"scope": "lua",
		"prefix": "rout_on_casualties",
		"description": "script_unit:rout_on_casualties()\n-  -\n\nForces this unit to rout when it reaches a certain proportion of casualties.\n",
		"body": [
			"rout_on_casualties(${1:unary proportion})"
		],
	},
	"docgen:script_unit:script_unit:rout_on_casualties": {
		"scope": "lua",
		"prefix": "script_unit:rout_on_casualties",
		"description": "script_unit:rout_on_casualties()\n-  -\n\nForces this unit to rout when it reaches a certain proportion of casualties.\n",
		"body": [
			"script_unit:rout_on_casualties(${1:unary proportion})"
		],
	},
	"docgen:script_unit:invincible_if_standing": {
		"scope": "lua",
		"prefix": "invincible_if_standing",
		"description": "script_unit:invincible_if_standing()\n-  -\n\nMakes the subject unit invincible/fearless if it's not already routing.\n",
		"body": [
			"invincible_if_standing(${1:[opt=false] boolean should release})"
		],
	},
	"docgen:script_unit:script_unit:invincible_if_standing": {
		"scope": "lua",
		"prefix": "script_unit:invincible_if_standing",
		"description": "script_unit:invincible_if_standing()\n-  -\n\nMakes the subject unit invincible/fearless if it's not already routing.\n",
		"body": [
			"script_unit:invincible_if_standing(${1:[opt=false] boolean should release})"
		],
	},
	"docgen:script_unit:set_invincible": {
		"scope": "lua",
		"prefix": "set_invincible",
		"description": "script_unit:set_invincible()\n-  -\n\nMakes the subject unit invincible.\n",
		"body": [
			"set_invincible(${1:boolean set invincible})"
		],
	},
	"docgen:script_unit:script_unit:set_invincible": {
		"scope": "lua",
		"prefix": "script_unit:set_invincible",
		"description": "script_unit:set_invincible()\n-  -\n\nMakes the subject unit invincible.\n",
		"body": [
			"script_unit:set_invincible(${1:boolean set invincible})"
		],
	},
	"docgen:script_unit:prevent_rallying_if_routing": {
		"scope": "lua",
		"prefix": "prevent_rallying_if_routing",
		"description": "script_unit:prevent_rallying_if_routing()\n-  -\n\nPrevents the subject unit from rallying if it's already routing.\n",
		"body": [
			"prevent_rallying_if_routing(${1:[opt=false] boolean check perpetually})"
		],
	},
	"docgen:script_unit:script_unit:prevent_rallying_if_routing": {
		"scope": "lua",
		"prefix": "script_unit:prevent_rallying_if_routing",
		"description": "script_unit:prevent_rallying_if_routing()\n-  -\n\nPrevents the subject unit from rallying if it's already routing.\n",
		"body": [
			"script_unit:prevent_rallying_if_routing(${1:[opt=false] boolean check perpetually})"
		],
	},
	"docgen:script_unit:stop_prevent_rallying_if_routing": {
		"scope": "lua",
		"prefix": "stop_prevent_rallying_if_routing",
		"description": "script_unit:stop_prevent_rallying_if_routing()\n-  -\n\nStops any running monitor started by script_unit:prevent_rallying_if_routing.\n",
		"body": [
			"stop_prevent_rallying_if_routing()"
		],
	},
	"docgen:script_unit:script_unit:stop_prevent_rallying_if_routing": {
		"scope": "lua",
		"prefix": "script_unit:stop_prevent_rallying_if_routing",
		"description": "script_unit:stop_prevent_rallying_if_routing()\n-  -\n\nStops any running monitor started by script_unit:prevent_rallying_if_routing.\n",
		"body": [
			"script_unit:stop_prevent_rallying_if_routing()"
		],
	},
	"docgen:script_unit:morale_behavior_fearless": {
		"scope": "lua",
		"prefix": "morale_behavior_fearless",
		"description": "script_unit:morale_behavior_fearless()\n-  -\n\nSets this unit to be fearless/unroutable.\n",
		"body": [
			"morale_behavior_fearless()"
		],
	},
	"docgen:script_unit:script_unit:morale_behavior_fearless": {
		"scope": "lua",
		"prefix": "script_unit:morale_behavior_fearless",
		"description": "script_unit:morale_behavior_fearless()\n-  -\n\nSets this unit to be fearless/unroutable.\n",
		"body": [
			"script_unit:morale_behavior_fearless()"
		],
	},
	"docgen:script_unit:morale_behavior_rout": {
		"scope": "lua",
		"prefix": "morale_behavior_rout",
		"description": "script_unit:morale_behavior_rout()\n-  -\n\nCauses this unit to instantly rout.\n",
		"body": [
			"morale_behavior_rout()"
		],
	},
	"docgen:script_unit:script_unit:morale_behavior_rout": {
		"scope": "lua",
		"prefix": "script_unit:morale_behavior_rout",
		"description": "script_unit:morale_behavior_rout()\n-  -\n\nCauses this unit to instantly rout.\n",
		"body": [
			"script_unit:morale_behavior_rout()"
		],
	},
	"docgen:script_unit:morale_behavior_default": {
		"scope": "lua",
		"prefix": "morale_behavior_default",
		"description": "script_unit:morale_behavior_default()\n-  -\n\nCauses this unit to be subject to normal morale.\n",
		"body": [
			"morale_behavior_default()"
		],
	},
	"docgen:script_unit:script_unit:morale_behavior_default": {
		"scope": "lua",
		"prefix": "script_unit:morale_behavior_default",
		"description": "script_unit:morale_behavior_default()\n-  -\n\nCauses this unit to be subject to normal morale.\n",
		"body": [
			"script_unit:morale_behavior_default()"
		],
	},
	"docgen:script_unit:kill": {
		"scope": "lua",
		"prefix": "kill",
		"description": "script_unit:kill()\n-  -\n\nInstantly kills this unit.\n",
		"body": [
			"kill(${1:[opt=false] boolean should disappear})"
		],
	},
	"docgen:script_unit:script_unit:kill": {
		"scope": "lua",
		"prefix": "script_unit:kill",
		"description": "script_unit:kill()\n-  -\n\nInstantly kills this unit.\n",
		"body": [
			"script_unit:kill(${1:[opt=false] boolean should disappear})"
		],
	},
	"docgen:script_unit:kill_proportion": {
		"scope": "lua",
		"prefix": "kill_proportion",
		"description": "script_unit:kill_proportion()\n-  -\n\nInstantly kills a unary proportion of this unit.\n",
		"body": [
			"kill_proportion(${1:number proportion}, ${2:[opt=0] number preserve proportion}, ${3:[opt=false] boolean hide bodies})"
		],
	},
	"docgen:script_unit:script_unit:kill_proportion": {
		"scope": "lua",
		"prefix": "script_unit:kill_proportion",
		"description": "script_unit:kill_proportion()\n-  -\n\nInstantly kills a unary proportion of this unit.\n",
		"body": [
			"script_unit:kill_proportion(${1:number proportion}, ${2:[opt=0] number preserve proportion}, ${3:[opt=false] boolean hide bodies})"
		],
	},
	"docgen:script_unit:kill_proportion_over_time": {
		"scope": "lua",
		"prefix": "kill_proportion_over_time",
		"description": "script_unit:kill_proportion_over_time()\n-  -\n\nKills a unary proportion of this unit over a specified time period in ms.\n",
		"body": [
			"kill_proportion_over_time(${1:number proportion}, ${2:number duration}, ${3:[opt=false] boolean stop on rout})"
		],
	},
	"docgen:script_unit:script_unit:kill_proportion_over_time": {
		"scope": "lua",
		"prefix": "script_unit:kill_proportion_over_time",
		"description": "script_unit:kill_proportion_over_time()\n-  -\n\nKills a unary proportion of this unit over a specified time period in ms.\n",
		"body": [
			"script_unit:kill_proportion_over_time(${1:number proportion}, ${2:number duration}, ${3:[opt=false] boolean stop on rout})"
		],
	},
	"docgen:script_unit:stop_kill_proportion_over_time": {
		"scope": "lua",
		"prefix": "stop_kill_proportion_over_time",
		"description": "script_unit:stop_kill_proportion_over_time()\n-  -\n\nStops a running process started by script_unit:kill_proportion_over_time.\n",
		"body": [
			"stop_kill_proportion_over_time()"
		],
	},
	"docgen:script_unit:script_unit:stop_kill_proportion_over_time": {
		"scope": "lua",
		"prefix": "script_unit:stop_kill_proportion_over_time",
		"description": "script_unit:stop_kill_proportion_over_time()\n-  -\n\nStops a running process started by script_unit:kill_proportion_over_time.\n",
		"body": [
			"script_unit:stop_kill_proportion_over_time()"
		],
	},
	"docgen:script_unit:get_enemy_alliance_num": {
		"scope": "lua",
		"prefix": "get_enemy_alliance_num",
		"description": "script_unit:get_enemy_alliance_num()\n-  -\n\nGets the enemy alliance number.\n",
		"body": [
			"get_enemy_alliance_num()"
		],
	},
	"docgen:script_unit:script_unit:get_enemy_alliance_num": {
		"scope": "lua",
		"prefix": "script_unit:get_enemy_alliance_num",
		"description": "script_unit:get_enemy_alliance_num()\n-  -\n\nGets the enemy alliance number.\n",
		"body": [
			"script_unit:get_enemy_alliance_num()"
		],
	},
	"docgen:script_unit:get_enemy_alliance": {
		"scope": "lua",
		"prefix": "get_enemy_alliance",
		"description": "script_unit:get_enemy_alliance()\n-  -\n\nGets the enemy alliance object.\n",
		"body": [
			"get_enemy_alliance()"
		],
	},
	"docgen:script_unit:script_unit:get_enemy_alliance": {
		"scope": "lua",
		"prefix": "script_unit:get_enemy_alliance",
		"description": "script_unit:get_enemy_alliance()\n-  -\n\nGets the enemy alliance object.\n",
		"body": [
			"script_unit:get_enemy_alliance()"
		],
	},
	"docgen:script_unit:highlight_unit_card": {
		"scope": "lua",
		"prefix": "highlight_unit_card",
		"description": "script_unit:highlight_unit_card()\n-  -\n\nPulses a highlight effect on the unit card associated with this scriptunit.\n",
		"body": [
			"highlight_unit_card(${1:boolean should highlight}, ${2:[opt=5] number pulse strength}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:script_unit:script_unit:highlight_unit_card": {
		"scope": "lua",
		"prefix": "script_unit:highlight_unit_card",
		"description": "script_unit:highlight_unit_card()\n-  -\n\nPulses a highlight effect on the unit card associated with this scriptunit.\n",
		"body": [
			"script_unit:highlight_unit_card(${1:boolean should highlight}, ${2:[opt=5] number pulse strength}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:script_unit:add_ping_icon": {
		"scope": "lua",
		"prefix": "add_ping_icon",
		"description": "script_unit:add_ping_icon()\n-  -\n\nAdds a ping icon above the unit, optionally for a duration.\n",
		"body": [
			"add_ping_icon(${1:[opt=8] number icon_type Type of icon to add. This is a numeric index.}, ${2:[opt=nil] number duration})"
		],
	},
	"docgen:script_unit:script_unit:add_ping_icon": {
		"scope": "lua",
		"prefix": "script_unit:add_ping_icon",
		"description": "script_unit:add_ping_icon()\n-  -\n\nAdds a ping icon above the unit, optionally for a duration.\n",
		"body": [
			"script_unit:add_ping_icon(${1:[opt=8] number icon_type Type of icon to add. This is a numeric index.}, ${2:[opt=nil] number duration})"
		],
	},
	"docgen:script_unit:remove_ping_icon": {
		"scope": "lua",
		"prefix": "remove_ping_icon",
		"description": "script_unit:remove_ping_icon()\n-  -\n\nRemoves a ping icon from above the unit added with script_unit:add_ping_icon.\n",
		"body": [
			"remove_ping_icon()"
		],
	},
	"docgen:script_unit:script_unit:remove_ping_icon": {
		"scope": "lua",
		"prefix": "script_unit:remove_ping_icon",
		"description": "script_unit:remove_ping_icon()\n-  -\n\nRemoves a ping icon from above the unit added with script_unit:add_ping_icon.\n",
		"body": [
			"script_unit:remove_ping_icon()"
		],
	},
	"docgen:script_units:new": {
		"scope": "lua",
		"prefix": "new",
		"description": "script_units:new()\n-  -\n\nCreates a new script units collection.\n",
		"body": [
			"new(${1:string name}, ${2:... scriptunits})"
		],
	},
	"docgen:script_units:script_units:new": {
		"scope": "lua",
		"prefix": "script_units:new",
		"description": "script_units:new()\n-  -\n\nCreates a new script units collection.\n",
		"body": [
			"script_units:new(${1:string name}, ${2:... scriptunits})"
		],
	},
	"docgen:script_units:set_debug": {
		"scope": "lua",
		"prefix": "set_debug",
		"description": "script_units:set_debug()\n-  -\n\nSets the scriptunits collection into debug mode, for more output.\n",
		"body": [
			"set_debug(${1:[opt=true] boolean debug mode})"
		],
	},
	"docgen:script_units:script_units:set_debug": {
		"scope": "lua",
		"prefix": "script_units:set_debug",
		"description": "script_units:set_debug()\n-  -\n\nSets the scriptunits collection into debug mode, for more output.\n",
		"body": [
			"script_units:set_debug(${1:[opt=true] boolean debug mode})"
		],
	},
	"docgen:script_units:add_sunits": {
		"scope": "lua",
		"prefix": "add_sunits",
		"description": "script_units:add_sunits()\n-  -\n\nAdds one or more supplied script_unit objects to this scriptunits collection.\n",
		"body": [
			"add_sunits(${1:... additional script units})"
		],
	},
	"docgen:script_units:script_units:add_sunits": {
		"scope": "lua",
		"prefix": "script_units:add_sunits",
		"description": "script_units:add_sunits()\n-  -\n\nAdds one or more supplied script_unit objects to this scriptunits collection.\n",
		"body": [
			"script_units:add_sunits(${1:... additional script units})"
		],
	},
	"docgen:script_units:remove_sunit": {
		"scope": "lua",
		"prefix": "remove_sunit",
		"description": "script_units:remove_sunit()\n-  -\n\nRemoves a supplied script_unit object from this scriptunits collection.\n",
		"body": [
			"remove_sunit(${1:script_unit scriptunit to remove})"
		],
	},
	"docgen:script_units:script_units:remove_sunit": {
		"scope": "lua",
		"prefix": "script_units:remove_sunit",
		"description": "script_units:remove_sunit()\n-  -\n\nRemoves a supplied script_unit object from this scriptunits collection.\n",
		"body": [
			"script_units:remove_sunit(${1:script_unit scriptunit to remove})"
		],
	},
	"docgen:script_units:remove_sunits": {
		"scope": "lua",
		"prefix": "remove_sunits",
		"description": "script_units:remove_sunits()\n-  -\n\nRemoves one or more supplied script_unit objects from this scriptunits collection.\n",
		"body": [
			"remove_sunits(${1:... script_unit list})"
		],
	},
	"docgen:script_units:script_units:remove_sunits": {
		"scope": "lua",
		"prefix": "script_units:remove_sunits",
		"description": "script_units:remove_sunits()\n-  -\n\nRemoves one or more supplied script_unit objects from this scriptunits collection.\n",
		"body": [
			"script_units:remove_sunits(${1:... script_unit list})"
		],
	},
	"docgen:script_units:contains_sunit": {
		"scope": "lua",
		"prefix": "contains_sunit",
		"description": "script_units:contains_sunit()\n-  -\n\nReturns true if this script_units collection contains the supplied script_unit, false otherwise.\n",
		"body": [
			"contains_sunit(${1:script_unit to test})"
		],
	},
	"docgen:script_units:script_units:contains_sunit": {
		"scope": "lua",
		"prefix": "script_units:contains_sunit",
		"description": "script_units:contains_sunit()\n-  -\n\nReturns true if this script_units collection contains the supplied script_unit, false otherwise.\n",
		"body": [
			"script_units:contains_sunit(${1:script_unit to test})"
		],
	},
	"docgen:script_units:contains_type": {
		"scope": "lua",
		"prefix": "contains_type",
		"description": "script_units:contains_type()\n-  -\n\nReturns whether this script_units collection contains a script_unit of the supplied type, from the <code>main_units</code> table.\n",
		"body": [
			"contains_type(${1:string unit type})"
		],
	},
	"docgen:script_units:script_units:contains_type": {
		"scope": "lua",
		"prefix": "script_units:contains_type",
		"description": "script_units:contains_type()\n-  -\n\nReturns whether this script_units collection contains a script_unit of the supplied type, from the <code>main_units</code> table.\n",
		"body": [
			"script_units:contains_type(${1:string unit type})"
		],
	},
	"docgen:script_units:count": {
		"scope": "lua",
		"prefix": "count",
		"description": "script_units:count()\n-  -\n\nReturns the number of script_unit objects in this script_units collection.\n",
		"body": [
			"count()"
		],
	},
	"docgen:script_units:script_units:count": {
		"scope": "lua",
		"prefix": "script_units:count",
		"description": "script_units:count()\n-  -\n\nReturns the number of script_unit objects in this script_units collection.\n",
		"body": [
			"script_units:count()"
		],
	},
	"docgen:script_units:item": {
		"scope": "lua",
		"prefix": "item",
		"description": "script_units:item()\n-  -\n\nReturns the script_unit in this collection at the supplied index.\n",
		"body": [
			"item(${1:integer index value})"
		],
	},
	"docgen:script_units:script_units:item": {
		"scope": "lua",
		"prefix": "script_units:item",
		"description": "script_units:item()\n-  -\n\nReturns the script_unit in this collection at the supplied index.\n",
		"body": [
			"script_units:item(${1:integer index value})"
		],
	},
	"docgen:script_units:get_sunit_table": {
		"scope": "lua",
		"prefix": "get_sunit_table",
		"description": "script_units:get_sunit_table()\n-  -\n\nReturns the internal table containing all the script_unit objects in this script_units collection.\n",
		"body": [
			"get_sunit_table()"
		],
	},
	"docgen:script_units:script_units:get_sunit_table": {
		"scope": "lua",
		"prefix": "script_units:get_sunit_table",
		"description": "script_units:get_sunit_table()\n-  -\n\nReturns the internal table containing all the script_unit objects in this script_units collection.\n",
		"body": [
			"script_units:get_sunit_table()"
		],
	},
	"docgen:script_units:filter": {
		"scope": "lua",
		"prefix": "filter",
		"description": "script_units:filter()\n-  -\n\nReturns another scriptunits collection containing all script_unit objects from the subject collection that pass the supplied test.\n",
		"body": [
			"filter(${1:string name}, ${2:function test}, ${3:[opt=false] boolean assert if empty})"
		],
	},
	"docgen:script_units:script_units:filter": {
		"scope": "lua",
		"prefix": "script_units:filter",
		"description": "script_units:filter()\n-  -\n\nReturns another scriptunits collection containing all script_unit objects from the subject collection that pass the supplied test.\n",
		"body": [
			"script_units:filter(${1:string name}, ${2:function test}, ${3:[opt=false] boolean assert if empty})"
		],
	},
	"docgen:script_units:out": {
		"scope": "lua",
		"prefix": "out",
		"description": "script_units:out()\n-  -\n\nPrints the list of script_unit objects this collection contains to the debug console spool.\n",
		"body": [
			"out()"
		],
	},
	"docgen:script_units:script_units:out": {
		"scope": "lua",
		"prefix": "script_units:out",
		"description": "script_units:out()\n-  -\n\nPrints the list of script_unit objects this collection contains to the debug console spool.\n",
		"body": [
			"script_units:out()"
		],
	},
	"docgen:script_units:duplicate": {
		"scope": "lua",
		"prefix": "duplicate",
		"description": "script_units:duplicate()\n-  -\n\nReturns a duplicate script_units collection with the supplied name.\n",
		"body": [
			"duplicate(${1:string name})"
		],
	},
	"docgen:script_units:script_units:duplicate": {
		"scope": "lua",
		"prefix": "script_units:duplicate",
		"description": "script_units:duplicate()\n-  -\n\nReturns a duplicate script_units collection with the supplied name.\n",
		"body": [
			"script_units:duplicate(${1:string name})"
		],
	},
	"docgen:script_units:get_unitcontroller": {
		"scope": "lua",
		"prefix": "get_unitcontroller",
		"description": "script_units:get_unitcontroller()\n-  -\n\nReturns a unitcontroller with control over all the units this script_units collection contains.\n",
		"body": [
			"get_unitcontroller(${1:[opt=nil] army, If an army is supplied here})"
		],
	},
	"docgen:script_units:script_units:get_unitcontroller": {
		"scope": "lua",
		"prefix": "script_units:get_unitcontroller",
		"description": "script_units:get_unitcontroller()\n-  -\n\nReturns a unitcontroller with control over all the units this script_units collection contains.\n",
		"body": [
			"script_units:get_unitcontroller(${1:[opt=nil] army, If an army is supplied here})"
		],
	},
	"docgen:script_units:centre_point": {
		"scope": "lua",
		"prefix": "centre_point",
		"description": "script_units:centre_point()\n-  -\n\nReturns a vector corresponding to the mean centre position of all the script_unit objects in the collection.\n",
		"body": [
			"centre_point()"
		],
	},
	"docgen:script_units:script_units:centre_point": {
		"scope": "lua",
		"prefix": "script_units:centre_point",
		"description": "script_units:centre_point()\n-  -\n\nReturns a vector corresponding to the mean centre position of all the script_unit objects in the collection.\n",
		"body": [
			"script_units:centre_point()"
		],
	},
	"docgen:script_units:radius": {
		"scope": "lua",
		"prefix": "radius",
		"description": "script_units:radius()\n-  -\n\nReturns the distance from the furthest unit from the centre, to the centre, which is an indication of how spread out the units in this collection are.\n",
		"body": [
			"radius()"
		],
	},
	"docgen:script_units:script_units:radius": {
		"scope": "lua",
		"prefix": "script_units:radius",
		"description": "script_units:radius()\n-  -\n\nReturns the distance from the furthest unit from the centre, to the centre, which is an indication of how spread out the units in this collection are.\n",
		"body": [
			"script_units:radius()"
		],
	},
	"docgen:script_units:get_northernmost": {
		"scope": "lua",
		"prefix": "get_northernmost",
		"description": "script_units:get_northernmost()\n-  -\n\nReturns the northern-most script_unit.\n",
		"body": [
			"get_northernmost()"
		],
	},
	"docgen:script_units:script_units:get_northernmost": {
		"scope": "lua",
		"prefix": "script_units:get_northernmost",
		"description": "script_units:get_northernmost()\n-  -\n\nReturns the northern-most script_unit.\n",
		"body": [
			"script_units:get_northernmost()"
		],
	},
	"docgen:script_units:get_southernmost": {
		"scope": "lua",
		"prefix": "get_southernmost",
		"description": "script_units:get_southernmost()\n-  -\n\nReturns the southern-most script_unit.\n",
		"body": [
			"get_southernmost()"
		],
	},
	"docgen:script_units:script_units:get_southernmost": {
		"scope": "lua",
		"prefix": "script_units:get_southernmost",
		"description": "script_units:get_southernmost()\n-  -\n\nReturns the southern-most script_unit.\n",
		"body": [
			"script_units:get_southernmost()"
		],
	},
	"docgen:script_units:get_westernmost": {
		"scope": "lua",
		"prefix": "get_westernmost",
		"description": "script_units:get_westernmost()\n-  -\n\nReturns the western-most script_unit.\n",
		"body": [
			"get_westernmost()"
		],
	},
	"docgen:script_units:script_units:get_westernmost": {
		"scope": "lua",
		"prefix": "script_units:get_westernmost",
		"description": "script_units:get_westernmost()\n-  -\n\nReturns the western-most script_unit.\n",
		"body": [
			"script_units:get_westernmost()"
		],
	},
	"docgen:script_units:get_easternmost": {
		"scope": "lua",
		"prefix": "get_easternmost",
		"description": "script_units:get_easternmost()\n-  -\n\nReturns the eastern-most script_unit.\n",
		"body": [
			"get_easternmost()"
		],
	},
	"docgen:script_units:script_units:get_easternmost": {
		"scope": "lua",
		"prefix": "script_units:get_easternmost",
		"description": "script_units:get_easternmost()\n-  -\n\nReturns the eastern-most script_unit.\n",
		"body": [
			"script_units:get_easternmost()"
		],
	},
	"docgen:script_units:get_closest": {
		"scope": "lua",
		"prefix": "get_closest",
		"description": "script_units:get_closest()\n-  -\n\nReturns the closest script_unit in this collection to the supplied collection of units/positions, as well as the distance in m.\n",
		"body": [
			"get_closest(${1:object position collection}, ${2:[opt=false] 2d only})"
		],
	},
	"docgen:script_units:script_units:get_closest": {
		"scope": "lua",
		"prefix": "script_units:get_closest",
		"description": "script_units:get_closest()\n-  -\n\nReturns the closest script_unit in this collection to the supplied collection of units/positions, as well as the distance in m.\n",
		"body": [
			"script_units:get_closest(${1:object position collection}, ${2:[opt=false] 2d only})"
		],
	},
	"docgen:script_units:get_outlying": {
		"scope": "lua",
		"prefix": "get_outlying",
		"description": "script_units:get_outlying()\n-  -\n\nReturns the furthest script_unit in this collection from the mean centre.\n",
		"body": [
			"get_outlying()"
		],
	},
	"docgen:script_units:script_units:get_outlying": {
		"scope": "lua",
		"prefix": "script_units:get_outlying",
		"description": "script_units:get_outlying()\n-  -\n\nReturns the furthest script_unit in this collection from the mean centre.\n",
		"body": [
			"script_units:get_outlying()"
		],
	},
	"docgen:script_units:rout_over_time": {
		"scope": "lua",
		"prefix": "rout_over_time",
		"description": "script_units:rout_over_time()\n-  -\n\nPrevents routing units within the collection from rallying, and routs all non-routing units over the specified period in ms so that all units are eventually routing.\n",
		"body": [
			"rout_over_time(${1:number period in ms})"
		],
	},
	"docgen:script_units:script_units:rout_over_time": {
		"scope": "lua",
		"prefix": "script_units:rout_over_time",
		"description": "script_units:rout_over_time()\n-  -\n\nPrevents routing units within the collection from rallying, and routs all non-routing units over the specified period in ms so that all units are eventually routing.\n",
		"body": [
			"script_units:rout_over_time(${1:number period in ms})"
		],
	},
	"docgen:script_units:have_any_deployed": {
		"scope": "lua",
		"prefix": "have_any_deployed",
		"description": "script_units:have_any_deployed()\n-  -\n\nHave any of the script_unit objects in the collection deployed onto the battlefield.\n",
		"body": [
			"have_any_deployed()"
		],
	},
	"docgen:script_units:script_units:have_any_deployed": {
		"scope": "lua",
		"prefix": "script_units:have_any_deployed",
		"description": "script_units:have_any_deployed()\n-  -\n\nHave any of the script_unit objects in the collection deployed onto the battlefield.\n",
		"body": [
			"script_units:have_any_deployed()"
		],
	},
	"docgen:script_units:have_all_deployed": {
		"scope": "lua",
		"prefix": "have_all_deployed",
		"description": "script_units:have_all_deployed()\n-  -\n\nHave all of the script_unit objects in the collection deployed onto the battlefield.\n",
		"body": [
			"have_all_deployed()"
		],
	},
	"docgen:script_units:script_units:have_all_deployed": {
		"scope": "lua",
		"prefix": "script_units:have_all_deployed",
		"description": "script_units:have_all_deployed()\n-  -\n\nHave all of the script_unit objects in the collection deployed onto the battlefield.\n",
		"body": [
			"script_units:have_all_deployed()"
		],
	},
	"docgen:script_units:are_any_active_on_battlefield": {
		"scope": "lua",
		"prefix": "are_any_active_on_battlefield",
		"description": "script_units:are_any_active_on_battlefield()\n-  -\n\nReturns true if any script_unit in this collection is deployed on the battlefield and not routing or dead.\n",
		"body": [
			"are_any_active_on_battlefield()"
		],
	},
	"docgen:script_units:script_units:are_any_active_on_battlefield": {
		"scope": "lua",
		"prefix": "script_units:are_any_active_on_battlefield",
		"description": "script_units:are_any_active_on_battlefield()\n-  -\n\nReturns true if any script_unit in this collection is deployed on the battlefield and not routing or dead.\n",
		"body": [
			"script_units:are_any_active_on_battlefield()"
		],
	},
	"docgen:script_units:have_any_moved": {
		"scope": "lua",
		"prefix": "have_any_moved",
		"description": "script_units:have_any_moved()\n-  -\n\nReturns true if script_unit:has_moved returns true for any unit in this collection.\n",
		"body": [
			"have_any_moved(${1:[opt=nil] vector position}, ${2:[opt=0] distance threshold distance})"
		],
	},
	"docgen:script_units:script_units:have_any_moved": {
		"scope": "lua",
		"prefix": "script_units:have_any_moved",
		"description": "script_units:have_any_moved()\n-  -\n\nReturns true if script_unit:has_moved returns true for any unit in this collection.\n",
		"body": [
			"script_units:have_any_moved(${1:[opt=nil] vector position}, ${2:[opt=0] distance threshold distance})"
		],
	},
	"docgen:script_units:have_all_moved": {
		"scope": "lua",
		"prefix": "have_all_moved",
		"description": "script_units:have_all_moved()\n-  -\n\nReturns true if script_unit:has_moved returns true for all units in this collection.\n",
		"body": [
			"have_all_moved(${1:[opt=nil] vector position}, ${2:[opt=0] distance threshold distance})"
		],
	},
	"docgen:script_units:script_units:have_all_moved": {
		"scope": "lua",
		"prefix": "script_units:have_all_moved",
		"description": "script_units:have_all_moved()\n-  -\n\nReturns true if script_unit:has_moved returns true for all units in this collection.\n",
		"body": [
			"script_units:have_all_moved(${1:[opt=nil] vector position}, ${2:[opt=0] distance threshold distance})"
		],
	},
	"docgen:script_units:are_any_running": {
		"scope": "lua",
		"prefix": "are_any_running",
		"description": "script_units:are_any_running()\n-  -\n\nReturns true if any script_unit in this collection is moving fast.\n",
		"body": [
			"are_any_running()"
		],
	},
	"docgen:script_units:script_units:are_any_running": {
		"scope": "lua",
		"prefix": "script_units:are_any_running",
		"description": "script_units:are_any_running()\n-  -\n\nReturns true if any script_unit in this collection is moving fast.\n",
		"body": [
			"script_units:are_any_running()"
		],
	},
	"docgen:script_units:are_all_running": {
		"scope": "lua",
		"prefix": "are_all_running",
		"description": "script_units:are_all_running()\n-  -\n\nReturns true if all script_unit objects in this collection are moving fast.\n",
		"body": [
			"are_all_running()"
		],
	},
	"docgen:script_units:script_units:are_all_running": {
		"scope": "lua",
		"prefix": "script_units:are_all_running",
		"description": "script_units:are_all_running()\n-  -\n\nReturns true if all script_unit objects in this collection are moving fast.\n",
		"body": [
			"script_units:are_all_running()"
		],
	},
	"docgen:script_units:is_under_attack": {
		"scope": "lua",
		"prefix": "is_under_attack",
		"description": "script_units:is_under_attack()\n-  -\n\nReturns true if any script_unit in this collection is under attack (uses script_unit:is_under_attack)\n",
		"body": [
			"is_under_attack()"
		],
	},
	"docgen:script_units:script_units:is_under_attack": {
		"scope": "lua",
		"prefix": "script_units:is_under_attack",
		"description": "script_units:is_under_attack()\n-  -\n\nReturns true if any script_unit in this collection is under attack (uses script_unit:is_under_attack)\n",
		"body": [
			"script_units:is_under_attack()"
		],
	},
	"docgen:script_units:is_in_melee": {
		"scope": "lua",
		"prefix": "is_in_melee",
		"description": "script_units:is_in_melee()\n-  -\n\nReturns true if any script_unit in this collection is in melee combat (uses script_unit:is_in_melee).\n",
		"body": [
			"is_in_melee()"
		],
	},
	"docgen:script_units:script_units:is_in_melee": {
		"scope": "lua",
		"prefix": "script_units:is_in_melee",
		"description": "script_units:is_in_melee()\n-  -\n\nReturns true if any script_unit in this collection is in melee combat (uses script_unit:is_in_melee).\n",
		"body": [
			"script_units:is_in_melee()"
		],
	},
	"docgen:script_units:unary_hitpoints": {
		"scope": "lua",
		"prefix": "unary_hitpoints",
		"description": "script_units:unary_hitpoints()\n-  -\n\nReturns the average unary hitpoints of all script_unit objects in this collection.\n",
		"body": [
			"unary_hitpoints()"
		],
	},
	"docgen:script_units:script_units:unary_hitpoints": {
		"scope": "lua",
		"prefix": "script_units:unary_hitpoints",
		"description": "script_units:unary_hitpoints()\n-  -\n\nReturns the average unary hitpoints of all script_unit objects in this collection.\n",
		"body": [
			"script_units:unary_hitpoints()"
		],
	},
	"docgen:script_units:change_formation": {
		"scope": "lua",
		"prefix": "change_formation",
		"description": "script_units:change_formation()\n-  -\n\nSets all script_unit objects in the collection into a group formation.\n",
		"body": [
			"change_formation(${1:string group formation name})"
		],
	},
	"docgen:script_units:script_units:change_formation": {
		"scope": "lua",
		"prefix": "script_units:change_formation",
		"description": "script_units:change_formation()\n-  -\n\nSets all script_unit objects in the collection into a group formation.\n",
		"body": [
			"script_units:change_formation(${1:string group formation name})"
		],
	},
	"docgen:script_units:is_hidden": {
		"scope": "lua",
		"prefix": "is_hidden",
		"description": "script_units:is_hidden()\n-  -\n\nReturns true if any script_unit in this collection is hidden in long grass or trees.\n",
		"body": [
			"is_hidden(${1:[opt=false] boolean all units})"
		],
	},
	"docgen:script_units:script_units:is_hidden": {
		"scope": "lua",
		"prefix": "script_units:is_hidden",
		"description": "script_units:is_hidden()\n-  -\n\nReturns true if any script_unit in this collection is hidden in long grass or trees.\n",
		"body": [
			"script_units:is_hidden(${1:[opt=false] boolean all units})"
		],
	},
	"docgen:script_units:is_visible_to_enemy": {
		"scope": "lua",
		"prefix": "is_visible_to_enemy",
		"description": "script_units:is_visible_to_enemy()\n-  -\n\nReturns true if any script_unit in this collection is visible to the enemy, by the rules of the terrain visibility system.\n",
		"body": [
			"is_visible_to_enemy()"
		],
	},
	"docgen:script_units:script_units:is_visible_to_enemy": {
		"scope": "lua",
		"prefix": "script_units:is_visible_to_enemy",
		"description": "script_units:is_visible_to_enemy()\n-  -\n\nReturns true if any script_unit in this collection is visible to the enemy, by the rules of the terrain visibility system.\n",
		"body": [
			"script_units:is_visible_to_enemy()"
		],
	},
	"docgen:script_units:deploy_at_random_intervals": {
		"scope": "lua",
		"prefix": "deploy_at_random_intervals",
		"description": "script_units:deploy_at_random_intervals()\n-  -\n\nDeploys the units in this collection onto the battlefield in randomly-sized, randomly-timed batches.\n",
		"body": [
			"deploy_at_random_intervals(${1:number min units}, ${2:number max units}, ${3:number min period}, ${4:number max period}, ${5:[opt=false] boolean debug out}, ${6:[opt=false] boolean spawn immediately})"
		],
	},
	"docgen:script_units:script_units:deploy_at_random_intervals": {
		"scope": "lua",
		"prefix": "script_units:deploy_at_random_intervals",
		"description": "script_units:deploy_at_random_intervals()\n-  -\n\nDeploys the units in this collection onto the battlefield in randomly-sized, randomly-timed batches.\n",
		"body": [
			"script_units:deploy_at_random_intervals(${1:number min units}, ${2:number max units}, ${3:number min period}, ${4:number max period}, ${5:[opt=false] boolean debug out}, ${6:[opt=false] boolean spawn immediately})"
		],
	},
	"docgen:script_units:cancel_deploy_at_random_intervals": {
		"scope": "lua",
		"prefix": "cancel_deploy_at_random_intervals",
		"description": "script_units:cancel_deploy_at_random_intervals()\n-  -\n\nCancels/stops a running process started with script_units:deploy_at_random_intervals.\n",
		"body": [
			"cancel_deploy_at_random_intervals()"
		],
	},
	"docgen:script_units:script_units:cancel_deploy_at_random_intervals": {
		"scope": "lua",
		"prefix": "script_units:cancel_deploy_at_random_intervals",
		"description": "script_units:cancel_deploy_at_random_intervals()\n-  -\n\nCancels/stops a running process started with script_units:deploy_at_random_intervals.\n",
		"body": [
			"script_units:cancel_deploy_at_random_intervals()"
		],
	},
	"docgen:script_units:start_kill_aura": {
		"scope": "lua",
		"prefix": "start_kill_aura",
		"description": "script_units:start_kill_aura()\n-  -\n\nActivates a kill aura around these units that cause a specified enemy/other script_units to take casualties when they come within a specified range.\n",
		"body": [
			"start_kill_aura(${1:script_units target sunits}, ${2:number range}, ${3:[opt=0.02] number casualties proportion})"
		],
	},
	"docgen:script_units:script_units:start_kill_aura": {
		"scope": "lua",
		"prefix": "script_units:start_kill_aura",
		"description": "script_units:start_kill_aura()\n-  -\n\nActivates a kill aura around these units that cause a specified enemy/other script_units to take casualties when they come within a specified range.\n",
		"body": [
			"script_units:start_kill_aura(${1:script_units target sunits}, ${2:number range}, ${3:[opt=0.02] number casualties proportion})"
		],
	},
	"docgen:script_units:stop_kill_aura": {
		"scope": "lua",
		"prefix": "stop_kill_aura",
		"description": "script_units:stop_kill_aura()\n-  -\n\nStops the kill aura started on this collection with script_units:start_kill_aura.\n",
		"body": [
			"stop_kill_aura()"
		],
	},
	"docgen:script_units:script_units:stop_kill_aura": {
		"scope": "lua",
		"prefix": "script_units:stop_kill_aura",
		"description": "script_units:stop_kill_aura()\n-  -\n\nStops the kill aura started on this collection with script_units:start_kill_aura.\n",
		"body": [
			"script_units:stop_kill_aura()"
		],
	},
	"docgen:script_units:attack_enemy_scriptunits": {
		"scope": "lua",
		"prefix": "attack_enemy_scriptunits",
		"description": "script_units:attack_enemy_scriptunits()\n-  -\n\nInstructs this scriptunits collection to attack another, acting entirely under script control.\n",
		"body": [
			"attack_enemy_scriptunits(${1:script_units enemy script_units}, ${2:[opt=false] boolean should run})"
		],
	},
	"docgen:script_units:script_units:attack_enemy_scriptunits": {
		"scope": "lua",
		"prefix": "script_units:attack_enemy_scriptunits",
		"description": "script_units:attack_enemy_scriptunits()\n-  -\n\nInstructs this scriptunits collection to attack another, acting entirely under script control.\n",
		"body": [
			"script_units:attack_enemy_scriptunits(${1:script_units enemy script_units}, ${2:[opt=false] boolean should run})"
		],
	},
	"docgen:script_units:stop_attack_enemy_scriptunits": {
		"scope": "lua",
		"prefix": "stop_attack_enemy_scriptunits",
		"description": "script_units:stop_attack_enemy_scriptunits()\n-  -\n\nStops an attack process started with script_units:attack_enemy_scriptunits.\n",
		"body": [
			"stop_attack_enemy_scriptunits()"
		],
	},
	"docgen:script_units:script_units:stop_attack_enemy_scriptunits": {
		"scope": "lua",
		"prefix": "script_units:stop_attack_enemy_scriptunits",
		"description": "script_units:stop_attack_enemy_scriptunits()\n-  -\n\nStops an attack process started with script_units:attack_enemy_scriptunits.\n",
		"body": [
			"script_units:stop_attack_enemy_scriptunits()"
		],
	},
	"docgen:script_units:highlight_unit_cards": {
		"scope": "lua",
		"prefix": "highlight_unit_cards",
		"description": "script_units:highlight_unit_cards()\n-  -\n\nPulses a highlight effect on all the unit cards associated with this scriptunits collection, using script_unit:highlight_unit_card.\n",
		"body": [
			"highlight_unit_cards(${1:boolean should highlight}, ${2:[opt=5] number pulse strength}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:script_units:script_units:highlight_unit_cards": {
		"scope": "lua",
		"prefix": "script_units:highlight_unit_cards",
		"description": "script_units:highlight_unit_cards()\n-  -\n\nPulses a highlight effect on all the unit cards associated with this scriptunits collection, using script_unit:highlight_unit_card.\n",
		"body": [
			"script_units:highlight_unit_cards(${1:boolean should highlight}, ${2:[opt=5] number pulse strength}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:battle_ui_manager:new": {
		"scope": "lua",
		"prefix": "new",
		"description": "battle_ui_manager:new()\n-  -\n\nCreates a battle_ui_manager.\n",
		"body": [
			"new()"
		],
	},
	"docgen:battle_ui_manager:battle_ui_manager:new": {
		"scope": "lua",
		"prefix": "battle_ui_manager:new",
		"description": "battle_ui_manager:new()\n-  -\n\nCreates a battle_ui_manager.\n",
		"body": [
			"battle_ui_manager:new()"
		],
	},
	"docgen:battle_ui_manager:get_panel_pulse_strength": {
		"scope": "lua",
		"prefix": "get_panel_pulse_strength",
		"description": "battle_ui_manager:get_panel_pulse_strength()\n-  -\n\nReturns the panel pulse strength constant the battle_ui_manager stores internally.\n",
		"body": [
			"get_panel_pulse_strength()"
		],
	},
	"docgen:battle_ui_manager:battle_ui_manager:get_panel_pulse_strength": {
		"scope": "lua",
		"prefix": "battle_ui_manager:get_panel_pulse_strength",
		"description": "battle_ui_manager:get_panel_pulse_strength()\n-  -\n\nReturns the panel pulse strength constant the battle_ui_manager stores internally.\n",
		"body": [
			"battle_ui_manager:get_panel_pulse_strength()"
		],
	},
	"docgen:battle_ui_manager:get_button_pulse_strength": {
		"scope": "lua",
		"prefix": "get_button_pulse_strength",
		"description": "battle_ui_manager:get_button_pulse_strength()\n-  -\n\nReturns the button pulse strength constant the battle_ui_manager stores internally.\n",
		"body": [
			"get_button_pulse_strength()"
		],
	},
	"docgen:battle_ui_manager:battle_ui_manager:get_button_pulse_strength": {
		"scope": "lua",
		"prefix": "battle_ui_manager:get_button_pulse_strength",
		"description": "battle_ui_manager:get_button_pulse_strength()\n-  -\n\nReturns the button pulse strength constant the battle_ui_manager stores internally.\n",
		"body": [
			"battle_ui_manager:get_button_pulse_strength()"
		],
	},
	"docgen:battle_ui_manager:register_unhighlight_callback": {
		"scope": "lua",
		"prefix": "register_unhighlight_callback",
		"description": "battle_ui_manager:register_unhighlight_callback()\n-  -\n\nAllows registration of a function to be called when battle_ui_manager:unhighlight_all_for_tooltips is called.\n",
		"body": [
			"register_unhighlight_callback(${1:function callback to call})"
		],
	},
	"docgen:battle_ui_manager:battle_ui_manager:register_unhighlight_callback": {
		"scope": "lua",
		"prefix": "battle_ui_manager:register_unhighlight_callback",
		"description": "battle_ui_manager:register_unhighlight_callback()\n-  -\n\nAllows registration of a function to be called when battle_ui_manager:unhighlight_all_for_tooltips is called.\n",
		"body": [
			"battle_ui_manager:register_unhighlight_callback(${1:function callback to call})"
		],
	},
	"docgen:battle_ui_manager:unhighlight_all_for_tooltips": {
		"scope": "lua",
		"prefix": "unhighlight_all_for_tooltips",
		"description": "battle_ui_manager:unhighlight_all_for_tooltips()\n-  -\n\nCalls all functions currently registered with battle_ui_manager:register_unhighlight_callback.\n",
		"body": [
			"unhighlight_all_for_tooltips()"
		],
	},
	"docgen:battle_ui_manager:battle_ui_manager:unhighlight_all_for_tooltips": {
		"scope": "lua",
		"prefix": "battle_ui_manager:unhighlight_all_for_tooltips",
		"description": "battle_ui_manager:unhighlight_all_for_tooltips()\n-  -\n\nCalls all functions currently registered with battle_ui_manager:register_unhighlight_callback.\n",
		"body": [
			"battle_ui_manager:unhighlight_all_for_tooltips()"
		],
	},
	"docgen:battle_ui_manager:set_help_page_link_highlighting_permitted": {
		"scope": "lua",
		"prefix": "set_help_page_link_highlighting_permitted",
		"description": "battle_ui_manager:set_help_page_link_highlighting_permitted()\n-  -\n\nEnables/disables the scripted behaviour which pulses a highlight over various elements of the UI when the mouse cursor is placed over related words on Help Pages.\n",
		"body": [
			"set_help_page_link_highlighting_permitted(${1:[opt=true] boolean enable highlighting})"
		],
	},
	"docgen:battle_ui_manager:battle_ui_manager:set_help_page_link_highlighting_permitted": {
		"scope": "lua",
		"prefix": "battle_ui_manager:set_help_page_link_highlighting_permitted",
		"description": "battle_ui_manager:set_help_page_link_highlighting_permitted()\n-  -\n\nEnables/disables the scripted behaviour which pulses a highlight over various elements of the UI when the mouse cursor is placed over related words on Help Pages.\n",
		"body": [
			"battle_ui_manager:set_help_page_link_highlighting_permitted(${1:[opt=true] boolean enable highlighting})"
		],
	},
	"docgen:battle_ui_manager:get_help_page_link_highlighting_permitted": {
		"scope": "lua",
		"prefix": "get_help_page_link_highlighting_permitted",
		"description": "battle_ui_manager:get_help_page_link_highlighting_permitted()\n-  -\n\nReturns whether help page link highlighting is permitted.\n",
		"body": [
			"get_help_page_link_highlighting_permitted()"
		],
	},
	"docgen:battle_ui_manager:battle_ui_manager:get_help_page_link_highlighting_permitted": {
		"scope": "lua",
		"prefix": "battle_ui_manager:get_help_page_link_highlighting_permitted",
		"description": "battle_ui_manager:get_help_page_link_highlighting_permitted()\n-  -\n\nReturns whether help page link highlighting is permitted.\n",
		"body": [
			"battle_ui_manager:get_help_page_link_highlighting_permitted()"
		],
	},
	"docgen:battle_ui_manager:highlight_advice_history_buttons": {
		"scope": "lua",
		"prefix": "highlight_advice_history_buttons",
		"description": "battle_ui_manager:highlight_advice_history_buttons()\n-  -\n\nPulse-highlights the advice history buttons.\n",
		"body": [
			"highlight_advice_history_buttons(${1:boolean enable highlight}, ${2:[opt=nil] number pulse strength}, ${3:[opt=false] boolean force})"
		],
	},
	"docgen:battle_ui_manager:battle_ui_manager:highlight_advice_history_buttons": {
		"scope": "lua",
		"prefix": "battle_ui_manager:highlight_advice_history_buttons",
		"description": "battle_ui_manager:highlight_advice_history_buttons()\n-  -\n\nPulse-highlights the advice history buttons.\n",
		"body": [
			"battle_ui_manager:highlight_advice_history_buttons(${1:boolean enable highlight}, ${2:[opt=nil] number pulse strength}, ${3:[opt=false] boolean force})"
		],
	},
	"docgen:battle_ui_manager:highlight_advisor_button": {
		"scope": "lua",
		"prefix": "highlight_advisor_button",
		"description": "battle_ui_manager:highlight_advisor_button()\n-  -\n\nPulse-highlights the advice button.\n",
		"body": [
			"highlight_advisor_button(${1:boolean enable highlight}, ${2:[opt=nil] number pulse strength}, ${3:[opt=false] boolean force})"
		],
	},
	"docgen:battle_ui_manager:battle_ui_manager:highlight_advisor_button": {
		"scope": "lua",
		"prefix": "battle_ui_manager:highlight_advisor_button",
		"description": "battle_ui_manager:highlight_advisor_button()\n-  -\n\nPulse-highlights the advice button.\n",
		"body": [
			"battle_ui_manager:highlight_advisor_button(${1:boolean enable highlight}, ${2:[opt=nil] number pulse strength}, ${3:[opt=false] boolean force})"
		],
	},
	"docgen:battle_ui_manager:highlight_advisor": {
		"scope": "lua",
		"prefix": "highlight_advisor",
		"description": "battle_ui_manager:highlight_advisor()\n-  -\n\nPulse-highlights the advisor.\n",
		"body": [
			"highlight_advisor(${1:boolean enable highlight}, ${2:[opt=nil] number pulse strength}, ${3:[opt=false] boolean force})"
		],
	},
	"docgen:battle_ui_manager:battle_ui_manager:highlight_advisor": {
		"scope": "lua",
		"prefix": "battle_ui_manager:highlight_advisor",
		"description": "battle_ui_manager:highlight_advisor()\n-  -\n\nPulse-highlights the advisor.\n",
		"body": [
			"battle_ui_manager:highlight_advisor(${1:boolean enable highlight}, ${2:[opt=nil] number pulse strength}, ${3:[opt=false] boolean force})"
		],
	},
	"docgen:battle_ui_manager:highlight_army_abilities": {
		"scope": "lua",
		"prefix": "highlight_army_abilities",
		"description": "battle_ui_manager:highlight_army_abilities()\n-  -\n\nPulse-highlights any army abilities buttons.\n",
		"body": [
			"highlight_army_abilities(${1:boolean enable highlight}, ${2:[opt=nil] number pulse strength}, ${3:[opt=false] boolean force})"
		],
	},
	"docgen:battle_ui_manager:battle_ui_manager:highlight_army_abilities": {
		"scope": "lua",
		"prefix": "battle_ui_manager:highlight_army_abilities",
		"description": "battle_ui_manager:highlight_army_abilities()\n-  -\n\nPulse-highlights any army abilities buttons.\n",
		"body": [
			"battle_ui_manager:highlight_army_abilities(${1:boolean enable highlight}, ${2:[opt=nil] number pulse strength}, ${3:[opt=false] boolean force})"
		],
	},
	"docgen:battle_ui_manager:highlight_army_panel": {
		"scope": "lua",
		"prefix": "highlight_army_panel",
		"description": "battle_ui_manager:highlight_army_panel()\n-  -\n\nPulse-highlights the army panel.\n",
		"body": [
			"highlight_army_panel(${1:boolean enable highlight}, ${2:[opt=nil] number pulse strength}, ${3:[opt=false] boolean force})"
		],
	},
	"docgen:battle_ui_manager:battle_ui_manager:highlight_army_panel": {
		"scope": "lua",
		"prefix": "battle_ui_manager:highlight_army_panel",
		"description": "battle_ui_manager:highlight_army_panel()\n-  -\n\nPulse-highlights the army panel.\n",
		"body": [
			"battle_ui_manager:highlight_army_panel(${1:boolean enable highlight}, ${2:[opt=nil] number pulse strength}, ${3:[opt=false] boolean force})"
		],
	},
	"docgen:battle_ui_manager:highlight_balance_of_power": {
		"scope": "lua",
		"prefix": "highlight_balance_of_power",
		"description": "battle_ui_manager:highlight_balance_of_power()\n-  -\n\nPulse-highlights the balance of power bar.\n",
		"body": [
			"highlight_balance_of_power(${1:boolean enable highlight}, ${2:[opt=nil] number pulse strength}, ${3:[opt=false] boolean force})"
		],
	},
	"docgen:battle_ui_manager:battle_ui_manager:highlight_balance_of_power": {
		"scope": "lua",
		"prefix": "battle_ui_manager:highlight_balance_of_power",
		"description": "battle_ui_manager:highlight_balance_of_power()\n-  -\n\nPulse-highlights the balance of power bar.\n",
		"body": [
			"battle_ui_manager:highlight_balance_of_power(${1:boolean enable highlight}, ${2:[opt=nil] number pulse strength}, ${3:[opt=false] boolean force})"
		],
	},
	"docgen:battle_ui_manager:highlight_drop_equipment_button": {
		"scope": "lua",
		"prefix": "highlight_drop_equipment_button",
		"description": "battle_ui_manager:highlight_drop_equipment_button()\n-  -\n\nPulse-highlights the drop equipment button.\n",
		"body": [
			"highlight_drop_equipment_button(${1:boolean enable highlight}, ${2:[opt=nil] number pulse strength}, ${3:[opt=false] boolean force})"
		],
	},
	"docgen:battle_ui_manager:battle_ui_manager:highlight_drop_equipment_button": {
		"scope": "lua",
		"prefix": "battle_ui_manager:highlight_drop_equipment_button",
		"description": "battle_ui_manager:highlight_drop_equipment_button()\n-  -\n\nPulse-highlights the drop equipment button.\n",
		"body": [
			"battle_ui_manager:highlight_drop_equipment_button(${1:boolean enable highlight}, ${2:[opt=nil] number pulse strength}, ${3:[opt=false] boolean force})"
		],
	},
	"docgen:battle_ui_manager:highlight_fire_at_will_button": {
		"scope": "lua",
		"prefix": "highlight_fire_at_will_button",
		"description": "battle_ui_manager:highlight_fire_at_will_button()\n-  -\n\nPulse-highlights the fire-at-will button.\n",
		"body": [
			"highlight_fire_at_will_button(${1:boolean enable highlight}, ${2:[opt=nil] number pulse strength}, ${3:[opt=false] boolean force})"
		],
	},
	"docgen:battle_ui_manager:battle_ui_manager:highlight_fire_at_will_button": {
		"scope": "lua",
		"prefix": "battle_ui_manager:highlight_fire_at_will_button",
		"description": "battle_ui_manager:highlight_fire_at_will_button()\n-  -\n\nPulse-highlights the fire-at-will button.\n",
		"body": [
			"battle_ui_manager:highlight_fire_at_will_button(${1:boolean enable highlight}, ${2:[opt=nil] number pulse strength}, ${3:[opt=false] boolean force})"
		],
	},
	"docgen:battle_ui_manager:highlight_formations_button": {
		"scope": "lua",
		"prefix": "highlight_formations_button",
		"description": "battle_ui_manager:highlight_formations_button()\n-  -\n\nPulse-highlights the formations button.\n",
		"body": [
			"highlight_formations_button(${1:boolean enable highlight}, ${2:[opt=nil] number pulse strength}, ${3:[opt=false] boolean force})"
		],
	},
	"docgen:battle_ui_manager:battle_ui_manager:highlight_formations_button": {
		"scope": "lua",
		"prefix": "battle_ui_manager:highlight_formations_button",
		"description": "battle_ui_manager:highlight_formations_button()\n-  -\n\nPulse-highlights the formations button.\n",
		"body": [
			"battle_ui_manager:highlight_formations_button(${1:boolean enable highlight}, ${2:[opt=nil] number pulse strength}, ${3:[opt=false] boolean force})"
		],
	},
	"docgen:battle_ui_manager:highlight_game_guide_button": {
		"scope": "lua",
		"prefix": "highlight_game_guide_button",
		"description": "battle_ui_manager:highlight_game_guide_button()\n-  -\n\nPulse-highlights the game guide button.\n",
		"body": [
			"highlight_game_guide_button(${1:boolean enable highlight}, ${2:[opt=nil] number pulse strength}, ${3:[opt=false] boolean force})"
		],
	},
	"docgen:battle_ui_manager:battle_ui_manager:highlight_game_guide_button": {
		"scope": "lua",
		"prefix": "battle_ui_manager:highlight_game_guide_button",
		"description": "battle_ui_manager:highlight_game_guide_button()\n-  -\n\nPulse-highlights the game guide button.\n",
		"body": [
			"battle_ui_manager:highlight_game_guide_button(${1:boolean enable highlight}, ${2:[opt=nil] number pulse strength}, ${3:[opt=false] boolean force})"
		],
	},
	"docgen:battle_ui_manager:highlight_group_button": {
		"scope": "lua",
		"prefix": "highlight_group_button",
		"description": "battle_ui_manager:highlight_group_button()\n-  -\n\nPulse-highlights the group button.\n",
		"body": [
			"highlight_group_button(${1:boolean enable highlight}, ${2:[opt=nil] number pulse strength}, ${3:[opt=false] boolean force})"
		],
	},
	"docgen:battle_ui_manager:battle_ui_manager:highlight_group_button": {
		"scope": "lua",
		"prefix": "battle_ui_manager:highlight_group_button",
		"description": "battle_ui_manager:highlight_group_button()\n-  -\n\nPulse-highlights the group button.\n",
		"body": [
			"battle_ui_manager:highlight_group_button(${1:boolean enable highlight}, ${2:[opt=nil] number pulse strength}, ${3:[opt=false] boolean force})"
		],
	},
	"docgen:battle_ui_manager:highlight_guard_button": {
		"scope": "lua",
		"prefix": "highlight_guard_button",
		"description": "battle_ui_manager:highlight_guard_button()\n-  -\n\nPulse-highlights the guard button.\n",
		"body": [
			"highlight_guard_button(${1:boolean enable highlight}, ${2:[opt=nil] number pulse strength}, ${3:[opt=false] boolean force})"
		],
	},
	"docgen:battle_ui_manager:battle_ui_manager:highlight_guard_button": {
		"scope": "lua",
		"prefix": "battle_ui_manager:highlight_guard_button",
		"description": "battle_ui_manager:highlight_guard_button()\n-  -\n\nPulse-highlights the guard button.\n",
		"body": [
			"battle_ui_manager:highlight_guard_button(${1:boolean enable highlight}, ${2:[opt=nil] number pulse strength}, ${3:[opt=false] boolean force})"
		],
	},
	"docgen:battle_ui_manager:highlight_lore_panel": {
		"scope": "lua",
		"prefix": "highlight_lore_panel",
		"description": "battle_ui_manager:highlight_lore_panel()\n-  -\n\nPulse-highlights the lore panel.\n",
		"body": [
			"highlight_lore_panel(${1:boolean enable highlight}, ${2:[opt=nil] number pulse strength}, ${3:[opt=false] boolean force})"
		],
	},
	"docgen:battle_ui_manager:battle_ui_manager:highlight_lore_panel": {
		"scope": "lua",
		"prefix": "battle_ui_manager:highlight_lore_panel",
		"description": "battle_ui_manager:highlight_lore_panel()\n-  -\n\nPulse-highlights the lore panel.\n",
		"body": [
			"battle_ui_manager:highlight_lore_panel(${1:boolean enable highlight}, ${2:[opt=nil] number pulse strength}, ${3:[opt=false] boolean force})"
		],
	},
	"docgen:battle_ui_manager:highlight_melee_mode_button": {
		"scope": "lua",
		"prefix": "highlight_melee_mode_button",
		"description": "battle_ui_manager:highlight_melee_mode_button()\n-  -\n\nPulse-highlights the melee mode button.\n",
		"body": [
			"highlight_melee_mode_button(${1:boolean enable highlight}, ${2:[opt=nil] number pulse strength}, ${3:[opt=false] boolean force})"
		],
	},
	"docgen:battle_ui_manager:battle_ui_manager:highlight_melee_mode_button": {
		"scope": "lua",
		"prefix": "battle_ui_manager:highlight_melee_mode_button",
		"description": "battle_ui_manager:highlight_melee_mode_button()\n-  -\n\nPulse-highlights the melee mode button.\n",
		"body": [
			"battle_ui_manager:highlight_melee_mode_button(${1:boolean enable highlight}, ${2:[opt=nil] number pulse strength}, ${3:[opt=false] boolean force})"
		],
	},
	"docgen:battle_ui_manager:highlight_power_reserve_bar": {
		"scope": "lua",
		"prefix": "highlight_power_reserve_bar",
		"description": "battle_ui_manager:highlight_power_reserve_bar()\n-  -\n\nPulse-highlights the power reserve bar.\n",
		"body": [
			"highlight_power_reserve_bar(${1:boolean enable highlight}, ${2:[opt=nil] number pulse strength}, ${3:[opt=false] boolean force})"
		],
	},
	"docgen:battle_ui_manager:battle_ui_manager:highlight_power_reserve_bar": {
		"scope": "lua",
		"prefix": "battle_ui_manager:highlight_power_reserve_bar",
		"description": "battle_ui_manager:highlight_power_reserve_bar()\n-  -\n\nPulse-highlights the power reserve bar.\n",
		"body": [
			"battle_ui_manager:highlight_power_reserve_bar(${1:boolean enable highlight}, ${2:[opt=nil] number pulse strength}, ${3:[opt=false] boolean force})"
		],
	},
	"docgen:battle_ui_manager:highlight_radar_map": {
		"scope": "lua",
		"prefix": "highlight_radar_map",
		"description": "battle_ui_manager:highlight_radar_map()\n-  -\n\nPulse-highlights the radar map.\n",
		"body": [
			"highlight_radar_map(${1:boolean enable highlight}, ${2:[opt=nil] number pulse strength}, ${3:[opt=false] boolean force})"
		],
	},
	"docgen:battle_ui_manager:battle_ui_manager:highlight_radar_map": {
		"scope": "lua",
		"prefix": "battle_ui_manager:highlight_radar_map",
		"description": "battle_ui_manager:highlight_radar_map()\n-  -\n\nPulse-highlights the radar map.\n",
		"body": [
			"battle_ui_manager:highlight_radar_map(${1:boolean enable highlight}, ${2:[opt=nil] number pulse strength}, ${3:[opt=false] boolean force})"
		],
	},
	"docgen:battle_ui_manager:highlight_realm_of_souls": {
		"scope": "lua",
		"prefix": "highlight_realm_of_souls",
		"description": "battle_ui_manager:highlight_realm_of_souls()\n-  -\n\nPulse-highlights the realm of souls bar.\n",
		"body": [
			"highlight_realm_of_souls(${1:boolean enable highlight}, ${2:[opt=nil] number pulse strength}, ${3:[opt=false] boolean force})"
		],
	},
	"docgen:battle_ui_manager:battle_ui_manager:highlight_realm_of_souls": {
		"scope": "lua",
		"prefix": "battle_ui_manager:highlight_realm_of_souls",
		"description": "battle_ui_manager:highlight_realm_of_souls()\n-  -\n\nPulse-highlights the realm of souls bar.\n",
		"body": [
			"battle_ui_manager:highlight_realm_of_souls(${1:boolean enable highlight}, ${2:[opt=nil] number pulse strength}, ${3:[opt=false] boolean force})"
		],
	},
	"docgen:battle_ui_manager:highlight_skirmish_button": {
		"scope": "lua",
		"prefix": "highlight_skirmish_button",
		"description": "battle_ui_manager:highlight_skirmish_button()\n-  -\n\nPulse-highlights the skirmish button.\n",
		"body": [
			"highlight_skirmish_button(${1:boolean enable highlight}, ${2:[opt=nil] number pulse strength}, ${3:[opt=false] boolean force})"
		],
	},
	"docgen:battle_ui_manager:battle_ui_manager:highlight_skirmish_button": {
		"scope": "lua",
		"prefix": "battle_ui_manager:highlight_skirmish_button",
		"description": "battle_ui_manager:highlight_skirmish_button()\n-  -\n\nPulse-highlights the skirmish button.\n",
		"body": [
			"battle_ui_manager:highlight_skirmish_button(${1:boolean enable highlight}, ${2:[opt=nil] number pulse strength}, ${3:[opt=false] boolean force})"
		],
	},
	"docgen:battle_ui_manager:highlight_spells": {
		"scope": "lua",
		"prefix": "highlight_spells",
		"description": "battle_ui_manager:highlight_spells()\n-  -\n\nPulse-highlights any spells buttons.\n",
		"body": [
			"highlight_spells(${1:boolean enable highlight}, ${2:[opt=nil] number pulse strength}, ${3:[opt=false] boolean force})"
		],
	},
	"docgen:battle_ui_manager:battle_ui_manager:highlight_spells": {
		"scope": "lua",
		"prefix": "battle_ui_manager:highlight_spells",
		"description": "battle_ui_manager:highlight_spells()\n-  -\n\nPulse-highlights any spells buttons.\n",
		"body": [
			"battle_ui_manager:highlight_spells(${1:boolean enable highlight}, ${2:[opt=nil] number pulse strength}, ${3:[opt=false] boolean force})"
		],
	},
	"docgen:battle_ui_manager:highlight_tactical_map_button": {
		"scope": "lua",
		"prefix": "highlight_tactical_map_button",
		"description": "battle_ui_manager:highlight_tactical_map_button()\n-  -\n\nPulse-highlights the tactical map button.\n",
		"body": [
			"highlight_tactical_map_button(${1:boolean enable highlight}, ${2:[opt=nil] number pulse strength}, ${3:[opt=false] boolean force})"
		],
	},
	"docgen:battle_ui_manager:battle_ui_manager:highlight_tactical_map_button": {
		"scope": "lua",
		"prefix": "battle_ui_manager:highlight_tactical_map_button",
		"description": "battle_ui_manager:highlight_tactical_map_button()\n-  -\n\nPulse-highlights the tactical map button.\n",
		"body": [
			"battle_ui_manager:highlight_tactical_map_button(${1:boolean enable highlight}, ${2:[opt=nil] number pulse strength}, ${3:[opt=false] boolean force})"
		],
	},
	"docgen:battle_ui_manager:highlight_time_controls": {
		"scope": "lua",
		"prefix": "highlight_time_controls",
		"description": "battle_ui_manager:highlight_time_controls()\n-  -\n\nPulse-highlights the time controls buttons.\n",
		"body": [
			"highlight_time_controls(${1:boolean enable highlight}, ${2:[opt=nil] number pulse strength}, ${3:[opt=false] boolean force})"
		],
	},
	"docgen:battle_ui_manager:battle_ui_manager:highlight_time_controls": {
		"scope": "lua",
		"prefix": "battle_ui_manager:highlight_time_controls",
		"description": "battle_ui_manager:highlight_time_controls()\n-  -\n\nPulse-highlights the time controls buttons.\n",
		"body": [
			"battle_ui_manager:highlight_time_controls(${1:boolean enable highlight}, ${2:[opt=nil] number pulse strength}, ${3:[opt=false] boolean force})"
		],
	},
	"docgen:battle_ui_manager:highlight_time_limit": {
		"scope": "lua",
		"prefix": "highlight_time_limit",
		"description": "battle_ui_manager:highlight_time_limit()\n-  -\n\nPulse-highlights the time limit.\n",
		"body": [
			"highlight_time_limit(${1:boolean enable highlight}, ${2:[opt=nil] number pulse strength}, ${3:[opt=false] boolean force})"
		],
	},
	"docgen:battle_ui_manager:battle_ui_manager:highlight_time_limit": {
		"scope": "lua",
		"prefix": "battle_ui_manager:highlight_time_limit",
		"description": "battle_ui_manager:highlight_time_limit()\n-  -\n\nPulse-highlights the time limit.\n",
		"body": [
			"battle_ui_manager:highlight_time_limit(${1:boolean enable highlight}, ${2:[opt=nil] number pulse strength}, ${3:[opt=false] boolean force})"
		],
	},
	"docgen:battle_ui_manager:highlight_unit_abilities": {
		"scope": "lua",
		"prefix": "highlight_unit_abilities",
		"description": "battle_ui_manager:highlight_unit_abilities()\n-  -\n\nPulse-highlights any unit abilities buttons.\n",
		"body": [
			"highlight_unit_abilities(${1:boolean enable highlight}, ${2:[opt=nil] number pulse strength}, ${3:[opt=false] boolean force})"
		],
	},
	"docgen:battle_ui_manager:battle_ui_manager:highlight_unit_abilities": {
		"scope": "lua",
		"prefix": "battle_ui_manager:highlight_unit_abilities",
		"description": "battle_ui_manager:highlight_unit_abilities()\n-  -\n\nPulse-highlights any unit abilities buttons.\n",
		"body": [
			"battle_ui_manager:highlight_unit_abilities(${1:boolean enable highlight}, ${2:[opt=nil] number pulse strength}, ${3:[opt=false] boolean force})"
		],
	},
	"docgen:battle_ui_manager:highlight_unit_cards": {
		"scope": "lua",
		"prefix": "highlight_unit_cards",
		"description": "battle_ui_manager:highlight_unit_cards()\n-  -\n\nPulse-highlights the unit cards.\n",
		"body": [
			"highlight_unit_cards(${1:boolean enable highlight}, ${2:[opt=nil] number pulse strength}, ${3:[opt=false] boolean force})"
		],
	},
	"docgen:battle_ui_manager:battle_ui_manager:highlight_unit_cards": {
		"scope": "lua",
		"prefix": "battle_ui_manager:highlight_unit_cards",
		"description": "battle_ui_manager:highlight_unit_cards()\n-  -\n\nPulse-highlights the unit cards.\n",
		"body": [
			"battle_ui_manager:highlight_unit_cards(${1:boolean enable highlight}, ${2:[opt=nil] number pulse strength}, ${3:[opt=false] boolean force})"
		],
	},
	"docgen:battle_ui_manager:highlight_unit_details_button": {
		"scope": "lua",
		"prefix": "highlight_unit_details_button",
		"description": "battle_ui_manager:highlight_unit_details_button()\n-  -\n\nPulse-highlights the unit details button.\n",
		"body": [
			"highlight_unit_details_button(${1:boolean enable highlight}, ${2:[opt=nil] number pulse strength}, ${3:[opt=false] boolean force})"
		],
	},
	"docgen:battle_ui_manager:battle_ui_manager:highlight_unit_details_button": {
		"scope": "lua",
		"prefix": "battle_ui_manager:highlight_unit_details_button",
		"description": "battle_ui_manager:highlight_unit_details_button()\n-  -\n\nPulse-highlights the unit details button.\n",
		"body": [
			"battle_ui_manager:highlight_unit_details_button(${1:boolean enable highlight}, ${2:[opt=nil] number pulse strength}, ${3:[opt=false] boolean force})"
		],
	},
	"docgen:battle_ui_manager:highlight_unit_details_panel": {
		"scope": "lua",
		"prefix": "highlight_unit_details_panel",
		"description": "battle_ui_manager:highlight_unit_details_panel()\n-  -\n\nPulse-highlights the unit details panel.\n",
		"body": [
			"highlight_unit_details_panel(${1:boolean enable highlight}, ${2:[opt=nil] number pulse strength}, ${3:[opt=false] boolean force})"
		],
	},
	"docgen:battle_ui_manager:battle_ui_manager:highlight_unit_details_panel": {
		"scope": "lua",
		"prefix": "battle_ui_manager:highlight_unit_details_panel",
		"description": "battle_ui_manager:highlight_unit_details_panel()\n-  -\n\nPulse-highlights the unit details panel.\n",
		"body": [
			"battle_ui_manager:highlight_unit_details_panel(${1:boolean enable highlight}, ${2:[opt=nil] number pulse strength}, ${3:[opt=false] boolean force})"
		],
	},
	"docgen:battle_ui_manager:highlight_unit_portrait_panel": {
		"scope": "lua",
		"prefix": "highlight_unit_portrait_panel",
		"description": "battle_ui_manager:highlight_unit_portrait_panel()\n-  -\n\nPulse-highlights the unit portrait panel.\n",
		"body": [
			"highlight_unit_portrait_panel(${1:boolean enable highlight}, ${2:[opt=nil] number pulse strength}, ${3:[opt=false] boolean force})"
		],
	},
	"docgen:battle_ui_manager:battle_ui_manager:highlight_unit_portrait_panel": {
		"scope": "lua",
		"prefix": "battle_ui_manager:highlight_unit_portrait_panel",
		"description": "battle_ui_manager:highlight_unit_portrait_panel()\n-  -\n\nPulse-highlights the unit portrait panel.\n",
		"body": [
			"battle_ui_manager:highlight_unit_portrait_panel(${1:boolean enable highlight}, ${2:[opt=nil] number pulse strength}, ${3:[opt=false] boolean force})"
		],
	},
	"docgen:battle_ui_manager:highlight_winds_of_magic_panel": {
		"scope": "lua",
		"prefix": "highlight_winds_of_magic_panel",
		"description": "battle_ui_manager:highlight_winds_of_magic_panel()\n-  -\n\nPulse-highlights the winds of magic panel.\n",
		"body": [
			"highlight_winds_of_magic_panel(${1:boolean enable highlight}, ${2:[opt=nil] number pulse strength}, ${3:[opt=false] boolean force})"
		],
	},
	"docgen:battle_ui_manager:battle_ui_manager:highlight_winds_of_magic_panel": {
		"scope": "lua",
		"prefix": "battle_ui_manager:highlight_winds_of_magic_panel",
		"description": "battle_ui_manager:highlight_winds_of_magic_panel()\n-  -\n\nPulse-highlights the winds of magic panel.\n",
		"body": [
			"battle_ui_manager:highlight_winds_of_magic_panel(${1:boolean enable highlight}, ${2:[opt=nil] number pulse strength}, ${3:[opt=false] boolean force})"
		],
	},
	"docgen:campaign_cutscene:new": {
		"scope": "lua",
		"prefix": "new",
		"description": "campaign_cutscene:new()\n-  -\n\nCreates a cutscene object.\n",
		"body": [
			"new(${1:string name}, ${2:number duration}, ${3:[opt=nil] function end callback})"
		],
	},
	"docgen:campaign_cutscene:campaign_cutscene:new": {
		"scope": "lua",
		"prefix": "campaign_cutscene:new",
		"description": "campaign_cutscene:new()\n-  -\n\nCreates a cutscene object.\n",
		"body": [
			"campaign_cutscene:new(${1:string name}, ${2:number duration}, ${3:[opt=nil] function end callback})"
		],
	},
	"docgen:campaign_cutscene:set_debug": {
		"scope": "lua",
		"prefix": "set_debug",
		"description": "campaign_cutscene:set_debug()\n-  -\n\nSets the cutscene into debug mode for more output.\n",
		"body": [
			"set_debug(${1:[opt=true] boolean set debug})"
		],
	},
	"docgen:campaign_cutscene:campaign_cutscene:set_debug": {
		"scope": "lua",
		"prefix": "campaign_cutscene:set_debug",
		"description": "campaign_cutscene:set_debug()\n-  -\n\nSets the cutscene into debug mode for more output.\n",
		"body": [
			"campaign_cutscene:set_debug(${1:[opt=true] boolean set debug})"
		],
	},
	"docgen:campaign_cutscene:set_debug_all": {
		"scope": "lua",
		"prefix": "set_debug_all",
		"description": "campaign_cutscene:set_debug_all()\n-  -\n\nSets all campaign cutscenes into debug mode for more output.\n",
		"body": [
			"set_debug_all(${1:[opt=true] boolean set debug})"
		],
	},
	"docgen:campaign_cutscene:campaign_cutscene:set_debug_all": {
		"scope": "lua",
		"prefix": "campaign_cutscene:set_debug_all",
		"description": "campaign_cutscene:set_debug_all()\n-  -\n\nSets all campaign cutscenes into debug mode for more output.\n",
		"body": [
			"campaign_cutscene:set_debug_all(${1:[opt=true] boolean set debug})"
		],
	},
	"docgen:campaign_cutscene:set_skippable": {
		"scope": "lua",
		"prefix": "set_skippable",
		"description": "campaign_cutscene:set_skippable()\n-  -\n\nSets whether the cutscene should be skippable or not, and also allows the optional specification of a callback to be called if the cutscene is skipped.\n",
		"body": [
			"set_skippable(${1:[opt=true] boolean set skippable}, ${2:[opt=nil] function skip callback})"
		],
	},
	"docgen:campaign_cutscene:campaign_cutscene:set_skippable": {
		"scope": "lua",
		"prefix": "campaign_cutscene:set_skippable",
		"description": "campaign_cutscene:set_skippable()\n-  -\n\nSets whether the cutscene should be skippable or not, and also allows the optional specification of a callback to be called if the cutscene is skipped.\n",
		"body": [
			"campaign_cutscene:set_skippable(${1:[opt=true] boolean set skippable}, ${2:[opt=nil] function skip callback})"
		],
	},
	"docgen:campaign_cutscene:set_dismiss_advice_on_end": {
		"scope": "lua",
		"prefix": "set_dismiss_advice_on_end",
		"description": "campaign_cutscene:set_dismiss_advice_on_end()\n-  -\n\nSets whether the dismiss the advisor at the end of the cutscene.\n",
		"body": [
			"set_dismiss_advice_on_end(${1:[opt=true] boolean dismiss advice})"
		],
	},
	"docgen:campaign_cutscene:campaign_cutscene:set_dismiss_advice_on_end": {
		"scope": "lua",
		"prefix": "campaign_cutscene:set_dismiss_advice_on_end",
		"description": "campaign_cutscene:set_dismiss_advice_on_end()\n-  -\n\nSets whether the dismiss the advisor at the end of the cutscene.\n",
		"body": [
			"campaign_cutscene:set_dismiss_advice_on_end(${1:[opt=true] boolean dismiss advice})"
		],
	},
	"docgen:campaign_cutscene:set_do_not_end": {
		"scope": "lua",
		"prefix": "set_do_not_end",
		"description": "campaign_cutscene:set_do_not_end()\n-  -\n\nSets the cutscene to not terminate once its duration is reached.\n",
		"body": [
			"set_do_not_end(${1:[opt=true] boolean do not end})"
		],
	},
	"docgen:campaign_cutscene:campaign_cutscene:set_do_not_end": {
		"scope": "lua",
		"prefix": "campaign_cutscene:set_do_not_end",
		"description": "campaign_cutscene:set_do_not_end()\n-  -\n\nSets the cutscene to not terminate once its duration is reached.\n",
		"body": [
			"campaign_cutscene:set_do_not_end(${1:[opt=true] boolean do not end})"
		],
	},
	"docgen:campaign_cutscene:set_use_cinematic_borders": {
		"scope": "lua",
		"prefix": "set_use_cinematic_borders",
		"description": "campaign_cutscene:set_use_cinematic_borders()\n-  -\n\nSets the cutscene to show cinematic borders whilst playing, or not.\n",
		"body": [
			"set_use_cinematic_borders(${1:[opt=true] boolean show borders})"
		],
	},
	"docgen:campaign_cutscene:campaign_cutscene:set_use_cinematic_borders": {
		"scope": "lua",
		"prefix": "campaign_cutscene:set_use_cinematic_borders",
		"description": "campaign_cutscene:set_use_cinematic_borders()\n-  -\n\nSets the cutscene to show cinematic borders whilst playing, or not.\n",
		"body": [
			"campaign_cutscene:set_use_cinematic_borders(${1:[opt=true] boolean show borders})"
		],
	},
	"docgen:campaign_cutscene:set_restore_ui": {
		"scope": "lua",
		"prefix": "set_restore_ui",
		"description": "campaign_cutscene:set_restore_ui()\n-  -\n\nTells the cutscene whether to restore the ui when it ends, or not.\n",
		"body": [
			"set_restore_ui(${1:[opt=true] boolean restore ui})"
		],
	},
	"docgen:campaign_cutscene:campaign_cutscene:set_restore_ui": {
		"scope": "lua",
		"prefix": "campaign_cutscene:set_restore_ui",
		"description": "campaign_cutscene:set_restore_ui()\n-  -\n\nTells the cutscene whether to restore the ui when it ends, or not.\n",
		"body": [
			"campaign_cutscene:set_restore_ui(${1:[opt=true] boolean restore ui})"
		],
	},
	"docgen:campaign_cutscene:set_disable_settlement_labels": {
		"scope": "lua",
		"prefix": "set_disable_settlement_labels",
		"description": "campaign_cutscene:set_disable_settlement_labels()\n-  -\n\nTells the cutscene whether to show settlement labels while playing or not.\n",
		"body": [
			"set_disable_settlement_labels(${1:[opt=true] boolean disable labels})"
		],
	},
	"docgen:campaign_cutscene:campaign_cutscene:set_disable_settlement_labels": {
		"scope": "lua",
		"prefix": "campaign_cutscene:set_disable_settlement_labels",
		"description": "campaign_cutscene:set_disable_settlement_labels()\n-  -\n\nTells the cutscene whether to show settlement labels while playing or not.\n",
		"body": [
			"campaign_cutscene:set_disable_settlement_labels(${1:[opt=true] boolean disable labels})"
		],
	},
	"docgen:campaign_cutscene:set_neighbouring_regions_visible": {
		"scope": "lua",
		"prefix": "set_neighbouring_regions_visible",
		"description": "campaign_cutscene:set_neighbouring_regions_visible()\n-  -\n\nTells the cutscene whether to make neighbouring regions visible or not.\n",
		"body": [
			"set_neighbouring_regions_visible(${1:[opt=true] boolean disable labels})"
		],
	},
	"docgen:campaign_cutscene:campaign_cutscene:set_neighbouring_regions_visible": {
		"scope": "lua",
		"prefix": "campaign_cutscene:set_neighbouring_regions_visible",
		"description": "campaign_cutscene:set_neighbouring_regions_visible()\n-  -\n\nTells the cutscene whether to make neighbouring regions visible or not.\n",
		"body": [
			"campaign_cutscene:set_neighbouring_regions_visible(${1:[opt=true] boolean disable labels})"
		],
	},
	"docgen:campaign_cutscene:set_disable_shroud": {
		"scope": "lua",
		"prefix": "set_disable_shroud",
		"description": "campaign_cutscene:set_disable_shroud()\n-  -\n\nTells the cutscene whether to show the shroud during playback, or not.\n",
		"body": [
			"set_disable_shroud(${1:[opt=true] boolean disable shroud})"
		],
	},
	"docgen:campaign_cutscene:campaign_cutscene:set_disable_shroud": {
		"scope": "lua",
		"prefix": "campaign_cutscene:set_disable_shroud",
		"description": "campaign_cutscene:set_disable_shroud()\n-  -\n\nTells the cutscene whether to show the shroud during playback, or not.\n",
		"body": [
			"campaign_cutscene:set_disable_shroud(${1:[opt=true] boolean disable shroud})"
		],
	},
	"docgen:campaign_cutscene:set_restore_shroud": {
		"scope": "lua",
		"prefix": "set_restore_shroud",
		"description": "campaign_cutscene:set_restore_shroud()\n-  -\n\nTells the cutscene whether to restore the shroud after completion to the state it was in before the cutscene started, or not.\n",
		"body": [
			"set_restore_shroud(${1:[opt=true] boolean restore shroud})"
		],
	},
	"docgen:campaign_cutscene:campaign_cutscene:set_restore_shroud": {
		"scope": "lua",
		"prefix": "campaign_cutscene:set_restore_shroud",
		"description": "campaign_cutscene:set_restore_shroud()\n-  -\n\nTells the cutscene whether to restore the shroud after completion to the state it was in before the cutscene started, or not.\n",
		"body": [
			"campaign_cutscene:set_restore_shroud(${1:[opt=true] boolean restore shroud})"
		],
	},
	"docgen:campaign_cutscene:set_end_callback": {
		"scope": "lua",
		"prefix": "set_end_callback",
		"description": "campaign_cutscene:set_end_callback()\n-  -\n\nSets the cutscene end callback.\n",
		"body": [
			"set_end_callback(${1:function end callback})"
		],
	},
	"docgen:campaign_cutscene:campaign_cutscene:set_end_callback": {
		"scope": "lua",
		"prefix": "campaign_cutscene:set_end_callback",
		"description": "campaign_cutscene:set_end_callback()\n-  -\n\nSets the cutscene end callback.\n",
		"body": [
			"campaign_cutscene:set_end_callback(${1:function end callback})"
		],
	},
	"docgen:campaign_cutscene:has_end_callback": {
		"scope": "lua",
		"prefix": "has_end_callback",
		"description": "campaign_cutscene:has_end_callback()\n-  -\n\nReturns <code>true</code> if the cutscene has an end callback specified, <code>false</code> otherwise.\n",
		"body": [
			"has_end_callback()"
		],
	},
	"docgen:campaign_cutscene:campaign_cutscene:has_end_callback": {
		"scope": "lua",
		"prefix": "campaign_cutscene:has_end_callback",
		"description": "campaign_cutscene:has_end_callback()\n-  -\n\nReturns <code>true</code> if the cutscene has an end callback specified, <code>false</code> otherwise.\n",
		"body": [
			"campaign_cutscene:has_end_callback()"
		],
	},
	"docgen:campaign_cutscene:set_call_end_callback_when_skipped": {
		"scope": "lua",
		"prefix": "set_call_end_callback_when_skipped",
		"description": "campaign_cutscene:set_call_end_callback_when_skipped()\n-  -\n\nSets whether the cutscene should call the end callback (supplied when the cutscene is created with cutscene:new) when skipped.\n",
		"body": [
			"set_call_end_callback_when_skipped(${1:[opt=true] boolean should call callback})"
		],
	},
	"docgen:campaign_cutscene:campaign_cutscene:set_call_end_callback_when_skipped": {
		"scope": "lua",
		"prefix": "campaign_cutscene:set_call_end_callback_when_skipped",
		"description": "campaign_cutscene:set_call_end_callback_when_skipped()\n-  -\n\nSets whether the cutscene should call the end callback (supplied when the cutscene is created with cutscene:new) when skipped.\n",
		"body": [
			"campaign_cutscene:set_call_end_callback_when_skipped(${1:[opt=true] boolean should call callback})"
		],
	},
	"docgen:campaign_cutscene:set_skip_camera": {
		"scope": "lua",
		"prefix": "set_skip_camera",
		"description": "campaign_cutscene:set_skip_camera()\n-  -\n\nSets a position at which the game camera is repositioned to if the cutscene is skipped.\n",
		"body": [
			"set_skip_camera(${1:[opt=nil] number x}, ${2:[opt=nil] number y}, ${3:[opt=nil] number d}, ${4:[opt=nil] number b}, ${5:[opt=nil] number h})"
		],
	},
	"docgen:campaign_cutscene:campaign_cutscene:set_skip_camera": {
		"scope": "lua",
		"prefix": "campaign_cutscene:set_skip_camera",
		"description": "campaign_cutscene:set_skip_camera()\n-  -\n\nSets a position at which the game camera is repositioned to if the cutscene is skipped.\n",
		"body": [
			"campaign_cutscene:set_skip_camera(${1:[opt=nil] number x}, ${2:[opt=nil] number y}, ${3:[opt=nil] number d}, ${4:[opt=nil] number b}, ${5:[opt=nil] number h})"
		],
	},
	"docgen:campaign_cutscene:set_restore_camera": {
		"scope": "lua",
		"prefix": "set_restore_camera",
		"description": "campaign_cutscene:set_restore_camera()\n-  -\n\nSets co-ordinates to which the game camera is restored when the cutscene ends.\n",
		"body": [
			"set_restore_camera(${1:number time}, ${2:[opt=nil] number x}, ${3:[opt=nil] number y}, ${4:[opt=nil] number d}, ${5:[opt=nil] number b}, ${6:[opt=nil] number h})"
		],
	},
	"docgen:campaign_cutscene:campaign_cutscene:set_restore_camera": {
		"scope": "lua",
		"prefix": "campaign_cutscene:set_restore_camera",
		"description": "campaign_cutscene:set_restore_camera()\n-  -\n\nSets co-ordinates to which the game camera is restored when the cutscene ends.\n",
		"body": [
			"campaign_cutscene:set_restore_camera(${1:number time}, ${2:[opt=nil] number x}, ${3:[opt=nil] number y}, ${4:[opt=nil] number d}, ${5:[opt=nil] number b}, ${6:[opt=nil] number h})"
		],
	},
	"docgen:campaign_cutscene:is_active": {
		"scope": "lua",
		"prefix": "is_active",
		"description": "campaign_cutscene:is_active()\n-  -\n\nReturns <code>true</code> if the cutscene is currently running, <code>false</code> otherwise.\n",
		"body": [
			"is_active()"
		],
	},
	"docgen:campaign_cutscene:campaign_cutscene:is_active": {
		"scope": "lua",
		"prefix": "campaign_cutscene:is_active",
		"description": "campaign_cutscene:is_active()\n-  -\n\nReturns <code>true</code> if the cutscene is currently running, <code>false</code> otherwise.\n",
		"body": [
			"campaign_cutscene:is_active()"
		],
	},
	"docgen:campaign_cutscene:add_cinematic_trigger_listener": {
		"scope": "lua",
		"prefix": "add_cinematic_trigger_listener",
		"description": "campaign_cutscene:add_cinematic_trigger_listener()\n-  -\n\nRegisters a new cinematic trigger listener.\n",
		"body": [
			"add_cinematic_trigger_listener(${1:string id}, ${2:function callback})"
		],
	},
	"docgen:campaign_cutscene:campaign_cutscene:add_cinematic_trigger_listener": {
		"scope": "lua",
		"prefix": "campaign_cutscene:add_cinematic_trigger_listener",
		"description": "campaign_cutscene:add_cinematic_trigger_listener()\n-  -\n\nRegisters a new cinematic trigger listener.\n",
		"body": [
			"campaign_cutscene:add_cinematic_trigger_listener(${1:string id}, ${2:function callback})"
		],
	},
	"docgen:campaign_cutscene:action": {
		"scope": "lua",
		"prefix": "action",
		"description": "campaign_cutscene:action()\n-  -\n\nRegisters a new action with the cutscene.\n",
		"body": [
			"action(${1:function callback}, ${2:number delay})"
		],
	},
	"docgen:campaign_cutscene:campaign_cutscene:action": {
		"scope": "lua",
		"prefix": "campaign_cutscene:action",
		"description": "campaign_cutscene:action()\n-  -\n\nRegisters a new action with the cutscene.\n",
		"body": [
			"campaign_cutscene:action(${1:function callback}, ${2:number delay})"
		],
	},
	"docgen:campaign_cutscene:start": {
		"scope": "lua",
		"prefix": "start",
		"description": "campaign_cutscene:start()\n-  -\n\nStarts the cutscene.\n",
		"body": [
			"start()"
		],
	},
	"docgen:campaign_cutscene:campaign_cutscene:start": {
		"scope": "lua",
		"prefix": "campaign_cutscene:start",
		"description": "campaign_cutscene:start()\n-  -\n\nStarts the cutscene.\n",
		"body": [
			"campaign_cutscene:start()"
		],
	},
	"docgen:campaign_cutscene:wait_for_advisor": {
		"scope": "lua",
		"prefix": "wait_for_advisor",
		"description": "campaign_cutscene:wait_for_advisor()\n-  -\n\nThis function, when called, causes the cutscene to repeatedly stall while the advisor is still speaking and only allow the cutscene to progress once the advisor has finished.\n",
		"body": [
			"wait_for_advisor(${1:[opt=nil] number delay})"
		],
	},
	"docgen:campaign_cutscene:campaign_cutscene:wait_for_advisor": {
		"scope": "lua",
		"prefix": "campaign_cutscene:wait_for_advisor",
		"description": "campaign_cutscene:wait_for_advisor()\n-  -\n\nThis function, when called, causes the cutscene to repeatedly stall while the advisor is still speaking and only allow the cutscene to progress once the advisor has finished.\n",
		"body": [
			"campaign_cutscene:wait_for_advisor(${1:[opt=nil] number delay})"
		],
	},
	"docgen:campaign_cutscene:cindy_playback": {
		"scope": "lua",
		"prefix": "cindy_playback",
		"description": "campaign_cutscene:cindy_playback()\n-  -\n\nImmediately starts playback of a cindy scene.\n",
		"body": [
			"cindy_playback(${1:string filepath}, ${2:[opt=nil] number blend in duration}, ${3:[opt=nil] number blend out duration})"
		],
	},
	"docgen:campaign_cutscene:campaign_cutscene:cindy_playback": {
		"scope": "lua",
		"prefix": "campaign_cutscene:cindy_playback",
		"description": "campaign_cutscene:cindy_playback()\n-  -\n\nImmediately starts playback of a cindy scene.\n",
		"body": [
			"campaign_cutscene:cindy_playback(${1:string filepath}, ${2:[opt=nil] number blend in duration}, ${3:[opt=nil] number blend out duration})"
		],
	},
	"docgen:campaign_cutscene:dismiss_advice": {
		"scope": "lua",
		"prefix": "dismiss_advice",
		"description": "campaign_cutscene:dismiss_advice()\n-  -\n\nIssues a call to dismiss the advice without triggering the end of the cutscene.\n",
		"body": [
			"dismiss_advice()"
		],
	},
	"docgen:campaign_cutscene:campaign_cutscene:dismiss_advice": {
		"scope": "lua",
		"prefix": "campaign_cutscene:dismiss_advice",
		"description": "campaign_cutscene:dismiss_advice()\n-  -\n\nIssues a call to dismiss the advice without triggering the end of the cutscene.\n",
		"body": [
			"campaign_cutscene:dismiss_advice()"
		],
	},
	"docgen:campaign_cutscene:skip": {
		"scope": "lua",
		"prefix": "skip",
		"description": "campaign_cutscene:skip()\n-  -\n\nThis function is called internally when the cutscene has been skipped by the player.\n",
		"body": [
			"skip()"
		],
	},
	"docgen:campaign_cutscene:campaign_cutscene:skip": {
		"scope": "lua",
		"prefix": "campaign_cutscene:skip",
		"description": "campaign_cutscene:skip()\n-  -\n\nThis function is called internally when the cutscene has been skipped by the player.\n",
		"body": [
			"campaign_cutscene:skip()"
		],
	},
	"docgen:intervention:new": {
		"scope": "lua",
		"prefix": "new",
		"description": "intervention:new()\n-  -\n\nCreates a intervention object.\n",
		"body": [
			"new(${1:string name}, ${2:number cost}, ${3:function callback}, ${4:[opt=false] boolean debug mode}, ${5:[opt=false] boolean is transient})"
		],
	},
	"docgen:intervention:intervention:new": {
		"scope": "lua",
		"prefix": "intervention:new",
		"description": "intervention:new()\n-  -\n\nCreates a intervention object.\n",
		"body": [
			"intervention:new(${1:string name}, ${2:number cost}, ${3:function callback}, ${4:[opt=false] boolean debug mode}, ${5:[opt=false] boolean is transient})"
		],
	},
	"docgen:intervention:add_precondition": {
		"scope": "lua",
		"prefix": "add_precondition",
		"description": "intervention:add_precondition()\n-  -\n\nAdds a precondition function to the intervention.\n",
		"body": [
			"add_precondition(${1:function precondition})"
		],
	},
	"docgen:intervention:intervention:add_precondition": {
		"scope": "lua",
		"prefix": "intervention:add_precondition",
		"description": "intervention:add_precondition()\n-  -\n\nAdds a precondition function to the intervention.\n",
		"body": [
			"intervention:add_precondition(${1:function precondition})"
		],
	},
	"docgen:intervention:add_advice_key_precondition": {
		"scope": "lua",
		"prefix": "add_advice_key_precondition",
		"description": "intervention:add_advice_key_precondition()\n-  -\n\nPrecondition wrapper function that adds a precondition to the intervention that a particular advice key must not have been triggered.\n",
		"body": [
			"add_advice_key_precondition(${1:string advice key})"
		],
	},
	"docgen:intervention:intervention:add_advice_key_precondition": {
		"scope": "lua",
		"prefix": "intervention:add_advice_key_precondition",
		"description": "intervention:add_advice_key_precondition()\n-  -\n\nPrecondition wrapper function that adds a precondition to the intervention that a particular advice key must not have been triggered.\n",
		"body": [
			"intervention:add_advice_key_precondition(${1:string advice key})"
		],
	},
	"docgen:intervention:add_precondition_unvisited_page": {
		"scope": "lua",
		"prefix": "add_precondition_unvisited_page",
		"description": "intervention:add_precondition_unvisited_page()\n-  -\n\nPrecondition wrapper function that adds a precondition to the intervention that a particular help page must be unvisited.\n",
		"body": [
			"add_precondition_unvisited_page(${1:string help page name})"
		],
	},
	"docgen:intervention:intervention:add_precondition_unvisited_page": {
		"scope": "lua",
		"prefix": "intervention:add_precondition_unvisited_page",
		"description": "intervention:add_precondition_unvisited_page()\n-  -\n\nPrecondition wrapper function that adds a precondition to the intervention that a particular help page must be unvisited.\n",
		"body": [
			"intervention:add_precondition_unvisited_page(${1:string help page name})"
		],
	},
	"docgen:intervention:add_trigger_condition": {
		"scope": "lua",
		"prefix": "add_trigger_condition",
		"description": "intervention:add_trigger_condition()\n-  -\n\nAdds a trigger event and condition to the intervention.\n",
		"body": [
			"add_trigger_condition(${1:string event name}, ${2:function condition check})"
		],
	},
	"docgen:intervention:intervention:add_trigger_condition": {
		"scope": "lua",
		"prefix": "intervention:add_trigger_condition",
		"description": "intervention:add_trigger_condition()\n-  -\n\nAdds a trigger event and condition to the intervention.\n",
		"body": [
			"intervention:add_trigger_condition(${1:string event name}, ${2:function condition check})"
		],
	},
	"docgen:intervention:set_disregard_cost_when_triggering": {
		"scope": "lua",
		"prefix": "set_disregard_cost_when_triggering",
		"description": "intervention:set_disregard_cost_when_triggering()\n-  -\n\nSet this intervention to trigger regardless of cost.\n",
		"body": [
			"set_disregard_cost_when_triggering(${1:[opt=true] boolean diregard cost})"
		],
	},
	"docgen:intervention:intervention:set_disregard_cost_when_triggering": {
		"scope": "lua",
		"prefix": "intervention:set_disregard_cost_when_triggering",
		"description": "intervention:set_disregard_cost_when_triggering()\n-  -\n\nSet this intervention to trigger regardless of cost.\n",
		"body": [
			"intervention:set_disregard_cost_when_triggering(${1:[opt=true] boolean diregard cost})"
		],
	},
	"docgen:intervention:set_suppress_pause_before_triggering": {
		"scope": "lua",
		"prefix": "set_suppress_pause_before_triggering",
		"description": "intervention:set_suppress_pause_before_triggering()\n-  -\n\nBy default, interventions wait for a short period before triggering.\n",
		"body": [
			"set_suppress_pause_before_triggering(${1:[opt=true] boolean suppress pause})"
		],
	},
	"docgen:intervention:intervention:set_suppress_pause_before_triggering": {
		"scope": "lua",
		"prefix": "intervention:set_suppress_pause_before_triggering",
		"description": "intervention:set_suppress_pause_before_triggering()\n-  -\n\nBy default, interventions wait for a short period before triggering.\n",
		"body": [
			"intervention:set_suppress_pause_before_triggering(${1:[opt=true] boolean suppress pause})"
		],
	},
	"docgen:intervention:set_allow_when_advice_disabled": {
		"scope": "lua",
		"prefix": "set_allow_when_advice_disabled",
		"description": "intervention:set_allow_when_advice_disabled()\n-  -\n\nIf advice has been disabled with campaign_manager:set_advice_enabled then by default interventions won't attempt to play.\n",
		"body": [
			"set_allow_when_advice_disabled(${1:[opt=true] boolean allow intervention})"
		],
	},
	"docgen:intervention:intervention:set_allow_when_advice_disabled": {
		"scope": "lua",
		"prefix": "intervention:set_allow_when_advice_disabled",
		"description": "intervention:set_allow_when_advice_disabled()\n-  -\n\nIf advice has been disabled with campaign_manager:set_advice_enabled then by default interventions won't attempt to play.\n",
		"body": [
			"intervention:set_allow_when_advice_disabled(${1:[opt=true] boolean allow intervention})"
		],
	},
	"docgen:intervention:set_min_advice_level": {
		"scope": "lua",
		"prefix": "set_min_advice_level",
		"description": "intervention:set_min_advice_level()\n-  -\n\nSets the minimum player advice level setting at which this intervention will be allowed to trigger.\n",
		"body": [
			"set_min_advice_level(${1:number min advice level})"
		],
	},
	"docgen:intervention:intervention:set_min_advice_level": {
		"scope": "lua",
		"prefix": "intervention:set_min_advice_level",
		"description": "intervention:set_min_advice_level()\n-  -\n\nSets the minimum player advice level setting at which this intervention will be allowed to trigger.\n",
		"body": [
			"intervention:set_min_advice_level(${1:number min advice level})"
		],
	},
	"docgen:intervention:set_player_turn_only": {
		"scope": "lua",
		"prefix": "set_player_turn_only",
		"description": "intervention:set_player_turn_only()\n-  -\n\nSets whether or not this intervention can only happen on the player's turn.\n",
		"body": [
			"set_player_turn_only(${1:[opt=true] boolean player turn only})"
		],
	},
	"docgen:intervention:intervention:set_player_turn_only": {
		"scope": "lua",
		"prefix": "intervention:set_player_turn_only",
		"description": "intervention:set_player_turn_only()\n-  -\n\nSets whether or not this intervention can only happen on the player's turn.\n",
		"body": [
			"intervention:set_player_turn_only(${1:[opt=true] boolean player turn only})"
		],
	},
	"docgen:intervention:set_min_turn": {
		"scope": "lua",
		"prefix": "set_min_turn",
		"description": "intervention:set_min_turn()\n-  -\n\nSets the minimum number of turns since either the start of the campaign or when the advice history was last reset before this intervention is eligible to trigger.\n",
		"body": [
			"set_min_turn(${1:number minimum turn})"
		],
	},
	"docgen:intervention:intervention:set_min_turn": {
		"scope": "lua",
		"prefix": "intervention:set_min_turn",
		"description": "intervention:set_min_turn()\n-  -\n\nSets the minimum number of turns since either the start of the campaign or when the advice history was last reset before this intervention is eligible to trigger.\n",
		"body": [
			"intervention:set_min_turn(${1:number minimum turn})"
		],
	},
	"docgen:intervention:get_min_turn": {
		"scope": "lua",
		"prefix": "get_min_turn",
		"description": "intervention:get_min_turn()\n-  -\n\nReturns the set minimum turn value.\n",
		"body": [
			"get_min_turn()"
		],
	},
	"docgen:intervention:intervention:get_min_turn": {
		"scope": "lua",
		"prefix": "intervention:get_min_turn",
		"description": "intervention:get_min_turn()\n-  -\n\nReturns the set minimum turn value.\n",
		"body": [
			"intervention:get_min_turn()"
		],
	},
	"docgen:intervention:set_wait_for_battle_complete": {
		"scope": "lua",
		"prefix": "set_wait_for_battle_complete",
		"description": "intervention:set_wait_for_battle_complete()\n-  -\n\nBy default, interventions will wait for a battle sequence to complete before triggering.\n",
		"body": [
			"set_wait_for_battle_complete(${1:[opt=true] boolean wait for battle})"
		],
	},
	"docgen:intervention:intervention:set_wait_for_battle_complete": {
		"scope": "lua",
		"prefix": "intervention:set_wait_for_battle_complete",
		"description": "intervention:set_wait_for_battle_complete()\n-  -\n\nBy default, interventions will wait for a battle sequence to complete before triggering.\n",
		"body": [
			"intervention:set_wait_for_battle_complete(${1:[opt=true] boolean wait for battle})"
		],
	},
	"docgen:intervention:set_allow_attacking": {
		"scope": "lua",
		"prefix": "set_allow_attacking",
		"description": "intervention:set_allow_attacking()\n-  -\n\nBy default, interventions will prevent any army movement or attacking while running.\n",
		"body": [
			"set_allow_attacking(${1:[opt=true] boolean allow attacking})"
		],
	},
	"docgen:intervention:intervention:set_allow_attacking": {
		"scope": "lua",
		"prefix": "intervention:set_allow_attacking",
		"description": "intervention:set_allow_attacking()\n-  -\n\nBy default, interventions will prevent any army movement or attacking while running.\n",
		"body": [
			"intervention:set_allow_attacking(${1:[opt=true] boolean allow attacking})"
		],
	},
	"docgen:intervention:set_wait_for_event_dismissed": {
		"scope": "lua",
		"prefix": "set_wait_for_event_dismissed",
		"description": "intervention:set_wait_for_event_dismissed()\n-  -\n\nBy default, interventions will wait for any open event panels to be dismissed before triggering.\n",
		"body": [
			"set_wait_for_event_dismissed(${1:[opt=true] boolean wait for events})"
		],
	},
	"docgen:intervention:intervention:set_wait_for_event_dismissed": {
		"scope": "lua",
		"prefix": "intervention:set_wait_for_event_dismissed",
		"description": "intervention:set_wait_for_event_dismissed()\n-  -\n\nBy default, interventions will wait for any open event panels to be dismissed before triggering.\n",
		"body": [
			"intervention:set_wait_for_event_dismissed(${1:[opt=true] boolean wait for events})"
		],
	},
	"docgen:intervention:set_wait_for_dilemma": {
		"scope": "lua",
		"prefix": "set_wait_for_dilemma",
		"description": "intervention:set_wait_for_dilemma()\n-  -\n\nBy default, interventions will wait for open dilemmas to be dismissed before triggering.\n",
		"body": [
			"set_wait_for_dilemma(${1:[opt=true] boolean wait for dilemmas})"
		],
	},
	"docgen:intervention:intervention:set_wait_for_dilemma": {
		"scope": "lua",
		"prefix": "intervention:set_wait_for_dilemma",
		"description": "intervention:set_wait_for_dilemma()\n-  -\n\nBy default, interventions will wait for open dilemmas to be dismissed before triggering.\n",
		"body": [
			"intervention:set_wait_for_dilemma(${1:[opt=true] boolean wait for dilemmas})"
		],
	},
	"docgen:intervention:set_wait_for_fullscreen_panel_dismissed": {
		"scope": "lua",
		"prefix": "set_wait_for_fullscreen_panel_dismissed",
		"description": "intervention:set_wait_for_fullscreen_panel_dismissed()\n-  -\n\nBy default, interventions will wait for any open fullscreen panels (technology, diplomacy, recruitment etc) to be dismissed before triggering.\n",
		"body": [
			"set_wait_for_fullscreen_panel_dismissed(${1:[opt=true] boolean wait for panels})"
		],
	},
	"docgen:intervention:intervention:set_wait_for_fullscreen_panel_dismissed": {
		"scope": "lua",
		"prefix": "intervention:set_wait_for_fullscreen_panel_dismissed",
		"description": "intervention:set_wait_for_fullscreen_panel_dismissed()\n-  -\n\nBy default, interventions will wait for any open fullscreen panels (technology, diplomacy, recruitment etc) to be dismissed before triggering.\n",
		"body": [
			"intervention:set_wait_for_fullscreen_panel_dismissed(${1:[opt=true] boolean wait for panels})"
		],
	},
	"docgen:intervention:add_whitelist_event_type": {
		"scope": "lua",
		"prefix": "add_whitelist_event_type",
		"description": "intervention:add_whitelist_event_type()\n-  -\n\nAdds an event type to be whitelisted if intervention:whitelist_events is called.\n",
		"body": [
			"add_whitelist_event_type(${1:string event type})"
		],
	},
	"docgen:intervention:intervention:add_whitelist_event_type": {
		"scope": "lua",
		"prefix": "intervention:add_whitelist_event_type",
		"description": "intervention:add_whitelist_event_type()\n-  -\n\nAdds an event type to be whitelisted if intervention:whitelist_events is called.\n",
		"body": [
			"intervention:add_whitelist_event_type(${1:string event type})"
		],
	},
	"docgen:intervention:set_completion_callback": {
		"scope": "lua",
		"prefix": "set_completion_callback",
		"description": "intervention:set_completion_callback()\n-  -\n\nAdds a callback to call when the intervention has completed.\n",
		"body": [
			"set_completion_callback(${1:function callback})"
		],
	},
	"docgen:intervention:intervention:set_completion_callback": {
		"scope": "lua",
		"prefix": "intervention:set_completion_callback",
		"description": "intervention:set_completion_callback()\n-  -\n\nAdds a callback to call when the intervention has completed.\n",
		"body": [
			"intervention:set_completion_callback(${1:function callback})"
		],
	},
	"docgen:intervention:get_turn_last_triggered": {
		"scope": "lua",
		"prefix": "get_turn_last_triggered",
		"description": "intervention:get_turn_last_triggered()\n-  -\n\nReturns the turn number of which this intervention last triggered in this campaign.\n",
		"body": [
			"get_turn_last_triggered()"
		],
	},
	"docgen:intervention:intervention:get_turn_last_triggered": {
		"scope": "lua",
		"prefix": "intervention:get_turn_last_triggered",
		"description": "intervention:get_turn_last_triggered()\n-  -\n\nReturns the turn number of which this intervention last triggered in this campaign.\n",
		"body": [
			"intervention:get_turn_last_triggered()"
		],
	},
	"docgen:intervention:has_ever_triggered": {
		"scope": "lua",
		"prefix": "has_ever_triggered",
		"description": "intervention:has_ever_triggered()\n-  -\n\nReturns whether this intervention has ever triggered in this campaign.\n",
		"body": [
			"has_ever_triggered()"
		],
	},
	"docgen:intervention:intervention:has_ever_triggered": {
		"scope": "lua",
		"prefix": "intervention:has_ever_triggered",
		"description": "intervention:has_ever_triggered()\n-  -\n\nReturns whether this intervention has ever triggered in this campaign.\n",
		"body": [
			"intervention:has_ever_triggered()"
		],
	},
	"docgen:intervention:add_restart_callback": {
		"scope": "lua",
		"prefix": "add_restart_callback",
		"description": "intervention:add_restart_callback()\n-  -\n\nAdds a restart event and conditional check.\n",
		"body": [
			"add_restart_callback(${1:string event name}, ${2:function check})"
		],
	},
	"docgen:intervention:intervention:add_restart_callback": {
		"scope": "lua",
		"prefix": "intervention:add_restart_callback",
		"description": "intervention:add_restart_callback()\n-  -\n\nAdds a restart event and conditional check.\n",
		"body": [
			"intervention:add_restart_callback(${1:string event name}, ${2:function check})"
		],
	},
	"docgen:intervention:set_turn_countdown_restart": {
		"scope": "lua",
		"prefix": "set_turn_countdown_restart",
		"description": "intervention:set_turn_countdown_restart()\n-  -\n\nIf a turn countdown restart number is set, the intervention will attempt to restart the given number of turns after stopping.\n",
		"body": [
			"set_turn_countdown_restart(${1:number turns})"
		],
	},
	"docgen:intervention:intervention:set_turn_countdown_restart": {
		"scope": "lua",
		"prefix": "intervention:set_turn_countdown_restart",
		"description": "intervention:set_turn_countdown_restart()\n-  -\n\nIf a turn countdown restart number is set, the intervention will attempt to restart the given number of turns after stopping.\n",
		"body": [
			"intervention:set_turn_countdown_restart(${1:number turns})"
		],
	},
	"docgen:intervention:register_shared_turn_countdown_intervention": {
		"scope": "lua",
		"prefix": "register_shared_turn_countdown_intervention",
		"description": "intervention:register_shared_turn_countdown_intervention()\n-  -\n\nRegisters that this intervention shares a turn countdown with another.\n",
		"body": [
			"register_shared_turn_countdown_intervention(${1:string intervention name})"
		],
	},
	"docgen:intervention:intervention:register_shared_turn_countdown_intervention": {
		"scope": "lua",
		"prefix": "intervention:register_shared_turn_countdown_intervention",
		"description": "intervention:register_shared_turn_countdown_intervention()\n-  -\n\nRegisters that this intervention shares a turn countdown with another.\n",
		"body": [
			"intervention:register_shared_turn_countdown_intervention(${1:string intervention name})"
		],
	},
	"docgen:intervention:take_priority_over_intervention": {
		"scope": "lua",
		"prefix": "take_priority_over_intervention",
		"description": "intervention:take_priority_over_intervention()\n-  -\n\nRegisters that this intervention takes priority over another intervention with the supplied name, so that they cannot run at the same time.\n",
		"body": [
			"take_priority_over_intervention(${1:string intervention name})"
		],
	},
	"docgen:intervention:intervention:take_priority_over_intervention": {
		"scope": "lua",
		"prefix": "intervention:take_priority_over_intervention",
		"description": "intervention:take_priority_over_intervention()\n-  -\n\nRegisters that this intervention takes priority over another intervention with the supplied name, so that they cannot run at the same time.\n",
		"body": [
			"intervention:take_priority_over_intervention(${1:string intervention name})"
		],
	},
	"docgen:intervention:give_priority_to_intervention": {
		"scope": "lua",
		"prefix": "give_priority_to_intervention",
		"description": "intervention:give_priority_to_intervention()\n-  -\n\nRegisters that this intervention cedes priority to another intervention with the supplied name, so that they cannot run at the same time.\n",
		"body": [
			"give_priority_to_intervention(${1:string intervention name})"
		],
	},
	"docgen:intervention:intervention:give_priority_to_intervention": {
		"scope": "lua",
		"prefix": "intervention:give_priority_to_intervention",
		"description": "intervention:give_priority_to_intervention()\n-  -\n\nRegisters that this intervention cedes priority to another intervention with the supplied name, so that they cannot run at the same time.\n",
		"body": [
			"intervention:give_priority_to_intervention(${1:string intervention name})"
		],
	},
	"docgen:intervention:start": {
		"scope": "lua",
		"prefix": "start",
		"description": "intervention:start()\n-  -\n\nStarts the intervention.\n",
		"body": [
			"start()"
		],
	},
	"docgen:intervention:intervention:start": {
		"scope": "lua",
		"prefix": "intervention:start",
		"description": "intervention:start()\n-  -\n\nStarts the intervention.\n",
		"body": [
			"intervention:start()"
		],
	},
	"docgen:intervention:whitelist_events": {
		"scope": "lua",
		"prefix": "whitelist_events",
		"description": "intervention:whitelist_events()\n-  -\n\nPerform the whitelisting of event types that have been registered with intervention:add_whitelist_event_type.\n",
		"body": [
			"whitelist_events()"
		],
	},
	"docgen:intervention:intervention:whitelist_events": {
		"scope": "lua",
		"prefix": "intervention:whitelist_events",
		"description": "intervention:whitelist_events()\n-  -\n\nPerform the whitelisting of event types that have been registered with intervention:add_whitelist_event_type.\n",
		"body": [
			"intervention:whitelist_events()"
		],
	},
	"docgen:intervention:complete": {
		"scope": "lua",
		"prefix": "complete",
		"description": "intervention:complete()\n-  -\n\nCompletes the intervention when it's running.\n",
		"body": [
			"complete()"
		],
	},
	"docgen:intervention:intervention:complete": {
		"scope": "lua",
		"prefix": "intervention:complete",
		"description": "intervention:complete()\n-  -\n\nCompletes the intervention when it's running.\n",
		"body": [
			"intervention:complete()"
		],
	},
	"docgen:intervention:cancel": {
		"scope": "lua",
		"prefix": "cancel",
		"description": "intervention:cancel()\n-  -\n\nCompletes the intervention without stopping its listeners.\n",
		"body": [
			"cancel()"
		],
	},
	"docgen:intervention:intervention:cancel": {
		"scope": "lua",
		"prefix": "intervention:cancel",
		"description": "intervention:cancel()\n-  -\n\nCompletes the intervention without stopping its listeners.\n",
		"body": [
			"intervention:cancel()"
		],
	},
	"docgen:intervention:scroll_camera_to_character_for_intervention": {
		"scope": "lua",
		"prefix": "scroll_camera_to_character_for_intervention",
		"description": "intervention:scroll_camera_to_character_for_intervention()\n-  -\n\nScrolls the camera to a character during an intervention, showing advice and optionally showing infotext and a mission.\n",
		"body": [
			"scroll_camera_to_character_for_intervention(${1:number cqi}, ${2:string advice key}, ${3:[opt=nil] table infotext}, ${4:[opt=nil] mission_manager mission}, ${5:[opt=3] number duration}, ${6:[opt=nil] function scroll callback}, ${7:[opt=nil] function continuation callback})"
		],
	},
	"docgen:intervention:intervention:scroll_camera_to_character_for_intervention": {
		"scope": "lua",
		"prefix": "intervention:scroll_camera_to_character_for_intervention",
		"description": "intervention:scroll_camera_to_character_for_intervention()\n-  -\n\nScrolls the camera to a character during an intervention, showing advice and optionally showing infotext and a mission.\n",
		"body": [
			"intervention:scroll_camera_to_character_for_intervention(${1:number cqi}, ${2:string advice key}, ${3:[opt=nil] table infotext}, ${4:[opt=nil] mission_manager mission}, ${5:[opt=3] number duration}, ${6:[opt=nil] function scroll callback}, ${7:[opt=nil] function continuation callback})"
		],
	},
	"docgen:intervention:scroll_camera_to_settlement_for_intervention": {
		"scope": "lua",
		"prefix": "scroll_camera_to_settlement_for_intervention",
		"description": "intervention:scroll_camera_to_settlement_for_intervention()\n-  -\n\nScrolls the camera to a settlement during an intervention, showing advice and optionally showing infotext and a mission.\n",
		"body": [
			"scroll_camera_to_settlement_for_intervention(${1:string region key}, ${2:string advice key}, ${3:[opt=nil] table infotext}, ${4:[opt=nil] mission_manager mission}, ${5:[opt=3] number duration}, ${6:[opt=nil] function scroll callback}, ${7:[opt=nil] function continuation callback})"
		],
	},
	"docgen:intervention:intervention:scroll_camera_to_settlement_for_intervention": {
		"scope": "lua",
		"prefix": "intervention:scroll_camera_to_settlement_for_intervention",
		"description": "intervention:scroll_camera_to_settlement_for_intervention()\n-  -\n\nScrolls the camera to a settlement during an intervention, showing advice and optionally showing infotext and a mission.\n",
		"body": [
			"intervention:scroll_camera_to_settlement_for_intervention(${1:string region key}, ${2:string advice key}, ${3:[opt=nil] table infotext}, ${4:[opt=nil] mission_manager mission}, ${5:[opt=3] number duration}, ${6:[opt=nil] function scroll callback}, ${7:[opt=nil] function continuation callback})"
		],
	},
	"docgen:intervention:scroll_camera_for_intervention": {
		"scope": "lua",
		"prefix": "scroll_camera_for_intervention",
		"description": "intervention:scroll_camera_for_intervention()\n-  -\n\nScrolls the camera to a supplied position on the campaign map during an intervention, showing advice and optionally showing infotext and a mission.\n",
		"body": [
			"scroll_camera_for_intervention(${1:string region key}, ${2:number x}, ${3:number y}, ${4:string advice key}, ${5:[opt=nil] table infotext}, ${6:[opt=nil] mission_manager mission}, ${7:[opt=3] number duration}, ${8:[opt=nil] function scroll callback}, ${9:[opt=nil] function continuation callback})"
		],
	},
	"docgen:intervention:intervention:scroll_camera_for_intervention": {
		"scope": "lua",
		"prefix": "intervention:scroll_camera_for_intervention",
		"description": "intervention:scroll_camera_for_intervention()\n-  -\n\nScrolls the camera to a supplied position on the campaign map during an intervention, showing advice and optionally showing infotext and a mission.\n",
		"body": [
			"intervention:scroll_camera_for_intervention(${1:string region key}, ${2:number x}, ${3:number y}, ${4:string advice key}, ${5:[opt=nil] table infotext}, ${6:[opt=nil] mission_manager mission}, ${7:[opt=3] number duration}, ${8:[opt=nil] function scroll callback}, ${9:[opt=nil] function continuation callback})"
		],
	},
	"docgen:intervention:play_advice_for_intervention": {
		"scope": "lua",
		"prefix": "play_advice_for_intervention",
		"description": "intervention:play_advice_for_intervention()\n-  -\n\nShows advice and optionally some infotext and a mission.\n",
		"body": [
			"play_advice_for_intervention(${1:string advice key}, ${2:[opt=nil] table infotext}, ${3:[opt=nil] mission_manager mission}, ${4:[opt=2] number mission delay})"
		],
	},
	"docgen:intervention:intervention:play_advice_for_intervention": {
		"scope": "lua",
		"prefix": "intervention:play_advice_for_intervention",
		"description": "intervention:play_advice_for_intervention()\n-  -\n\nShows advice and optionally some infotext and a mission.\n",
		"body": [
			"intervention:play_advice_for_intervention(${1:string advice key}, ${2:[opt=nil] table infotext}, ${3:[opt=nil] mission_manager mission}, ${4:[opt=2] number mission delay})"
		],
	},
	"docgen:invasion_manager:new_invasion": {
		"scope": "lua",
		"prefix": "new_invasion",
		"description": "invasion_manager:new_invasion()\n-  -\n\nAdds a new invasion to the invasion manager\n",
		"body": [
			"new_invasion(${1:string invasion key}, ${2:string faction key}, ${3:string force list}, ${4:table spawn location})"
		],
	},
	"docgen:invasion_manager:invasion_manager:new_invasion": {
		"scope": "lua",
		"prefix": "invasion_manager:new_invasion",
		"description": "invasion_manager:new_invasion()\n-  -\n\nAdds a new invasion to the invasion manager\n",
		"body": [
			"invasion_manager:new_invasion(${1:string invasion key}, ${2:string faction key}, ${3:string force list}, ${4:table spawn location})"
		],
	},
	"docgen:campaign_manager:new": {
		"scope": "lua",
		"prefix": "new",
		"description": "campaign_manager:new()\n-  -\n\nCreates and returns a campaign manager.\n",
		"body": [
			"new(${1:[opt=\"<unnamed>\"] string campaign name})"
		],
	},
	"docgen:campaign_manager:campaign_manager:new": {
		"scope": "lua",
		"prefix": "campaign_manager:new",
		"description": "campaign_manager:new()\n-  -\n\nCreates and returns a campaign manager.\n",
		"body": [
			"campaign_manager:new(${1:[opt=\"<unnamed>\"] string campaign name})"
		],
	},
	"docgen:campaign_manager:cm:new": {
		"scope": "lua",
		"prefix": "cm:new",
		"description": "campaign_manager:new()\n-  -\n\nCreates and returns a campaign manager.\n",
		"body": [
			"cm:new(${1:[opt=\"<unnamed>\"] string campaign name})"
		],
	},
	"docgen:campaign_manager:set_campaign_name": {
		"scope": "lua",
		"prefix": "set_campaign_name",
		"description": "campaign_manager:set_campaign_name()\n-  -\n\nSets the name of the campaign.\n",
		"body": [
			"set_campaign_name(${1:string campaign name})"
		],
	},
	"docgen:campaign_manager:campaign_manager:set_campaign_name": {
		"scope": "lua",
		"prefix": "campaign_manager:set_campaign_name",
		"description": "campaign_manager:set_campaign_name()\n-  -\n\nSets the name of the campaign.\n",
		"body": [
			"campaign_manager:set_campaign_name(${1:string campaign name})"
		],
	},
	"docgen:campaign_manager:cm:set_campaign_name": {
		"scope": "lua",
		"prefix": "cm:set_campaign_name",
		"description": "campaign_manager:set_campaign_name()\n-  -\n\nSets the name of the campaign.\n",
		"body": [
			"cm:set_campaign_name(${1:string campaign name})"
		],
	},
	"docgen:campaign_manager:get_campaign_name": {
		"scope": "lua",
		"prefix": "get_campaign_name",
		"description": "campaign_manager:get_campaign_name()\n-  -\n\nReturns the name of the campaign.\n",
		"body": [
			"get_campaign_name()"
		],
	},
	"docgen:campaign_manager:campaign_manager:get_campaign_name": {
		"scope": "lua",
		"prefix": "campaign_manager:get_campaign_name",
		"description": "campaign_manager:get_campaign_name()\n-  -\n\nReturns the name of the campaign.\n",
		"body": [
			"campaign_manager:get_campaign_name()"
		],
	},
	"docgen:campaign_manager:cm:get_campaign_name": {
		"scope": "lua",
		"prefix": "cm:get_campaign_name",
		"description": "campaign_manager:get_campaign_name()\n-  -\n\nReturns the name of the campaign.\n",
		"body": [
			"cm:get_campaign_name()"
		],
	},
	"docgen:campaign_manager:get_campaign_folder": {
		"scope": "lua",
		"prefix": "get_campaign_folder",
		"description": "campaign_manager:get_campaign_folder()\n-  -\n\nReturns a static path to the campaign script folder (currently \"data/script/campaign\")\n",
		"body": [
			"get_campaign_folder()"
		],
	},
	"docgen:campaign_manager:campaign_manager:get_campaign_folder": {
		"scope": "lua",
		"prefix": "campaign_manager:get_campaign_folder",
		"description": "campaign_manager:get_campaign_folder()\n-  -\n\nReturns a static path to the campaign script folder (currently \"data/script/campaign\")\n",
		"body": [
			"campaign_manager:get_campaign_folder()"
		],
	},
	"docgen:campaign_manager:cm:get_campaign_folder": {
		"scope": "lua",
		"prefix": "cm:get_campaign_folder",
		"description": "campaign_manager:get_campaign_folder()\n-  -\n\nReturns a static path to the campaign script folder (currently \"data/script/campaign\")\n",
		"body": [
			"cm:get_campaign_folder()"
		],
	},
	"docgen:campaign_manager:require_path_to_campaign_folder": {
		"scope": "lua",
		"prefix": "require_path_to_campaign_folder",
		"description": "campaign_manager:require_path_to_campaign_folder()\n-  -\n\nAdds the current campaign's folder to the path, so that the lua files related to this campaign can be loaded with the <code>require</code> command.\n",
		"body": [
			"require_path_to_campaign_folder()"
		],
	},
	"docgen:campaign_manager:campaign_manager:require_path_to_campaign_folder": {
		"scope": "lua",
		"prefix": "campaign_manager:require_path_to_campaign_folder",
		"description": "campaign_manager:require_path_to_campaign_folder()\n-  -\n\nAdds the current campaign's folder to the path, so that the lua files related to this campaign can be loaded with the <code>require</code> command.\n",
		"body": [
			"campaign_manager:require_path_to_campaign_folder()"
		],
	},
	"docgen:campaign_manager:cm:require_path_to_campaign_folder": {
		"scope": "lua",
		"prefix": "cm:require_path_to_campaign_folder",
		"description": "campaign_manager:require_path_to_campaign_folder()\n-  -\n\nAdds the current campaign's folder to the path, so that the lua files related to this campaign can be loaded with the <code>require</code> command.\n",
		"body": [
			"cm:require_path_to_campaign_folder()"
		],
	},
	"docgen:campaign_manager:require_path_to_campaign_faction_folder": {
		"scope": "lua",
		"prefix": "require_path_to_campaign_faction_folder",
		"description": "campaign_manager:require_path_to_campaign_faction_folder()\n-  -\n\nAdds the player faction's script folder for the current campaign to the lua path (<code>script/campaign/%campaign_name%/factions/%player_faction_name%/</code>), so that scripts related to the faction can be loaded with the <code>require</code> command.\n",
		"body": [
			"require_path_to_campaign_faction_folder()"
		],
	},
	"docgen:campaign_manager:campaign_manager:require_path_to_campaign_faction_folder": {
		"scope": "lua",
		"prefix": "campaign_manager:require_path_to_campaign_faction_folder",
		"description": "campaign_manager:require_path_to_campaign_faction_folder()\n-  -\n\nAdds the player faction's script folder for the current campaign to the lua path (<code>script/campaign/%campaign_name%/factions/%player_faction_name%/</code>), so that scripts related to the faction can be loaded with the <code>require</code> command.\n",
		"body": [
			"campaign_manager:require_path_to_campaign_faction_folder()"
		],
	},
	"docgen:campaign_manager:cm:require_path_to_campaign_faction_folder": {
		"scope": "lua",
		"prefix": "cm:require_path_to_campaign_faction_folder",
		"description": "campaign_manager:require_path_to_campaign_faction_folder()\n-  -\n\nAdds the player faction's script folder for the current campaign to the lua path (<code>script/campaign/%campaign_name%/factions/%player_faction_name%/</code>), so that scripts related to the faction can be loaded with the <code>require</code> command.\n",
		"body": [
			"cm:require_path_to_campaign_faction_folder()"
		],
	},
	"docgen:campaign_manager:load_global_script": {
		"scope": "lua",
		"prefix": "load_global_script",
		"description": "campaign_manager:load_global_script()\n-  -\n\nThis function attempts to load a lua script from all folders currently on the path, and, when loaded, sets the environment of the loaded file to match the global environment.\n",
		"body": [
			"load_global_script(${1:string script name}, ${2:[opt=false] boolean single player only})"
		],
	},
	"docgen:campaign_manager:campaign_manager:load_global_script": {
		"scope": "lua",
		"prefix": "campaign_manager:load_global_script",
		"description": "campaign_manager:load_global_script()\n-  -\n\nThis function attempts to load a lua script from all folders currently on the path, and, when loaded, sets the environment of the loaded file to match the global environment.\n",
		"body": [
			"campaign_manager:load_global_script(${1:string script name}, ${2:[opt=false] boolean single player only})"
		],
	},
	"docgen:campaign_manager:cm:load_global_script": {
		"scope": "lua",
		"prefix": "cm:load_global_script",
		"description": "campaign_manager:load_global_script()\n-  -\n\nThis function attempts to load a lua script from all folders currently on the path, and, when loaded, sets the environment of the loaded file to match the global environment.\n",
		"body": [
			"cm:load_global_script(${1:string script name}, ${2:[opt=false] boolean single player only})"
		],
	},
	"docgen:campaign_manager:load_local_faction_script": {
		"scope": "lua",
		"prefix": "load_local_faction_script",
		"description": "campaign_manager:load_local_faction_script()\n-  -\n\nLoads a script file in the factions subfolder that corresponds to the name of the local player faction, with the supplied string appellation attached to the end of the script filename.\n",
		"body": [
			"load_local_faction_script(${1:string script name appellation})"
		],
	},
	"docgen:campaign_manager:campaign_manager:load_local_faction_script": {
		"scope": "lua",
		"prefix": "campaign_manager:load_local_faction_script",
		"description": "campaign_manager:load_local_faction_script()\n-  -\n\nLoads a script file in the factions subfolder that corresponds to the name of the local player faction, with the supplied string appellation attached to the end of the script filename.\n",
		"body": [
			"campaign_manager:load_local_faction_script(${1:string script name appellation})"
		],
	},
	"docgen:campaign_manager:cm:load_local_faction_script": {
		"scope": "lua",
		"prefix": "cm:load_local_faction_script",
		"description": "campaign_manager:load_local_faction_script()\n-  -\n\nLoads a script file in the factions subfolder that corresponds to the name of the local player faction, with the supplied string appellation attached to the end of the script filename.\n",
		"body": [
			"cm:load_local_faction_script(${1:string script name appellation})"
		],
	},
	"docgen:campaign_manager:load_exported_files": {
		"scope": "lua",
		"prefix": "load_exported_files",
		"description": "campaign_manager:load_exported_files()\n-  -\n\nLoads all lua script files with filenames that contain the supplied string from the target directory.\n",
		"body": [
			"load_exported_files(${1:string filename}, ${2:[opt=\"script\"] string path})"
		],
	},
	"docgen:campaign_manager:campaign_manager:load_exported_files": {
		"scope": "lua",
		"prefix": "campaign_manager:load_exported_files",
		"description": "campaign_manager:load_exported_files()\n-  -\n\nLoads all lua script files with filenames that contain the supplied string from the target directory.\n",
		"body": [
			"campaign_manager:load_exported_files(${1:string filename}, ${2:[opt=\"script\"] string path})"
		],
	},
	"docgen:campaign_manager:cm:load_exported_files": {
		"scope": "lua",
		"prefix": "cm:load_exported_files",
		"description": "campaign_manager:load_exported_files()\n-  -\n\nLoads all lua script files with filenames that contain the supplied string from the target directory.\n",
		"body": [
			"cm:load_exported_files(${1:string filename}, ${2:[opt=\"script\"] string path})"
		],
	},
	"docgen:campaign_manager:add_loading_game_callback": {
		"scope": "lua",
		"prefix": "add_loading_game_callback",
		"description": "campaign_manager:add_loading_game_callback()\n-  -\n\nAdds a callback to be called when the <code>LoadingGame</code> event is received from the game.\n",
		"body": [
			"add_loading_game_callback(${1:function callback})"
		],
	},
	"docgen:campaign_manager:campaign_manager:add_loading_game_callback": {
		"scope": "lua",
		"prefix": "campaign_manager:add_loading_game_callback",
		"description": "campaign_manager:add_loading_game_callback()\n-  -\n\nAdds a callback to be called when the <code>LoadingGame</code> event is received from the game.\n",
		"body": [
			"campaign_manager:add_loading_game_callback(${1:function callback})"
		],
	},
	"docgen:campaign_manager:cm:add_loading_game_callback": {
		"scope": "lua",
		"prefix": "cm:add_loading_game_callback",
		"description": "campaign_manager:add_loading_game_callback()\n-  -\n\nAdds a callback to be called when the <code>LoadingGame</code> event is received from the game.\n",
		"body": [
			"cm:add_loading_game_callback(${1:function callback})"
		],
	},
	"docgen:campaign_manager:load_named_value": {
		"scope": "lua",
		"prefix": "load_named_value",
		"description": "campaign_manager:load_named_value()\n-  -\n\nLoads a named value from the savegame.\n",
		"body": [
			"load_named_value(${1:string value name}, ${2:object default value}, ${3:userdata context})"
		],
	},
	"docgen:campaign_manager:campaign_manager:load_named_value": {
		"scope": "lua",
		"prefix": "campaign_manager:load_named_value",
		"description": "campaign_manager:load_named_value()\n-  -\n\nLoads a named value from the savegame.\n",
		"body": [
			"campaign_manager:load_named_value(${1:string value name}, ${2:object default value}, ${3:userdata context})"
		],
	},
	"docgen:campaign_manager:cm:load_named_value": {
		"scope": "lua",
		"prefix": "cm:load_named_value",
		"description": "campaign_manager:load_named_value()\n-  -\n\nLoads a named value from the savegame.\n",
		"body": [
			"cm:load_named_value(${1:string value name}, ${2:object default value}, ${3:userdata context})"
		],
	},
	"docgen:campaign_manager:get_saved_value": {
		"scope": "lua",
		"prefix": "get_saved_value",
		"description": "campaign_manager:get_saved_value()\n-  -\n\nRetrieves a value saved using the saved value system.\n",
		"body": [
			"get_saved_value(${1:string value name})"
		],
	},
	"docgen:campaign_manager:campaign_manager:get_saved_value": {
		"scope": "lua",
		"prefix": "campaign_manager:get_saved_value",
		"description": "campaign_manager:get_saved_value()\n-  -\n\nRetrieves a value saved using the saved value system.\n",
		"body": [
			"campaign_manager:get_saved_value(${1:string value name})"
		],
	},
	"docgen:campaign_manager:cm:get_saved_value": {
		"scope": "lua",
		"prefix": "cm:get_saved_value",
		"description": "campaign_manager:get_saved_value()\n-  -\n\nRetrieves a value saved using the saved value system.\n",
		"body": [
			"cm:get_saved_value(${1:string value name})"
		],
	},
	"docgen:campaign_manager:get_cached_value": {
		"scope": "lua",
		"prefix": "get_cached_value",
		"description": "campaign_manager:get_cached_value()\n-  -\n\nRetrieves or generates a value saved using the saved value system.\n",
		"body": [
			"get_cached_value(${1:string value name}, ${2:function generator callback})"
		],
	},
	"docgen:campaign_manager:campaign_manager:get_cached_value": {
		"scope": "lua",
		"prefix": "campaign_manager:get_cached_value",
		"description": "campaign_manager:get_cached_value()\n-  -\n\nRetrieves or generates a value saved using the saved value system.\n",
		"body": [
			"campaign_manager:get_cached_value(${1:string value name}, ${2:function generator callback})"
		],
	},
	"docgen:campaign_manager:cm:get_cached_value": {
		"scope": "lua",
		"prefix": "cm:get_cached_value",
		"description": "campaign_manager:get_cached_value()\n-  -\n\nRetrieves or generates a value saved using the saved value system.\n",
		"body": [
			"cm:get_cached_value(${1:string value name}, ${2:function generator callback})"
		],
	},
	"docgen:campaign_manager:add_saving_game_callback": {
		"scope": "lua",
		"prefix": "add_saving_game_callback",
		"description": "campaign_manager:add_saving_game_callback()\n-  -\n\nRegisters a callback to be called when the game is being saved.\n",
		"body": [
			"add_saving_game_callback(${1:function callback})"
		],
	},
	"docgen:campaign_manager:campaign_manager:add_saving_game_callback": {
		"scope": "lua",
		"prefix": "campaign_manager:add_saving_game_callback",
		"description": "campaign_manager:add_saving_game_callback()\n-  -\n\nRegisters a callback to be called when the game is being saved.\n",
		"body": [
			"campaign_manager:add_saving_game_callback(${1:function callback})"
		],
	},
	"docgen:campaign_manager:cm:add_saving_game_callback": {
		"scope": "lua",
		"prefix": "cm:add_saving_game_callback",
		"description": "campaign_manager:add_saving_game_callback()\n-  -\n\nRegisters a callback to be called when the game is being saved.\n",
		"body": [
			"cm:add_saving_game_callback(${1:function callback})"
		],
	},
	"docgen:campaign_manager:add_post_saving_game_callback": {
		"scope": "lua",
		"prefix": "add_post_saving_game_callback",
		"description": "campaign_manager:add_post_saving_game_callback()\n-  -\n\nAdd a callback to be called after the game has been saved.\n",
		"body": [
			"add_post_saving_game_callback(${1:function callback})"
		],
	},
	"docgen:campaign_manager:campaign_manager:add_post_saving_game_callback": {
		"scope": "lua",
		"prefix": "campaign_manager:add_post_saving_game_callback",
		"description": "campaign_manager:add_post_saving_game_callback()\n-  -\n\nAdd a callback to be called after the game has been saved.\n",
		"body": [
			"campaign_manager:add_post_saving_game_callback(${1:function callback})"
		],
	},
	"docgen:campaign_manager:cm:add_post_saving_game_callback": {
		"scope": "lua",
		"prefix": "cm:add_post_saving_game_callback",
		"description": "campaign_manager:add_post_saving_game_callback()\n-  -\n\nAdd a callback to be called after the game has been saved.\n",
		"body": [
			"cm:add_post_saving_game_callback(${1:function callback})"
		],
	},
	"docgen:campaign_manager:save_named_value": {
		"scope": "lua",
		"prefix": "save_named_value",
		"description": "campaign_manager:save_named_value()\n-  -\n\nSaves a named value from the savegame.\n",
		"body": [
			"save_named_value(${1:string value name}, ${2:object value}, ${3:userdata context})"
		],
	},
	"docgen:campaign_manager:campaign_manager:save_named_value": {
		"scope": "lua",
		"prefix": "campaign_manager:save_named_value",
		"description": "campaign_manager:save_named_value()\n-  -\n\nSaves a named value from the savegame.\n",
		"body": [
			"campaign_manager:save_named_value(${1:string value name}, ${2:object value}, ${3:userdata context})"
		],
	},
	"docgen:campaign_manager:cm:save_named_value": {
		"scope": "lua",
		"prefix": "cm:save_named_value",
		"description": "campaign_manager:save_named_value()\n-  -\n\nSaves a named value from the savegame.\n",
		"body": [
			"cm:save_named_value(${1:string value name}, ${2:object value}, ${3:userdata context})"
		],
	},
	"docgen:campaign_manager:set_saved_value": {
		"scope": "lua",
		"prefix": "set_saved_value",
		"description": "campaign_manager:set_saved_value()\n-  -\n\nSets a value to be saved using the saved value system.\n",
		"body": [
			"set_saved_value(${1:string value name}, ${2:object value})"
		],
	},
	"docgen:campaign_manager:campaign_manager:set_saved_value": {
		"scope": "lua",
		"prefix": "campaign_manager:set_saved_value",
		"description": "campaign_manager:set_saved_value()\n-  -\n\nSets a value to be saved using the saved value system.\n",
		"body": [
			"campaign_manager:set_saved_value(${1:string value name}, ${2:object value})"
		],
	},
	"docgen:campaign_manager:cm:set_saved_value": {
		"scope": "lua",
		"prefix": "cm:set_saved_value",
		"description": "campaign_manager:set_saved_value()\n-  -\n\nSets a value to be saved using the saved value system.\n",
		"body": [
			"cm:set_saved_value(${1:string value name}, ${2:object value})"
		],
	},
	"docgen:campaign_manager:save": {
		"scope": "lua",
		"prefix": "save",
		"description": "campaign_manager:save()\n-  -\n\nInstructs the campaign game to save at the next opportunity.\n",
		"body": [
			"save(${1:[opt=nil] function callback}, ${2:[opt=false] boolean lock afterwards})"
		],
	},
	"docgen:campaign_manager:campaign_manager:save": {
		"scope": "lua",
		"prefix": "campaign_manager:save",
		"description": "campaign_manager:save()\n-  -\n\nInstructs the campaign game to save at the next opportunity.\n",
		"body": [
			"campaign_manager:save(${1:[opt=nil] function callback}, ${2:[opt=false] boolean lock afterwards})"
		],
	},
	"docgen:campaign_manager:cm:save": {
		"scope": "lua",
		"prefix": "cm:save",
		"description": "campaign_manager:save()\n-  -\n\nInstructs the campaign game to save at the next opportunity.\n",
		"body": [
			"cm:save(${1:[opt=nil] function callback}, ${2:[opt=false] boolean lock afterwards})"
		],
	},
	"docgen:campaign_manager:add_game_destroyed_callback": {
		"scope": "lua",
		"prefix": "add_game_destroyed_callback",
		"description": "campaign_manager:add_game_destroyed_callback()\n-  -\n\nRegisters a function to be called when the campaign is shut down or unloaded for any reason (including loading into battle).\n",
		"body": [
			"add_game_destroyed_callback(${1:function callback})"
		],
	},
	"docgen:campaign_manager:campaign_manager:add_game_destroyed_callback": {
		"scope": "lua",
		"prefix": "campaign_manager:add_game_destroyed_callback",
		"description": "campaign_manager:add_game_destroyed_callback()\n-  -\n\nRegisters a function to be called when the campaign is shut down or unloaded for any reason (including loading into battle).\n",
		"body": [
			"campaign_manager:add_game_destroyed_callback(${1:function callback})"
		],
	},
	"docgen:campaign_manager:cm:add_game_destroyed_callback": {
		"scope": "lua",
		"prefix": "cm:add_game_destroyed_callback",
		"description": "campaign_manager:add_game_destroyed_callback()\n-  -\n\nRegisters a function to be called when the campaign is shut down or unloaded for any reason (including loading into battle).\n",
		"body": [
			"cm:add_game_destroyed_callback(${1:function callback})"
		],
	},
	"docgen:campaign_manager:add_pre_first_tick_callback": {
		"scope": "lua",
		"prefix": "add_pre_first_tick_callback",
		"description": "campaign_manager:add_pre_first_tick_callback()\n-  -\n\nRegisters a function to be called before any other first tick callbacks.\n",
		"body": [
			"add_pre_first_tick_callback(${1:function callback})"
		],
	},
	"docgen:campaign_manager:campaign_manager:add_pre_first_tick_callback": {
		"scope": "lua",
		"prefix": "campaign_manager:add_pre_first_tick_callback",
		"description": "campaign_manager:add_pre_first_tick_callback()\n-  -\n\nRegisters a function to be called before any other first tick callbacks.\n",
		"body": [
			"campaign_manager:add_pre_first_tick_callback(${1:function callback})"
		],
	},
	"docgen:campaign_manager:cm:add_pre_first_tick_callback": {
		"scope": "lua",
		"prefix": "cm:add_pre_first_tick_callback",
		"description": "campaign_manager:add_pre_first_tick_callback()\n-  -\n\nRegisters a function to be called before any other first tick callbacks.\n",
		"body": [
			"cm:add_pre_first_tick_callback(${1:function callback})"
		],
	},
	"docgen:campaign_manager:add_first_tick_callback": {
		"scope": "lua",
		"prefix": "add_first_tick_callback",
		"description": "campaign_manager:add_first_tick_callback()\n-  -\n\nRegisters a function to be called when the first tick occurs.\n",
		"body": [
			"add_first_tick_callback(${1:function callback})"
		],
	},
	"docgen:campaign_manager:campaign_manager:add_first_tick_callback": {
		"scope": "lua",
		"prefix": "campaign_manager:add_first_tick_callback",
		"description": "campaign_manager:add_first_tick_callback()\n-  -\n\nRegisters a function to be called when the first tick occurs.\n",
		"body": [
			"campaign_manager:add_first_tick_callback(${1:function callback})"
		],
	},
	"docgen:campaign_manager:cm:add_first_tick_callback": {
		"scope": "lua",
		"prefix": "cm:add_first_tick_callback",
		"description": "campaign_manager:add_first_tick_callback()\n-  -\n\nRegisters a function to be called when the first tick occurs.\n",
		"body": [
			"cm:add_first_tick_callback(${1:function callback})"
		],
	},
	"docgen:campaign_manager:add_first_tick_callback_sp_new": {
		"scope": "lua",
		"prefix": "add_first_tick_callback_sp_new",
		"description": "campaign_manager:add_first_tick_callback_sp_new()\n-  -\n\nRegisters a function to be called when the first tick occurs in a new singleplayer game.\n",
		"body": [
			"add_first_tick_callback_sp_new(${1:function callback})"
		],
	},
	"docgen:campaign_manager:campaign_manager:add_first_tick_callback_sp_new": {
		"scope": "lua",
		"prefix": "campaign_manager:add_first_tick_callback_sp_new",
		"description": "campaign_manager:add_first_tick_callback_sp_new()\n-  -\n\nRegisters a function to be called when the first tick occurs in a new singleplayer game.\n",
		"body": [
			"campaign_manager:add_first_tick_callback_sp_new(${1:function callback})"
		],
	},
	"docgen:campaign_manager:cm:add_first_tick_callback_sp_new": {
		"scope": "lua",
		"prefix": "cm:add_first_tick_callback_sp_new",
		"description": "campaign_manager:add_first_tick_callback_sp_new()\n-  -\n\nRegisters a function to be called when the first tick occurs in a new singleplayer game.\n",
		"body": [
			"cm:add_first_tick_callback_sp_new(${1:function callback})"
		],
	},
	"docgen:campaign_manager:add_first_tick_callback_sp_each": {
		"scope": "lua",
		"prefix": "add_first_tick_callback_sp_each",
		"description": "campaign_manager:add_first_tick_callback_sp_each()\n-  -\n\nRegisters a function to be called when the first tick occurs in a singleplayer game, whether new or loaded from a savegame.\n",
		"body": [
			"add_first_tick_callback_sp_each(${1:function callback})"
		],
	},
	"docgen:campaign_manager:campaign_manager:add_first_tick_callback_sp_each": {
		"scope": "lua",
		"prefix": "campaign_manager:add_first_tick_callback_sp_each",
		"description": "campaign_manager:add_first_tick_callback_sp_each()\n-  -\n\nRegisters a function to be called when the first tick occurs in a singleplayer game, whether new or loaded from a savegame.\n",
		"body": [
			"campaign_manager:add_first_tick_callback_sp_each(${1:function callback})"
		],
	},
	"docgen:campaign_manager:cm:add_first_tick_callback_sp_each": {
		"scope": "lua",
		"prefix": "cm:add_first_tick_callback_sp_each",
		"description": "campaign_manager:add_first_tick_callback_sp_each()\n-  -\n\nRegisters a function to be called when the first tick occurs in a singleplayer game, whether new or loaded from a savegame.\n",
		"body": [
			"cm:add_first_tick_callback_sp_each(${1:function callback})"
		],
	},
	"docgen:campaign_manager:add_first_tick_callback_mp_new": {
		"scope": "lua",
		"prefix": "add_first_tick_callback_mp_new",
		"description": "campaign_manager:add_first_tick_callback_mp_new()\n-  -\n\nRegisters a function to be called when the first tick occurs in a new multiplayer game.\n",
		"body": [
			"add_first_tick_callback_mp_new(${1:function callback})"
		],
	},
	"docgen:campaign_manager:campaign_manager:add_first_tick_callback_mp_new": {
		"scope": "lua",
		"prefix": "campaign_manager:add_first_tick_callback_mp_new",
		"description": "campaign_manager:add_first_tick_callback_mp_new()\n-  -\n\nRegisters a function to be called when the first tick occurs in a new multiplayer game.\n",
		"body": [
			"campaign_manager:add_first_tick_callback_mp_new(${1:function callback})"
		],
	},
	"docgen:campaign_manager:cm:add_first_tick_callback_mp_new": {
		"scope": "lua",
		"prefix": "cm:add_first_tick_callback_mp_new",
		"description": "campaign_manager:add_first_tick_callback_mp_new()\n-  -\n\nRegisters a function to be called when the first tick occurs in a new multiplayer game.\n",
		"body": [
			"cm:add_first_tick_callback_mp_new(${1:function callback})"
		],
	},
	"docgen:campaign_manager:add_first_tick_callback_mp_each": {
		"scope": "lua",
		"prefix": "add_first_tick_callback_mp_each",
		"description": "campaign_manager:add_first_tick_callback_mp_each()\n-  -\n\nRegisters a function to be called when the first tick occurs in a multiplayer game, whether new or loaded from a savegame.\n",
		"body": [
			"add_first_tick_callback_mp_each(${1:function callback})"
		],
	},
	"docgen:campaign_manager:campaign_manager:add_first_tick_callback_mp_each": {
		"scope": "lua",
		"prefix": "campaign_manager:add_first_tick_callback_mp_each",
		"description": "campaign_manager:add_first_tick_callback_mp_each()\n-  -\n\nRegisters a function to be called when the first tick occurs in a multiplayer game, whether new or loaded from a savegame.\n",
		"body": [
			"campaign_manager:add_first_tick_callback_mp_each(${1:function callback})"
		],
	},
	"docgen:campaign_manager:cm:add_first_tick_callback_mp_each": {
		"scope": "lua",
		"prefix": "cm:add_first_tick_callback_mp_each",
		"description": "campaign_manager:add_first_tick_callback_mp_each()\n-  -\n\nRegisters a function to be called when the first tick occurs in a multiplayer game, whether new or loaded from a savegame.\n",
		"body": [
			"cm:add_first_tick_callback_mp_each(${1:function callback})"
		],
	},
	"docgen:campaign_manager:add_first_tick_callback_new": {
		"scope": "lua",
		"prefix": "add_first_tick_callback_new",
		"description": "campaign_manager:add_first_tick_callback_new()\n-  -\n\nRegisters a function to be called when the first tick occurs in a new game, whether singleplayer or multiplayer.\n",
		"body": [
			"add_first_tick_callback_new(${1:function callback})"
		],
	},
	"docgen:campaign_manager:campaign_manager:add_first_tick_callback_new": {
		"scope": "lua",
		"prefix": "campaign_manager:add_first_tick_callback_new",
		"description": "campaign_manager:add_first_tick_callback_new()\n-  -\n\nRegisters a function to be called when the first tick occurs in a new game, whether singleplayer or multiplayer.\n",
		"body": [
			"campaign_manager:add_first_tick_callback_new(${1:function callback})"
		],
	},
	"docgen:campaign_manager:cm:add_first_tick_callback_new": {
		"scope": "lua",
		"prefix": "cm:add_first_tick_callback_new",
		"description": "campaign_manager:add_first_tick_callback_new()\n-  -\n\nRegisters a function to be called when the first tick occurs in a new game, whether singleplayer or multiplayer.\n",
		"body": [
			"cm:add_first_tick_callback_new(${1:function callback})"
		],
	},
	"docgen:campaign_manager:output_campaign_obj": {
		"scope": "lua",
		"prefix": "output_campaign_obj",
		"description": "campaign_manager:output_campaign_obj()\n-  -\n\nPrints information about certain campaign objects (characters, regions, factions or military force) to the debug console spool.\n",
		"body": [
			"output_campaign_obj(${1:function callback})"
		],
	},
	"docgen:campaign_manager:campaign_manager:output_campaign_obj": {
		"scope": "lua",
		"prefix": "campaign_manager:output_campaign_obj",
		"description": "campaign_manager:output_campaign_obj()\n-  -\n\nPrints information about certain campaign objects (characters, regions, factions or military force) to the debug console spool.\n",
		"body": [
			"campaign_manager:output_campaign_obj(${1:function callback})"
		],
	},
	"docgen:campaign_manager:cm:output_campaign_obj": {
		"scope": "lua",
		"prefix": "cm:output_campaign_obj",
		"description": "campaign_manager:output_campaign_obj()\n-  -\n\nPrints information about certain campaign objects (characters, regions, factions or military force) to the debug console spool.\n",
		"body": [
			"cm:output_campaign_obj(${1:function callback})"
		],
	},
	"docgen:campaign_manager:campaign_obj_to_string": {
		"scope": "lua",
		"prefix": "campaign_obj_to_string",
		"description": "campaign_manager:campaign_obj_to_string()\n-  -\n\nReturns a string summary description when passed certain campaign objects.\n",
		"body": [
			"campaign_obj_to_string(${1:object campaign object})"
		],
	},
	"docgen:campaign_manager:campaign_manager:campaign_obj_to_string": {
		"scope": "lua",
		"prefix": "campaign_manager:campaign_obj_to_string",
		"description": "campaign_manager:campaign_obj_to_string()\n-  -\n\nReturns a string summary description when passed certain campaign objects.\n",
		"body": [
			"campaign_manager:campaign_obj_to_string(${1:object campaign object})"
		],
	},
	"docgen:campaign_manager:cm:campaign_obj_to_string": {
		"scope": "lua",
		"prefix": "cm:campaign_obj_to_string",
		"description": "campaign_manager:campaign_obj_to_string()\n-  -\n\nReturns a string summary description when passed certain campaign objects.\n",
		"body": [
			"cm:campaign_obj_to_string(${1:object campaign object})"
		],
	},
	"docgen:campaign_manager:callback": {
		"scope": "lua",
		"prefix": "callback",
		"description": "campaign_manager:callback()\n-  -\n\nCalls the supplied function after the supplied period in seconds.\n",
		"body": [
			"callback(${1:function callback to call}, ${2:number time}, ${3:[opt=nil] string name})"
		],
	},
	"docgen:campaign_manager:campaign_manager:callback": {
		"scope": "lua",
		"prefix": "campaign_manager:callback",
		"description": "campaign_manager:callback()\n-  -\n\nCalls the supplied function after the supplied period in seconds.\n",
		"body": [
			"campaign_manager:callback(${1:function callback to call}, ${2:number time}, ${3:[opt=nil] string name})"
		],
	},
	"docgen:campaign_manager:cm:callback": {
		"scope": "lua",
		"prefix": "cm:callback",
		"description": "campaign_manager:callback()\n-  -\n\nCalls the supplied function after the supplied period in seconds.\n",
		"body": [
			"cm:callback(${1:function callback to call}, ${2:number time}, ${3:[opt=nil] string name})"
		],
	},
	"docgen:campaign_manager:repeat_callback": {
		"scope": "lua",
		"prefix": "repeat_callback",
		"description": "campaign_manager:repeat_callback()\n-  -\n\nCalls the supplied function repeatedly after the supplied period in seconds.\n",
		"body": [
			"repeat_callback(${1:function callback to call}, ${2:number time}, ${3:[opt=nil] string name})"
		],
	},
	"docgen:campaign_manager:campaign_manager:repeat_callback": {
		"scope": "lua",
		"prefix": "campaign_manager:repeat_callback",
		"description": "campaign_manager:repeat_callback()\n-  -\n\nCalls the supplied function repeatedly after the supplied period in seconds.\n",
		"body": [
			"campaign_manager:repeat_callback(${1:function callback to call}, ${2:number time}, ${3:[opt=nil] string name})"
		],
	},
	"docgen:campaign_manager:cm:repeat_callback": {
		"scope": "lua",
		"prefix": "cm:repeat_callback",
		"description": "campaign_manager:repeat_callback()\n-  -\n\nCalls the supplied function repeatedly after the supplied period in seconds.\n",
		"body": [
			"cm:repeat_callback(${1:function callback to call}, ${2:number time}, ${3:[opt=nil] string name})"
		],
	},
	"docgen:campaign_manager:os_clock_callback": {
		"scope": "lua",
		"prefix": "os_clock_callback",
		"description": "campaign_manager:os_clock_callback()\n-  -\n\nTime in campaign behaves strangely during the end-turn sequence, and callbacks registered with campaign_manager:callback will tend to be called immediately rather than after the desired interval.\n",
		"body": [
			"os_clock_callback(${1:function callback to call}, ${2:number time}, ${3:[opt=nil] string name})"
		],
	},
	"docgen:campaign_manager:campaign_manager:os_clock_callback": {
		"scope": "lua",
		"prefix": "campaign_manager:os_clock_callback",
		"description": "campaign_manager:os_clock_callback()\n-  -\n\nTime in campaign behaves strangely during the end-turn sequence, and callbacks registered with campaign_manager:callback will tend to be called immediately rather than after the desired interval.\n",
		"body": [
			"campaign_manager:os_clock_callback(${1:function callback to call}, ${2:number time}, ${3:[opt=nil] string name})"
		],
	},
	"docgen:campaign_manager:cm:os_clock_callback": {
		"scope": "lua",
		"prefix": "cm:os_clock_callback",
		"description": "campaign_manager:os_clock_callback()\n-  -\n\nTime in campaign behaves strangely during the end-turn sequence, and callbacks registered with campaign_manager:callback will tend to be called immediately rather than after the desired interval.\n",
		"body": [
			"cm:os_clock_callback(${1:function callback to call}, ${2:number time}, ${3:[opt=nil] string name})"
		],
	},
	"docgen:campaign_manager:remove_callback": {
		"scope": "lua",
		"prefix": "remove_callback",
		"description": "campaign_manager:remove_callback()\n-  -\n\nRemoves all pending callbacks that matches the supplied name.\n",
		"body": [
			"remove_callback(${1:[opt=nil] string name})"
		],
	},
	"docgen:campaign_manager:campaign_manager:remove_callback": {
		"scope": "lua",
		"prefix": "campaign_manager:remove_callback",
		"description": "campaign_manager:remove_callback()\n-  -\n\nRemoves all pending callbacks that matches the supplied name.\n",
		"body": [
			"campaign_manager:remove_callback(${1:[opt=nil] string name})"
		],
	},
	"docgen:campaign_manager:cm:remove_callback": {
		"scope": "lua",
		"prefix": "cm:remove_callback",
		"description": "campaign_manager:remove_callback()\n-  -\n\nRemoves all pending callbacks that matches the supplied name.\n",
		"body": [
			"cm:remove_callback(${1:[opt=nil] string name})"
		],
	},
	"docgen:campaign_manager:dump_timers": {
		"scope": "lua",
		"prefix": "dump_timers",
		"description": "campaign_manager:dump_timers()\n-  -\n\nPrints information about all timers to the console debug spool.\n",
		"body": [
			"dump_timers()"
		],
	},
	"docgen:campaign_manager:campaign_manager:dump_timers": {
		"scope": "lua",
		"prefix": "campaign_manager:dump_timers",
		"description": "campaign_manager:dump_timers()\n-  -\n\nPrints information about all timers to the console debug spool.\n",
		"body": [
			"campaign_manager:dump_timers()"
		],
	},
	"docgen:campaign_manager:cm:dump_timers": {
		"scope": "lua",
		"prefix": "cm:dump_timers",
		"description": "campaign_manager:dump_timers()\n-  -\n\nPrints information about all timers to the console debug spool.\n",
		"body": [
			"cm:dump_timers()"
		],
	},
	"docgen:campaign_manager:is_multiplayer": {
		"scope": "lua",
		"prefix": "is_multiplayer",
		"description": "campaign_manager:is_multiplayer()\n-  -\n\nReturns true if the campaign is multiplayer.\n",
		"body": [
			"is_multiplayer()"
		],
	},
	"docgen:campaign_manager:campaign_manager:is_multiplayer": {
		"scope": "lua",
		"prefix": "campaign_manager:is_multiplayer",
		"description": "campaign_manager:is_multiplayer()\n-  -\n\nReturns true if the campaign is multiplayer.\n",
		"body": [
			"campaign_manager:is_multiplayer()"
		],
	},
	"docgen:campaign_manager:cm:is_multiplayer": {
		"scope": "lua",
		"prefix": "cm:is_multiplayer",
		"description": "campaign_manager:is_multiplayer()\n-  -\n\nReturns true if the campaign is multiplayer.\n",
		"body": [
			"cm:is_multiplayer()"
		],
	},
	"docgen:campaign_manager:is_new_game": {
		"scope": "lua",
		"prefix": "is_new_game",
		"description": "campaign_manager:is_new_game()\n-  -\n\nReturns true if the campaign is new.\n",
		"body": [
			"is_new_game()"
		],
	},
	"docgen:campaign_manager:campaign_manager:is_new_game": {
		"scope": "lua",
		"prefix": "campaign_manager:is_new_game",
		"description": "campaign_manager:is_new_game()\n-  -\n\nReturns true if the campaign is new.\n",
		"body": [
			"campaign_manager:is_new_game()"
		],
	},
	"docgen:campaign_manager:cm:is_new_game": {
		"scope": "lua",
		"prefix": "cm:is_new_game",
		"description": "campaign_manager:is_new_game()\n-  -\n\nReturns true if the campaign is new.\n",
		"body": [
			"cm:is_new_game()"
		],
	},
	"docgen:campaign_manager:is_game_running": {
		"scope": "lua",
		"prefix": "is_game_running",
		"description": "campaign_manager:is_game_running()\n-  -\n\nReturns whether or not the game is loaded and time is ticking.\n",
		"body": [
			"is_game_running()"
		],
	},
	"docgen:campaign_manager:campaign_manager:is_game_running": {
		"scope": "lua",
		"prefix": "campaign_manager:is_game_running",
		"description": "campaign_manager:is_game_running()\n-  -\n\nReturns whether or not the game is loaded and time is ticking.\n",
		"body": [
			"campaign_manager:is_game_running()"
		],
	},
	"docgen:campaign_manager:cm:is_game_running": {
		"scope": "lua",
		"prefix": "cm:is_game_running",
		"description": "campaign_manager:is_game_running()\n-  -\n\nReturns whether or not the game is loaded and time is ticking.\n",
		"body": [
			"cm:is_game_running()"
		],
	},
	"docgen:campaign_manager:model": {
		"scope": "lua",
		"prefix": "model",
		"description": "campaign_manager:model()\n-  -\n\nReturns a handle to the game model at any time (after the game has been created).\n",
		"body": [
			"model()"
		],
	},
	"docgen:campaign_manager:campaign_manager:model": {
		"scope": "lua",
		"prefix": "campaign_manager:model",
		"description": "campaign_manager:model()\n-  -\n\nReturns a handle to the game model at any time (after the game has been created).\n",
		"body": [
			"campaign_manager:model()"
		],
	},
	"docgen:campaign_manager:cm:model": {
		"scope": "lua",
		"prefix": "cm:model",
		"description": "campaign_manager:model()\n-  -\n\nReturns a handle to the game model at any time (after the game has been created).\n",
		"body": [
			"cm:model()"
		],
	},
	"docgen:campaign_manager:get_game_interface": {
		"scope": "lua",
		"prefix": "get_game_interface",
		"description": "campaign_manager:get_game_interface()\n-  -\n\nReturns a handle to the raw episodic scripting interface.\n",
		"body": [
			"get_game_interface()"
		],
	},
	"docgen:campaign_manager:campaign_manager:get_game_interface": {
		"scope": "lua",
		"prefix": "campaign_manager:get_game_interface",
		"description": "campaign_manager:get_game_interface()\n-  -\n\nReturns a handle to the raw episodic scripting interface.\n",
		"body": [
			"campaign_manager:get_game_interface()"
		],
	},
	"docgen:campaign_manager:cm:get_game_interface": {
		"scope": "lua",
		"prefix": "cm:get_game_interface",
		"description": "campaign_manager:get_game_interface()\n-  -\n\nReturns a handle to the raw episodic scripting interface.\n",
		"body": [
			"cm:get_game_interface()"
		],
	},
	"docgen:campaign_manager:get_difficulty": {
		"scope": "lua",
		"prefix": "get_difficulty",
		"description": "campaign_manager:get_difficulty()\n-  -\n\nReturns the current combined campaign difficulty.\n",
		"body": [
			"get_difficulty(${1:[opt=false] boolean return as string})"
		],
	},
	"docgen:campaign_manager:campaign_manager:get_difficulty": {
		"scope": "lua",
		"prefix": "campaign_manager:get_difficulty",
		"description": "campaign_manager:get_difficulty()\n-  -\n\nReturns the current combined campaign difficulty.\n",
		"body": [
			"campaign_manager:get_difficulty(${1:[opt=false] boolean return as string})"
		],
	},
	"docgen:campaign_manager:cm:get_difficulty": {
		"scope": "lua",
		"prefix": "cm:get_difficulty",
		"description": "campaign_manager:get_difficulty()\n-  -\n\nReturns the current combined campaign difficulty.\n",
		"body": [
			"cm:get_difficulty(${1:[opt=false] boolean return as string})"
		],
	},
	"docgen:campaign_manager:get_local_faction": {
		"scope": "lua",
		"prefix": "get_local_faction",
		"description": "campaign_manager:get_local_faction()\n-  -\n\nReturns the local player faction name.\n",
		"body": [
			"get_local_faction(${1:[opt=false] boolean force result})"
		],
	},
	"docgen:campaign_manager:campaign_manager:get_local_faction": {
		"scope": "lua",
		"prefix": "campaign_manager:get_local_faction",
		"description": "campaign_manager:get_local_faction()\n-  -\n\nReturns the local player faction name.\n",
		"body": [
			"campaign_manager:get_local_faction(${1:[opt=false] boolean force result})"
		],
	},
	"docgen:campaign_manager:cm:get_local_faction": {
		"scope": "lua",
		"prefix": "cm:get_local_faction",
		"description": "campaign_manager:get_local_faction()\n-  -\n\nReturns the local player faction name.\n",
		"body": [
			"cm:get_local_faction(${1:[opt=false] boolean force result})"
		],
	},
	"docgen:campaign_manager:get_human_factions": {
		"scope": "lua",
		"prefix": "get_human_factions",
		"description": "campaign_manager:get_human_factions()\n-  -\n\nReturns a numerically-indexed table containing the string keys of all human factions within the game.\n",
		"body": [
			"get_human_factions()"
		],
	},
	"docgen:campaign_manager:campaign_manager:get_human_factions": {
		"scope": "lua",
		"prefix": "campaign_manager:get_human_factions",
		"description": "campaign_manager:get_human_factions()\n-  -\n\nReturns a numerically-indexed table containing the string keys of all human factions within the game.\n",
		"body": [
			"campaign_manager:get_human_factions()"
		],
	},
	"docgen:campaign_manager:cm:get_human_factions": {
		"scope": "lua",
		"prefix": "cm:get_human_factions",
		"description": "campaign_manager:get_human_factions()\n-  -\n\nReturns a numerically-indexed table containing the string keys of all human factions within the game.\n",
		"body": [
			"cm:get_human_factions()"
		],
	},
	"docgen:campaign_manager:whose_turn_is_it": {
		"scope": "lua",
		"prefix": "whose_turn_is_it",
		"description": "campaign_manager:whose_turn_is_it()\n-  -\n\nReturns the faction key of the faction whose turn it is currently.\n",
		"body": [
			"whose_turn_is_it()"
		],
	},
	"docgen:campaign_manager:campaign_manager:whose_turn_is_it": {
		"scope": "lua",
		"prefix": "campaign_manager:whose_turn_is_it",
		"description": "campaign_manager:whose_turn_is_it()\n-  -\n\nReturns the faction key of the faction whose turn it is currently.\n",
		"body": [
			"campaign_manager:whose_turn_is_it()"
		],
	},
	"docgen:campaign_manager:cm:whose_turn_is_it": {
		"scope": "lua",
		"prefix": "cm:whose_turn_is_it",
		"description": "campaign_manager:whose_turn_is_it()\n-  -\n\nReturns the faction key of the faction whose turn it is currently.\n",
		"body": [
			"cm:whose_turn_is_it()"
		],
	},
	"docgen:campaign_manager:is_local_players_turn": {
		"scope": "lua",
		"prefix": "is_local_players_turn",
		"description": "campaign_manager:is_local_players_turn()\n-  -\n\nReturns <code>true</code> if it's the local player's turn.\n",
		"body": [
			"is_local_players_turn()"
		],
	},
	"docgen:campaign_manager:campaign_manager:is_local_players_turn": {
		"scope": "lua",
		"prefix": "campaign_manager:is_local_players_turn",
		"description": "campaign_manager:is_local_players_turn()\n-  -\n\nReturns <code>true</code> if it's the local player's turn.\n",
		"body": [
			"campaign_manager:is_local_players_turn()"
		],
	},
	"docgen:campaign_manager:cm:is_local_players_turn": {
		"scope": "lua",
		"prefix": "cm:is_local_players_turn",
		"description": "campaign_manager:is_local_players_turn()\n-  -\n\nReturns <code>true</code> if it's the local player's turn.\n",
		"body": [
			"cm:is_local_players_turn()"
		],
	},
	"docgen:campaign_manager:is_processing_battle": {
		"scope": "lua",
		"prefix": "is_processing_battle",
		"description": "campaign_manager:is_processing_battle()\n-  -\n\nReturns true if a battle is currently happening on-screen.\n",
		"body": [
			"is_processing_battle()"
		],
	},
	"docgen:campaign_manager:campaign_manager:is_processing_battle": {
		"scope": "lua",
		"prefix": "campaign_manager:is_processing_battle",
		"description": "campaign_manager:is_processing_battle()\n-  -\n\nReturns true if a battle is currently happening on-screen.\n",
		"body": [
			"campaign_manager:is_processing_battle()"
		],
	},
	"docgen:campaign_manager:cm:is_processing_battle": {
		"scope": "lua",
		"prefix": "cm:is_processing_battle",
		"description": "campaign_manager:is_processing_battle()\n-  -\n\nReturns true if a battle is currently happening on-screen.\n",
		"body": [
			"cm:is_processing_battle()"
		],
	},
	"docgen:campaign_manager:turn_number": {
		"scope": "lua",
		"prefix": "turn_number",
		"description": "campaign_manager:turn_number()\n-  -\n\nReturns the turn number, including any modifier set with campaign_manager:set_turn_number_modifier\n",
		"body": [
			"turn_number()"
		],
	},
	"docgen:campaign_manager:campaign_manager:turn_number": {
		"scope": "lua",
		"prefix": "campaign_manager:turn_number",
		"description": "campaign_manager:turn_number()\n-  -\n\nReturns the turn number, including any modifier set with campaign_manager:set_turn_number_modifier\n",
		"body": [
			"campaign_manager:turn_number()"
		],
	},
	"docgen:campaign_manager:cm:turn_number": {
		"scope": "lua",
		"prefix": "cm:turn_number",
		"description": "campaign_manager:turn_number()\n-  -\n\nReturns the turn number, including any modifier set with campaign_manager:set_turn_number_modifier\n",
		"body": [
			"cm:turn_number()"
		],
	},
	"docgen:campaign_manager:set_turn_number_modifier": {
		"scope": "lua",
		"prefix": "set_turn_number_modifier",
		"description": "campaign_manager:set_turn_number_modifier()\n-  -\n\nSets a turn number modifier.\n",
		"body": [
			"set_turn_number_modifier(${1:number modifier})"
		],
	},
	"docgen:campaign_manager:campaign_manager:set_turn_number_modifier": {
		"scope": "lua",
		"prefix": "campaign_manager:set_turn_number_modifier",
		"description": "campaign_manager:set_turn_number_modifier()\n-  -\n\nSets a turn number modifier.\n",
		"body": [
			"campaign_manager:set_turn_number_modifier(${1:number modifier})"
		],
	},
	"docgen:campaign_manager:cm:set_turn_number_modifier": {
		"scope": "lua",
		"prefix": "cm:set_turn_number_modifier",
		"description": "campaign_manager:set_turn_number_modifier()\n-  -\n\nSets a turn number modifier.\n",
		"body": [
			"cm:set_turn_number_modifier(${1:number modifier})"
		],
	},
	"docgen:campaign_manager:null_interface": {
		"scope": "lua",
		"prefix": "null_interface",
		"description": "campaign_manager:null_interface()\n-  -\n\nReturns a scripted-generated object that emulates a campaign null interface.\n",
		"body": [
			"null_interface()"
		],
	},
	"docgen:campaign_manager:campaign_manager:null_interface": {
		"scope": "lua",
		"prefix": "campaign_manager:null_interface",
		"description": "campaign_manager:null_interface()\n-  -\n\nReturns a scripted-generated object that emulates a campaign null interface.\n",
		"body": [
			"campaign_manager:null_interface()"
		],
	},
	"docgen:campaign_manager:cm:null_interface": {
		"scope": "lua",
		"prefix": "cm:null_interface",
		"description": "campaign_manager:null_interface()\n-  -\n\nReturns a scripted-generated object that emulates a campaign null interface.\n",
		"body": [
			"cm:null_interface()"
		],
	},
	"docgen:campaign_manager:help_page_seen": {
		"scope": "lua",
		"prefix": "help_page_seen",
		"description": "campaign_manager:help_page_seen()\n-  -\n\nReturns whether the advice history indicates that a specific help page has been viewed by the player.\n",
		"body": [
			"help_page_seen(${1:string help page name})"
		],
	},
	"docgen:campaign_manager:campaign_manager:help_page_seen": {
		"scope": "lua",
		"prefix": "campaign_manager:help_page_seen",
		"description": "campaign_manager:help_page_seen()\n-  -\n\nReturns whether the advice history indicates that a specific help page has been viewed by the player.\n",
		"body": [
			"campaign_manager:help_page_seen(${1:string help page name})"
		],
	},
	"docgen:campaign_manager:cm:help_page_seen": {
		"scope": "lua",
		"prefix": "cm:help_page_seen",
		"description": "campaign_manager:help_page_seen()\n-  -\n\nReturns whether the advice history indicates that a specific help page has been viewed by the player.\n",
		"body": [
			"cm:help_page_seen(${1:string help page name})"
		],
	},
	"docgen:campaign_manager:building_exists_in_province": {
		"scope": "lua",
		"prefix": "building_exists_in_province",
		"description": "campaign_manager:building_exists_in_province()\n-  -\n\nReturns whether the supplied building exists in the supplied province.\n",
		"body": [
			"building_exists_in_province(${1:string building key}, ${2:string province key})"
		],
	},
	"docgen:campaign_manager:campaign_manager:building_exists_in_province": {
		"scope": "lua",
		"prefix": "campaign_manager:building_exists_in_province",
		"description": "campaign_manager:building_exists_in_province()\n-  -\n\nReturns whether the supplied building exists in the supplied province.\n",
		"body": [
			"campaign_manager:building_exists_in_province(${1:string building key}, ${2:string province key})"
		],
	},
	"docgen:campaign_manager:cm:building_exists_in_province": {
		"scope": "lua",
		"prefix": "cm:building_exists_in_province",
		"description": "campaign_manager:building_exists_in_province()\n-  -\n\nReturns whether the supplied building exists in the supplied province.\n",
		"body": [
			"cm:building_exists_in_province(${1:string building key}, ${2:string province key})"
		],
	},
	"docgen:campaign_manager:get_garrison_commander_of_region": {
		"scope": "lua",
		"prefix": "get_garrison_commander_of_region",
		"description": "campaign_manager:get_garrison_commander_of_region()\n-  -\n\nReturns the garrison commander character of the settlement in the supplied region.\n",
		"body": [
			"get_garrison_commander_of_region(${1:region region object})"
		],
	},
	"docgen:campaign_manager:campaign_manager:get_garrison_commander_of_region": {
		"scope": "lua",
		"prefix": "campaign_manager:get_garrison_commander_of_region",
		"description": "campaign_manager:get_garrison_commander_of_region()\n-  -\n\nReturns the garrison commander character of the settlement in the supplied region.\n",
		"body": [
			"campaign_manager:get_garrison_commander_of_region(${1:region region object})"
		],
	},
	"docgen:campaign_manager:cm:get_garrison_commander_of_region": {
		"scope": "lua",
		"prefix": "cm:get_garrison_commander_of_region",
		"description": "campaign_manager:get_garrison_commander_of_region()\n-  -\n\nReturns the garrison commander character of the settlement in the supplied region.\n",
		"body": [
			"cm:get_garrison_commander_of_region(${1:region region object})"
		],
	},
	"docgen:campaign_manager:get_closest_general_to_position_from_faction": {
		"scope": "lua",
		"prefix": "get_closest_general_to_position_from_faction",
		"description": "campaign_manager:get_closest_general_to_position_from_faction()\n-  -\n\nReturns the general within the supplied faction that's closest to the supplied logical co-ordinates.\n",
		"body": [
			"get_closest_general_to_position_from_faction(${1:object faction}, ${2:number x}, ${3:number y}, ${4:[opt=false] boolean include garrison commanders})"
		],
	},
	"docgen:campaign_manager:campaign_manager:get_closest_general_to_position_from_faction": {
		"scope": "lua",
		"prefix": "campaign_manager:get_closest_general_to_position_from_faction",
		"description": "campaign_manager:get_closest_general_to_position_from_faction()\n-  -\n\nReturns the general within the supplied faction that's closest to the supplied logical co-ordinates.\n",
		"body": [
			"campaign_manager:get_closest_general_to_position_from_faction(${1:object faction}, ${2:number x}, ${3:number y}, ${4:[opt=false] boolean include garrison commanders})"
		],
	},
	"docgen:campaign_manager:cm:get_closest_general_to_position_from_faction": {
		"scope": "lua",
		"prefix": "cm:get_closest_general_to_position_from_faction",
		"description": "campaign_manager:get_closest_general_to_position_from_faction()\n-  -\n\nReturns the general within the supplied faction that's closest to the supplied logical co-ordinates.\n",
		"body": [
			"cm:get_closest_general_to_position_from_faction(${1:object faction}, ${2:number x}, ${3:number y}, ${4:[opt=false] boolean include garrison commanders})"
		],
	},
	"docgen:campaign_manager:get_closest_character_to_position_from_faction": {
		"scope": "lua",
		"prefix": "get_closest_character_to_position_from_faction",
		"description": "campaign_manager:get_closest_character_to_position_from_faction()\n-  -\n\nReturns the character within the supplied faction that's closest to the supplied logical co-ordinates.\n",
		"body": [
			"get_closest_character_to_position_from_faction(${1:object faction}, ${2:number x}, ${3:number y}, ${4:[opt=false] boolean general characters only}, ${5:[opt=false] boolean include garrison commanders})"
		],
	},
	"docgen:campaign_manager:campaign_manager:get_closest_character_to_position_from_faction": {
		"scope": "lua",
		"prefix": "campaign_manager:get_closest_character_to_position_from_faction",
		"description": "campaign_manager:get_closest_character_to_position_from_faction()\n-  -\n\nReturns the character within the supplied faction that's closest to the supplied logical co-ordinates.\n",
		"body": [
			"campaign_manager:get_closest_character_to_position_from_faction(${1:object faction}, ${2:number x}, ${3:number y}, ${4:[opt=false] boolean general characters only}, ${5:[opt=false] boolean include garrison commanders})"
		],
	},
	"docgen:campaign_manager:cm:get_closest_character_to_position_from_faction": {
		"scope": "lua",
		"prefix": "cm:get_closest_character_to_position_from_faction",
		"description": "campaign_manager:get_closest_character_to_position_from_faction()\n-  -\n\nReturns the character within the supplied faction that's closest to the supplied logical co-ordinates.\n",
		"body": [
			"cm:get_closest_character_to_position_from_faction(${1:object faction}, ${2:number x}, ${3:number y}, ${4:[opt=false] boolean general characters only}, ${5:[opt=false] boolean include garrison commanders})"
		],
	},
	"docgen:campaign_manager:get_general_at_position_all_factions": {
		"scope": "lua",
		"prefix": "get_general_at_position_all_factions",
		"description": "campaign_manager:get_general_at_position_all_factions()\n-  -\n\nReturns the general character stood at the supplied position, regardless of faction.\n",
		"body": [
			"get_general_at_position_all_factions(${1:number x}, ${2:number y})"
		],
	},
	"docgen:campaign_manager:campaign_manager:get_general_at_position_all_factions": {
		"scope": "lua",
		"prefix": "campaign_manager:get_general_at_position_all_factions",
		"description": "campaign_manager:get_general_at_position_all_factions()\n-  -\n\nReturns the general character stood at the supplied position, regardless of faction.\n",
		"body": [
			"campaign_manager:get_general_at_position_all_factions(${1:number x}, ${2:number y})"
		],
	},
	"docgen:campaign_manager:cm:get_general_at_position_all_factions": {
		"scope": "lua",
		"prefix": "cm:get_general_at_position_all_factions",
		"description": "campaign_manager:get_general_at_position_all_factions()\n-  -\n\nReturns the general character stood at the supplied position, regardless of faction.\n",
		"body": [
			"cm:get_general_at_position_all_factions(${1:number x}, ${2:number y})"
		],
	},
	"docgen:campaign_manager:get_character_by_cqi": {
		"scope": "lua",
		"prefix": "get_character_by_cqi",
		"description": "campaign_manager:get_character_by_cqi()\n-  -\n\nReturns a character by it's command queue index.\n",
		"body": [
			"get_character_by_cqi(${1:number cqi})"
		],
	},
	"docgen:campaign_manager:campaign_manager:get_character_by_cqi": {
		"scope": "lua",
		"prefix": "campaign_manager:get_character_by_cqi",
		"description": "campaign_manager:get_character_by_cqi()\n-  -\n\nReturns a character by it's command queue index.\n",
		"body": [
			"campaign_manager:get_character_by_cqi(${1:number cqi})"
		],
	},
	"docgen:campaign_manager:cm:get_character_by_cqi": {
		"scope": "lua",
		"prefix": "cm:get_character_by_cqi",
		"description": "campaign_manager:get_character_by_cqi()\n-  -\n\nReturns a character by it's command queue index.\n",
		"body": [
			"cm:get_character_by_cqi(${1:number cqi})"
		],
	},
	"docgen:campaign_manager:get_military_force_by_cqi": {
		"scope": "lua",
		"prefix": "get_military_force_by_cqi",
		"description": "campaign_manager:get_military_force_by_cqi()\n-  -\n\nReturns a military force by it's command queue index.\n",
		"body": [
			"get_military_force_by_cqi(${1:number cqi})"
		],
	},
	"docgen:campaign_manager:campaign_manager:get_military_force_by_cqi": {
		"scope": "lua",
		"prefix": "campaign_manager:get_military_force_by_cqi",
		"description": "campaign_manager:get_military_force_by_cqi()\n-  -\n\nReturns a military force by it's command queue index.\n",
		"body": [
			"campaign_manager:get_military_force_by_cqi(${1:number cqi})"
		],
	},
	"docgen:campaign_manager:cm:get_military_force_by_cqi": {
		"scope": "lua",
		"prefix": "cm:get_military_force_by_cqi",
		"description": "campaign_manager:get_military_force_by_cqi()\n-  -\n\nReturns a military force by it's command queue index.\n",
		"body": [
			"cm:get_military_force_by_cqi(${1:number cqi})"
		],
	},
	"docgen:campaign_manager:get_character_by_mf_cqi": {
		"scope": "lua",
		"prefix": "get_character_by_mf_cqi",
		"description": "campaign_manager:get_character_by_mf_cqi()\n-  -\n\nReturns the commander of a military force by the military force's command queue index.\n",
		"body": [
			"get_character_by_mf_cqi(${1:number military force cqi})"
		],
	},
	"docgen:campaign_manager:campaign_manager:get_character_by_mf_cqi": {
		"scope": "lua",
		"prefix": "campaign_manager:get_character_by_mf_cqi",
		"description": "campaign_manager:get_character_by_mf_cqi()\n-  -\n\nReturns the commander of a military force by the military force's command queue index.\n",
		"body": [
			"campaign_manager:get_character_by_mf_cqi(${1:number military force cqi})"
		],
	},
	"docgen:campaign_manager:cm:get_character_by_mf_cqi": {
		"scope": "lua",
		"prefix": "cm:get_character_by_mf_cqi",
		"description": "campaign_manager:get_character_by_mf_cqi()\n-  -\n\nReturns the commander of a military force by the military force's command queue index.\n",
		"body": [
			"cm:get_character_by_mf_cqi(${1:number military force cqi})"
		],
	},
	"docgen:campaign_manager:char_display_pos": {
		"scope": "lua",
		"prefix": "char_display_pos",
		"description": "campaign_manager:char_display_pos()\n-  -\n\nReturns the x/y display position of the supplied character.\n",
		"body": [
			"char_display_pos(${1:character character})"
		],
	},
	"docgen:campaign_manager:campaign_manager:char_display_pos": {
		"scope": "lua",
		"prefix": "campaign_manager:char_display_pos",
		"description": "campaign_manager:char_display_pos()\n-  -\n\nReturns the x/y display position of the supplied character.\n",
		"body": [
			"campaign_manager:char_display_pos(${1:character character})"
		],
	},
	"docgen:campaign_manager:cm:char_display_pos": {
		"scope": "lua",
		"prefix": "cm:char_display_pos",
		"description": "campaign_manager:char_display_pos()\n-  -\n\nReturns the x/y display position of the supplied character.\n",
		"body": [
			"cm:char_display_pos(${1:character character})"
		],
	},
	"docgen:campaign_manager:char_logical_pos": {
		"scope": "lua",
		"prefix": "char_logical_pos",
		"description": "campaign_manager:char_logical_pos()\n-  -\n\nReturns the x/y logical position of the supplied character.\n",
		"body": [
			"char_logical_pos(${1:character character})"
		],
	},
	"docgen:campaign_manager:campaign_manager:char_logical_pos": {
		"scope": "lua",
		"prefix": "campaign_manager:char_logical_pos",
		"description": "campaign_manager:char_logical_pos()\n-  -\n\nReturns the x/y logical position of the supplied character.\n",
		"body": [
			"campaign_manager:char_logical_pos(${1:character character})"
		],
	},
	"docgen:campaign_manager:cm:char_logical_pos": {
		"scope": "lua",
		"prefix": "cm:char_logical_pos",
		"description": "campaign_manager:char_logical_pos()\n-  -\n\nReturns the x/y logical position of the supplied character.\n",
		"body": [
			"cm:char_logical_pos(${1:character character})"
		],
	},
	"docgen:campaign_manager:character_is_army_commander": {
		"scope": "lua",
		"prefix": "character_is_army_commander",
		"description": "campaign_manager:character_is_army_commander()\n-  -\n\nReturns <code>true</code> if the character is a general at the head of a moveable army (not a garrison), <code>false</code> otherwise.\n",
		"body": [
			"character_is_army_commander(${1:character character})"
		],
	},
	"docgen:campaign_manager:campaign_manager:character_is_army_commander": {
		"scope": "lua",
		"prefix": "campaign_manager:character_is_army_commander",
		"description": "campaign_manager:character_is_army_commander()\n-  -\n\nReturns <code>true</code> if the character is a general at the head of a moveable army (not a garrison), <code>false</code> otherwise.\n",
		"body": [
			"campaign_manager:character_is_army_commander(${1:character character})"
		],
	},
	"docgen:campaign_manager:cm:character_is_army_commander": {
		"scope": "lua",
		"prefix": "cm:character_is_army_commander",
		"description": "campaign_manager:character_is_army_commander()\n-  -\n\nReturns <code>true</code> if the character is a general at the head of a moveable army (not a garrison), <code>false</code> otherwise.\n",
		"body": [
			"cm:character_is_army_commander(${1:character character})"
		],
	},
	"docgen:campaign_manager:char_lookup_str": {
		"scope": "lua",
		"prefix": "char_lookup_str",
		"description": "campaign_manager:char_lookup_str()\n-  -\n\nVarious game interface functions lookup characters using a lookup string.\n",
		"body": [
			"char_lookup_str(${1:object character or character cqi})"
		],
	},
	"docgen:campaign_manager:campaign_manager:char_lookup_str": {
		"scope": "lua",
		"prefix": "campaign_manager:char_lookup_str",
		"description": "campaign_manager:char_lookup_str()\n-  -\n\nVarious game interface functions lookup characters using a lookup string.\n",
		"body": [
			"campaign_manager:char_lookup_str(${1:object character or character cqi})"
		],
	},
	"docgen:campaign_manager:cm:char_lookup_str": {
		"scope": "lua",
		"prefix": "cm:char_lookup_str",
		"description": "campaign_manager:char_lookup_str()\n-  -\n\nVarious game interface functions lookup characters using a lookup string.\n",
		"body": [
			"cm:char_lookup_str(${1:object character or character cqi})"
		],
	},
	"docgen:campaign_manager:char_in_owned_region": {
		"scope": "lua",
		"prefix": "char_in_owned_region",
		"description": "campaign_manager:char_in_owned_region()\n-  -\n\nReturns <code>true</code> if the supplied character is in a region their faction controls, <code>false</code> otherwise.\n",
		"body": [
			"char_in_owned_region(${1:character character})"
		],
	},
	"docgen:campaign_manager:campaign_manager:char_in_owned_region": {
		"scope": "lua",
		"prefix": "campaign_manager:char_in_owned_region",
		"description": "campaign_manager:char_in_owned_region()\n-  -\n\nReturns <code>true</code> if the supplied character is in a region their faction controls, <code>false</code> otherwise.\n",
		"body": [
			"campaign_manager:char_in_owned_region(${1:character character})"
		],
	},
	"docgen:campaign_manager:cm:char_in_owned_region": {
		"scope": "lua",
		"prefix": "cm:char_in_owned_region",
		"description": "campaign_manager:char_in_owned_region()\n-  -\n\nReturns <code>true</code> if the supplied character is in a region their faction controls, <code>false</code> otherwise.\n",
		"body": [
			"cm:char_in_owned_region(${1:character character})"
		],
	},
	"docgen:campaign_manager:char_has_army": {
		"scope": "lua",
		"prefix": "char_has_army",
		"description": "campaign_manager:char_has_army()\n-  -\n\nReturns <code>true</code> if the supplied character has a land army military force, <code>false</code> otherwise.\n",
		"body": [
			"char_has_army(${1:character character})"
		],
	},
	"docgen:campaign_manager:campaign_manager:char_has_army": {
		"scope": "lua",
		"prefix": "campaign_manager:char_has_army",
		"description": "campaign_manager:char_has_army()\n-  -\n\nReturns <code>true</code> if the supplied character has a land army military force, <code>false</code> otherwise.\n",
		"body": [
			"campaign_manager:char_has_army(${1:character character})"
		],
	},
	"docgen:campaign_manager:cm:char_has_army": {
		"scope": "lua",
		"prefix": "cm:char_has_army",
		"description": "campaign_manager:char_has_army()\n-  -\n\nReturns <code>true</code> if the supplied character has a land army military force, <code>false</code> otherwise.\n",
		"body": [
			"cm:char_has_army(${1:character character})"
		],
	},
	"docgen:campaign_manager:char_has_navy": {
		"scope": "lua",
		"prefix": "char_has_navy",
		"description": "campaign_manager:char_has_navy()\n-  -\n\nReturns <code>true</code> if the supplied character has a navy military force, <code>false</code> otherwise.\n",
		"body": [
			"char_has_navy(${1:character character})"
		],
	},
	"docgen:campaign_manager:campaign_manager:char_has_navy": {
		"scope": "lua",
		"prefix": "campaign_manager:char_has_navy",
		"description": "campaign_manager:char_has_navy()\n-  -\n\nReturns <code>true</code> if the supplied character has a navy military force, <code>false</code> otherwise.\n",
		"body": [
			"campaign_manager:char_has_navy(${1:character character})"
		],
	},
	"docgen:campaign_manager:cm:char_has_navy": {
		"scope": "lua",
		"prefix": "cm:char_has_navy",
		"description": "campaign_manager:char_has_navy()\n-  -\n\nReturns <code>true</code> if the supplied character has a navy military force, <code>false</code> otherwise.\n",
		"body": [
			"cm:char_has_navy(${1:character character})"
		],
	},
	"docgen:campaign_manager:char_is_agent": {
		"scope": "lua",
		"prefix": "char_is_agent",
		"description": "campaign_manager:char_is_agent()\n-  -\n\nReturns <code>true</code> if the supplied character is not a general, a colonel or a minister, <code>false</code> otherwise.\n",
		"body": [
			"char_is_agent(${1:character character})"
		],
	},
	"docgen:campaign_manager:campaign_manager:char_is_agent": {
		"scope": "lua",
		"prefix": "campaign_manager:char_is_agent",
		"description": "campaign_manager:char_is_agent()\n-  -\n\nReturns <code>true</code> if the supplied character is not a general, a colonel or a minister, <code>false</code> otherwise.\n",
		"body": [
			"campaign_manager:char_is_agent(${1:character character})"
		],
	},
	"docgen:campaign_manager:cm:char_is_agent": {
		"scope": "lua",
		"prefix": "cm:char_is_agent",
		"description": "campaign_manager:char_is_agent()\n-  -\n\nReturns <code>true</code> if the supplied character is not a general, a colonel or a minister, <code>false</code> otherwise.\n",
		"body": [
			"cm:char_is_agent(${1:character character})"
		],
	},
	"docgen:campaign_manager:char_is_general": {
		"scope": "lua",
		"prefix": "char_is_general",
		"description": "campaign_manager:char_is_general()\n-  -\n\nReturns <code>true</code> if the supplied character is of type 'general', <code>false</code> otherwise.\n",
		"body": [
			"char_is_general(${1:character character})"
		],
	},
	"docgen:campaign_manager:campaign_manager:char_is_general": {
		"scope": "lua",
		"prefix": "campaign_manager:char_is_general",
		"description": "campaign_manager:char_is_general()\n-  -\n\nReturns <code>true</code> if the supplied character is of type 'general', <code>false</code> otherwise.\n",
		"body": [
			"campaign_manager:char_is_general(${1:character character})"
		],
	},
	"docgen:campaign_manager:cm:char_is_general": {
		"scope": "lua",
		"prefix": "cm:char_is_general",
		"description": "campaign_manager:char_is_general()\n-  -\n\nReturns <code>true</code> if the supplied character is of type 'general', <code>false</code> otherwise.\n",
		"body": [
			"cm:char_is_general(${1:character character})"
		],
	},
	"docgen:campaign_manager:char_is_victorious_general": {
		"scope": "lua",
		"prefix": "char_is_victorious_general",
		"description": "campaign_manager:char_is_victorious_general()\n-  -\n\nReturns <code>true</code> if the supplied character is a general that has been victorious (when?), <code>false</code> otherwise.\n",
		"body": [
			"char_is_victorious_general(${1:character character})"
		],
	},
	"docgen:campaign_manager:campaign_manager:char_is_victorious_general": {
		"scope": "lua",
		"prefix": "campaign_manager:char_is_victorious_general",
		"description": "campaign_manager:char_is_victorious_general()\n-  -\n\nReturns <code>true</code> if the supplied character is a general that has been victorious (when?), <code>false</code> otherwise.\n",
		"body": [
			"campaign_manager:char_is_victorious_general(${1:character character})"
		],
	},
	"docgen:campaign_manager:cm:char_is_victorious_general": {
		"scope": "lua",
		"prefix": "cm:char_is_victorious_general",
		"description": "campaign_manager:char_is_victorious_general()\n-  -\n\nReturns <code>true</code> if the supplied character is a general that has been victorious (when?), <code>false</code> otherwise.\n",
		"body": [
			"cm:char_is_victorious_general(${1:character character})"
		],
	},
	"docgen:campaign_manager:char_is_defeated_general": {
		"scope": "lua",
		"prefix": "char_is_defeated_general",
		"description": "campaign_manager:char_is_defeated_general()\n-  -\n\nReturns <code>true</code> if the supplied character is a general that has been defeated (when?), <code>false</code> otherwise.\n",
		"body": [
			"char_is_defeated_general(${1:character character})"
		],
	},
	"docgen:campaign_manager:campaign_manager:char_is_defeated_general": {
		"scope": "lua",
		"prefix": "campaign_manager:char_is_defeated_general",
		"description": "campaign_manager:char_is_defeated_general()\n-  -\n\nReturns <code>true</code> if the supplied character is a general that has been defeated (when?), <code>false</code> otherwise.\n",
		"body": [
			"campaign_manager:char_is_defeated_general(${1:character character})"
		],
	},
	"docgen:campaign_manager:cm:char_is_defeated_general": {
		"scope": "lua",
		"prefix": "cm:char_is_defeated_general",
		"description": "campaign_manager:char_is_defeated_general()\n-  -\n\nReturns <code>true</code> if the supplied character is a general that has been defeated (when?), <code>false</code> otherwise.\n",
		"body": [
			"cm:char_is_defeated_general(${1:character character})"
		],
	},
	"docgen:campaign_manager:char_is_general_with_army": {
		"scope": "lua",
		"prefix": "char_is_general_with_army",
		"description": "campaign_manager:char_is_general_with_army()\n-  -\n\nReturns <code>true</code> if the supplied character is a general and has an army, <code>false</code> otherwise.\n",
		"body": [
			"char_is_general_with_army(${1:character character})"
		],
	},
	"docgen:campaign_manager:campaign_manager:char_is_general_with_army": {
		"scope": "lua",
		"prefix": "campaign_manager:char_is_general_with_army",
		"description": "campaign_manager:char_is_general_with_army()\n-  -\n\nReturns <code>true</code> if the supplied character is a general and has an army, <code>false</code> otherwise.\n",
		"body": [
			"campaign_manager:char_is_general_with_army(${1:character character})"
		],
	},
	"docgen:campaign_manager:cm:char_is_general_with_army": {
		"scope": "lua",
		"prefix": "cm:char_is_general_with_army",
		"description": "campaign_manager:char_is_general_with_army()\n-  -\n\nReturns <code>true</code> if the supplied character is a general and has an army, <code>false</code> otherwise.\n",
		"body": [
			"cm:char_is_general_with_army(${1:character character})"
		],
	},
	"docgen:campaign_manager:char_is_mobile_general_with_army": {
		"scope": "lua",
		"prefix": "char_is_mobile_general_with_army",
		"description": "campaign_manager:char_is_mobile_general_with_army()\n-  -\n\nReturns <code>true</code> if the supplied character is a general, has an army, and can move around the campaign map, <code>false</code> otherwise.\n",
		"body": [
			"char_is_mobile_general_with_army(${1:character character})"
		],
	},
	"docgen:campaign_manager:campaign_manager:char_is_mobile_general_with_army": {
		"scope": "lua",
		"prefix": "campaign_manager:char_is_mobile_general_with_army",
		"description": "campaign_manager:char_is_mobile_general_with_army()\n-  -\n\nReturns <code>true</code> if the supplied character is a general, has an army, and can move around the campaign map, <code>false</code> otherwise.\n",
		"body": [
			"campaign_manager:char_is_mobile_general_with_army(${1:character character})"
		],
	},
	"docgen:campaign_manager:cm:char_is_mobile_general_with_army": {
		"scope": "lua",
		"prefix": "cm:char_is_mobile_general_with_army",
		"description": "campaign_manager:char_is_mobile_general_with_army()\n-  -\n\nReturns <code>true</code> if the supplied character is a general, has an army, and can move around the campaign map, <code>false</code> otherwise.\n",
		"body": [
			"cm:char_is_mobile_general_with_army(${1:character character})"
		],
	},
	"docgen:campaign_manager:char_is_general_with_navy": {
		"scope": "lua",
		"prefix": "char_is_general_with_navy",
		"description": "campaign_manager:char_is_general_with_navy()\n-  -\n\nReturns <code>true</code> if the supplied character is a general with a military force that is a navy, <code>false</code> otherwise.\n",
		"body": [
			"char_is_general_with_navy(${1:character character})"
		],
	},
	"docgen:campaign_manager:campaign_manager:char_is_general_with_navy": {
		"scope": "lua",
		"prefix": "campaign_manager:char_is_general_with_navy",
		"description": "campaign_manager:char_is_general_with_navy()\n-  -\n\nReturns <code>true</code> if the supplied character is a general with a military force that is a navy, <code>false</code> otherwise.\n",
		"body": [
			"campaign_manager:char_is_general_with_navy(${1:character character})"
		],
	},
	"docgen:campaign_manager:cm:char_is_general_with_navy": {
		"scope": "lua",
		"prefix": "cm:char_is_general_with_navy",
		"description": "campaign_manager:char_is_general_with_navy()\n-  -\n\nReturns <code>true</code> if the supplied character is a general with a military force that is a navy, <code>false</code> otherwise.\n",
		"body": [
			"cm:char_is_general_with_navy(${1:character character})"
		],
	},
	"docgen:campaign_manager:char_is_governor": {
		"scope": "lua",
		"prefix": "char_is_governor",
		"description": "campaign_manager:char_is_governor()\n-  -\n\nReturns <code>true</code> if the supplied character is the governor of a region, <code>false</code> otherwise.\n",
		"body": [
			"char_is_governor(${1:character character})"
		],
	},
	"docgen:campaign_manager:campaign_manager:char_is_governor": {
		"scope": "lua",
		"prefix": "campaign_manager:char_is_governor",
		"description": "campaign_manager:char_is_governor()\n-  -\n\nReturns <code>true</code> if the supplied character is the governor of a region, <code>false</code> otherwise.\n",
		"body": [
			"campaign_manager:char_is_governor(${1:character character})"
		],
	},
	"docgen:campaign_manager:cm:char_is_governor": {
		"scope": "lua",
		"prefix": "cm:char_is_governor",
		"description": "campaign_manager:char_is_governor()\n-  -\n\nReturns <code>true</code> if the supplied character is the governor of a region, <code>false</code> otherwise.\n",
		"body": [
			"cm:char_is_governor(${1:character character})"
		],
	},
	"docgen:campaign_manager:char_is_in_region_list": {
		"scope": "lua",
		"prefix": "char_is_in_region_list",
		"description": "campaign_manager:char_is_in_region_list()\n-  -\n\nReturns <code>true</code> if the supplied character is currently in any region from a supplied list, <code>false</code> otherwise.\n",
		"body": [
			"char_is_in_region_list(${1:character character}, ${2:table table of region keys})"
		],
	},
	"docgen:campaign_manager:campaign_manager:char_is_in_region_list": {
		"scope": "lua",
		"prefix": "campaign_manager:char_is_in_region_list",
		"description": "campaign_manager:char_is_in_region_list()\n-  -\n\nReturns <code>true</code> if the supplied character is currently in any region from a supplied list, <code>false</code> otherwise.\n",
		"body": [
			"campaign_manager:char_is_in_region_list(${1:character character}, ${2:table table of region keys})"
		],
	},
	"docgen:campaign_manager:cm:char_is_in_region_list": {
		"scope": "lua",
		"prefix": "cm:char_is_in_region_list",
		"description": "campaign_manager:char_is_in_region_list()\n-  -\n\nReturns <code>true</code> if the supplied character is currently in any region from a supplied list, <code>false</code> otherwise.\n",
		"body": [
			"cm:char_is_in_region_list(${1:character character}, ${2:table table of region keys})"
		],
	},
	"docgen:campaign_manager:get_closest_visible_character_of_subculture": {
		"scope": "lua",
		"prefix": "get_closest_visible_character_of_subculture",
		"description": "campaign_manager:get_closest_visible_character_of_subculture()\n-  -\n\nReturns the closest character of the supplied subculture to the supplied faction.\n",
		"body": [
			"get_closest_visible_character_of_subculture(${1:string faction key}, ${2:string subculture key})"
		],
	},
	"docgen:campaign_manager:campaign_manager:get_closest_visible_character_of_subculture": {
		"scope": "lua",
		"prefix": "campaign_manager:get_closest_visible_character_of_subculture",
		"description": "campaign_manager:get_closest_visible_character_of_subculture()\n-  -\n\nReturns the closest character of the supplied subculture to the supplied faction.\n",
		"body": [
			"campaign_manager:get_closest_visible_character_of_subculture(${1:string faction key}, ${2:string subculture key})"
		],
	},
	"docgen:campaign_manager:cm:get_closest_visible_character_of_subculture": {
		"scope": "lua",
		"prefix": "cm:get_closest_visible_character_of_subculture",
		"description": "campaign_manager:get_closest_visible_character_of_subculture()\n-  -\n\nReturns the closest character of the supplied subculture to the supplied faction.\n",
		"body": [
			"cm:get_closest_visible_character_of_subculture(${1:string faction key}, ${2:string subculture key})"
		],
	},
	"docgen:campaign_manager:get_closest_character_from_faction": {
		"scope": "lua",
		"prefix": "get_closest_character_from_faction",
		"description": "campaign_manager:get_closest_character_from_faction()\n-  -\n\nReturns the closest character from the supplied faction to the supplied position.\n",
		"body": [
			"get_closest_character_from_faction(${1:faction faction}, ${2:number x}, ${3:number y})"
		],
	},
	"docgen:campaign_manager:campaign_manager:get_closest_character_from_faction": {
		"scope": "lua",
		"prefix": "campaign_manager:get_closest_character_from_faction",
		"description": "campaign_manager:get_closest_character_from_faction()\n-  -\n\nReturns the closest character from the supplied faction to the supplied position.\n",
		"body": [
			"campaign_manager:get_closest_character_from_faction(${1:faction faction}, ${2:number x}, ${3:number y})"
		],
	},
	"docgen:campaign_manager:cm:get_closest_character_from_faction": {
		"scope": "lua",
		"prefix": "cm:get_closest_character_from_faction",
		"description": "campaign_manager:get_closest_character_from_faction()\n-  -\n\nReturns the closest character from the supplied faction to the supplied position.\n",
		"body": [
			"cm:get_closest_character_from_faction(${1:faction faction}, ${2:number x}, ${3:number y})"
		],
	},
	"docgen:campaign_manager:character_can_reach_character": {
		"scope": "lua",
		"prefix": "character_can_reach_character",
		"description": "campaign_manager:character_can_reach_character()\n-  -\n\nReturns <code>true</code> if the supplied source character can reach the supplied target character this turn, <code>false</code> otherwise.\n",
		"body": [
			"character_can_reach_character(${1:character source character}, ${2:character target character})"
		],
	},
	"docgen:campaign_manager:campaign_manager:character_can_reach_character": {
		"scope": "lua",
		"prefix": "campaign_manager:character_can_reach_character",
		"description": "campaign_manager:character_can_reach_character()\n-  -\n\nReturns <code>true</code> if the supplied source character can reach the supplied target character this turn, <code>false</code> otherwise.\n",
		"body": [
			"campaign_manager:character_can_reach_character(${1:character source character}, ${2:character target character})"
		],
	},
	"docgen:campaign_manager:cm:character_can_reach_character": {
		"scope": "lua",
		"prefix": "cm:character_can_reach_character",
		"description": "campaign_manager:character_can_reach_character()\n-  -\n\nReturns <code>true</code> if the supplied source character can reach the supplied target character this turn, <code>false</code> otherwise.\n",
		"body": [
			"cm:character_can_reach_character(${1:character source character}, ${2:character target character})"
		],
	},
	"docgen:campaign_manager:character_can_reach_settlement": {
		"scope": "lua",
		"prefix": "character_can_reach_settlement",
		"description": "campaign_manager:character_can_reach_settlement()\n-  -\n\nReturns <code>true</code> if the supplied source character can reach the supplied target settlement this turn, <code>false</code> otherwise.\n",
		"body": [
			"character_can_reach_settlement(${1:character source character}, ${2:settlement target settlement})"
		],
	},
	"docgen:campaign_manager:campaign_manager:character_can_reach_settlement": {
		"scope": "lua",
		"prefix": "campaign_manager:character_can_reach_settlement",
		"description": "campaign_manager:character_can_reach_settlement()\n-  -\n\nReturns <code>true</code> if the supplied source character can reach the supplied target settlement this turn, <code>false</code> otherwise.\n",
		"body": [
			"campaign_manager:character_can_reach_settlement(${1:character source character}, ${2:settlement target settlement})"
		],
	},
	"docgen:campaign_manager:cm:character_can_reach_settlement": {
		"scope": "lua",
		"prefix": "cm:character_can_reach_settlement",
		"description": "campaign_manager:character_can_reach_settlement()\n-  -\n\nReturns <code>true</code> if the supplied source character can reach the supplied target settlement this turn, <code>false</code> otherwise.\n",
		"body": [
			"cm:character_can_reach_settlement(${1:character source character}, ${2:settlement target settlement})"
		],
	},
	"docgen:campaign_manager:general_with_forename_exists_in_faction_with_force": {
		"scope": "lua",
		"prefix": "general_with_forename_exists_in_faction_with_force",
		"description": "campaign_manager:general_with_forename_exists_in_faction_with_force()\n-  -\n\nReturns <code>true</code> if a general with a mobile military force exists in the supplied faction with the supplied forename.\n",
		"body": [
			"general_with_forename_exists_in_faction_with_force(${1:string faction key}, ${2:string forename key})"
		],
	},
	"docgen:campaign_manager:campaign_manager:general_with_forename_exists_in_faction_with_force": {
		"scope": "lua",
		"prefix": "campaign_manager:general_with_forename_exists_in_faction_with_force",
		"description": "campaign_manager:general_with_forename_exists_in_faction_with_force()\n-  -\n\nReturns <code>true</code> if a general with a mobile military force exists in the supplied faction with the supplied forename.\n",
		"body": [
			"campaign_manager:general_with_forename_exists_in_faction_with_force(${1:string faction key}, ${2:string forename key})"
		],
	},
	"docgen:campaign_manager:cm:general_with_forename_exists_in_faction_with_force": {
		"scope": "lua",
		"prefix": "cm:general_with_forename_exists_in_faction_with_force",
		"description": "campaign_manager:general_with_forename_exists_in_faction_with_force()\n-  -\n\nReturns <code>true</code> if a general with a mobile military force exists in the supplied faction with the supplied forename.\n",
		"body": [
			"cm:general_with_forename_exists_in_faction_with_force(${1:string faction key}, ${2:string forename key})"
		],
	},
	"docgen:campaign_manager:get_highest_ranked_general_for_faction": {
		"scope": "lua",
		"prefix": "get_highest_ranked_general_for_faction",
		"description": "campaign_manager:get_highest_ranked_general_for_faction()\n-  -\n\nReturns the general character in the supplied faction of the highest rank.\n",
		"body": [
			"get_highest_ranked_general_for_faction(${1:object faction})"
		],
	},
	"docgen:campaign_manager:campaign_manager:get_highest_ranked_general_for_faction": {
		"scope": "lua",
		"prefix": "campaign_manager:get_highest_ranked_general_for_faction",
		"description": "campaign_manager:get_highest_ranked_general_for_faction()\n-  -\n\nReturns the general character in the supplied faction of the highest rank.\n",
		"body": [
			"campaign_manager:get_highest_ranked_general_for_faction(${1:object faction})"
		],
	},
	"docgen:campaign_manager:cm:get_highest_ranked_general_for_faction": {
		"scope": "lua",
		"prefix": "cm:get_highest_ranked_general_for_faction",
		"description": "campaign_manager:get_highest_ranked_general_for_faction()\n-  -\n\nReturns the general character in the supplied faction of the highest rank.\n",
		"body": [
			"cm:get_highest_ranked_general_for_faction(${1:object faction})"
		],
	},
	"docgen:campaign_manager:remove_all_units_from_general": {
		"scope": "lua",
		"prefix": "remove_all_units_from_general",
		"description": "campaign_manager:remove_all_units_from_general()\n-  -\n\nRemoves all units from the military force the supplied general character commands.\n",
		"body": [
			"remove_all_units_from_general(${1:character general character})"
		],
	},
	"docgen:campaign_manager:campaign_manager:remove_all_units_from_general": {
		"scope": "lua",
		"prefix": "campaign_manager:remove_all_units_from_general",
		"description": "campaign_manager:remove_all_units_from_general()\n-  -\n\nRemoves all units from the military force the supplied general character commands.\n",
		"body": [
			"campaign_manager:remove_all_units_from_general(${1:character general character})"
		],
	},
	"docgen:campaign_manager:cm:remove_all_units_from_general": {
		"scope": "lua",
		"prefix": "cm:remove_all_units_from_general",
		"description": "campaign_manager:remove_all_units_from_general()\n-  -\n\nRemoves all units from the military force the supplied general character commands.\n",
		"body": [
			"cm:remove_all_units_from_general(${1:character general character})"
		],
	},
	"docgen:campaign_manager:get_faction": {
		"scope": "lua",
		"prefix": "get_faction",
		"description": "campaign_manager:get_faction()\n-  -\n\nGets a faction object by its string key.\n",
		"body": [
			"get_faction(${1:string faction key})"
		],
	},
	"docgen:campaign_manager:campaign_manager:get_faction": {
		"scope": "lua",
		"prefix": "campaign_manager:get_faction",
		"description": "campaign_manager:get_faction()\n-  -\n\nGets a faction object by its string key.\n",
		"body": [
			"campaign_manager:get_faction(${1:string faction key})"
		],
	},
	"docgen:campaign_manager:cm:get_faction": {
		"scope": "lua",
		"prefix": "cm:get_faction",
		"description": "campaign_manager:get_faction()\n-  -\n\nGets a faction object by its string key.\n",
		"body": [
			"cm:get_faction(${1:string faction key})"
		],
	},
	"docgen:campaign_manager:faction_contains_building": {
		"scope": "lua",
		"prefix": "faction_contains_building",
		"description": "campaign_manager:faction_contains_building()\n-  -\n\nReturns <code>true</code> if territories controlled by the supplied faction contain the supplied building.\n",
		"body": [
			"faction_contains_building(${1:faction faction object}, ${2:string building key})"
		],
	},
	"docgen:campaign_manager:campaign_manager:faction_contains_building": {
		"scope": "lua",
		"prefix": "campaign_manager:faction_contains_building",
		"description": "campaign_manager:faction_contains_building()\n-  -\n\nReturns <code>true</code> if territories controlled by the supplied faction contain the supplied building.\n",
		"body": [
			"campaign_manager:faction_contains_building(${1:faction faction object}, ${2:string building key})"
		],
	},
	"docgen:campaign_manager:cm:faction_contains_building": {
		"scope": "lua",
		"prefix": "cm:faction_contains_building",
		"description": "campaign_manager:faction_contains_building()\n-  -\n\nReturns <code>true</code> if territories controlled by the supplied faction contain the supplied building.\n",
		"body": [
			"cm:faction_contains_building(${1:faction faction object}, ${2:string building key})"
		],
	},
	"docgen:campaign_manager:num_characters_of_type_in_faction": {
		"scope": "lua",
		"prefix": "num_characters_of_type_in_faction",
		"description": "campaign_manager:num_characters_of_type_in_faction()\n-  -\n\nReturns the number of characters of the supplied type in the supplied faction.\n",
		"body": [
			"num_characters_of_type_in_faction(${1:faction faction object}, ${2:string character type})"
		],
	},
	"docgen:campaign_manager:campaign_manager:num_characters_of_type_in_faction": {
		"scope": "lua",
		"prefix": "campaign_manager:num_characters_of_type_in_faction",
		"description": "campaign_manager:num_characters_of_type_in_faction()\n-  -\n\nReturns the number of characters of the supplied type in the supplied faction.\n",
		"body": [
			"campaign_manager:num_characters_of_type_in_faction(${1:faction faction object}, ${2:string character type})"
		],
	},
	"docgen:campaign_manager:cm:num_characters_of_type_in_faction": {
		"scope": "lua",
		"prefix": "cm:num_characters_of_type_in_faction",
		"description": "campaign_manager:num_characters_of_type_in_faction()\n-  -\n\nReturns the number of characters of the supplied type in the supplied faction.\n",
		"body": [
			"cm:num_characters_of_type_in_faction(${1:faction faction object}, ${2:string character type})"
		],
	},
	"docgen:campaign_manager:kill_all_armies_for_faction": {
		"scope": "lua",
		"prefix": "kill_all_armies_for_faction",
		"description": "campaign_manager:kill_all_armies_for_faction()\n-  -\n\nKills all armies in the supplied faction.\n",
		"body": [
			"kill_all_armies_for_faction(${1:faction faction object})"
		],
	},
	"docgen:campaign_manager:campaign_manager:kill_all_armies_for_faction": {
		"scope": "lua",
		"prefix": "campaign_manager:kill_all_armies_for_faction",
		"description": "campaign_manager:kill_all_armies_for_faction()\n-  -\n\nKills all armies in the supplied faction.\n",
		"body": [
			"campaign_manager:kill_all_armies_for_faction(${1:faction faction object})"
		],
	},
	"docgen:campaign_manager:cm:kill_all_armies_for_faction": {
		"scope": "lua",
		"prefix": "cm:kill_all_armies_for_faction",
		"description": "campaign_manager:kill_all_armies_for_faction()\n-  -\n\nKills all armies in the supplied faction.\n",
		"body": [
			"cm:kill_all_armies_for_faction(${1:faction faction object})"
		],
	},
	"docgen:campaign_manager:get_trespasser_list_for_faction": {
		"scope": "lua",
		"prefix": "get_trespasser_list_for_faction",
		"description": "campaign_manager:get_trespasser_list_for_faction()\n-  -\n\nReturns a table of cqis of characters that are both at war with the specified faction and also trespassing on its territory.\n",
		"body": [
			"get_trespasser_list_for_faction(${1:faction faction object})"
		],
	},
	"docgen:campaign_manager:campaign_manager:get_trespasser_list_for_faction": {
		"scope": "lua",
		"prefix": "campaign_manager:get_trespasser_list_for_faction",
		"description": "campaign_manager:get_trespasser_list_for_faction()\n-  -\n\nReturns a table of cqis of characters that are both at war with the specified faction and also trespassing on its territory.\n",
		"body": [
			"campaign_manager:get_trespasser_list_for_faction(${1:faction faction object})"
		],
	},
	"docgen:campaign_manager:cm:get_trespasser_list_for_faction": {
		"scope": "lua",
		"prefix": "cm:get_trespasser_list_for_faction",
		"description": "campaign_manager:get_trespasser_list_for_faction()\n-  -\n\nReturns a table of cqis of characters that are both at war with the specified faction and also trespassing on its territory.\n",
		"body": [
			"cm:get_trespasser_list_for_faction(${1:faction faction object})"
		],
	},
	"docgen:campaign_manager:number_of_units_in_faction": {
		"scope": "lua",
		"prefix": "number_of_units_in_faction",
		"description": "campaign_manager:number_of_units_in_faction()\n-  -\n\nReturns the number of units in all military forces in the supplied faction.\n",
		"body": [
			"number_of_units_in_faction(${1:faction faction object}, ${2:[opt=false] boolean exclude armed citizenry})"
		],
	},
	"docgen:campaign_manager:campaign_manager:number_of_units_in_faction": {
		"scope": "lua",
		"prefix": "campaign_manager:number_of_units_in_faction",
		"description": "campaign_manager:number_of_units_in_faction()\n-  -\n\nReturns the number of units in all military forces in the supplied faction.\n",
		"body": [
			"campaign_manager:number_of_units_in_faction(${1:faction faction object}, ${2:[opt=false] boolean exclude armed citizenry})"
		],
	},
	"docgen:campaign_manager:cm:number_of_units_in_faction": {
		"scope": "lua",
		"prefix": "cm:number_of_units_in_faction",
		"description": "campaign_manager:number_of_units_in_faction()\n-  -\n\nReturns the number of units in all military forces in the supplied faction.\n",
		"body": [
			"cm:number_of_units_in_faction(${1:faction faction object}, ${2:[opt=false] boolean exclude armed citizenry})"
		],
	},
	"docgen:campaign_manager:faction_is_alive": {
		"scope": "lua",
		"prefix": "faction_is_alive",
		"description": "campaign_manager:faction_is_alive()\n-  -\n\nReturns true if the supplied faction has a home region or any military forces.\n",
		"body": [
			"faction_is_alive(${1:faction faction object})"
		],
	},
	"docgen:campaign_manager:campaign_manager:faction_is_alive": {
		"scope": "lua",
		"prefix": "campaign_manager:faction_is_alive",
		"description": "campaign_manager:faction_is_alive()\n-  -\n\nReturns true if the supplied faction has a home region or any military forces.\n",
		"body": [
			"campaign_manager:faction_is_alive(${1:faction faction object})"
		],
	},
	"docgen:campaign_manager:cm:faction_is_alive": {
		"scope": "lua",
		"prefix": "cm:faction_is_alive",
		"description": "campaign_manager:faction_is_alive()\n-  -\n\nReturns true if the supplied faction has a home region or any military forces.\n",
		"body": [
			"cm:faction_is_alive(${1:faction faction object})"
		],
	},
	"docgen:campaign_manager:faction_of_culture_is_alive": {
		"scope": "lua",
		"prefix": "faction_of_culture_is_alive",
		"description": "campaign_manager:faction_of_culture_is_alive()\n-  -\n\nReturns true if any faction with a culture corresponding to the supplied key is alive (uses campaign_manager:faction_is_alive).\n",
		"body": [
			"faction_of_culture_is_alive(${1:string culture key})"
		],
	},
	"docgen:campaign_manager:campaign_manager:faction_of_culture_is_alive": {
		"scope": "lua",
		"prefix": "campaign_manager:faction_of_culture_is_alive",
		"description": "campaign_manager:faction_of_culture_is_alive()\n-  -\n\nReturns true if any faction with a culture corresponding to the supplied key is alive (uses campaign_manager:faction_is_alive).\n",
		"body": [
			"campaign_manager:faction_of_culture_is_alive(${1:string culture key})"
		],
	},
	"docgen:campaign_manager:cm:faction_of_culture_is_alive": {
		"scope": "lua",
		"prefix": "cm:faction_of_culture_is_alive",
		"description": "campaign_manager:faction_of_culture_is_alive()\n-  -\n\nReturns true if any faction with a culture corresponding to the supplied key is alive (uses campaign_manager:faction_is_alive).\n",
		"body": [
			"cm:faction_of_culture_is_alive(${1:string culture key})"
		],
	},
	"docgen:campaign_manager:faction_of_subculture_is_alive": {
		"scope": "lua",
		"prefix": "faction_of_subculture_is_alive",
		"description": "campaign_manager:faction_of_subculture_is_alive()\n-  -\n\nReturns true if any faction with a subculture corresponding to the supplied key is alive (uses campaign_manager:faction_is_alive).\n",
		"body": [
			"faction_of_subculture_is_alive(${1:string subculture key})"
		],
	},
	"docgen:campaign_manager:campaign_manager:faction_of_subculture_is_alive": {
		"scope": "lua",
		"prefix": "campaign_manager:faction_of_subculture_is_alive",
		"description": "campaign_manager:faction_of_subculture_is_alive()\n-  -\n\nReturns true if any faction with a subculture corresponding to the supplied key is alive (uses campaign_manager:faction_is_alive).\n",
		"body": [
			"campaign_manager:faction_of_subculture_is_alive(${1:string subculture key})"
		],
	},
	"docgen:campaign_manager:cm:faction_of_subculture_is_alive": {
		"scope": "lua",
		"prefix": "cm:faction_of_subculture_is_alive",
		"description": "campaign_manager:faction_of_subculture_is_alive()\n-  -\n\nReturns true if any faction with a subculture corresponding to the supplied key is alive (uses campaign_manager:faction_is_alive).\n",
		"body": [
			"cm:faction_of_subculture_is_alive(${1:string subculture key})"
		],
	},
	"docgen:campaign_manager:faction_has_armies_in_enemy_territory": {
		"scope": "lua",
		"prefix": "faction_has_armies_in_enemy_territory",
		"description": "campaign_manager:faction_has_armies_in_enemy_territory()\n-  -\n\nReturns <code>true</code> if the supplied faction has any armies in the territory of factions it's at war with, <code>false</code> otherwise.\n",
		"body": [
			"faction_has_armies_in_enemy_territory(${1:faction faction})"
		],
	},
	"docgen:campaign_manager:campaign_manager:faction_has_armies_in_enemy_territory": {
		"scope": "lua",
		"prefix": "campaign_manager:faction_has_armies_in_enemy_territory",
		"description": "campaign_manager:faction_has_armies_in_enemy_territory()\n-  -\n\nReturns <code>true</code> if the supplied faction has any armies in the territory of factions it's at war with, <code>false</code> otherwise.\n",
		"body": [
			"campaign_manager:faction_has_armies_in_enemy_territory(${1:faction faction})"
		],
	},
	"docgen:campaign_manager:cm:faction_has_armies_in_enemy_territory": {
		"scope": "lua",
		"prefix": "cm:faction_has_armies_in_enemy_territory",
		"description": "campaign_manager:faction_has_armies_in_enemy_territory()\n-  -\n\nReturns <code>true</code> if the supplied faction has any armies in the territory of factions it's at war with, <code>false</code> otherwise.\n",
		"body": [
			"cm:faction_has_armies_in_enemy_territory(${1:faction faction})"
		],
	},
	"docgen:campaign_manager:faction_has_armies_in_region": {
		"scope": "lua",
		"prefix": "faction_has_armies_in_region",
		"description": "campaign_manager:faction_has_armies_in_region()\n-  -\n\nReturns <code>true</code> if the supplied faction has any armies in the supplied region, <code>false</code> otherwise.\n",
		"body": [
			"faction_has_armies_in_region(${1:faction faction}, ${2:region region})"
		],
	},
	"docgen:campaign_manager:campaign_manager:faction_has_armies_in_region": {
		"scope": "lua",
		"prefix": "campaign_manager:faction_has_armies_in_region",
		"description": "campaign_manager:faction_has_armies_in_region()\n-  -\n\nReturns <code>true</code> if the supplied faction has any armies in the supplied region, <code>false</code> otherwise.\n",
		"body": [
			"campaign_manager:faction_has_armies_in_region(${1:faction faction}, ${2:region region})"
		],
	},
	"docgen:campaign_manager:cm:faction_has_armies_in_region": {
		"scope": "lua",
		"prefix": "cm:faction_has_armies_in_region",
		"description": "campaign_manager:faction_has_armies_in_region()\n-  -\n\nReturns <code>true</code> if the supplied faction has any armies in the supplied region, <code>false</code> otherwise.\n",
		"body": [
			"cm:faction_has_armies_in_region(${1:faction faction}, ${2:region region})"
		],
	},
	"docgen:campaign_manager:faction_has_nap_with_faction": {
		"scope": "lua",
		"prefix": "faction_has_nap_with_faction",
		"description": "campaign_manager:faction_has_nap_with_faction()\n-  -\n\nReturns <code>true</code> if the supplied faction has any armies in the supplied region, <code>false</code> otherwise.\n",
		"body": [
			"faction_has_nap_with_faction(${1:faction faction}, ${2:region region})"
		],
	},
	"docgen:campaign_manager:campaign_manager:faction_has_nap_with_faction": {
		"scope": "lua",
		"prefix": "campaign_manager:faction_has_nap_with_faction",
		"description": "campaign_manager:faction_has_nap_with_faction()\n-  -\n\nReturns <code>true</code> if the supplied faction has any armies in the supplied region, <code>false</code> otherwise.\n",
		"body": [
			"campaign_manager:faction_has_nap_with_faction(${1:faction faction}, ${2:region region})"
		],
	},
	"docgen:campaign_manager:cm:faction_has_nap_with_faction": {
		"scope": "lua",
		"prefix": "cm:faction_has_nap_with_faction",
		"description": "campaign_manager:faction_has_nap_with_faction()\n-  -\n\nReturns <code>true</code> if the supplied faction has any armies in the supplied region, <code>false</code> otherwise.\n",
		"body": [
			"cm:faction_has_nap_with_faction(${1:faction faction}, ${2:region region})"
		],
	},
	"docgen:campaign_manager:faction_has_trade_agreement_with_faction": {
		"scope": "lua",
		"prefix": "faction_has_trade_agreement_with_faction",
		"description": "campaign_manager:faction_has_trade_agreement_with_faction()\n-  -\n\nReturns <code>true</code> if the supplied faction has any armies in the supplied region, <code>false</code> otherwise.\n",
		"body": [
			"faction_has_trade_agreement_with_faction(${1:faction faction}, ${2:region region})"
		],
	},
	"docgen:campaign_manager:campaign_manager:faction_has_trade_agreement_with_faction": {
		"scope": "lua",
		"prefix": "campaign_manager:faction_has_trade_agreement_with_faction",
		"description": "campaign_manager:faction_has_trade_agreement_with_faction()\n-  -\n\nReturns <code>true</code> if the supplied faction has any armies in the supplied region, <code>false</code> otherwise.\n",
		"body": [
			"campaign_manager:faction_has_trade_agreement_with_faction(${1:faction faction}, ${2:region region})"
		],
	},
	"docgen:campaign_manager:cm:faction_has_trade_agreement_with_faction": {
		"scope": "lua",
		"prefix": "cm:faction_has_trade_agreement_with_faction",
		"description": "campaign_manager:faction_has_trade_agreement_with_faction()\n-  -\n\nReturns <code>true</code> if the supplied faction has any armies in the supplied region, <code>false</code> otherwise.\n",
		"body": [
			"cm:faction_has_trade_agreement_with_faction(${1:faction faction}, ${2:region region})"
		],
	},
	"docgen:campaign_manager:garrison_contains_building": {
		"scope": "lua",
		"prefix": "garrison_contains_building",
		"description": "campaign_manager:garrison_contains_building()\n-  -\n\nReturns <code>true</code> if the supplied garrison residence contains a building with the supplied key, <code>false</code> otherwise.\n",
		"body": [
			"garrison_contains_building(${1:garrison_residence garrison residence}, ${2:string building key})"
		],
	},
	"docgen:campaign_manager:campaign_manager:garrison_contains_building": {
		"scope": "lua",
		"prefix": "campaign_manager:garrison_contains_building",
		"description": "campaign_manager:garrison_contains_building()\n-  -\n\nReturns <code>true</code> if the supplied garrison residence contains a building with the supplied key, <code>false</code> otherwise.\n",
		"body": [
			"campaign_manager:garrison_contains_building(${1:garrison_residence garrison residence}, ${2:string building key})"
		],
	},
	"docgen:campaign_manager:cm:garrison_contains_building": {
		"scope": "lua",
		"prefix": "cm:garrison_contains_building",
		"description": "campaign_manager:garrison_contains_building()\n-  -\n\nReturns <code>true</code> if the supplied garrison residence contains a building with the supplied key, <code>false</code> otherwise.\n",
		"body": [
			"cm:garrison_contains_building(${1:garrison_residence garrison residence}, ${2:string building key})"
		],
	},
	"docgen:campaign_manager:garrison_contains_building_chain": {
		"scope": "lua",
		"prefix": "garrison_contains_building_chain",
		"description": "campaign_manager:garrison_contains_building_chain()\n-  -\n\nReturns <code>true</code> if the supplied garrison residence contains a building with the supplied chain key, <code>false</code> otherwise.\n",
		"body": [
			"garrison_contains_building_chain(${1:garrison_residence garrison residence}, ${2:string building chain key})"
		],
	},
	"docgen:campaign_manager:campaign_manager:garrison_contains_building_chain": {
		"scope": "lua",
		"prefix": "campaign_manager:garrison_contains_building_chain",
		"description": "campaign_manager:garrison_contains_building_chain()\n-  -\n\nReturns <code>true</code> if the supplied garrison residence contains a building with the supplied chain key, <code>false</code> otherwise.\n",
		"body": [
			"campaign_manager:garrison_contains_building_chain(${1:garrison_residence garrison residence}, ${2:string building chain key})"
		],
	},
	"docgen:campaign_manager:cm:garrison_contains_building_chain": {
		"scope": "lua",
		"prefix": "cm:garrison_contains_building_chain",
		"description": "campaign_manager:garrison_contains_building_chain()\n-  -\n\nReturns <code>true</code> if the supplied garrison residence contains a building with the supplied chain key, <code>false</code> otherwise.\n",
		"body": [
			"cm:garrison_contains_building_chain(${1:garrison_residence garrison residence}, ${2:string building chain key})"
		],
	},
	"docgen:campaign_manager:garrison_contains_building_superchain": {
		"scope": "lua",
		"prefix": "garrison_contains_building_superchain",
		"description": "campaign_manager:garrison_contains_building_superchain()\n-  -\n\nReturns <code>true</code> if the supplied garrison residence contains a building with the supplied superchain key, <code>false</code> otherwise.\n",
		"body": [
			"garrison_contains_building_superchain(${1:garrison_residence garrison residence}, ${2:string building superchain key})"
		],
	},
	"docgen:campaign_manager:campaign_manager:garrison_contains_building_superchain": {
		"scope": "lua",
		"prefix": "campaign_manager:garrison_contains_building_superchain",
		"description": "campaign_manager:garrison_contains_building_superchain()\n-  -\n\nReturns <code>true</code> if the supplied garrison residence contains a building with the supplied superchain key, <code>false</code> otherwise.\n",
		"body": [
			"campaign_manager:garrison_contains_building_superchain(${1:garrison_residence garrison residence}, ${2:string building superchain key})"
		],
	},
	"docgen:campaign_manager:cm:garrison_contains_building_superchain": {
		"scope": "lua",
		"prefix": "cm:garrison_contains_building_superchain",
		"description": "campaign_manager:garrison_contains_building_superchain()\n-  -\n\nReturns <code>true</code> if the supplied garrison residence contains a building with the supplied superchain key, <code>false</code> otherwise.\n",
		"body": [
			"cm:garrison_contains_building_superchain(${1:garrison_residence garrison residence}, ${2:string building superchain key})"
		],
	},
	"docgen:campaign_manager:get_armed_citizenry_from_garrison": {
		"scope": "lua",
		"prefix": "get_armed_citizenry_from_garrison",
		"description": "campaign_manager:get_armed_citizenry_from_garrison()\n-  -\n\nReturns the garrison army from a garrison residence.\n",
		"body": [
			"get_armed_citizenry_from_garrison(${1:garrison_residence garrison residence}, ${2:[opt=false] boolean get naval})"
		],
	},
	"docgen:campaign_manager:campaign_manager:get_armed_citizenry_from_garrison": {
		"scope": "lua",
		"prefix": "campaign_manager:get_armed_citizenry_from_garrison",
		"description": "campaign_manager:get_armed_citizenry_from_garrison()\n-  -\n\nReturns the garrison army from a garrison residence.\n",
		"body": [
			"campaign_manager:get_armed_citizenry_from_garrison(${1:garrison_residence garrison residence}, ${2:[opt=false] boolean get naval})"
		],
	},
	"docgen:campaign_manager:cm:get_armed_citizenry_from_garrison": {
		"scope": "lua",
		"prefix": "cm:get_armed_citizenry_from_garrison",
		"description": "campaign_manager:get_armed_citizenry_from_garrison()\n-  -\n\nReturns the garrison army from a garrison residence.\n",
		"body": [
			"cm:get_armed_citizenry_from_garrison(${1:garrison_residence garrison residence}, ${2:[opt=false] boolean get naval})"
		],
	},
	"docgen:campaign_manager:military_force_average_strength": {
		"scope": "lua",
		"prefix": "military_force_average_strength",
		"description": "campaign_manager:military_force_average_strength()\n-  -\n\nReturns the average strength of all units in the military force.\n",
		"body": [
			"military_force_average_strength(${1:military_force military force})"
		],
	},
	"docgen:campaign_manager:campaign_manager:military_force_average_strength": {
		"scope": "lua",
		"prefix": "campaign_manager:military_force_average_strength",
		"description": "campaign_manager:military_force_average_strength()\n-  -\n\nReturns the average strength of all units in the military force.\n",
		"body": [
			"campaign_manager:military_force_average_strength(${1:military_force military force})"
		],
	},
	"docgen:campaign_manager:cm:military_force_average_strength": {
		"scope": "lua",
		"prefix": "cm:military_force_average_strength",
		"description": "campaign_manager:military_force_average_strength()\n-  -\n\nReturns the average strength of all units in the military force.\n",
		"body": [
			"cm:military_force_average_strength(${1:military_force military force})"
		],
	},
	"docgen:campaign_manager:num_mobile_forces_in_force_list": {
		"scope": "lua",
		"prefix": "num_mobile_forces_in_force_list",
		"description": "campaign_manager:num_mobile_forces_in_force_list()\n-  -\n\nReturns the number of military forces that are not armed-citizenry in the supplied military force list.\n",
		"body": [
			"num_mobile_forces_in_force_list(${1:military_force_list military force list})"
		],
	},
	"docgen:campaign_manager:campaign_manager:num_mobile_forces_in_force_list": {
		"scope": "lua",
		"prefix": "campaign_manager:num_mobile_forces_in_force_list",
		"description": "campaign_manager:num_mobile_forces_in_force_list()\n-  -\n\nReturns the number of military forces that are not armed-citizenry in the supplied military force list.\n",
		"body": [
			"campaign_manager:num_mobile_forces_in_force_list(${1:military_force_list military force list})"
		],
	},
	"docgen:campaign_manager:cm:num_mobile_forces_in_force_list": {
		"scope": "lua",
		"prefix": "cm:num_mobile_forces_in_force_list",
		"description": "campaign_manager:num_mobile_forces_in_force_list()\n-  -\n\nReturns the number of military forces that are not armed-citizenry in the supplied military force list.\n",
		"body": [
			"cm:num_mobile_forces_in_force_list(${1:military_force_list military force list})"
		],
	},
	"docgen:campaign_manager:proportion_of_unit_class_in_military_force": {
		"scope": "lua",
		"prefix": "proportion_of_unit_class_in_military_force",
		"description": "campaign_manager:proportion_of_unit_class_in_military_force()\n-  -\n\nReturns the unary proportion (0-1) of units in the supplied military force which are of the supplied unit class.\n",
		"body": [
			"proportion_of_unit_class_in_military_force(${1:military_force military force}, ${2:string unit class})"
		],
	},
	"docgen:campaign_manager:campaign_manager:proportion_of_unit_class_in_military_force": {
		"scope": "lua",
		"prefix": "campaign_manager:proportion_of_unit_class_in_military_force",
		"description": "campaign_manager:proportion_of_unit_class_in_military_force()\n-  -\n\nReturns the unary proportion (0-1) of units in the supplied military force which are of the supplied unit class.\n",
		"body": [
			"campaign_manager:proportion_of_unit_class_in_military_force(${1:military_force military force}, ${2:string unit class})"
		],
	},
	"docgen:campaign_manager:cm:proportion_of_unit_class_in_military_force": {
		"scope": "lua",
		"prefix": "cm:proportion_of_unit_class_in_military_force",
		"description": "campaign_manager:proportion_of_unit_class_in_military_force()\n-  -\n\nReturns the unary proportion (0-1) of units in the supplied military force which are of the supplied unit class.\n",
		"body": [
			"cm:proportion_of_unit_class_in_military_force(${1:military_force military force}, ${2:string unit class})"
		],
	},
	"docgen:campaign_manager:military_force_contains_unit_type_from_list": {
		"scope": "lua",
		"prefix": "military_force_contains_unit_type_from_list",
		"description": "campaign_manager:military_force_contains_unit_type_from_list()\n-  -\n\nReturns <code>true</code> if the supplied military force contains any units of a type contained in the supplied unit type list, <code>false</code> otherwise.\n",
		"body": [
			"military_force_contains_unit_type_from_list(${1:military_force military force}, ${2:table unit type list})"
		],
	},
	"docgen:campaign_manager:campaign_manager:military_force_contains_unit_type_from_list": {
		"scope": "lua",
		"prefix": "campaign_manager:military_force_contains_unit_type_from_list",
		"description": "campaign_manager:military_force_contains_unit_type_from_list()\n-  -\n\nReturns <code>true</code> if the supplied military force contains any units of a type contained in the supplied unit type list, <code>false</code> otherwise.\n",
		"body": [
			"campaign_manager:military_force_contains_unit_type_from_list(${1:military_force military force}, ${2:table unit type list})"
		],
	},
	"docgen:campaign_manager:cm:military_force_contains_unit_type_from_list": {
		"scope": "lua",
		"prefix": "cm:military_force_contains_unit_type_from_list",
		"description": "campaign_manager:military_force_contains_unit_type_from_list()\n-  -\n\nReturns <code>true</code> if the supplied military force contains any units of a type contained in the supplied unit type list, <code>false</code> otherwise.\n",
		"body": [
			"cm:military_force_contains_unit_type_from_list(${1:military_force military force}, ${2:table unit type list})"
		],
	},
	"docgen:campaign_manager:military_force_contains_unit_class_from_list": {
		"scope": "lua",
		"prefix": "military_force_contains_unit_class_from_list",
		"description": "campaign_manager:military_force_contains_unit_class_from_list()\n-  -\n\nReturns <code>true</code> if the supplied military force contains any units of a class contained in the supplied unit class list, <code>false</code> otherwise.\n",
		"body": [
			"military_force_contains_unit_class_from_list(${1:military_force military force}, ${2:table unit class list})"
		],
	},
	"docgen:campaign_manager:campaign_manager:military_force_contains_unit_class_from_list": {
		"scope": "lua",
		"prefix": "campaign_manager:military_force_contains_unit_class_from_list",
		"description": "campaign_manager:military_force_contains_unit_class_from_list()\n-  -\n\nReturns <code>true</code> if the supplied military force contains any units of a class contained in the supplied unit class list, <code>false</code> otherwise.\n",
		"body": [
			"campaign_manager:military_force_contains_unit_class_from_list(${1:military_force military force}, ${2:table unit class list})"
		],
	},
	"docgen:campaign_manager:cm:military_force_contains_unit_class_from_list": {
		"scope": "lua",
		"prefix": "cm:military_force_contains_unit_class_from_list",
		"description": "campaign_manager:military_force_contains_unit_class_from_list()\n-  -\n\nReturns <code>true</code> if the supplied military force contains any units of a class contained in the supplied unit class list, <code>false</code> otherwise.\n",
		"body": [
			"cm:military_force_contains_unit_class_from_list(${1:military_force military force}, ${2:table unit class list})"
		],
	},
	"docgen:campaign_manager:force_from_general_cqi": {
		"scope": "lua",
		"prefix": "force_from_general_cqi",
		"description": "campaign_manager:force_from_general_cqi()\n-  -\n\nReturns the force whose commanding general has the passed cqi.\n",
		"body": [
			"force_from_general_cqi(${1:number general cqi})"
		],
	},
	"docgen:campaign_manager:campaign_manager:force_from_general_cqi": {
		"scope": "lua",
		"prefix": "campaign_manager:force_from_general_cqi",
		"description": "campaign_manager:force_from_general_cqi()\n-  -\n\nReturns the force whose commanding general has the passed cqi.\n",
		"body": [
			"campaign_manager:force_from_general_cqi(${1:number general cqi})"
		],
	},
	"docgen:campaign_manager:cm:force_from_general_cqi": {
		"scope": "lua",
		"prefix": "cm:force_from_general_cqi",
		"description": "campaign_manager:force_from_general_cqi()\n-  -\n\nReturns the force whose commanding general has the passed cqi.\n",
		"body": [
			"cm:force_from_general_cqi(${1:number general cqi})"
		],
	},
	"docgen:campaign_manager:force_gold_value": {
		"scope": "lua",
		"prefix": "force_gold_value",
		"description": "campaign_manager:force_gold_value()\n-  -\n\nReturns the gold value of all of the units in the force.\n",
		"body": [
			"force_gold_value(${1:number force cqi})"
		],
	},
	"docgen:campaign_manager:campaign_manager:force_gold_value": {
		"scope": "lua",
		"prefix": "campaign_manager:force_gold_value",
		"description": "campaign_manager:force_gold_value()\n-  -\n\nReturns the gold value of all of the units in the force.\n",
		"body": [
			"campaign_manager:force_gold_value(${1:number force cqi})"
		],
	},
	"docgen:campaign_manager:cm:force_gold_value": {
		"scope": "lua",
		"prefix": "cm:force_gold_value",
		"description": "campaign_manager:force_gold_value()\n-  -\n\nReturns the gold value of all of the units in the force.\n",
		"body": [
			"cm:force_gold_value(${1:number force cqi})"
		],
	},
	"docgen:campaign_manager:get_region": {
		"scope": "lua",
		"prefix": "get_region",
		"description": "campaign_manager:get_region()\n-  -\n\nReturns a region object with the supplied region name.\n",
		"body": [
			"get_region(${1:string region name})"
		],
	},
	"docgen:campaign_manager:campaign_manager:get_region": {
		"scope": "lua",
		"prefix": "campaign_manager:get_region",
		"description": "campaign_manager:get_region()\n-  -\n\nReturns a region object with the supplied region name.\n",
		"body": [
			"campaign_manager:get_region(${1:string region name})"
		],
	},
	"docgen:campaign_manager:cm:get_region": {
		"scope": "lua",
		"prefix": "cm:get_region",
		"description": "campaign_manager:get_region()\n-  -\n\nReturns a region object with the supplied region name.\n",
		"body": [
			"cm:get_region(${1:string region name})"
		],
	},
	"docgen:campaign_manager:is_region_owned_by_faction": {
		"scope": "lua",
		"prefix": "is_region_owned_by_faction",
		"description": "campaign_manager:is_region_owned_by_faction()\n-  -\n\nReturns a region object with the supplied region name.\n",
		"body": [
			"is_region_owned_by_faction(${1:string region name})"
		],
	},
	"docgen:campaign_manager:campaign_manager:is_region_owned_by_faction": {
		"scope": "lua",
		"prefix": "campaign_manager:is_region_owned_by_faction",
		"description": "campaign_manager:is_region_owned_by_faction()\n-  -\n\nReturns a region object with the supplied region name.\n",
		"body": [
			"campaign_manager:is_region_owned_by_faction(${1:string region name})"
		],
	},
	"docgen:campaign_manager:cm:is_region_owned_by_faction": {
		"scope": "lua",
		"prefix": "cm:is_region_owned_by_faction",
		"description": "campaign_manager:is_region_owned_by_faction()\n-  -\n\nReturns a region object with the supplied region name.\n",
		"body": [
			"cm:is_region_owned_by_faction(${1:string region name})"
		],
	},
	"docgen:campaign_manager:region_has_neighbours_of_other_religion": {
		"scope": "lua",
		"prefix": "region_has_neighbours_of_other_religion",
		"description": "campaign_manager:region_has_neighbours_of_other_religion()\n-  -\n\nReturns <code>true</code> if a specified region has any neighbouring regions with a different religion, <code>false</code> otherwise.\n",
		"body": [
			"region_has_neighbours_of_other_religion(${1:region subject region})"
		],
	},
	"docgen:campaign_manager:campaign_manager:region_has_neighbours_of_other_religion": {
		"scope": "lua",
		"prefix": "campaign_manager:region_has_neighbours_of_other_religion",
		"description": "campaign_manager:region_has_neighbours_of_other_religion()\n-  -\n\nReturns <code>true</code> if a specified region has any neighbouring regions with a different religion, <code>false</code> otherwise.\n",
		"body": [
			"campaign_manager:region_has_neighbours_of_other_religion(${1:region subject region})"
		],
	},
	"docgen:campaign_manager:cm:region_has_neighbours_of_other_religion": {
		"scope": "lua",
		"prefix": "cm:region_has_neighbours_of_other_religion",
		"description": "campaign_manager:region_has_neighbours_of_other_religion()\n-  -\n\nReturns <code>true</code> if a specified region has any neighbouring regions with a different religion, <code>false</code> otherwise.\n",
		"body": [
			"cm:region_has_neighbours_of_other_religion(${1:region subject region})"
		],
	},
	"docgen:campaign_manager:instantly_upgrade_building_in_region": {
		"scope": "lua",
		"prefix": "instantly_upgrade_building_in_region",
		"description": "campaign_manager:instantly_upgrade_building_in_region()\n-  -\n\nInstantly upgrades the building in the supplied slot to the supplied building key.\n",
		"body": [
			"instantly_upgrade_building_in_region(${1:SLOT_SCRIPT_INTERFACE slot}, ${2:string target building key})"
		],
	},
	"docgen:campaign_manager:campaign_manager:instantly_upgrade_building_in_region": {
		"scope": "lua",
		"prefix": "campaign_manager:instantly_upgrade_building_in_region",
		"description": "campaign_manager:instantly_upgrade_building_in_region()\n-  -\n\nInstantly upgrades the building in the supplied slot to the supplied building key.\n",
		"body": [
			"campaign_manager:instantly_upgrade_building_in_region(${1:SLOT_SCRIPT_INTERFACE slot}, ${2:string target building key})"
		],
	},
	"docgen:campaign_manager:cm:instantly_upgrade_building_in_region": {
		"scope": "lua",
		"prefix": "cm:instantly_upgrade_building_in_region",
		"description": "campaign_manager:instantly_upgrade_building_in_region()\n-  -\n\nInstantly upgrades the building in the supplied slot to the supplied building key.\n",
		"body": [
			"cm:instantly_upgrade_building_in_region(${1:SLOT_SCRIPT_INTERFACE slot}, ${2:string target building key})"
		],
	},
	"docgen:campaign_manager:instantly_dismantle_building_in_region": {
		"scope": "lua",
		"prefix": "instantly_dismantle_building_in_region",
		"description": "campaign_manager:instantly_dismantle_building_in_region()\n-  -\n\nInstantly dismantles the building in the supplied slot number of the supplied region.\n",
		"body": [
			"instantly_dismantle_building_in_region(${1:SLOT_SCRIPT_INTERFACE slot})"
		],
	},
	"docgen:campaign_manager:campaign_manager:instantly_dismantle_building_in_region": {
		"scope": "lua",
		"prefix": "campaign_manager:instantly_dismantle_building_in_region",
		"description": "campaign_manager:instantly_dismantle_building_in_region()\n-  -\n\nInstantly dismantles the building in the supplied slot number of the supplied region.\n",
		"body": [
			"campaign_manager:instantly_dismantle_building_in_region(${1:SLOT_SCRIPT_INTERFACE slot})"
		],
	},
	"docgen:campaign_manager:cm:instantly_dismantle_building_in_region": {
		"scope": "lua",
		"prefix": "cm:instantly_dismantle_building_in_region",
		"description": "campaign_manager:instantly_dismantle_building_in_region()\n-  -\n\nInstantly dismantles the building in the supplied slot number of the supplied region.\n",
		"body": [
			"cm:instantly_dismantle_building_in_region(${1:SLOT_SCRIPT_INTERFACE slot})"
		],
	},
	"docgen:campaign_manager:get_most_pious_region_for_faction_for_religion": {
		"scope": "lua",
		"prefix": "get_most_pious_region_for_faction_for_religion",
		"description": "campaign_manager:get_most_pious_region_for_faction_for_religion()\n-  -\n\nReturns the region held by a specified faction that has the highest proportion of a specified religion.\n",
		"body": [
			"get_most_pious_region_for_faction_for_religion(${1:faction subject faction}, ${2:string religion key})"
		],
	},
	"docgen:campaign_manager:campaign_manager:get_most_pious_region_for_faction_for_religion": {
		"scope": "lua",
		"prefix": "campaign_manager:get_most_pious_region_for_faction_for_religion",
		"description": "campaign_manager:get_most_pious_region_for_faction_for_religion()\n-  -\n\nReturns the region held by a specified faction that has the highest proportion of a specified religion.\n",
		"body": [
			"campaign_manager:get_most_pious_region_for_faction_for_religion(${1:faction subject faction}, ${2:string religion key})"
		],
	},
	"docgen:campaign_manager:cm:get_most_pious_region_for_faction_for_religion": {
		"scope": "lua",
		"prefix": "cm:get_most_pious_region_for_faction_for_religion",
		"description": "campaign_manager:get_most_pious_region_for_faction_for_religion()\n-  -\n\nReturns the region held by a specified faction that has the highest proportion of a specified religion.\n",
		"body": [
			"cm:get_most_pious_region_for_faction_for_religion(${1:faction subject faction}, ${2:string religion key})"
		],
	},
	"docgen:campaign_manager:create_storm_for_region": {
		"scope": "lua",
		"prefix": "create_storm_for_region",
		"description": "campaign_manager:create_storm_for_region()\n-  -\n\nCreates a storm of a given type in a given region.\n",
		"body": [
			"create_storm_for_region(${1:string region key}, ${2:number storm strength}, ${3:number duration}, ${4:string storm type})"
		],
	},
	"docgen:campaign_manager:campaign_manager:create_storm_for_region": {
		"scope": "lua",
		"prefix": "campaign_manager:create_storm_for_region",
		"description": "campaign_manager:create_storm_for_region()\n-  -\n\nCreates a storm of a given type in a given region.\n",
		"body": [
			"campaign_manager:create_storm_for_region(${1:string region key}, ${2:number storm strength}, ${3:number duration}, ${4:string storm type})"
		],
	},
	"docgen:campaign_manager:cm:create_storm_for_region": {
		"scope": "lua",
		"prefix": "cm:create_storm_for_region",
		"description": "campaign_manager:create_storm_for_region()\n-  -\n\nCreates a storm of a given type in a given region.\n",
		"body": [
			"cm:create_storm_for_region(${1:string region key}, ${2:number storm strength}, ${3:number duration}, ${4:string storm type})"
		],
	},
	"docgen:campaign_manager:settlement_display_pos": {
		"scope": "lua",
		"prefix": "settlement_display_pos",
		"description": "campaign_manager:settlement_display_pos()\n-  -\n\nReturns the display position of a supplied settlement by string name.\n",
		"body": [
			"settlement_display_pos(${1:string settlement name})"
		],
	},
	"docgen:campaign_manager:campaign_manager:settlement_display_pos": {
		"scope": "lua",
		"prefix": "campaign_manager:settlement_display_pos",
		"description": "campaign_manager:settlement_display_pos()\n-  -\n\nReturns the display position of a supplied settlement by string name.\n",
		"body": [
			"campaign_manager:settlement_display_pos(${1:string settlement name})"
		],
	},
	"docgen:campaign_manager:cm:settlement_display_pos": {
		"scope": "lua",
		"prefix": "cm:settlement_display_pos",
		"description": "campaign_manager:settlement_display_pos()\n-  -\n\nReturns the display position of a supplied settlement by string name.\n",
		"body": [
			"cm:settlement_display_pos(${1:string settlement name})"
		],
	},
	"docgen:campaign_manager:settlement_logical_pos": {
		"scope": "lua",
		"prefix": "settlement_logical_pos",
		"description": "campaign_manager:settlement_logical_pos()\n-  -\n\nReturns the logical position of a supplied settlement by string name.\n",
		"body": [
			"settlement_logical_pos(${1:string settlement name})"
		],
	},
	"docgen:campaign_manager:campaign_manager:settlement_logical_pos": {
		"scope": "lua",
		"prefix": "campaign_manager:settlement_logical_pos",
		"description": "campaign_manager:settlement_logical_pos()\n-  -\n\nReturns the logical position of a supplied settlement by string name.\n",
		"body": [
			"campaign_manager:settlement_logical_pos(${1:string settlement name})"
		],
	},
	"docgen:campaign_manager:cm:settlement_logical_pos": {
		"scope": "lua",
		"prefix": "cm:settlement_logical_pos",
		"description": "campaign_manager:settlement_logical_pos()\n-  -\n\nReturns the logical position of a supplied settlement by string name.\n",
		"body": [
			"cm:settlement_logical_pos(${1:string settlement name})"
		],
	},
	"docgen:campaign_manager:pending_battle_cache_num_attackers": {
		"scope": "lua",
		"prefix": "pending_battle_cache_num_attackers",
		"description": "campaign_manager:pending_battle_cache_num_attackers()\n-  -\n\nReturns the number of attacking armies in the cached pending battle.\n",
		"body": [
			"pending_battle_cache_num_attackers()"
		],
	},
	"docgen:campaign_manager:campaign_manager:pending_battle_cache_num_attackers": {
		"scope": "lua",
		"prefix": "campaign_manager:pending_battle_cache_num_attackers",
		"description": "campaign_manager:pending_battle_cache_num_attackers()\n-  -\n\nReturns the number of attacking armies in the cached pending battle.\n",
		"body": [
			"campaign_manager:pending_battle_cache_num_attackers()"
		],
	},
	"docgen:campaign_manager:cm:pending_battle_cache_num_attackers": {
		"scope": "lua",
		"prefix": "cm:pending_battle_cache_num_attackers",
		"description": "campaign_manager:pending_battle_cache_num_attackers()\n-  -\n\nReturns the number of attacking armies in the cached pending battle.\n",
		"body": [
			"cm:pending_battle_cache_num_attackers()"
		],
	},
	"docgen:campaign_manager:pending_battle_cache_get_attacker": {
		"scope": "lua",
		"prefix": "pending_battle_cache_get_attacker",
		"description": "campaign_manager:pending_battle_cache_get_attacker()\n-  -\n\nReturns records relating to a particular attacker in the cached pending battle.\n",
		"body": [
			"pending_battle_cache_get_attacker(${1:number index of attacker})"
		],
	},
	"docgen:campaign_manager:campaign_manager:pending_battle_cache_get_attacker": {
		"scope": "lua",
		"prefix": "campaign_manager:pending_battle_cache_get_attacker",
		"description": "campaign_manager:pending_battle_cache_get_attacker()\n-  -\n\nReturns records relating to a particular attacker in the cached pending battle.\n",
		"body": [
			"campaign_manager:pending_battle_cache_get_attacker(${1:number index of attacker})"
		],
	},
	"docgen:campaign_manager:cm:pending_battle_cache_get_attacker": {
		"scope": "lua",
		"prefix": "cm:pending_battle_cache_get_attacker",
		"description": "campaign_manager:pending_battle_cache_get_attacker()\n-  -\n\nReturns records relating to a particular attacker in the cached pending battle.\n",
		"body": [
			"cm:pending_battle_cache_get_attacker(${1:number index of attacker})"
		],
	},
	"docgen:campaign_manager:pending_battle_cache_get_attacker_faction_name": {
		"scope": "lua",
		"prefix": "pending_battle_cache_get_attacker_faction_name",
		"description": "campaign_manager:pending_battle_cache_get_attacker_faction_name()\n-  -\n\nReturns just the faction name of a particular attacker in the cached pending battle.\n",
		"body": [
			"pending_battle_cache_get_attacker_faction_name(${1:number index of attacker})"
		],
	},
	"docgen:campaign_manager:campaign_manager:pending_battle_cache_get_attacker_faction_name": {
		"scope": "lua",
		"prefix": "campaign_manager:pending_battle_cache_get_attacker_faction_name",
		"description": "campaign_manager:pending_battle_cache_get_attacker_faction_name()\n-  -\n\nReturns just the faction name of a particular attacker in the cached pending battle.\n",
		"body": [
			"campaign_manager:pending_battle_cache_get_attacker_faction_name(${1:number index of attacker})"
		],
	},
	"docgen:campaign_manager:cm:pending_battle_cache_get_attacker_faction_name": {
		"scope": "lua",
		"prefix": "cm:pending_battle_cache_get_attacker_faction_name",
		"description": "campaign_manager:pending_battle_cache_get_attacker_faction_name()\n-  -\n\nReturns just the faction name of a particular attacker in the cached pending battle.\n",
		"body": [
			"cm:pending_battle_cache_get_attacker_faction_name(${1:number index of attacker})"
		],
	},
	"docgen:campaign_manager:pending_battle_cache_num_defenders": {
		"scope": "lua",
		"prefix": "pending_battle_cache_num_defenders",
		"description": "campaign_manager:pending_battle_cache_num_defenders()\n-  -\n\nReturns the number of defending armies in the cached pending battle.\n",
		"body": [
			"pending_battle_cache_num_defenders()"
		],
	},
	"docgen:campaign_manager:campaign_manager:pending_battle_cache_num_defenders": {
		"scope": "lua",
		"prefix": "campaign_manager:pending_battle_cache_num_defenders",
		"description": "campaign_manager:pending_battle_cache_num_defenders()\n-  -\n\nReturns the number of defending armies in the cached pending battle.\n",
		"body": [
			"campaign_manager:pending_battle_cache_num_defenders()"
		],
	},
	"docgen:campaign_manager:cm:pending_battle_cache_num_defenders": {
		"scope": "lua",
		"prefix": "cm:pending_battle_cache_num_defenders",
		"description": "campaign_manager:pending_battle_cache_num_defenders()\n-  -\n\nReturns the number of defending armies in the cached pending battle.\n",
		"body": [
			"cm:pending_battle_cache_num_defenders()"
		],
	},
	"docgen:campaign_manager:pending_battle_cache_get_defender": {
		"scope": "lua",
		"prefix": "pending_battle_cache_get_defender",
		"description": "campaign_manager:pending_battle_cache_get_defender()\n-  -\n\nReturns records relating to a particular defender in the cached pending battle.\n",
		"body": [
			"pending_battle_cache_get_defender(${1:number index of defender})"
		],
	},
	"docgen:campaign_manager:campaign_manager:pending_battle_cache_get_defender": {
		"scope": "lua",
		"prefix": "campaign_manager:pending_battle_cache_get_defender",
		"description": "campaign_manager:pending_battle_cache_get_defender()\n-  -\n\nReturns records relating to a particular defender in the cached pending battle.\n",
		"body": [
			"campaign_manager:pending_battle_cache_get_defender(${1:number index of defender})"
		],
	},
	"docgen:campaign_manager:cm:pending_battle_cache_get_defender": {
		"scope": "lua",
		"prefix": "cm:pending_battle_cache_get_defender",
		"description": "campaign_manager:pending_battle_cache_get_defender()\n-  -\n\nReturns records relating to a particular defender in the cached pending battle.\n",
		"body": [
			"cm:pending_battle_cache_get_defender(${1:number index of defender})"
		],
	},
	"docgen:campaign_manager:pending_battle_cache_get_defender_faction_name": {
		"scope": "lua",
		"prefix": "pending_battle_cache_get_defender_faction_name",
		"description": "campaign_manager:pending_battle_cache_get_defender_faction_name()\n-  -\n\nReturns just the faction name of a particular defender in the cached pending battle.\n",
		"body": [
			"pending_battle_cache_get_defender_faction_name(${1:number index of defender})"
		],
	},
	"docgen:campaign_manager:campaign_manager:pending_battle_cache_get_defender_faction_name": {
		"scope": "lua",
		"prefix": "campaign_manager:pending_battle_cache_get_defender_faction_name",
		"description": "campaign_manager:pending_battle_cache_get_defender_faction_name()\n-  -\n\nReturns just the faction name of a particular defender in the cached pending battle.\n",
		"body": [
			"campaign_manager:pending_battle_cache_get_defender_faction_name(${1:number index of defender})"
		],
	},
	"docgen:campaign_manager:cm:pending_battle_cache_get_defender_faction_name": {
		"scope": "lua",
		"prefix": "cm:pending_battle_cache_get_defender_faction_name",
		"description": "campaign_manager:pending_battle_cache_get_defender_faction_name()\n-  -\n\nReturns just the faction name of a particular defender in the cached pending battle.\n",
		"body": [
			"cm:pending_battle_cache_get_defender_faction_name(${1:number index of defender})"
		],
	},
	"docgen:campaign_manager:pending_battle_cache_faction_is_attacker": {
		"scope": "lua",
		"prefix": "pending_battle_cache_faction_is_attacker",
		"description": "campaign_manager:pending_battle_cache_faction_is_attacker()\n-  -\n\nReturns <code>true</code> if the faction was an attacker (primary or reinforcing) in the cached pending battle.\n",
		"body": [
			"pending_battle_cache_faction_is_attacker(${1:string faction key})"
		],
	},
	"docgen:campaign_manager:campaign_manager:pending_battle_cache_faction_is_attacker": {
		"scope": "lua",
		"prefix": "campaign_manager:pending_battle_cache_faction_is_attacker",
		"description": "campaign_manager:pending_battle_cache_faction_is_attacker()\n-  -\n\nReturns <code>true</code> if the faction was an attacker (primary or reinforcing) in the cached pending battle.\n",
		"body": [
			"campaign_manager:pending_battle_cache_faction_is_attacker(${1:string faction key})"
		],
	},
	"docgen:campaign_manager:cm:pending_battle_cache_faction_is_attacker": {
		"scope": "lua",
		"prefix": "cm:pending_battle_cache_faction_is_attacker",
		"description": "campaign_manager:pending_battle_cache_faction_is_attacker()\n-  -\n\nReturns <code>true</code> if the faction was an attacker (primary or reinforcing) in the cached pending battle.\n",
		"body": [
			"cm:pending_battle_cache_faction_is_attacker(${1:string faction key})"
		],
	},
	"docgen:campaign_manager:pending_battle_cache_faction_is_defender": {
		"scope": "lua",
		"prefix": "pending_battle_cache_faction_is_defender",
		"description": "campaign_manager:pending_battle_cache_faction_is_defender()\n-  -\n\nReturns <code>true</code> if the faction was a defender (primary or reinforcing) in the cached pending battle.\n",
		"body": [
			"pending_battle_cache_faction_is_defender(${1:string faction key})"
		],
	},
	"docgen:campaign_manager:campaign_manager:pending_battle_cache_faction_is_defender": {
		"scope": "lua",
		"prefix": "campaign_manager:pending_battle_cache_faction_is_defender",
		"description": "campaign_manager:pending_battle_cache_faction_is_defender()\n-  -\n\nReturns <code>true</code> if the faction was a defender (primary or reinforcing) in the cached pending battle.\n",
		"body": [
			"campaign_manager:pending_battle_cache_faction_is_defender(${1:string faction key})"
		],
	},
	"docgen:campaign_manager:cm:pending_battle_cache_faction_is_defender": {
		"scope": "lua",
		"prefix": "cm:pending_battle_cache_faction_is_defender",
		"description": "campaign_manager:pending_battle_cache_faction_is_defender()\n-  -\n\nReturns <code>true</code> if the faction was a defender (primary or reinforcing) in the cached pending battle.\n",
		"body": [
			"cm:pending_battle_cache_faction_is_defender(${1:string faction key})"
		],
	},
	"docgen:campaign_manager:pending_battle_cache_faction_is_involved": {
		"scope": "lua",
		"prefix": "pending_battle_cache_faction_is_involved",
		"description": "campaign_manager:pending_battle_cache_faction_is_involved()\n-  -\n\nReturns <code>true</code> if the faction was involved in the cached pending battle as either attacker or defender.\n",
		"body": [
			"pending_battle_cache_faction_is_involved(${1:string faction key})"
		],
	},
	"docgen:campaign_manager:campaign_manager:pending_battle_cache_faction_is_involved": {
		"scope": "lua",
		"prefix": "campaign_manager:pending_battle_cache_faction_is_involved",
		"description": "campaign_manager:pending_battle_cache_faction_is_involved()\n-  -\n\nReturns <code>true</code> if the faction was involved in the cached pending battle as either attacker or defender.\n",
		"body": [
			"campaign_manager:pending_battle_cache_faction_is_involved(${1:string faction key})"
		],
	},
	"docgen:campaign_manager:cm:pending_battle_cache_faction_is_involved": {
		"scope": "lua",
		"prefix": "cm:pending_battle_cache_faction_is_involved",
		"description": "campaign_manager:pending_battle_cache_faction_is_involved()\n-  -\n\nReturns <code>true</code> if the faction was involved in the cached pending battle as either attacker or defender.\n",
		"body": [
			"cm:pending_battle_cache_faction_is_involved(${1:string faction key})"
		],
	},
	"docgen:campaign_manager:pending_battle_cache_human_is_attacker": {
		"scope": "lua",
		"prefix": "pending_battle_cache_human_is_attacker",
		"description": "campaign_manager:pending_battle_cache_human_is_attacker()\n-  -\n\nReturns <code>true</code> if any of the attacking factions involved in the cached pending battle were human controlled (whether local or not).\n",
		"body": [
			"pending_battle_cache_human_is_attacker()"
		],
	},
	"docgen:campaign_manager:campaign_manager:pending_battle_cache_human_is_attacker": {
		"scope": "lua",
		"prefix": "campaign_manager:pending_battle_cache_human_is_attacker",
		"description": "campaign_manager:pending_battle_cache_human_is_attacker()\n-  -\n\nReturns <code>true</code> if any of the attacking factions involved in the cached pending battle were human controlled (whether local or not).\n",
		"body": [
			"campaign_manager:pending_battle_cache_human_is_attacker()"
		],
	},
	"docgen:campaign_manager:cm:pending_battle_cache_human_is_attacker": {
		"scope": "lua",
		"prefix": "cm:pending_battle_cache_human_is_attacker",
		"description": "campaign_manager:pending_battle_cache_human_is_attacker()\n-  -\n\nReturns <code>true</code> if any of the attacking factions involved in the cached pending battle were human controlled (whether local or not).\n",
		"body": [
			"cm:pending_battle_cache_human_is_attacker()"
		],
	},
	"docgen:campaign_manager:pending_battle_cache_human_is_defender": {
		"scope": "lua",
		"prefix": "pending_battle_cache_human_is_defender",
		"description": "campaign_manager:pending_battle_cache_human_is_defender()\n-  -\n\nReturns <code>true</code> if any of the defending factions involved in the cached pending battle were human controlled (whether local or not).\n",
		"body": [
			"pending_battle_cache_human_is_defender()"
		],
	},
	"docgen:campaign_manager:campaign_manager:pending_battle_cache_human_is_defender": {
		"scope": "lua",
		"prefix": "campaign_manager:pending_battle_cache_human_is_defender",
		"description": "campaign_manager:pending_battle_cache_human_is_defender()\n-  -\n\nReturns <code>true</code> if any of the defending factions involved in the cached pending battle were human controlled (whether local or not).\n",
		"body": [
			"campaign_manager:pending_battle_cache_human_is_defender()"
		],
	},
	"docgen:campaign_manager:cm:pending_battle_cache_human_is_defender": {
		"scope": "lua",
		"prefix": "cm:pending_battle_cache_human_is_defender",
		"description": "campaign_manager:pending_battle_cache_human_is_defender()\n-  -\n\nReturns <code>true</code> if any of the defending factions involved in the cached pending battle were human controlled (whether local or not).\n",
		"body": [
			"cm:pending_battle_cache_human_is_defender()"
		],
	},
	"docgen:campaign_manager:pending_battle_cache_human_is_involved": {
		"scope": "lua",
		"prefix": "pending_battle_cache_human_is_involved",
		"description": "campaign_manager:pending_battle_cache_human_is_involved()\n-  -\n\nReturns <code>true</code> if any of the factions involved in the cached pending battle on either side were human controlled (whether local or not).\n",
		"body": [
			"pending_battle_cache_human_is_involved()"
		],
	},
	"docgen:campaign_manager:campaign_manager:pending_battle_cache_human_is_involved": {
		"scope": "lua",
		"prefix": "campaign_manager:pending_battle_cache_human_is_involved",
		"description": "campaign_manager:pending_battle_cache_human_is_involved()\n-  -\n\nReturns <code>true</code> if any of the factions involved in the cached pending battle on either side were human controlled (whether local or not).\n",
		"body": [
			"campaign_manager:pending_battle_cache_human_is_involved()"
		],
	},
	"docgen:campaign_manager:cm:pending_battle_cache_human_is_involved": {
		"scope": "lua",
		"prefix": "cm:pending_battle_cache_human_is_involved",
		"description": "campaign_manager:pending_battle_cache_human_is_involved()\n-  -\n\nReturns <code>true</code> if any of the factions involved in the cached pending battle on either side were human controlled (whether local or not).\n",
		"body": [
			"cm:pending_battle_cache_human_is_involved()"
		],
	},
	"docgen:campaign_manager:pending_battle_cache_culture_is_attacker": {
		"scope": "lua",
		"prefix": "pending_battle_cache_culture_is_attacker",
		"description": "campaign_manager:pending_battle_cache_culture_is_attacker()\n-  -\n\nReturns <code>true</code> if any of the attacking factions in the cached pending battle are of the supplied culture.\n",
		"body": [
			"pending_battle_cache_culture_is_attacker(${1:string culture key})"
		],
	},
	"docgen:campaign_manager:campaign_manager:pending_battle_cache_culture_is_attacker": {
		"scope": "lua",
		"prefix": "campaign_manager:pending_battle_cache_culture_is_attacker",
		"description": "campaign_manager:pending_battle_cache_culture_is_attacker()\n-  -\n\nReturns <code>true</code> if any of the attacking factions in the cached pending battle are of the supplied culture.\n",
		"body": [
			"campaign_manager:pending_battle_cache_culture_is_attacker(${1:string culture key})"
		],
	},
	"docgen:campaign_manager:cm:pending_battle_cache_culture_is_attacker": {
		"scope": "lua",
		"prefix": "cm:pending_battle_cache_culture_is_attacker",
		"description": "campaign_manager:pending_battle_cache_culture_is_attacker()\n-  -\n\nReturns <code>true</code> if any of the attacking factions in the cached pending battle are of the supplied culture.\n",
		"body": [
			"cm:pending_battle_cache_culture_is_attacker(${1:string culture key})"
		],
	},
	"docgen:campaign_manager:pending_battle_cache_culture_is_defender": {
		"scope": "lua",
		"prefix": "pending_battle_cache_culture_is_defender",
		"description": "campaign_manager:pending_battle_cache_culture_is_defender()\n-  -\n\nReturns <code>true</code> if any of the defending factions in the cached pending battle are of the supplied culture.\n",
		"body": [
			"pending_battle_cache_culture_is_defender(${1:string culture key})"
		],
	},
	"docgen:campaign_manager:campaign_manager:pending_battle_cache_culture_is_defender": {
		"scope": "lua",
		"prefix": "campaign_manager:pending_battle_cache_culture_is_defender",
		"description": "campaign_manager:pending_battle_cache_culture_is_defender()\n-  -\n\nReturns <code>true</code> if any of the defending factions in the cached pending battle are of the supplied culture.\n",
		"body": [
			"campaign_manager:pending_battle_cache_culture_is_defender(${1:string culture key})"
		],
	},
	"docgen:campaign_manager:cm:pending_battle_cache_culture_is_defender": {
		"scope": "lua",
		"prefix": "cm:pending_battle_cache_culture_is_defender",
		"description": "campaign_manager:pending_battle_cache_culture_is_defender()\n-  -\n\nReturns <code>true</code> if any of the defending factions in the cached pending battle are of the supplied culture.\n",
		"body": [
			"cm:pending_battle_cache_culture_is_defender(${1:string culture key})"
		],
	},
	"docgen:campaign_manager:pending_battle_cache_culture_is_involved": {
		"scope": "lua",
		"prefix": "pending_battle_cache_culture_is_involved",
		"description": "campaign_manager:pending_battle_cache_culture_is_involved()\n-  -\n\nReturns <code>true</code> if any of the factions involved in the cached pending battle on either side match the supplied culture.\n",
		"body": [
			"pending_battle_cache_culture_is_involved(${1:string culture key})"
		],
	},
	"docgen:campaign_manager:campaign_manager:pending_battle_cache_culture_is_involved": {
		"scope": "lua",
		"prefix": "campaign_manager:pending_battle_cache_culture_is_involved",
		"description": "campaign_manager:pending_battle_cache_culture_is_involved()\n-  -\n\nReturns <code>true</code> if any of the factions involved in the cached pending battle on either side match the supplied culture.\n",
		"body": [
			"campaign_manager:pending_battle_cache_culture_is_involved(${1:string culture key})"
		],
	},
	"docgen:campaign_manager:cm:pending_battle_cache_culture_is_involved": {
		"scope": "lua",
		"prefix": "cm:pending_battle_cache_culture_is_involved",
		"description": "campaign_manager:pending_battle_cache_culture_is_involved()\n-  -\n\nReturns <code>true</code> if any of the factions involved in the cached pending battle on either side match the supplied culture.\n",
		"body": [
			"cm:pending_battle_cache_culture_is_involved(${1:string culture key})"
		],
	},
	"docgen:campaign_manager:pending_battle_cache_subculture_is_attacker": {
		"scope": "lua",
		"prefix": "pending_battle_cache_subculture_is_attacker",
		"description": "campaign_manager:pending_battle_cache_subculture_is_attacker()\n-  -\n\nReturns <code>true</code> if any of the attacking factions in the cached pending battle are of the supplied subculture.\n",
		"body": [
			"pending_battle_cache_subculture_is_attacker(${1:string subculture key})"
		],
	},
	"docgen:campaign_manager:campaign_manager:pending_battle_cache_subculture_is_attacker": {
		"scope": "lua",
		"prefix": "campaign_manager:pending_battle_cache_subculture_is_attacker",
		"description": "campaign_manager:pending_battle_cache_subculture_is_attacker()\n-  -\n\nReturns <code>true</code> if any of the attacking factions in the cached pending battle are of the supplied subculture.\n",
		"body": [
			"campaign_manager:pending_battle_cache_subculture_is_attacker(${1:string subculture key})"
		],
	},
	"docgen:campaign_manager:cm:pending_battle_cache_subculture_is_attacker": {
		"scope": "lua",
		"prefix": "cm:pending_battle_cache_subculture_is_attacker",
		"description": "campaign_manager:pending_battle_cache_subculture_is_attacker()\n-  -\n\nReturns <code>true</code> if any of the attacking factions in the cached pending battle are of the supplied subculture.\n",
		"body": [
			"cm:pending_battle_cache_subculture_is_attacker(${1:string subculture key})"
		],
	},
	"docgen:campaign_manager:pending_battle_cache_subculture_is_defender": {
		"scope": "lua",
		"prefix": "pending_battle_cache_subculture_is_defender",
		"description": "campaign_manager:pending_battle_cache_subculture_is_defender()\n-  -\n\nReturns <code>true</code> if any of the defending factions in the cached pending battle are of the supplied subculture.\n",
		"body": [
			"pending_battle_cache_subculture_is_defender(${1:string subculture key})"
		],
	},
	"docgen:campaign_manager:campaign_manager:pending_battle_cache_subculture_is_defender": {
		"scope": "lua",
		"prefix": "campaign_manager:pending_battle_cache_subculture_is_defender",
		"description": "campaign_manager:pending_battle_cache_subculture_is_defender()\n-  -\n\nReturns <code>true</code> if any of the defending factions in the cached pending battle are of the supplied subculture.\n",
		"body": [
			"campaign_manager:pending_battle_cache_subculture_is_defender(${1:string subculture key})"
		],
	},
	"docgen:campaign_manager:cm:pending_battle_cache_subculture_is_defender": {
		"scope": "lua",
		"prefix": "cm:pending_battle_cache_subculture_is_defender",
		"description": "campaign_manager:pending_battle_cache_subculture_is_defender()\n-  -\n\nReturns <code>true</code> if any of the defending factions in the cached pending battle are of the supplied subculture.\n",
		"body": [
			"cm:pending_battle_cache_subculture_is_defender(${1:string subculture key})"
		],
	},
	"docgen:campaign_manager:pending_battle_cache_subculture_is_involved": {
		"scope": "lua",
		"prefix": "pending_battle_cache_subculture_is_involved",
		"description": "campaign_manager:pending_battle_cache_subculture_is_involved()\n-  -\n\nReturns <code>true</code> if any of the factions involved in the cached pending battle on either side match the supplied subculture.\n",
		"body": [
			"pending_battle_cache_subculture_is_involved(${1:string subculture key})"
		],
	},
	"docgen:campaign_manager:campaign_manager:pending_battle_cache_subculture_is_involved": {
		"scope": "lua",
		"prefix": "campaign_manager:pending_battle_cache_subculture_is_involved",
		"description": "campaign_manager:pending_battle_cache_subculture_is_involved()\n-  -\n\nReturns <code>true</code> if any of the factions involved in the cached pending battle on either side match the supplied subculture.\n",
		"body": [
			"campaign_manager:pending_battle_cache_subculture_is_involved(${1:string subculture key})"
		],
	},
	"docgen:campaign_manager:cm:pending_battle_cache_subculture_is_involved": {
		"scope": "lua",
		"prefix": "cm:pending_battle_cache_subculture_is_involved",
		"description": "campaign_manager:pending_battle_cache_subculture_is_involved()\n-  -\n\nReturns <code>true</code> if any of the factions involved in the cached pending battle on either side match the supplied subculture.\n",
		"body": [
			"cm:pending_battle_cache_subculture_is_involved(${1:string subculture key})"
		],
	},
	"docgen:campaign_manager:pending_battle_cache_char_is_attacker": {
		"scope": "lua",
		"prefix": "pending_battle_cache_char_is_attacker",
		"description": "campaign_manager:pending_battle_cache_char_is_attacker()\n-  -\n\nReturns <code>true</code> if the supplied character was an attacker in the cached pending battle.\n",
		"body": [
			"pending_battle_cache_char_is_attacker(${1:object character})"
		],
	},
	"docgen:campaign_manager:campaign_manager:pending_battle_cache_char_is_attacker": {
		"scope": "lua",
		"prefix": "campaign_manager:pending_battle_cache_char_is_attacker",
		"description": "campaign_manager:pending_battle_cache_char_is_attacker()\n-  -\n\nReturns <code>true</code> if the supplied character was an attacker in the cached pending battle.\n",
		"body": [
			"campaign_manager:pending_battle_cache_char_is_attacker(${1:object character})"
		],
	},
	"docgen:campaign_manager:cm:pending_battle_cache_char_is_attacker": {
		"scope": "lua",
		"prefix": "cm:pending_battle_cache_char_is_attacker",
		"description": "campaign_manager:pending_battle_cache_char_is_attacker()\n-  -\n\nReturns <code>true</code> if the supplied character was an attacker in the cached pending battle.\n",
		"body": [
			"cm:pending_battle_cache_char_is_attacker(${1:object character})"
		],
	},
	"docgen:campaign_manager:pending_battle_cache_char_is_defender": {
		"scope": "lua",
		"prefix": "pending_battle_cache_char_is_defender",
		"description": "campaign_manager:pending_battle_cache_char_is_defender()\n-  -\n\nReturns <code>true</code> if the supplied character was a defender in the cached pending battle.\n",
		"body": [
			"pending_battle_cache_char_is_defender(${1:object character})"
		],
	},
	"docgen:campaign_manager:campaign_manager:pending_battle_cache_char_is_defender": {
		"scope": "lua",
		"prefix": "campaign_manager:pending_battle_cache_char_is_defender",
		"description": "campaign_manager:pending_battle_cache_char_is_defender()\n-  -\n\nReturns <code>true</code> if the supplied character was a defender in the cached pending battle.\n",
		"body": [
			"campaign_manager:pending_battle_cache_char_is_defender(${1:object character})"
		],
	},
	"docgen:campaign_manager:cm:pending_battle_cache_char_is_defender": {
		"scope": "lua",
		"prefix": "cm:pending_battle_cache_char_is_defender",
		"description": "campaign_manager:pending_battle_cache_char_is_defender()\n-  -\n\nReturns <code>true</code> if the supplied character was a defender in the cached pending battle.\n",
		"body": [
			"cm:pending_battle_cache_char_is_defender(${1:object character})"
		],
	},
	"docgen:campaign_manager:pending_battle_cache_char_is_involved": {
		"scope": "lua",
		"prefix": "pending_battle_cache_char_is_involved",
		"description": "campaign_manager:pending_battle_cache_char_is_involved()\n-  -\n\nReturns <code>true</code> if the supplied character was an attacker or defender in the cached pending battle.\n",
		"body": [
			"pending_battle_cache_char_is_involved(${1:object character})"
		],
	},
	"docgen:campaign_manager:campaign_manager:pending_battle_cache_char_is_involved": {
		"scope": "lua",
		"prefix": "campaign_manager:pending_battle_cache_char_is_involved",
		"description": "campaign_manager:pending_battle_cache_char_is_involved()\n-  -\n\nReturns <code>true</code> if the supplied character was an attacker or defender in the cached pending battle.\n",
		"body": [
			"campaign_manager:pending_battle_cache_char_is_involved(${1:object character})"
		],
	},
	"docgen:campaign_manager:cm:pending_battle_cache_char_is_involved": {
		"scope": "lua",
		"prefix": "cm:pending_battle_cache_char_is_involved",
		"description": "campaign_manager:pending_battle_cache_char_is_involved()\n-  -\n\nReturns <code>true</code> if the supplied character was an attacker or defender in the cached pending battle.\n",
		"body": [
			"cm:pending_battle_cache_char_is_involved(${1:object character})"
		],
	},
	"docgen:campaign_manager:pending_battle_cache_mf_is_attacker": {
		"scope": "lua",
		"prefix": "pending_battle_cache_mf_is_attacker",
		"description": "campaign_manager:pending_battle_cache_mf_is_attacker()\n-  -\n\nReturns <code>true</code> if the supplied military force was an attacker in the cached pending battle.\n",
		"body": [
			"pending_battle_cache_mf_is_attacker(${1:number cqi})"
		],
	},
	"docgen:campaign_manager:campaign_manager:pending_battle_cache_mf_is_attacker": {
		"scope": "lua",
		"prefix": "campaign_manager:pending_battle_cache_mf_is_attacker",
		"description": "campaign_manager:pending_battle_cache_mf_is_attacker()\n-  -\n\nReturns <code>true</code> if the supplied military force was an attacker in the cached pending battle.\n",
		"body": [
			"campaign_manager:pending_battle_cache_mf_is_attacker(${1:number cqi})"
		],
	},
	"docgen:campaign_manager:cm:pending_battle_cache_mf_is_attacker": {
		"scope": "lua",
		"prefix": "cm:pending_battle_cache_mf_is_attacker",
		"description": "campaign_manager:pending_battle_cache_mf_is_attacker()\n-  -\n\nReturns <code>true</code> if the supplied military force was an attacker in the cached pending battle.\n",
		"body": [
			"cm:pending_battle_cache_mf_is_attacker(${1:number cqi})"
		],
	},
	"docgen:campaign_manager:pending_battle_cache_mf_is_defender": {
		"scope": "lua",
		"prefix": "pending_battle_cache_mf_is_defender",
		"description": "campaign_manager:pending_battle_cache_mf_is_defender()\n-  -\n\nReturns <code>true</code> if the supplied military force was a defender in the cached pending battle.\n",
		"body": [
			"pending_battle_cache_mf_is_defender(${1:number cqi})"
		],
	},
	"docgen:campaign_manager:campaign_manager:pending_battle_cache_mf_is_defender": {
		"scope": "lua",
		"prefix": "campaign_manager:pending_battle_cache_mf_is_defender",
		"description": "campaign_manager:pending_battle_cache_mf_is_defender()\n-  -\n\nReturns <code>true</code> if the supplied military force was a defender in the cached pending battle.\n",
		"body": [
			"campaign_manager:pending_battle_cache_mf_is_defender(${1:number cqi})"
		],
	},
	"docgen:campaign_manager:cm:pending_battle_cache_mf_is_defender": {
		"scope": "lua",
		"prefix": "cm:pending_battle_cache_mf_is_defender",
		"description": "campaign_manager:pending_battle_cache_mf_is_defender()\n-  -\n\nReturns <code>true</code> if the supplied military force was a defender in the cached pending battle.\n",
		"body": [
			"cm:pending_battle_cache_mf_is_defender(${1:number cqi})"
		],
	},
	"docgen:campaign_manager:pending_battle_cache_mf_is_involved": {
		"scope": "lua",
		"prefix": "pending_battle_cache_mf_is_involved",
		"description": "campaign_manager:pending_battle_cache_mf_is_involved()\n-  -\n\nReturns <code>true</code> if the supplied military force was an attacker or defender in the cached pending battle.\n",
		"body": [
			"pending_battle_cache_mf_is_involved(${1:number cqi})"
		],
	},
	"docgen:campaign_manager:campaign_manager:pending_battle_cache_mf_is_involved": {
		"scope": "lua",
		"prefix": "campaign_manager:pending_battle_cache_mf_is_involved",
		"description": "campaign_manager:pending_battle_cache_mf_is_involved()\n-  -\n\nReturns <code>true</code> if the supplied military force was an attacker or defender in the cached pending battle.\n",
		"body": [
			"campaign_manager:pending_battle_cache_mf_is_involved(${1:number cqi})"
		],
	},
	"docgen:campaign_manager:cm:pending_battle_cache_mf_is_involved": {
		"scope": "lua",
		"prefix": "cm:pending_battle_cache_mf_is_involved",
		"description": "campaign_manager:pending_battle_cache_mf_is_involved()\n-  -\n\nReturns <code>true</code> if the supplied military force was an attacker or defender in the cached pending battle.\n",
		"body": [
			"cm:pending_battle_cache_mf_is_involved(${1:number cqi})"
		],
	},
	"docgen:campaign_manager:pending_battle_cache_get_enemies_of_char": {
		"scope": "lua",
		"prefix": "pending_battle_cache_get_enemies_of_char",
		"description": "campaign_manager:pending_battle_cache_get_enemies_of_char()\n-  -\n\nReturns a numerically indexed table of character objects, each representing an enemy character of the supplied character in the cached pending battle.\n",
		"body": [
			"pending_battle_cache_get_enemies_of_char(${1:character character to query})"
		],
	},
	"docgen:campaign_manager:campaign_manager:pending_battle_cache_get_enemies_of_char": {
		"scope": "lua",
		"prefix": "campaign_manager:pending_battle_cache_get_enemies_of_char",
		"description": "campaign_manager:pending_battle_cache_get_enemies_of_char()\n-  -\n\nReturns a numerically indexed table of character objects, each representing an enemy character of the supplied character in the cached pending battle.\n",
		"body": [
			"campaign_manager:pending_battle_cache_get_enemies_of_char(${1:character character to query})"
		],
	},
	"docgen:campaign_manager:cm:pending_battle_cache_get_enemies_of_char": {
		"scope": "lua",
		"prefix": "cm:pending_battle_cache_get_enemies_of_char",
		"description": "campaign_manager:pending_battle_cache_get_enemies_of_char()\n-  -\n\nReturns a numerically indexed table of character objects, each representing an enemy character of the supplied character in the cached pending battle.\n",
		"body": [
			"cm:pending_battle_cache_get_enemies_of_char(${1:character character to query})"
		],
	},
	"docgen:campaign_manager:pending_battle_cache_is_quest_battle": {
		"scope": "lua",
		"prefix": "pending_battle_cache_is_quest_battle",
		"description": "campaign_manager:pending_battle_cache_is_quest_battle()\n-  -\n\nReturns <code>true</code> if any of the participating factions in the pending battle are quest battle factions, <code>false</code> otherwise.\n",
		"body": [
			"pending_battle_cache_is_quest_battle()"
		],
	},
	"docgen:campaign_manager:campaign_manager:pending_battle_cache_is_quest_battle": {
		"scope": "lua",
		"prefix": "campaign_manager:pending_battle_cache_is_quest_battle",
		"description": "campaign_manager:pending_battle_cache_is_quest_battle()\n-  -\n\nReturns <code>true</code> if any of the participating factions in the pending battle are quest battle factions, <code>false</code> otherwise.\n",
		"body": [
			"campaign_manager:pending_battle_cache_is_quest_battle()"
		],
	},
	"docgen:campaign_manager:cm:pending_battle_cache_is_quest_battle": {
		"scope": "lua",
		"prefix": "cm:pending_battle_cache_is_quest_battle",
		"description": "campaign_manager:pending_battle_cache_is_quest_battle()\n-  -\n\nReturns <code>true</code> if any of the participating factions in the pending battle are quest battle factions, <code>false</code> otherwise.\n",
		"body": [
			"cm:pending_battle_cache_is_quest_battle()"
		],
	},
	"docgen:campaign_manager:pending_battle_cache_attacker_victory": {
		"scope": "lua",
		"prefix": "pending_battle_cache_attacker_victory",
		"description": "campaign_manager:pending_battle_cache_attacker_victory()\n-  -\n\nReturns <code>true</code> if the pending battle has been won by the attacker, <code>false</code> otherwise.\n",
		"body": [
			"pending_battle_cache_attacker_victory()"
		],
	},
	"docgen:campaign_manager:campaign_manager:pending_battle_cache_attacker_victory": {
		"scope": "lua",
		"prefix": "campaign_manager:pending_battle_cache_attacker_victory",
		"description": "campaign_manager:pending_battle_cache_attacker_victory()\n-  -\n\nReturns <code>true</code> if the pending battle has been won by the attacker, <code>false</code> otherwise.\n",
		"body": [
			"campaign_manager:pending_battle_cache_attacker_victory()"
		],
	},
	"docgen:campaign_manager:cm:pending_battle_cache_attacker_victory": {
		"scope": "lua",
		"prefix": "cm:pending_battle_cache_attacker_victory",
		"description": "campaign_manager:pending_battle_cache_attacker_victory()\n-  -\n\nReturns <code>true</code> if the pending battle has been won by the attacker, <code>false</code> otherwise.\n",
		"body": [
			"cm:pending_battle_cache_attacker_victory()"
		],
	},
	"docgen:campaign_manager:pending_battle_cache_defender_victory": {
		"scope": "lua",
		"prefix": "pending_battle_cache_defender_victory",
		"description": "campaign_manager:pending_battle_cache_defender_victory()\n-  -\n\nReturns <code>true</code> if the pending battle has been won by the defender, <code>false</code> otherwise.\n",
		"body": [
			"pending_battle_cache_defender_victory()"
		],
	},
	"docgen:campaign_manager:campaign_manager:pending_battle_cache_defender_victory": {
		"scope": "lua",
		"prefix": "campaign_manager:pending_battle_cache_defender_victory",
		"description": "campaign_manager:pending_battle_cache_defender_victory()\n-  -\n\nReturns <code>true</code> if the pending battle has been won by the defender, <code>false</code> otherwise.\n",
		"body": [
			"campaign_manager:pending_battle_cache_defender_victory()"
		],
	},
	"docgen:campaign_manager:cm:pending_battle_cache_defender_victory": {
		"scope": "lua",
		"prefix": "cm:pending_battle_cache_defender_victory",
		"description": "campaign_manager:pending_battle_cache_defender_victory()\n-  -\n\nReturns <code>true</code> if the pending battle has been won by the defender, <code>false</code> otherwise.\n",
		"body": [
			"cm:pending_battle_cache_defender_victory()"
		],
	},
	"docgen:campaign_manager:pending_battle_cache_attacker_value": {
		"scope": "lua",
		"prefix": "pending_battle_cache_attacker_value",
		"description": "campaign_manager:pending_battle_cache_attacker_value()\n-  -\n\nReturns the gold value of attacking forces in the cached pending battle.\n",
		"body": [
			"pending_battle_cache_attacker_value()"
		],
	},
	"docgen:campaign_manager:campaign_manager:pending_battle_cache_attacker_value": {
		"scope": "lua",
		"prefix": "campaign_manager:pending_battle_cache_attacker_value",
		"description": "campaign_manager:pending_battle_cache_attacker_value()\n-  -\n\nReturns the gold value of attacking forces in the cached pending battle.\n",
		"body": [
			"campaign_manager:pending_battle_cache_attacker_value()"
		],
	},
	"docgen:campaign_manager:cm:pending_battle_cache_attacker_value": {
		"scope": "lua",
		"prefix": "cm:pending_battle_cache_attacker_value",
		"description": "campaign_manager:pending_battle_cache_attacker_value()\n-  -\n\nReturns the gold value of attacking forces in the cached pending battle.\n",
		"body": [
			"cm:pending_battle_cache_attacker_value()"
		],
	},
	"docgen:campaign_manager:pending_battle_cache_defender_value": {
		"scope": "lua",
		"prefix": "pending_battle_cache_defender_value",
		"description": "campaign_manager:pending_battle_cache_defender_value()\n-  -\n\nReturns the gold value of defending forces in the cached pending battle.\n",
		"body": [
			"pending_battle_cache_defender_value()"
		],
	},
	"docgen:campaign_manager:campaign_manager:pending_battle_cache_defender_value": {
		"scope": "lua",
		"prefix": "campaign_manager:pending_battle_cache_defender_value",
		"description": "campaign_manager:pending_battle_cache_defender_value()\n-  -\n\nReturns the gold value of defending forces in the cached pending battle.\n",
		"body": [
			"campaign_manager:pending_battle_cache_defender_value()"
		],
	},
	"docgen:campaign_manager:cm:pending_battle_cache_defender_value": {
		"scope": "lua",
		"prefix": "cm:pending_battle_cache_defender_value",
		"description": "campaign_manager:pending_battle_cache_defender_value()\n-  -\n\nReturns the gold value of defending forces in the cached pending battle.\n",
		"body": [
			"cm:pending_battle_cache_defender_value()"
		],
	},
	"docgen:campaign_manager:random_number": {
		"scope": "lua",
		"prefix": "random_number",
		"description": "campaign_manager:random_number()\n-  -\n\nAssembles and returns a random integer between 1 and 100, or other supplied values.\n",
		"body": [
			"random_number(${1:[opt=100] integer max}, ${2:[opt=1] integer min})"
		],
	},
	"docgen:campaign_manager:campaign_manager:random_number": {
		"scope": "lua",
		"prefix": "campaign_manager:random_number",
		"description": "campaign_manager:random_number()\n-  -\n\nAssembles and returns a random integer between 1 and 100, or other supplied values.\n",
		"body": [
			"campaign_manager:random_number(${1:[opt=100] integer max}, ${2:[opt=1] integer min})"
		],
	},
	"docgen:campaign_manager:cm:random_number": {
		"scope": "lua",
		"prefix": "cm:random_number",
		"description": "campaign_manager:random_number()\n-  -\n\nAssembles and returns a random integer between 1 and 100, or other supplied values.\n",
		"body": [
			"cm:random_number(${1:[opt=100] integer max}, ${2:[opt=1] integer min})"
		],
	},
	"docgen:campaign_manager:random_sort": {
		"scope": "lua",
		"prefix": "random_sort",
		"description": "campaign_manager:random_sort()\n-  -\n\nRandomly sorts a numerically-indexed table.\n",
		"body": [
			"random_sort(${1:table numerically-indexed table})"
		],
	},
	"docgen:campaign_manager:campaign_manager:random_sort": {
		"scope": "lua",
		"prefix": "campaign_manager:random_sort",
		"description": "campaign_manager:random_sort()\n-  -\n\nRandomly sorts a numerically-indexed table.\n",
		"body": [
			"campaign_manager:random_sort(${1:table numerically-indexed table})"
		],
	},
	"docgen:campaign_manager:cm:random_sort": {
		"scope": "lua",
		"prefix": "cm:random_sort",
		"description": "campaign_manager:random_sort()\n-  -\n\nRandomly sorts a numerically-indexed table.\n",
		"body": [
			"cm:random_sort(${1:table numerically-indexed table})"
		],
	},
	"docgen:campaign_manager:random_sort_copy": {
		"scope": "lua",
		"prefix": "random_sort_copy",
		"description": "campaign_manager:random_sort_copy()\n-  -\n\nRandomly sorts a numerically-indexed table.\n",
		"body": [
			"random_sort_copy(${1:table numerically-indexed table})"
		],
	},
	"docgen:campaign_manager:campaign_manager:random_sort_copy": {
		"scope": "lua",
		"prefix": "campaign_manager:random_sort_copy",
		"description": "campaign_manager:random_sort_copy()\n-  -\n\nRandomly sorts a numerically-indexed table.\n",
		"body": [
			"campaign_manager:random_sort_copy(${1:table numerically-indexed table})"
		],
	},
	"docgen:campaign_manager:cm:random_sort_copy": {
		"scope": "lua",
		"prefix": "cm:random_sort_copy",
		"description": "campaign_manager:random_sort_copy()\n-  -\n\nRandomly sorts a numerically-indexed table.\n",
		"body": [
			"cm:random_sort_copy(${1:table numerically-indexed table})"
		],
	},
	"docgen:campaign_manager:shuffle_table": {
		"scope": "lua",
		"prefix": "shuffle_table",
		"description": "campaign_manager:shuffle_table()\n-  -\n\nRandomly shuffles a table with an implementation of the Fisher-Yates shuffle.\n",
		"body": [
			"shuffle_table(${1:table table})"
		],
	},
	"docgen:campaign_manager:campaign_manager:shuffle_table": {
		"scope": "lua",
		"prefix": "campaign_manager:shuffle_table",
		"description": "campaign_manager:shuffle_table()\n-  -\n\nRandomly shuffles a table with an implementation of the Fisher-Yates shuffle.\n",
		"body": [
			"campaign_manager:shuffle_table(${1:table table})"
		],
	},
	"docgen:campaign_manager:cm:shuffle_table": {
		"scope": "lua",
		"prefix": "cm:shuffle_table",
		"description": "campaign_manager:shuffle_table()\n-  -\n\nRandomly shuffles a table with an implementation of the Fisher-Yates shuffle.\n",
		"body": [
			"cm:shuffle_table(${1:table table})"
		],
	},
	"docgen:campaign_manager:get_campaign_ui_manager": {
		"scope": "lua",
		"prefix": "get_campaign_ui_manager",
		"description": "campaign_manager:get_campaign_ui_manager()\n-  -\n\nGets a handle to the campaign_ui_manager (or creates it).\n",
		"body": [
			"get_campaign_ui_manager()"
		],
	},
	"docgen:campaign_manager:campaign_manager:get_campaign_ui_manager": {
		"scope": "lua",
		"prefix": "campaign_manager:get_campaign_ui_manager",
		"description": "campaign_manager:get_campaign_ui_manager()\n-  -\n\nGets a handle to the campaign_ui_manager (or creates it).\n",
		"body": [
			"campaign_manager:get_campaign_ui_manager()"
		],
	},
	"docgen:campaign_manager:cm:get_campaign_ui_manager": {
		"scope": "lua",
		"prefix": "cm:get_campaign_ui_manager",
		"description": "campaign_manager:get_campaign_ui_manager()\n-  -\n\nGets a handle to the campaign_ui_manager (or creates it).\n",
		"body": [
			"cm:get_campaign_ui_manager()"
		],
	},
	"docgen:campaign_manager:highlight_event_dismiss_button": {
		"scope": "lua",
		"prefix": "highlight_event_dismiss_button",
		"description": "campaign_manager:highlight_event_dismiss_button()\n-  -\n\nActivates or deactivates a highlight on the event panel dismiss button.\n",
		"body": [
			"highlight_event_dismiss_button(${1:[opt=true] boolean should highlight})"
		],
	},
	"docgen:campaign_manager:campaign_manager:highlight_event_dismiss_button": {
		"scope": "lua",
		"prefix": "campaign_manager:highlight_event_dismiss_button",
		"description": "campaign_manager:highlight_event_dismiss_button()\n-  -\n\nActivates or deactivates a highlight on the event panel dismiss button.\n",
		"body": [
			"campaign_manager:highlight_event_dismiss_button(${1:[opt=true] boolean should highlight})"
		],
	},
	"docgen:campaign_manager:cm:highlight_event_dismiss_button": {
		"scope": "lua",
		"prefix": "cm:highlight_event_dismiss_button",
		"description": "campaign_manager:highlight_event_dismiss_button()\n-  -\n\nActivates or deactivates a highlight on the event panel dismiss button.\n",
		"body": [
			"cm:highlight_event_dismiss_button(${1:[opt=true] boolean should highlight})"
		],
	},
	"docgen:campaign_manager:quit": {
		"scope": "lua",
		"prefix": "quit",
		"description": "campaign_manager:quit()\n-  -\n\nImmediately exits to the frontend.\n",
		"body": [
			"quit()"
		],
	},
	"docgen:campaign_manager:campaign_manager:quit": {
		"scope": "lua",
		"prefix": "campaign_manager:quit",
		"description": "campaign_manager:quit()\n-  -\n\nImmediately exits to the frontend.\n",
		"body": [
			"campaign_manager:quit()"
		],
	},
	"docgen:campaign_manager:cm:quit": {
		"scope": "lua",
		"prefix": "cm:quit",
		"description": "campaign_manager:quit()\n-  -\n\nImmediately exits to the frontend.\n",
		"body": [
			"cm:quit()"
		],
	},
	"docgen:campaign_manager:enable_ui_hiding": {
		"scope": "lua",
		"prefix": "enable_ui_hiding",
		"description": "campaign_manager:enable_ui_hiding()\n-  -\n\nEnables or disables the ability of the player to hide the UI.\n",
		"body": [
			"enable_ui_hiding(${1:[opt=true] boolean enable hiding})"
		],
	},
	"docgen:campaign_manager:campaign_manager:enable_ui_hiding": {
		"scope": "lua",
		"prefix": "campaign_manager:enable_ui_hiding",
		"description": "campaign_manager:enable_ui_hiding()\n-  -\n\nEnables or disables the ability of the player to hide the UI.\n",
		"body": [
			"campaign_manager:enable_ui_hiding(${1:[opt=true] boolean enable hiding})"
		],
	},
	"docgen:campaign_manager:cm:enable_ui_hiding": {
		"scope": "lua",
		"prefix": "cm:enable_ui_hiding",
		"description": "campaign_manager:enable_ui_hiding()\n-  -\n\nEnables or disables the ability of the player to hide the UI.\n",
		"body": [
			"cm:enable_ui_hiding(${1:[opt=true] boolean enable hiding})"
		],
	},
	"docgen:campaign_manager:is_ui_hiding_enabled": {
		"scope": "lua",
		"prefix": "is_ui_hiding_enabled",
		"description": "campaign_manager:is_ui_hiding_enabled()\n-  -\n\nReturns <code>false</code> if ui hiding has been disabled with campaign_manager:enable_ui_hiding, <code>true</code> otherwise.\n",
		"body": [
			"is_ui_hiding_enabled()"
		],
	},
	"docgen:campaign_manager:campaign_manager:is_ui_hiding_enabled": {
		"scope": "lua",
		"prefix": "campaign_manager:is_ui_hiding_enabled",
		"description": "campaign_manager:is_ui_hiding_enabled()\n-  -\n\nReturns <code>false</code> if ui hiding has been disabled with campaign_manager:enable_ui_hiding, <code>true</code> otherwise.\n",
		"body": [
			"campaign_manager:is_ui_hiding_enabled()"
		],
	},
	"docgen:campaign_manager:cm:is_ui_hiding_enabled": {
		"scope": "lua",
		"prefix": "cm:is_ui_hiding_enabled",
		"description": "campaign_manager:is_ui_hiding_enabled()\n-  -\n\nReturns <code>false</code> if ui hiding has been disabled with campaign_manager:enable_ui_hiding, <code>true</code> otherwise.\n",
		"body": [
			"cm:is_ui_hiding_enabled()"
		],
	},
	"docgen:campaign_manager:scroll_camera_with_direction": {
		"scope": "lua",
		"prefix": "scroll_camera_with_direction",
		"description": "campaign_manager:scroll_camera_with_direction()\n-  -\n\nOverride function for scroll_camera_wiht_direction that provides output.\n",
		"body": [
			"scroll_camera_with_direction(${1:boolean correct endpoint}, ${2:number time}, ${3:... positions})"
		],
	},
	"docgen:campaign_manager:campaign_manager:scroll_camera_with_direction": {
		"scope": "lua",
		"prefix": "campaign_manager:scroll_camera_with_direction",
		"description": "campaign_manager:scroll_camera_with_direction()\n-  -\n\nOverride function for scroll_camera_wiht_direction that provides output.\n",
		"body": [
			"campaign_manager:scroll_camera_with_direction(${1:boolean correct endpoint}, ${2:number time}, ${3:... positions})"
		],
	},
	"docgen:campaign_manager:cm:scroll_camera_with_direction": {
		"scope": "lua",
		"prefix": "cm:scroll_camera_with_direction",
		"description": "campaign_manager:scroll_camera_with_direction()\n-  -\n\nOverride function for scroll_camera_wiht_direction that provides output.\n",
		"body": [
			"cm:scroll_camera_with_direction(${1:boolean correct endpoint}, ${2:number time}, ${3:... positions})"
		],
	},
	"docgen:campaign_manager:scroll_camera_from_current": {
		"scope": "lua",
		"prefix": "scroll_camera_from_current",
		"description": "campaign_manager:scroll_camera_from_current()\n-  -\n\nScrolls the camera from the current camera position.\n",
		"body": [
			"scroll_camera_from_current(${1:boolean correct endpoint}, ${2:number time}, ${3:... positions})"
		],
	},
	"docgen:campaign_manager:campaign_manager:scroll_camera_from_current": {
		"scope": "lua",
		"prefix": "campaign_manager:scroll_camera_from_current",
		"description": "campaign_manager:scroll_camera_from_current()\n-  -\n\nScrolls the camera from the current camera position.\n",
		"body": [
			"campaign_manager:scroll_camera_from_current(${1:boolean correct endpoint}, ${2:number time}, ${3:... positions})"
		],
	},
	"docgen:campaign_manager:cm:scroll_camera_from_current": {
		"scope": "lua",
		"prefix": "cm:scroll_camera_from_current",
		"description": "campaign_manager:scroll_camera_from_current()\n-  -\n\nScrolls the camera from the current camera position.\n",
		"body": [
			"cm:scroll_camera_from_current(${1:boolean correct endpoint}, ${2:number time}, ${3:... positions})"
		],
	},
	"docgen:campaign_manager:scroll_camera_with_cutscene": {
		"scope": "lua",
		"prefix": "scroll_camera_with_cutscene",
		"description": "campaign_manager:scroll_camera_with_cutscene()\n-  -\n\nScrolls the camera from the current camera position in a cutscene.\n",
		"body": [
			"scroll_camera_with_cutscene(${1:number time}, ${2:[opt=nil] function callback}, ${3:... positions})"
		],
	},
	"docgen:campaign_manager:campaign_manager:scroll_camera_with_cutscene": {
		"scope": "lua",
		"prefix": "campaign_manager:scroll_camera_with_cutscene",
		"description": "campaign_manager:scroll_camera_with_cutscene()\n-  -\n\nScrolls the camera from the current camera position in a cutscene.\n",
		"body": [
			"campaign_manager:scroll_camera_with_cutscene(${1:number time}, ${2:[opt=nil] function callback}, ${3:... positions})"
		],
	},
	"docgen:campaign_manager:cm:scroll_camera_with_cutscene": {
		"scope": "lua",
		"prefix": "cm:scroll_camera_with_cutscene",
		"description": "campaign_manager:scroll_camera_with_cutscene()\n-  -\n\nScrolls the camera from the current camera position in a cutscene.\n",
		"body": [
			"cm:scroll_camera_with_cutscene(${1:number time}, ${2:[opt=nil] function callback}, ${3:... positions})"
		],
	},
	"docgen:campaign_manager:cut_and_scroll_camera_with_cutscene": {
		"scope": "lua",
		"prefix": "cut_and_scroll_camera_with_cutscene",
		"description": "campaign_manager:cut_and_scroll_camera_with_cutscene()\n-  -\n\nScrolls the camera through the supplied list of camera points in a cutscene.\n",
		"body": [
			"cut_and_scroll_camera_with_cutscene(${1:number time}, ${2:[opt=nil] function callback}, ${3:... positions. One or more camera positions must be supplied. Each position should be a table with five number components})"
		],
	},
	"docgen:campaign_manager:campaign_manager:cut_and_scroll_camera_with_cutscene": {
		"scope": "lua",
		"prefix": "campaign_manager:cut_and_scroll_camera_with_cutscene",
		"description": "campaign_manager:cut_and_scroll_camera_with_cutscene()\n-  -\n\nScrolls the camera through the supplied list of camera points in a cutscene.\n",
		"body": [
			"campaign_manager:cut_and_scroll_camera_with_cutscene(${1:number time}, ${2:[opt=nil] function callback}, ${3:... positions. One or more camera positions must be supplied. Each position should be a table with five number components})"
		],
	},
	"docgen:campaign_manager:cm:cut_and_scroll_camera_with_cutscene": {
		"scope": "lua",
		"prefix": "cm:cut_and_scroll_camera_with_cutscene",
		"description": "campaign_manager:cut_and_scroll_camera_with_cutscene()\n-  -\n\nScrolls the camera through the supplied list of camera points in a cutscene.\n",
		"body": [
			"cm:cut_and_scroll_camera_with_cutscene(${1:number time}, ${2:[opt=nil] function callback}, ${3:... positions. One or more camera positions must be supplied. Each position should be a table with five number components})"
		],
	},
	"docgen:campaign_manager:scroll_camera_with_cutscene_to_settlement": {
		"scope": "lua",
		"prefix": "scroll_camera_with_cutscene_to_settlement",
		"description": "campaign_manager:scroll_camera_with_cutscene_to_settlement()\n-  -\n\nScrolls the camera in a cutscene to the specified settlement in a cutscene.\n",
		"body": [
			"scroll_camera_with_cutscene_to_settlement(${1:number time}, ${2:[opt=nil] function callback}, ${3:string region key})"
		],
	},
	"docgen:campaign_manager:campaign_manager:scroll_camera_with_cutscene_to_settlement": {
		"scope": "lua",
		"prefix": "campaign_manager:scroll_camera_with_cutscene_to_settlement",
		"description": "campaign_manager:scroll_camera_with_cutscene_to_settlement()\n-  -\n\nScrolls the camera in a cutscene to the specified settlement in a cutscene.\n",
		"body": [
			"campaign_manager:scroll_camera_with_cutscene_to_settlement(${1:number time}, ${2:[opt=nil] function callback}, ${3:string region key})"
		],
	},
	"docgen:campaign_manager:cm:scroll_camera_with_cutscene_to_settlement": {
		"scope": "lua",
		"prefix": "cm:scroll_camera_with_cutscene_to_settlement",
		"description": "campaign_manager:scroll_camera_with_cutscene_to_settlement()\n-  -\n\nScrolls the camera in a cutscene to the specified settlement in a cutscene.\n",
		"body": [
			"cm:scroll_camera_with_cutscene_to_settlement(${1:number time}, ${2:[opt=nil] function callback}, ${3:string region key})"
		],
	},
	"docgen:campaign_manager:scroll_camera_with_cutscene_to_character": {
		"scope": "lua",
		"prefix": "scroll_camera_with_cutscene_to_character",
		"description": "campaign_manager:scroll_camera_with_cutscene_to_character()\n-  -\n\nScrolls the camera in a cutscene to the specified character in a cutscene.\n",
		"body": [
			"scroll_camera_with_cutscene_to_character(${1:number time}, ${2:[opt=nil] function callback}, ${3:number cqi})"
		],
	},
	"docgen:campaign_manager:campaign_manager:scroll_camera_with_cutscene_to_character": {
		"scope": "lua",
		"prefix": "campaign_manager:scroll_camera_with_cutscene_to_character",
		"description": "campaign_manager:scroll_camera_with_cutscene_to_character()\n-  -\n\nScrolls the camera in a cutscene to the specified character in a cutscene.\n",
		"body": [
			"campaign_manager:scroll_camera_with_cutscene_to_character(${1:number time}, ${2:[opt=nil] function callback}, ${3:number cqi})"
		],
	},
	"docgen:campaign_manager:cm:scroll_camera_with_cutscene_to_character": {
		"scope": "lua",
		"prefix": "cm:scroll_camera_with_cutscene_to_character",
		"description": "campaign_manager:scroll_camera_with_cutscene_to_character()\n-  -\n\nScrolls the camera in a cutscene to the specified character in a cutscene.\n",
		"body": [
			"cm:scroll_camera_with_cutscene_to_character(${1:number time}, ${2:[opt=nil] function callback}, ${3:number cqi})"
		],
	},
	"docgen:campaign_manager:set_use_cinematic_borders_for_automated_cutscenes": {
		"scope": "lua",
		"prefix": "set_use_cinematic_borders_for_automated_cutscenes",
		"description": "campaign_manager:set_use_cinematic_borders_for_automated_cutscenes()\n-  -\n\nSets whether or not to show cinematic borders when scrolling the camera in an automated cutscene (for example with campaign_manager:scroll_camera_with_cutscene).\n",
		"body": [
			"set_use_cinematic_borders_for_automated_cutscenes(${1:[opt=true] boolean show borders})"
		],
	},
	"docgen:campaign_manager:campaign_manager:set_use_cinematic_borders_for_automated_cutscenes": {
		"scope": "lua",
		"prefix": "campaign_manager:set_use_cinematic_borders_for_automated_cutscenes",
		"description": "campaign_manager:set_use_cinematic_borders_for_automated_cutscenes()\n-  -\n\nSets whether or not to show cinematic borders when scrolling the camera in an automated cutscene (for example with campaign_manager:scroll_camera_with_cutscene).\n",
		"body": [
			"campaign_manager:set_use_cinematic_borders_for_automated_cutscenes(${1:[opt=true] boolean show borders})"
		],
	},
	"docgen:campaign_manager:cm:set_use_cinematic_borders_for_automated_cutscenes": {
		"scope": "lua",
		"prefix": "cm:set_use_cinematic_borders_for_automated_cutscenes",
		"description": "campaign_manager:set_use_cinematic_borders_for_automated_cutscenes()\n-  -\n\nSets whether or not to show cinematic borders when scrolling the camera in an automated cutscene (for example with campaign_manager:scroll_camera_with_cutscene).\n",
		"body": [
			"cm:set_use_cinematic_borders_for_automated_cutscenes(${1:[opt=true] boolean show borders})"
		],
	},
	"docgen:campaign_manager:position_camera_at_primary_military_force": {
		"scope": "lua",
		"prefix": "position_camera_at_primary_military_force",
		"description": "campaign_manager:position_camera_at_primary_military_force()\n-  -\n\nImmediately positions the camera at a position looking at the primary military force for the supplied faction.\n",
		"body": [
			"position_camera_at_primary_military_force(${1:string faction key})"
		],
	},
	"docgen:campaign_manager:campaign_manager:position_camera_at_primary_military_force": {
		"scope": "lua",
		"prefix": "campaign_manager:position_camera_at_primary_military_force",
		"description": "campaign_manager:position_camera_at_primary_military_force()\n-  -\n\nImmediately positions the camera at a position looking at the primary military force for the supplied faction.\n",
		"body": [
			"campaign_manager:position_camera_at_primary_military_force(${1:string faction key})"
		],
	},
	"docgen:campaign_manager:cm:position_camera_at_primary_military_force": {
		"scope": "lua",
		"prefix": "cm:position_camera_at_primary_military_force",
		"description": "campaign_manager:position_camera_at_primary_military_force()\n-  -\n\nImmediately positions the camera at a position looking at the primary military force for the supplied faction.\n",
		"body": [
			"cm:position_camera_at_primary_military_force(${1:string faction key})"
		],
	},
	"docgen:campaign_manager:cindy_playback": {
		"scope": "lua",
		"prefix": "cindy_playback",
		"description": "campaign_manager:cindy_playback()\n-  -\n\nStarts playback of a cindy scene.\n",
		"body": [
			"cindy_playback(${1:string filepath}, ${2:[opt=nil] number blend in duration}, ${3:[opt=nil] number blend out duration})"
		],
	},
	"docgen:campaign_manager:campaign_manager:cindy_playback": {
		"scope": "lua",
		"prefix": "campaign_manager:cindy_playback",
		"description": "campaign_manager:cindy_playback()\n-  -\n\nStarts playback of a cindy scene.\n",
		"body": [
			"campaign_manager:cindy_playback(${1:string filepath}, ${2:[opt=nil] number blend in duration}, ${3:[opt=nil] number blend out duration})"
		],
	},
	"docgen:campaign_manager:cm:cindy_playback": {
		"scope": "lua",
		"prefix": "cm:cindy_playback",
		"description": "campaign_manager:cindy_playback()\n-  -\n\nStarts playback of a cindy scene.\n",
		"body": [
			"cm:cindy_playback(${1:string filepath}, ${2:[opt=nil] number blend in duration}, ${3:[opt=nil] number blend out duration})"
		],
	},
	"docgen:campaign_manager:stop_cindy_playback": {
		"scope": "lua",
		"prefix": "stop_cindy_playback",
		"description": "campaign_manager:stop_cindy_playback()\n-  -\n\nStops playback of any currently-playing cindy scene.\n",
		"body": [
			"stop_cindy_playback(${1:boolean clear animation scenes})"
		],
	},
	"docgen:campaign_manager:campaign_manager:stop_cindy_playback": {
		"scope": "lua",
		"prefix": "campaign_manager:stop_cindy_playback",
		"description": "campaign_manager:stop_cindy_playback()\n-  -\n\nStops playback of any currently-playing cindy scene.\n",
		"body": [
			"campaign_manager:stop_cindy_playback(${1:boolean clear animation scenes})"
		],
	},
	"docgen:campaign_manager:cm:stop_cindy_playback": {
		"scope": "lua",
		"prefix": "cm:stop_cindy_playback",
		"description": "campaign_manager:stop_cindy_playback()\n-  -\n\nStops playback of any currently-playing cindy scene.\n",
		"body": [
			"cm:stop_cindy_playback(${1:boolean clear animation scenes})"
		],
	},
	"docgen:campaign_manager:cache_camera_position": {
		"scope": "lua",
		"prefix": "cache_camera_position",
		"description": "campaign_manager:cache_camera_position()\n-  -\n\nCaches the current camera position, so that the camera position may be compared to it later to determine if it has moved.\n",
		"body": [
			"cache_camera_position(${1:[opt=\"default\"] string cache name})"
		],
	},
	"docgen:campaign_manager:campaign_manager:cache_camera_position": {
		"scope": "lua",
		"prefix": "campaign_manager:cache_camera_position",
		"description": "campaign_manager:cache_camera_position()\n-  -\n\nCaches the current camera position, so that the camera position may be compared to it later to determine if it has moved.\n",
		"body": [
			"campaign_manager:cache_camera_position(${1:[opt=\"default\"] string cache name})"
		],
	},
	"docgen:campaign_manager:cm:cache_camera_position": {
		"scope": "lua",
		"prefix": "cm:cache_camera_position",
		"description": "campaign_manager:cache_camera_position()\n-  -\n\nCaches the current camera position, so that the camera position may be compared to it later to determine if it has moved.\n",
		"body": [
			"cm:cache_camera_position(${1:[opt=\"default\"] string cache name})"
		],
	},
	"docgen:campaign_manager:cached_camera_position_exists": {
		"scope": "lua",
		"prefix": "cached_camera_position_exists",
		"description": "campaign_manager:cached_camera_position_exists()\n-  -\n\nReturns whether a camera position is currently cached for the (optional) supplied cache name.\n",
		"body": [
			"cached_camera_position_exists(${1:[opt=\"default\"] string cache name})"
		],
	},
	"docgen:campaign_manager:campaign_manager:cached_camera_position_exists": {
		"scope": "lua",
		"prefix": "campaign_manager:cached_camera_position_exists",
		"description": "campaign_manager:cached_camera_position_exists()\n-  -\n\nReturns whether a camera position is currently cached for the (optional) supplied cache name.\n",
		"body": [
			"campaign_manager:cached_camera_position_exists(${1:[opt=\"default\"] string cache name})"
		],
	},
	"docgen:campaign_manager:cm:cached_camera_position_exists": {
		"scope": "lua",
		"prefix": "cm:cached_camera_position_exists",
		"description": "campaign_manager:cached_camera_position_exists()\n-  -\n\nReturns whether a camera position is currently cached for the (optional) supplied cache name.\n",
		"body": [
			"cm:cached_camera_position_exists(${1:[opt=\"default\"] string cache name})"
		],
	},
	"docgen:campaign_manager:get_cached_camera_position": {
		"scope": "lua",
		"prefix": "get_cached_camera_position",
		"description": "campaign_manager:get_cached_camera_position()\n-  -\n\nReturns the camera position which was last cached with the optional cache name (the default cache name is <code>\"default\"</code>).\n",
		"body": [
			"get_cached_camera_position(${1:[opt=\"default\"] string cache name})"
		],
	},
	"docgen:campaign_manager:campaign_manager:get_cached_camera_position": {
		"scope": "lua",
		"prefix": "campaign_manager:get_cached_camera_position",
		"description": "campaign_manager:get_cached_camera_position()\n-  -\n\nReturns the camera position which was last cached with the optional cache name (the default cache name is <code>\"default\"</code>).\n",
		"body": [
			"campaign_manager:get_cached_camera_position(${1:[opt=\"default\"] string cache name})"
		],
	},
	"docgen:campaign_manager:cm:get_cached_camera_position": {
		"scope": "lua",
		"prefix": "cm:get_cached_camera_position",
		"description": "campaign_manager:get_cached_camera_position()\n-  -\n\nReturns the camera position which was last cached with the optional cache name (the default cache name is <code>\"default\"</code>).\n",
		"body": [
			"cm:get_cached_camera_position(${1:[opt=\"default\"] string cache name})"
		],
	},
	"docgen:campaign_manager:camera_has_moved_from_cached": {
		"scope": "lua",
		"prefix": "camera_has_moved_from_cached",
		"description": "campaign_manager:camera_has_moved_from_cached()\n-  -\n\nCompares the current position of the camera to that last cached with the (optional) specified cache name, and returns <code>true</code> if any of the camera co-ordinates have changed by the (optional) supplied distance, or <code>false</code> otherwise.\n",
		"body": [
			"camera_has_moved_from_cached(${1:[opt=\"default\"] string cache name})"
		],
	},
	"docgen:campaign_manager:campaign_manager:camera_has_moved_from_cached": {
		"scope": "lua",
		"prefix": "campaign_manager:camera_has_moved_from_cached",
		"description": "campaign_manager:camera_has_moved_from_cached()\n-  -\n\nCompares the current position of the camera to that last cached with the (optional) specified cache name, and returns <code>true</code> if any of the camera co-ordinates have changed by the (optional) supplied distance, or <code>false</code> otherwise.\n",
		"body": [
			"campaign_manager:camera_has_moved_from_cached(${1:[opt=\"default\"] string cache name})"
		],
	},
	"docgen:campaign_manager:cm:camera_has_moved_from_cached": {
		"scope": "lua",
		"prefix": "cm:camera_has_moved_from_cached",
		"description": "campaign_manager:camera_has_moved_from_cached()\n-  -\n\nCompares the current position of the camera to that last cached with the (optional) specified cache name, and returns <code>true</code> if any of the camera co-ordinates have changed by the (optional) supplied distance, or <code>false</code> otherwise.\n",
		"body": [
			"cm:camera_has_moved_from_cached(${1:[opt=\"default\"] string cache name})"
		],
	},
	"docgen:campaign_manager:delete_cached_camera_position": {
		"scope": "lua",
		"prefix": "delete_cached_camera_position",
		"description": "campaign_manager:delete_cached_camera_position()\n-  -\n\nRemoves the cache for the supplied cache name.\n",
		"body": [
			"delete_cached_camera_position(${1:[opt=\"default\"] string cache name})"
		],
	},
	"docgen:campaign_manager:campaign_manager:delete_cached_camera_position": {
		"scope": "lua",
		"prefix": "campaign_manager:delete_cached_camera_position",
		"description": "campaign_manager:delete_cached_camera_position()\n-  -\n\nRemoves the cache for the supplied cache name.\n",
		"body": [
			"campaign_manager:delete_cached_camera_position(${1:[opt=\"default\"] string cache name})"
		],
	},
	"docgen:campaign_manager:cm:delete_cached_camera_position": {
		"scope": "lua",
		"prefix": "cm:delete_cached_camera_position",
		"description": "campaign_manager:delete_cached_camera_position()\n-  -\n\nRemoves the cache for the supplied cache name.\n",
		"body": [
			"cm:delete_cached_camera_position(${1:[opt=\"default\"] string cache name})"
		],
	},
	"docgen:campaign_manager:show_subtitle": {
		"scope": "lua",
		"prefix": "show_subtitle",
		"description": "campaign_manager:show_subtitle()\n-  -\n\nShows subtitled text during a cutscene.\n",
		"body": [
			"show_subtitle(${1:string text key}, ${2:[opt=false] boolean full text key supplied, Set to true if the fll localised text key was supplied for the first argument in the form [table]_[field]_[key] boolean full text key supplied}, ${3:[opt=false] boolean force diplay})"
		],
	},
	"docgen:campaign_manager:campaign_manager:show_subtitle": {
		"scope": "lua",
		"prefix": "campaign_manager:show_subtitle",
		"description": "campaign_manager:show_subtitle()\n-  -\n\nShows subtitled text during a cutscene.\n",
		"body": [
			"campaign_manager:show_subtitle(${1:string text key}, ${2:[opt=false] boolean full text key supplied, Set to true if the fll localised text key was supplied for the first argument in the form [table]_[field]_[key] boolean full text key supplied}, ${3:[opt=false] boolean force diplay})"
		],
	},
	"docgen:campaign_manager:cm:show_subtitle": {
		"scope": "lua",
		"prefix": "cm:show_subtitle",
		"description": "campaign_manager:show_subtitle()\n-  -\n\nShows subtitled text during a cutscene.\n",
		"body": [
			"cm:show_subtitle(${1:string text key}, ${2:[opt=false] boolean full text key supplied, Set to true if the fll localised text key was supplied for the first argument in the form [table]_[field]_[key] boolean full text key supplied}, ${3:[opt=false] boolean force diplay})"
		],
	},
	"docgen:campaign_manager:hide_subtitles": {
		"scope": "lua",
		"prefix": "hide_subtitles",
		"description": "campaign_manager:hide_subtitles()\n-  -\n\nHides any subtitles currently displayed with campaign_manager:show_subtitle.\n",
		"body": [
			"hide_subtitles()"
		],
	},
	"docgen:campaign_manager:campaign_manager:hide_subtitles": {
		"scope": "lua",
		"prefix": "campaign_manager:hide_subtitles",
		"description": "campaign_manager:hide_subtitles()\n-  -\n\nHides any subtitles currently displayed with campaign_manager:show_subtitle.\n",
		"body": [
			"campaign_manager:hide_subtitles()"
		],
	},
	"docgen:campaign_manager:cm:hide_subtitles": {
		"scope": "lua",
		"prefix": "cm:hide_subtitles",
		"description": "campaign_manager:hide_subtitles()\n-  -\n\nHides any subtitles currently displayed with campaign_manager:show_subtitle.\n",
		"body": [
			"cm:hide_subtitles()"
		],
	},
	"docgen:campaign_manager:is_any_cutscene_running": {
		"scope": "lua",
		"prefix": "is_any_cutscene_running",
		"description": "campaign_manager:is_any_cutscene_running()\n-  -\n\nReturns <code>true</code> if any campaign_cutscene is running, <code>false</code> otherwise.\n",
		"body": [
			"is_any_cutscene_running()"
		],
	},
	"docgen:campaign_manager:campaign_manager:is_any_cutscene_running": {
		"scope": "lua",
		"prefix": "campaign_manager:is_any_cutscene_running",
		"description": "campaign_manager:is_any_cutscene_running()\n-  -\n\nReturns <code>true</code> if any campaign_cutscene is running, <code>false</code> otherwise.\n",
		"body": [
			"campaign_manager:is_any_cutscene_running()"
		],
	},
	"docgen:campaign_manager:cm:is_any_cutscene_running": {
		"scope": "lua",
		"prefix": "cm:is_any_cutscene_running",
		"description": "campaign_manager:is_any_cutscene_running()\n-  -\n\nReturns <code>true</code> if any campaign_cutscene is running, <code>false</code> otherwise.\n",
		"body": [
			"cm:is_any_cutscene_running()"
		],
	},
	"docgen:campaign_manager:skip_all_campaign_cutscenes": {
		"scope": "lua",
		"prefix": "skip_all_campaign_cutscenes",
		"description": "campaign_manager:skip_all_campaign_cutscenes()\n-  -\n\nSkips any campaign cutscene currently running.\n",
		"body": [
			"skip_all_campaign_cutscenes()"
		],
	},
	"docgen:campaign_manager:campaign_manager:skip_all_campaign_cutscenes": {
		"scope": "lua",
		"prefix": "campaign_manager:skip_all_campaign_cutscenes",
		"description": "campaign_manager:skip_all_campaign_cutscenes()\n-  -\n\nSkips any campaign cutscene currently running.\n",
		"body": [
			"campaign_manager:skip_all_campaign_cutscenes()"
		],
	},
	"docgen:campaign_manager:cm:skip_all_campaign_cutscenes": {
		"scope": "lua",
		"prefix": "cm:skip_all_campaign_cutscenes",
		"description": "campaign_manager:skip_all_campaign_cutscenes()\n-  -\n\nSkips any campaign cutscene currently running.\n",
		"body": [
			"cm:skip_all_campaign_cutscenes()"
		],
	},
	"docgen:campaign_manager:steal_escape_key": {
		"scope": "lua",
		"prefix": "steal_escape_key",
		"description": "campaign_manager:steal_escape_key()\n-  -\n\nSteals or releases the escape key.\n",
		"body": [
			"steal_escape_key(${1:boolean steal})"
		],
	},
	"docgen:campaign_manager:campaign_manager:steal_escape_key": {
		"scope": "lua",
		"prefix": "campaign_manager:steal_escape_key",
		"description": "campaign_manager:steal_escape_key()\n-  -\n\nSteals or releases the escape key.\n",
		"body": [
			"campaign_manager:steal_escape_key(${1:boolean steal})"
		],
	},
	"docgen:campaign_manager:cm:steal_escape_key": {
		"scope": "lua",
		"prefix": "cm:steal_escape_key",
		"description": "campaign_manager:steal_escape_key()\n-  -\n\nSteals or releases the escape key.\n",
		"body": [
			"cm:steal_escape_key(${1:boolean steal})"
		],
	},
	"docgen:campaign_manager:steal_user_input": {
		"scope": "lua",
		"prefix": "steal_user_input",
		"description": "campaign_manager:steal_user_input()\n-  -\n\nSteals or releases user input.\n",
		"body": [
			"steal_user_input(${1:boolean steal})"
		],
	},
	"docgen:campaign_manager:campaign_manager:steal_user_input": {
		"scope": "lua",
		"prefix": "campaign_manager:steal_user_input",
		"description": "campaign_manager:steal_user_input()\n-  -\n\nSteals or releases user input.\n",
		"body": [
			"campaign_manager:steal_user_input(${1:boolean steal})"
		],
	},
	"docgen:campaign_manager:cm:steal_user_input": {
		"scope": "lua",
		"prefix": "cm:steal_user_input",
		"description": "campaign_manager:steal_user_input()\n-  -\n\nSteals or releases user input.\n",
		"body": [
			"cm:steal_user_input(${1:boolean steal})"
		],
	},
	"docgen:campaign_manager:on_key_press_up": {
		"scope": "lua",
		"prefix": "on_key_press_up",
		"description": "campaign_manager:on_key_press_up()\n-  -\n\nCalled by the campaign model when a key stolen by steal_user_input or steal_escape_key is pressed.\n",
		"body": [
			"on_key_press_up(${1:string key pressed})"
		],
	},
	"docgen:campaign_manager:campaign_manager:on_key_press_up": {
		"scope": "lua",
		"prefix": "campaign_manager:on_key_press_up",
		"description": "campaign_manager:on_key_press_up()\n-  -\n\nCalled by the campaign model when a key stolen by steal_user_input or steal_escape_key is pressed.\n",
		"body": [
			"campaign_manager:on_key_press_up(${1:string key pressed})"
		],
	},
	"docgen:campaign_manager:cm:on_key_press_up": {
		"scope": "lua",
		"prefix": "cm:on_key_press_up",
		"description": "campaign_manager:on_key_press_up()\n-  -\n\nCalled by the campaign model when a key stolen by steal_user_input or steal_escape_key is pressed.\n",
		"body": [
			"cm:on_key_press_up(${1:string key pressed})"
		],
	},
	"docgen:campaign_manager:print_key_steal_entries": {
		"scope": "lua",
		"prefix": "print_key_steal_entries",
		"description": "campaign_manager:print_key_steal_entries()\n-  -\n\nDebug output of all current stolen key records.\n",
		"body": [
			"print_key_steal_entries()"
		],
	},
	"docgen:campaign_manager:campaign_manager:print_key_steal_entries": {
		"scope": "lua",
		"prefix": "campaign_manager:print_key_steal_entries",
		"description": "campaign_manager:print_key_steal_entries()\n-  -\n\nDebug output of all current stolen key records.\n",
		"body": [
			"campaign_manager:print_key_steal_entries()"
		],
	},
	"docgen:campaign_manager:cm:print_key_steal_entries": {
		"scope": "lua",
		"prefix": "cm:print_key_steal_entries",
		"description": "campaign_manager:print_key_steal_entries()\n-  -\n\nDebug output of all current stolen key records.\n",
		"body": [
			"cm:print_key_steal_entries()"
		],
	},
	"docgen:campaign_manager:steal_key_with_callback": {
		"scope": "lua",
		"prefix": "steal_key_with_callback",
		"description": "campaign_manager:steal_key_with_callback()\n-  -\n\nSteal a key, and register a callback to be called when it's pressed.\n",
		"body": [
			"steal_key_with_callback(${1:string name}, ${2:string key}, ${3:function callback})"
		],
	},
	"docgen:campaign_manager:campaign_manager:steal_key_with_callback": {
		"scope": "lua",
		"prefix": "campaign_manager:steal_key_with_callback",
		"description": "campaign_manager:steal_key_with_callback()\n-  -\n\nSteal a key, and register a callback to be called when it's pressed.\n",
		"body": [
			"campaign_manager:steal_key_with_callback(${1:string name}, ${2:string key}, ${3:function callback})"
		],
	},
	"docgen:campaign_manager:cm:steal_key_with_callback": {
		"scope": "lua",
		"prefix": "cm:steal_key_with_callback",
		"description": "campaign_manager:steal_key_with_callback()\n-  -\n\nSteal a key, and register a callback to be called when it's pressed.\n",
		"body": [
			"cm:steal_key_with_callback(${1:string name}, ${2:string key}, ${3:function callback})"
		],
	},
	"docgen:campaign_manager:release_key_with_callback": {
		"scope": "lua",
		"prefix": "release_key_with_callback",
		"description": "campaign_manager:release_key_with_callback()\n-  -\n\nReleases a key stolen with campaign_manager:steal_key_with_callback.\n",
		"body": [
			"release_key_with_callback(${1:string name}, ${2:string key})"
		],
	},
	"docgen:campaign_manager:campaign_manager:release_key_with_callback": {
		"scope": "lua",
		"prefix": "campaign_manager:release_key_with_callback",
		"description": "campaign_manager:release_key_with_callback()\n-  -\n\nReleases a key stolen with campaign_manager:steal_key_with_callback.\n",
		"body": [
			"campaign_manager:release_key_with_callback(${1:string name}, ${2:string key})"
		],
	},
	"docgen:campaign_manager:cm:release_key_with_callback": {
		"scope": "lua",
		"prefix": "cm:release_key_with_callback",
		"description": "campaign_manager:release_key_with_callback()\n-  -\n\nReleases a key stolen with campaign_manager:steal_key_with_callback.\n",
		"body": [
			"cm:release_key_with_callback(${1:string name}, ${2:string key})"
		],
	},
	"docgen:campaign_manager:steal_escape_key_with_callback": {
		"scope": "lua",
		"prefix": "steal_escape_key_with_callback",
		"description": "campaign_manager:steal_escape_key_with_callback()\n-  -\n\nSteals the escape key and registers a function to call when it is pressed.\n",
		"body": [
			"steal_escape_key_with_callback(${1:string name}, ${2:function callback})"
		],
	},
	"docgen:campaign_manager:campaign_manager:steal_escape_key_with_callback": {
		"scope": "lua",
		"prefix": "campaign_manager:steal_escape_key_with_callback",
		"description": "campaign_manager:steal_escape_key_with_callback()\n-  -\n\nSteals the escape key and registers a function to call when it is pressed.\n",
		"body": [
			"campaign_manager:steal_escape_key_with_callback(${1:string name}, ${2:function callback})"
		],
	},
	"docgen:campaign_manager:cm:steal_escape_key_with_callback": {
		"scope": "lua",
		"prefix": "cm:steal_escape_key_with_callback",
		"description": "campaign_manager:steal_escape_key_with_callback()\n-  -\n\nSteals the escape key and registers a function to call when it is pressed.\n",
		"body": [
			"cm:steal_escape_key_with_callback(${1:string name}, ${2:function callback})"
		],
	},
	"docgen:campaign_manager:release_escape_key_with_callback": {
		"scope": "lua",
		"prefix": "release_escape_key_with_callback",
		"description": "campaign_manager:release_escape_key_with_callback()\n-  -\n\nReleases the escape key after it's been stolen with campaign_manager:steal_escape_key_with_callback.\n",
		"body": [
			"release_escape_key_with_callback(${1:string name})"
		],
	},
	"docgen:campaign_manager:campaign_manager:release_escape_key_with_callback": {
		"scope": "lua",
		"prefix": "campaign_manager:release_escape_key_with_callback",
		"description": "campaign_manager:release_escape_key_with_callback()\n-  -\n\nReleases the escape key after it's been stolen with campaign_manager:steal_escape_key_with_callback.\n",
		"body": [
			"campaign_manager:release_escape_key_with_callback(${1:string name})"
		],
	},
	"docgen:campaign_manager:cm:release_escape_key_with_callback": {
		"scope": "lua",
		"prefix": "cm:release_escape_key_with_callback",
		"description": "campaign_manager:release_escape_key_with_callback()\n-  -\n\nReleases the escape key after it's been stolen with campaign_manager:steal_escape_key_with_callback.\n",
		"body": [
			"cm:release_escape_key_with_callback(${1:string name})"
		],
	},
	"docgen:campaign_manager:steal_escape_key_and_space_bar_with_callback": {
		"scope": "lua",
		"prefix": "steal_escape_key_and_space_bar_with_callback",
		"description": "campaign_manager:steal_escape_key_and_space_bar_with_callback()\n-  -\n\nSteals the escape key and spacebar and registers a function to call when they are pressed.\n",
		"body": [
			"steal_escape_key_and_space_bar_with_callback(${1:string name}, ${2:function callback})"
		],
	},
	"docgen:campaign_manager:campaign_manager:steal_escape_key_and_space_bar_with_callback": {
		"scope": "lua",
		"prefix": "campaign_manager:steal_escape_key_and_space_bar_with_callback",
		"description": "campaign_manager:steal_escape_key_and_space_bar_with_callback()\n-  -\n\nSteals the escape key and spacebar and registers a function to call when they are pressed.\n",
		"body": [
			"campaign_manager:steal_escape_key_and_space_bar_with_callback(${1:string name}, ${2:function callback})"
		],
	},
	"docgen:campaign_manager:cm:steal_escape_key_and_space_bar_with_callback": {
		"scope": "lua",
		"prefix": "cm:steal_escape_key_and_space_bar_with_callback",
		"description": "campaign_manager:steal_escape_key_and_space_bar_with_callback()\n-  -\n\nSteals the escape key and spacebar and registers a function to call when they are pressed.\n",
		"body": [
			"cm:steal_escape_key_and_space_bar_with_callback(${1:string name}, ${2:function callback})"
		],
	},
	"docgen:campaign_manager:release_escape_key_and_space_bar_with_callback": {
		"scope": "lua",
		"prefix": "release_escape_key_and_space_bar_with_callback",
		"description": "campaign_manager:release_escape_key_and_space_bar_with_callback()\n-  -\n\nReleases the escape key and spacebar after they've been stolen with campaign_manager:steal_escape_key_and_space_bar_with_callback.\n",
		"body": [
			"release_escape_key_and_space_bar_with_callback(${1:string name}, ${2:function callback})"
		],
	},
	"docgen:campaign_manager:campaign_manager:release_escape_key_and_space_bar_with_callback": {
		"scope": "lua",
		"prefix": "campaign_manager:release_escape_key_and_space_bar_with_callback",
		"description": "campaign_manager:release_escape_key_and_space_bar_with_callback()\n-  -\n\nReleases the escape key and spacebar after they've been stolen with campaign_manager:steal_escape_key_and_space_bar_with_callback.\n",
		"body": [
			"campaign_manager:release_escape_key_and_space_bar_with_callback(${1:string name}, ${2:function callback})"
		],
	},
	"docgen:campaign_manager:cm:release_escape_key_and_space_bar_with_callback": {
		"scope": "lua",
		"prefix": "cm:release_escape_key_and_space_bar_with_callback",
		"description": "campaign_manager:release_escape_key_and_space_bar_with_callback()\n-  -\n\nReleases the escape key and spacebar after they've been stolen with campaign_manager:steal_escape_key_and_space_bar_with_callback.\n",
		"body": [
			"cm:release_escape_key_and_space_bar_with_callback(${1:string name}, ${2:function callback})"
		],
	},
	"docgen:campaign_manager:show_advice": {
		"scope": "lua",
		"prefix": "show_advice",
		"description": "campaign_manager:show_advice()\n-  -\n\nDisplays some advice.\n",
		"body": [
			"show_advice(${1:string advice key}, ${2:[opt=false] boolean show progress button}, ${3:[opt=false] boolean highlight progress button}, ${4:[opt=nil] function callback}, ${5:[opt=0] number playtime}, ${6:[opt=0] number delay})"
		],
	},
	"docgen:campaign_manager:campaign_manager:show_advice": {
		"scope": "lua",
		"prefix": "campaign_manager:show_advice",
		"description": "campaign_manager:show_advice()\n-  -\n\nDisplays some advice.\n",
		"body": [
			"campaign_manager:show_advice(${1:string advice key}, ${2:[opt=false] boolean show progress button}, ${3:[opt=false] boolean highlight progress button}, ${4:[opt=nil] function callback}, ${5:[opt=0] number playtime}, ${6:[opt=0] number delay})"
		],
	},
	"docgen:campaign_manager:cm:show_advice": {
		"scope": "lua",
		"prefix": "cm:show_advice",
		"description": "campaign_manager:show_advice()\n-  -\n\nDisplays some advice.\n",
		"body": [
			"cm:show_advice(${1:string advice key}, ${2:[opt=false] boolean show progress button}, ${3:[opt=false] boolean highlight progress button}, ${4:[opt=nil] function callback}, ${5:[opt=0] number playtime}, ${6:[opt=0] number delay})"
		],
	},
	"docgen:campaign_manager:set_advice_enabled": {
		"scope": "lua",
		"prefix": "set_advice_enabled",
		"description": "campaign_manager:set_advice_enabled()\n-  -\n\nEnables or disables the advice system.\n",
		"body": [
			"set_advice_enabled(${1:[opt=true] boolean enable advice})"
		],
	},
	"docgen:campaign_manager:campaign_manager:set_advice_enabled": {
		"scope": "lua",
		"prefix": "campaign_manager:set_advice_enabled",
		"description": "campaign_manager:set_advice_enabled()\n-  -\n\nEnables or disables the advice system.\n",
		"body": [
			"campaign_manager:set_advice_enabled(${1:[opt=true] boolean enable advice})"
		],
	},
	"docgen:campaign_manager:cm:set_advice_enabled": {
		"scope": "lua",
		"prefix": "cm:set_advice_enabled",
		"description": "campaign_manager:set_advice_enabled()\n-  -\n\nEnables or disables the advice system.\n",
		"body": [
			"cm:set_advice_enabled(${1:[opt=true] boolean enable advice})"
		],
	},
	"docgen:campaign_manager:is_advice_enabled": {
		"scope": "lua",
		"prefix": "is_advice_enabled",
		"description": "campaign_manager:is_advice_enabled()\n-  -\n\nReturns <code>true</code> if the advice system is enabled, or <code>false</code> if it's been disabled with campaign_manager:set_advice_enabled.\n",
		"body": [
			"is_advice_enabled()"
		],
	},
	"docgen:campaign_manager:campaign_manager:is_advice_enabled": {
		"scope": "lua",
		"prefix": "campaign_manager:is_advice_enabled",
		"description": "campaign_manager:is_advice_enabled()\n-  -\n\nReturns <code>true</code> if the advice system is enabled, or <code>false</code> if it's been disabled with campaign_manager:set_advice_enabled.\n",
		"body": [
			"campaign_manager:is_advice_enabled()"
		],
	},
	"docgen:campaign_manager:cm:is_advice_enabled": {
		"scope": "lua",
		"prefix": "cm:is_advice_enabled",
		"description": "campaign_manager:is_advice_enabled()\n-  -\n\nReturns <code>true</code> if the advice system is enabled, or <code>false</code> if it's been disabled with campaign_manager:set_advice_enabled.\n",
		"body": [
			"cm:is_advice_enabled()"
		],
	},
	"docgen:campaign_manager:modify_advice": {
		"scope": "lua",
		"prefix": "modify_advice",
		"description": "campaign_manager:modify_advice()\n-  -\n\nImmediately enables or disables the close button that appears on the advisor panel, or causes it to be highlighted.\n",
		"body": [
			"modify_advice(${1:[opt=false] boolean show progress button}, ${2:[opt=false] boolean highlight progress button})"
		],
	},
	"docgen:campaign_manager:campaign_manager:modify_advice": {
		"scope": "lua",
		"prefix": "campaign_manager:modify_advice",
		"description": "campaign_manager:modify_advice()\n-  -\n\nImmediately enables or disables the close button that appears on the advisor panel, or causes it to be highlighted.\n",
		"body": [
			"campaign_manager:modify_advice(${1:[opt=false] boolean show progress button}, ${2:[opt=false] boolean highlight progress button})"
		],
	},
	"docgen:campaign_manager:cm:modify_advice": {
		"scope": "lua",
		"prefix": "cm:modify_advice",
		"description": "campaign_manager:modify_advice()\n-  -\n\nImmediately enables or disables the close button that appears on the advisor panel, or causes it to be highlighted.\n",
		"body": [
			"cm:modify_advice(${1:[opt=false] boolean show progress button}, ${2:[opt=false] boolean highlight progress button})"
		],
	},
	"docgen:campaign_manager:add_pre_dismiss_advice_callback": {
		"scope": "lua",
		"prefix": "add_pre_dismiss_advice_callback",
		"description": "campaign_manager:add_pre_dismiss_advice_callback()\n-  -\n\nRegisters a callback to be called when/immediately before the advice gets dismissed.\n",
		"body": [
			"add_pre_dismiss_advice_callback(${1:function callback})"
		],
	},
	"docgen:campaign_manager:campaign_manager:add_pre_dismiss_advice_callback": {
		"scope": "lua",
		"prefix": "campaign_manager:add_pre_dismiss_advice_callback",
		"description": "campaign_manager:add_pre_dismiss_advice_callback()\n-  -\n\nRegisters a callback to be called when/immediately before the advice gets dismissed.\n",
		"body": [
			"campaign_manager:add_pre_dismiss_advice_callback(${1:function callback})"
		],
	},
	"docgen:campaign_manager:cm:add_pre_dismiss_advice_callback": {
		"scope": "lua",
		"prefix": "cm:add_pre_dismiss_advice_callback",
		"description": "campaign_manager:add_pre_dismiss_advice_callback()\n-  -\n\nRegisters a callback to be called when/immediately before the advice gets dismissed.\n",
		"body": [
			"cm:add_pre_dismiss_advice_callback(${1:function callback})"
		],
	},
	"docgen:campaign_manager:dismiss_advice": {
		"scope": "lua",
		"prefix": "dismiss_advice",
		"description": "campaign_manager:dismiss_advice()\n-  -\n\nDismisses the advice.\n",
		"body": [
			"dismiss_advice()"
		],
	},
	"docgen:campaign_manager:campaign_manager:dismiss_advice": {
		"scope": "lua",
		"prefix": "campaign_manager:dismiss_advice",
		"description": "campaign_manager:dismiss_advice()\n-  -\n\nDismisses the advice.\n",
		"body": [
			"campaign_manager:dismiss_advice()"
		],
	},
	"docgen:campaign_manager:cm:dismiss_advice": {
		"scope": "lua",
		"prefix": "cm:dismiss_advice",
		"description": "campaign_manager:dismiss_advice()\n-  -\n\nDismisses the advice.\n",
		"body": [
			"cm:dismiss_advice()"
		],
	},
	"docgen:campaign_manager:progress_on_advice_dismissed": {
		"scope": "lua",
		"prefix": "progress_on_advice_dismissed",
		"description": "campaign_manager:progress_on_advice_dismissed()\n-  -\n\nRegisters a function to be called when the advisor is dismissed.\n",
		"body": [
			"progress_on_advice_dismissed(${1:function callback}, ${2:[opt=0] number delay}, ${3:[opt=false] boolean highlight on finish})"
		],
	},
	"docgen:campaign_manager:campaign_manager:progress_on_advice_dismissed": {
		"scope": "lua",
		"prefix": "campaign_manager:progress_on_advice_dismissed",
		"description": "campaign_manager:progress_on_advice_dismissed()\n-  -\n\nRegisters a function to be called when the advisor is dismissed.\n",
		"body": [
			"campaign_manager:progress_on_advice_dismissed(${1:function callback}, ${2:[opt=0] number delay}, ${3:[opt=false] boolean highlight on finish})"
		],
	},
	"docgen:campaign_manager:cm:progress_on_advice_dismissed": {
		"scope": "lua",
		"prefix": "cm:progress_on_advice_dismissed",
		"description": "campaign_manager:progress_on_advice_dismissed()\n-  -\n\nRegisters a function to be called when the advisor is dismissed.\n",
		"body": [
			"cm:progress_on_advice_dismissed(${1:function callback}, ${2:[opt=0] number delay}, ${3:[opt=false] boolean highlight on finish})"
		],
	},
	"docgen:campaign_manager:cancel_progress_on_advice_dismissed": {
		"scope": "lua",
		"prefix": "cancel_progress_on_advice_dismissed",
		"description": "campaign_manager:cancel_progress_on_advice_dismissed()\n-  -\n\nCancels any running campaign_manager:progress_on_advice_dismissed process.\n",
		"body": [
			"cancel_progress_on_advice_dismissed()"
		],
	},
	"docgen:campaign_manager:campaign_manager:cancel_progress_on_advice_dismissed": {
		"scope": "lua",
		"prefix": "campaign_manager:cancel_progress_on_advice_dismissed",
		"description": "campaign_manager:cancel_progress_on_advice_dismissed()\n-  -\n\nCancels any running campaign_manager:progress_on_advice_dismissed process.\n",
		"body": [
			"campaign_manager:cancel_progress_on_advice_dismissed()"
		],
	},
	"docgen:campaign_manager:cm:cancel_progress_on_advice_dismissed": {
		"scope": "lua",
		"prefix": "cm:cancel_progress_on_advice_dismissed",
		"description": "campaign_manager:cancel_progress_on_advice_dismissed()\n-  -\n\nCancels any running campaign_manager:progress_on_advice_dismissed process.\n",
		"body": [
			"cm:cancel_progress_on_advice_dismissed()"
		],
	},
	"docgen:campaign_manager:progress_on_advice_finished": {
		"scope": "lua",
		"prefix": "progress_on_advice_finished",
		"description": "campaign_manager:progress_on_advice_finished()\n-  -\n\nRegisters a function to be called when the advisor VO has finished playing and the <code>AdviceFinishedTrigger</code> event is sent from the game to script.\n",
		"body": [
			"progress_on_advice_finished(${1:function callback}, ${2:[opt=0] number delay}, ${3:[opt=nil] number playtime}, ${4:[opt=false] boolean use os clock})"
		],
	},
	"docgen:campaign_manager:campaign_manager:progress_on_advice_finished": {
		"scope": "lua",
		"prefix": "campaign_manager:progress_on_advice_finished",
		"description": "campaign_manager:progress_on_advice_finished()\n-  -\n\nRegisters a function to be called when the advisor VO has finished playing and the <code>AdviceFinishedTrigger</code> event is sent from the game to script.\n",
		"body": [
			"campaign_manager:progress_on_advice_finished(${1:function callback}, ${2:[opt=0] number delay}, ${3:[opt=nil] number playtime}, ${4:[opt=false] boolean use os clock})"
		],
	},
	"docgen:campaign_manager:cm:progress_on_advice_finished": {
		"scope": "lua",
		"prefix": "cm:progress_on_advice_finished",
		"description": "campaign_manager:progress_on_advice_finished()\n-  -\n\nRegisters a function to be called when the advisor VO has finished playing and the <code>AdviceFinishedTrigger</code> event is sent from the game to script.\n",
		"body": [
			"cm:progress_on_advice_finished(${1:function callback}, ${2:[opt=0] number delay}, ${3:[opt=nil] number playtime}, ${4:[opt=false] boolean use os clock})"
		],
	},
	"docgen:campaign_manager:cancel_progress_on_advice_finished": {
		"scope": "lua",
		"prefix": "cancel_progress_on_advice_finished",
		"description": "campaign_manager:cancel_progress_on_advice_finished()\n-  -\n\nCancels any running campaign_manager:progress_on_advice_finished process.\n",
		"body": [
			"cancel_progress_on_advice_finished()"
		],
	},
	"docgen:campaign_manager:campaign_manager:cancel_progress_on_advice_finished": {
		"scope": "lua",
		"prefix": "campaign_manager:cancel_progress_on_advice_finished",
		"description": "campaign_manager:cancel_progress_on_advice_finished()\n-  -\n\nCancels any running campaign_manager:progress_on_advice_finished process.\n",
		"body": [
			"campaign_manager:cancel_progress_on_advice_finished()"
		],
	},
	"docgen:campaign_manager:cm:cancel_progress_on_advice_finished": {
		"scope": "lua",
		"prefix": "cm:cancel_progress_on_advice_finished",
		"description": "campaign_manager:cancel_progress_on_advice_finished()\n-  -\n\nCancels any running campaign_manager:progress_on_advice_finished process.\n",
		"body": [
			"cm:cancel_progress_on_advice_finished()"
		],
	},
	"docgen:campaign_manager:progress_on_panel_dismissed": {
		"scope": "lua",
		"prefix": "progress_on_panel_dismissed",
		"description": "campaign_manager:progress_on_panel_dismissed()\n-  -\n\nCalls a supplied callback when a panel with the supplied name is closed.\n",
		"body": [
			"progress_on_panel_dismissed(${1:string unique name}, ${2:string panel name}, ${3:function callback}, ${4:[opt=0] number callback delay})"
		],
	},
	"docgen:campaign_manager:campaign_manager:progress_on_panel_dismissed": {
		"scope": "lua",
		"prefix": "campaign_manager:progress_on_panel_dismissed",
		"description": "campaign_manager:progress_on_panel_dismissed()\n-  -\n\nCalls a supplied callback when a panel with the supplied name is closed.\n",
		"body": [
			"campaign_manager:progress_on_panel_dismissed(${1:string unique name}, ${2:string panel name}, ${3:function callback}, ${4:[opt=0] number callback delay})"
		],
	},
	"docgen:campaign_manager:cm:progress_on_panel_dismissed": {
		"scope": "lua",
		"prefix": "cm:progress_on_panel_dismissed",
		"description": "campaign_manager:progress_on_panel_dismissed()\n-  -\n\nCalls a supplied callback when a panel with the supplied name is closed.\n",
		"body": [
			"cm:progress_on_panel_dismissed(${1:string unique name}, ${2:string panel name}, ${3:function callback}, ${4:[opt=0] number callback delay})"
		],
	},
	"docgen:campaign_manager:cancel_progress_on_panel_dismissed": {
		"scope": "lua",
		"prefix": "cancel_progress_on_panel_dismissed",
		"description": "campaign_manager:cancel_progress_on_panel_dismissed()\n-  -\n\nCancels a monitor started with campaign_manager:progress_on_panel_dismissed by name.\n",
		"body": [
			"cancel_progress_on_panel_dismissed(${1:string unique name})"
		],
	},
	"docgen:campaign_manager:campaign_manager:cancel_progress_on_panel_dismissed": {
		"scope": "lua",
		"prefix": "campaign_manager:cancel_progress_on_panel_dismissed",
		"description": "campaign_manager:cancel_progress_on_panel_dismissed()\n-  -\n\nCancels a monitor started with campaign_manager:progress_on_panel_dismissed by name.\n",
		"body": [
			"campaign_manager:cancel_progress_on_panel_dismissed(${1:string unique name})"
		],
	},
	"docgen:campaign_manager:cm:cancel_progress_on_panel_dismissed": {
		"scope": "lua",
		"prefix": "cm:cancel_progress_on_panel_dismissed",
		"description": "campaign_manager:cancel_progress_on_panel_dismissed()\n-  -\n\nCancels a monitor started with campaign_manager:progress_on_panel_dismissed by name.\n",
		"body": [
			"cm:cancel_progress_on_panel_dismissed(${1:string unique name})"
		],
	},
	"docgen:campaign_manager:progress_on_events_dismissed": {
		"scope": "lua",
		"prefix": "progress_on_events_dismissed",
		"description": "campaign_manager:progress_on_events_dismissed()\n-  -\n\nCalls a supplied callback when all events panels are closed.\n",
		"body": [
			"progress_on_events_dismissed(${1:string unique name}, ${2:function callback}, ${3:[opt=0] number callback delay})"
		],
	},
	"docgen:campaign_manager:campaign_manager:progress_on_events_dismissed": {
		"scope": "lua",
		"prefix": "campaign_manager:progress_on_events_dismissed",
		"description": "campaign_manager:progress_on_events_dismissed()\n-  -\n\nCalls a supplied callback when all events panels are closed.\n",
		"body": [
			"campaign_manager:progress_on_events_dismissed(${1:string unique name}, ${2:function callback}, ${3:[opt=0] number callback delay})"
		],
	},
	"docgen:campaign_manager:cm:progress_on_events_dismissed": {
		"scope": "lua",
		"prefix": "cm:progress_on_events_dismissed",
		"description": "campaign_manager:progress_on_events_dismissed()\n-  -\n\nCalls a supplied callback when all events panels are closed.\n",
		"body": [
			"cm:progress_on_events_dismissed(${1:string unique name}, ${2:function callback}, ${3:[opt=0] number callback delay})"
		],
	},
	"docgen:campaign_manager:cancel_progress_on_events_dismissed": {
		"scope": "lua",
		"prefix": "cancel_progress_on_events_dismissed",
		"description": "campaign_manager:cancel_progress_on_events_dismissed()\n-  -\n\nCancels a monitor started with campaign_manager:progress_on_events_dismissed (or campaign_manager:progress_on_panel_dismissed) by name.\n",
		"body": [
			"cancel_progress_on_events_dismissed(${1:string unique name})"
		],
	},
	"docgen:campaign_manager:campaign_manager:cancel_progress_on_events_dismissed": {
		"scope": "lua",
		"prefix": "campaign_manager:cancel_progress_on_events_dismissed",
		"description": "campaign_manager:cancel_progress_on_events_dismissed()\n-  -\n\nCancels a monitor started with campaign_manager:progress_on_events_dismissed (or campaign_manager:progress_on_panel_dismissed) by name.\n",
		"body": [
			"campaign_manager:cancel_progress_on_events_dismissed(${1:string unique name})"
		],
	},
	"docgen:campaign_manager:cm:cancel_progress_on_events_dismissed": {
		"scope": "lua",
		"prefix": "cm:cancel_progress_on_events_dismissed",
		"description": "campaign_manager:cancel_progress_on_events_dismissed()\n-  -\n\nCancels a monitor started with campaign_manager:progress_on_events_dismissed (or campaign_manager:progress_on_panel_dismissed) by name.\n",
		"body": [
			"cm:cancel_progress_on_events_dismissed(${1:string unique name})"
		],
	},
	"docgen:campaign_manager:progress_on_fullscreen_panel_dismissed": {
		"scope": "lua",
		"prefix": "progress_on_fullscreen_panel_dismissed",
		"description": "campaign_manager:progress_on_fullscreen_panel_dismissed()\n-  -\n\nCalls the supplied callback when all fullscreen campaign panels are dismissed.\n",
		"body": [
			"progress_on_fullscreen_panel_dismissed(${1:function callback}, ${2:[opt=0] number callback delay})"
		],
	},
	"docgen:campaign_manager:campaign_manager:progress_on_fullscreen_panel_dismissed": {
		"scope": "lua",
		"prefix": "campaign_manager:progress_on_fullscreen_panel_dismissed",
		"description": "campaign_manager:progress_on_fullscreen_panel_dismissed()\n-  -\n\nCalls the supplied callback when all fullscreen campaign panels are dismissed.\n",
		"body": [
			"campaign_manager:progress_on_fullscreen_panel_dismissed(${1:function callback}, ${2:[opt=0] number callback delay})"
		],
	},
	"docgen:campaign_manager:cm:progress_on_fullscreen_panel_dismissed": {
		"scope": "lua",
		"prefix": "cm:progress_on_fullscreen_panel_dismissed",
		"description": "campaign_manager:progress_on_fullscreen_panel_dismissed()\n-  -\n\nCalls the supplied callback when all fullscreen campaign panels are dismissed.\n",
		"body": [
			"cm:progress_on_fullscreen_panel_dismissed(${1:function callback}, ${2:[opt=0] number callback delay})"
		],
	},
	"docgen:campaign_manager:cancel_progress_on_fullscreen_panel_dismissed": {
		"scope": "lua",
		"prefix": "cancel_progress_on_fullscreen_panel_dismissed",
		"description": "campaign_manager:cancel_progress_on_fullscreen_panel_dismissed()\n-  -\n\nCancels any running monitor started with campaign_manager:progress_on_fullscreen_panel_dismissed.\n",
		"body": [
			"cancel_progress_on_fullscreen_panel_dismissed(${1:function callback}, ${2:[opt=0] number callback delay})"
		],
	},
	"docgen:campaign_manager:campaign_manager:cancel_progress_on_fullscreen_panel_dismissed": {
		"scope": "lua",
		"prefix": "campaign_manager:cancel_progress_on_fullscreen_panel_dismissed",
		"description": "campaign_manager:cancel_progress_on_fullscreen_panel_dismissed()\n-  -\n\nCancels any running monitor started with campaign_manager:progress_on_fullscreen_panel_dismissed.\n",
		"body": [
			"campaign_manager:cancel_progress_on_fullscreen_panel_dismissed(${1:function callback}, ${2:[opt=0] number callback delay})"
		],
	},
	"docgen:campaign_manager:cm:cancel_progress_on_fullscreen_panel_dismissed": {
		"scope": "lua",
		"prefix": "cm:cancel_progress_on_fullscreen_panel_dismissed",
		"description": "campaign_manager:cancel_progress_on_fullscreen_panel_dismissed()\n-  -\n\nCancels any running monitor started with campaign_manager:progress_on_fullscreen_panel_dismissed.\n",
		"body": [
			"cm:cancel_progress_on_fullscreen_panel_dismissed(${1:function callback}, ${2:[opt=0] number callback delay})"
		],
	},
	"docgen:campaign_manager:start_intro_cutscene_on_loading_screen_dismissed": {
		"scope": "lua",
		"prefix": "start_intro_cutscene_on_loading_screen_dismissed",
		"description": "campaign_manager:start_intro_cutscene_on_loading_screen_dismissed()\n-  -\n\nThis function provides an easy one-shot method of starting an intro flyby cutscene from a loading screen with a fade effect.\n",
		"body": [
			"start_intro_cutscene_on_loading_screen_dismissed(${1:function callback}, ${2:[opt=0] number fade in time})"
		],
	},
	"docgen:campaign_manager:campaign_manager:start_intro_cutscene_on_loading_screen_dismissed": {
		"scope": "lua",
		"prefix": "campaign_manager:start_intro_cutscene_on_loading_screen_dismissed",
		"description": "campaign_manager:start_intro_cutscene_on_loading_screen_dismissed()\n-  -\n\nThis function provides an easy one-shot method of starting an intro flyby cutscene from a loading screen with a fade effect.\n",
		"body": [
			"campaign_manager:start_intro_cutscene_on_loading_screen_dismissed(${1:function callback}, ${2:[opt=0] number fade in time})"
		],
	},
	"docgen:campaign_manager:cm:start_intro_cutscene_on_loading_screen_dismissed": {
		"scope": "lua",
		"prefix": "cm:start_intro_cutscene_on_loading_screen_dismissed",
		"description": "campaign_manager:start_intro_cutscene_on_loading_screen_dismissed()\n-  -\n\nThis function provides an easy one-shot method of starting an intro flyby cutscene from a loading screen with a fade effect.\n",
		"body": [
			"cm:start_intro_cutscene_on_loading_screen_dismissed(${1:function callback}, ${2:[opt=0] number fade in time})"
		],
	},
	"docgen:campaign_manager:progress_on_battle_completed": {
		"scope": "lua",
		"prefix": "progress_on_battle_completed",
		"description": "campaign_manager:progress_on_battle_completed()\n-  -\n\nCalls the supplied callback when a battle sequence is fully completed.\n",
		"body": [
			"progress_on_battle_completed(${1:string name}, ${2:function callback}, ${3:[opt=0] number delay})"
		],
	},
	"docgen:campaign_manager:campaign_manager:progress_on_battle_completed": {
		"scope": "lua",
		"prefix": "campaign_manager:progress_on_battle_completed",
		"description": "campaign_manager:progress_on_battle_completed()\n-  -\n\nCalls the supplied callback when a battle sequence is fully completed.\n",
		"body": [
			"campaign_manager:progress_on_battle_completed(${1:string name}, ${2:function callback}, ${3:[opt=0] number delay})"
		],
	},
	"docgen:campaign_manager:cm:progress_on_battle_completed": {
		"scope": "lua",
		"prefix": "cm:progress_on_battle_completed",
		"description": "campaign_manager:progress_on_battle_completed()\n-  -\n\nCalls the supplied callback when a battle sequence is fully completed.\n",
		"body": [
			"cm:progress_on_battle_completed(${1:string name}, ${2:function callback}, ${3:[opt=0] number delay})"
		],
	},
	"docgen:campaign_manager:cancel_progress_on_battle_completed": {
		"scope": "lua",
		"prefix": "cancel_progress_on_battle_completed",
		"description": "campaign_manager:cancel_progress_on_battle_completed()\n-  -\n\nCancels a running monitor started with campaign_manager:progress_on_battle_completed by name.\n",
		"body": [
			"cancel_progress_on_battle_completed(${1:string name})"
		],
	},
	"docgen:campaign_manager:campaign_manager:cancel_progress_on_battle_completed": {
		"scope": "lua",
		"prefix": "campaign_manager:cancel_progress_on_battle_completed",
		"description": "campaign_manager:cancel_progress_on_battle_completed()\n-  -\n\nCancels a running monitor started with campaign_manager:progress_on_battle_completed by name.\n",
		"body": [
			"campaign_manager:cancel_progress_on_battle_completed(${1:string name})"
		],
	},
	"docgen:campaign_manager:cm:cancel_progress_on_battle_completed": {
		"scope": "lua",
		"prefix": "cm:cancel_progress_on_battle_completed",
		"description": "campaign_manager:cancel_progress_on_battle_completed()\n-  -\n\nCancels a running monitor started with campaign_manager:progress_on_battle_completed by name.\n",
		"body": [
			"cm:cancel_progress_on_battle_completed(${1:string name})"
		],
	},
	"docgen:campaign_manager:progress_on_camera_movement_finished": {
		"scope": "lua",
		"prefix": "progress_on_camera_movement_finished",
		"description": "campaign_manager:progress_on_camera_movement_finished()\n-  -\n\nCalls the supplied callback when the campaign camera is seen to have finished moving.\n",
		"body": [
			"progress_on_camera_movement_finished(${1:function callback}, ${2:[opt=0] number delay})"
		],
	},
	"docgen:campaign_manager:campaign_manager:progress_on_camera_movement_finished": {
		"scope": "lua",
		"prefix": "campaign_manager:progress_on_camera_movement_finished",
		"description": "campaign_manager:progress_on_camera_movement_finished()\n-  -\n\nCalls the supplied callback when the campaign camera is seen to have finished moving.\n",
		"body": [
			"campaign_manager:progress_on_camera_movement_finished(${1:function callback}, ${2:[opt=0] number delay})"
		],
	},
	"docgen:campaign_manager:cm:progress_on_camera_movement_finished": {
		"scope": "lua",
		"prefix": "cm:progress_on_camera_movement_finished",
		"description": "campaign_manager:progress_on_camera_movement_finished()\n-  -\n\nCalls the supplied callback when the campaign camera is seen to have finished moving.\n",
		"body": [
			"cm:progress_on_camera_movement_finished(${1:function callback}, ${2:[opt=0] number delay})"
		],
	},
	"docgen:campaign_manager:cancel_progress_on_camera_movement_finished": {
		"scope": "lua",
		"prefix": "cancel_progress_on_camera_movement_finished",
		"description": "campaign_manager:cancel_progress_on_camera_movement_finished()\n-  -\n\nCancels a running monitor started with campaign_manager:progress_on_camera_movement_finished.\n",
		"body": [
			"cancel_progress_on_camera_movement_finished()"
		],
	},
	"docgen:campaign_manager:campaign_manager:cancel_progress_on_camera_movement_finished": {
		"scope": "lua",
		"prefix": "campaign_manager:cancel_progress_on_camera_movement_finished",
		"description": "campaign_manager:cancel_progress_on_camera_movement_finished()\n-  -\n\nCancels a running monitor started with campaign_manager:progress_on_camera_movement_finished.\n",
		"body": [
			"campaign_manager:cancel_progress_on_camera_movement_finished()"
		],
	},
	"docgen:campaign_manager:cm:cancel_progress_on_camera_movement_finished": {
		"scope": "lua",
		"prefix": "cm:cancel_progress_on_camera_movement_finished",
		"description": "campaign_manager:cancel_progress_on_camera_movement_finished()\n-  -\n\nCancels a running monitor started with campaign_manager:progress_on_camera_movement_finished.\n",
		"body": [
			"cm:cancel_progress_on_camera_movement_finished()"
		],
	},
	"docgen:campaign_manager:progress_on_post_battle_panel_visible": {
		"scope": "lua",
		"prefix": "progress_on_post_battle_panel_visible",
		"description": "campaign_manager:progress_on_post_battle_panel_visible()\n-  -\n\nCalls the supplied callback when the post-battle panel has finished animating on-screen.\n",
		"body": [
			"progress_on_post_battle_panel_visible(${1:function callback}, ${2:[opt=0] number delay})"
		],
	},
	"docgen:campaign_manager:campaign_manager:progress_on_post_battle_panel_visible": {
		"scope": "lua",
		"prefix": "campaign_manager:progress_on_post_battle_panel_visible",
		"description": "campaign_manager:progress_on_post_battle_panel_visible()\n-  -\n\nCalls the supplied callback when the post-battle panel has finished animating on-screen.\n",
		"body": [
			"campaign_manager:progress_on_post_battle_panel_visible(${1:function callback}, ${2:[opt=0] number delay})"
		],
	},
	"docgen:campaign_manager:cm:progress_on_post_battle_panel_visible": {
		"scope": "lua",
		"prefix": "cm:progress_on_post_battle_panel_visible",
		"description": "campaign_manager:progress_on_post_battle_panel_visible()\n-  -\n\nCalls the supplied callback when the post-battle panel has finished animating on-screen.\n",
		"body": [
			"cm:progress_on_post_battle_panel_visible(${1:function callback}, ${2:[opt=0] number delay})"
		],
	},
	"docgen:campaign_manager:cancel_progress_on_post_battle_panel_visible": {
		"scope": "lua",
		"prefix": "cancel_progress_on_post_battle_panel_visible",
		"description": "campaign_manager:cancel_progress_on_post_battle_panel_visible()\n-  -\n\nCancels a running monitor started with campaign_manager:progress_on_post_battle_panel_visible.\n",
		"body": [
			"cancel_progress_on_post_battle_panel_visible()"
		],
	},
	"docgen:campaign_manager:campaign_manager:cancel_progress_on_post_battle_panel_visible": {
		"scope": "lua",
		"prefix": "campaign_manager:cancel_progress_on_post_battle_panel_visible",
		"description": "campaign_manager:cancel_progress_on_post_battle_panel_visible()\n-  -\n\nCancels a running monitor started with campaign_manager:progress_on_post_battle_panel_visible.\n",
		"body": [
			"campaign_manager:cancel_progress_on_post_battle_panel_visible()"
		],
	},
	"docgen:campaign_manager:cm:cancel_progress_on_post_battle_panel_visible": {
		"scope": "lua",
		"prefix": "cm:cancel_progress_on_post_battle_panel_visible",
		"description": "campaign_manager:cancel_progress_on_post_battle_panel_visible()\n-  -\n\nCancels a running monitor started with campaign_manager:progress_on_post_battle_panel_visible.\n",
		"body": [
			"cm:cancel_progress_on_post_battle_panel_visible()"
		],
	},
	"docgen:campaign_manager:create_force": {
		"scope": "lua",
		"prefix": "create_force",
		"description": "campaign_manager:create_force()\n-  -\n\nWrapper for create_force function on the underlying <a href=\".\n",
		"body": [
			"create_force(${1:string faction key}, ${2:string unit list}, ${3:string region key}, ${4:number x}, ${5:number y}, ${6:boolean exclude named characters}, ${7:[opt=nil] function success callback})"
		],
	},
	"docgen:campaign_manager:campaign_manager:create_force": {
		"scope": "lua",
		"prefix": "campaign_manager:create_force",
		"description": "campaign_manager:create_force()\n-  -\n\nWrapper for create_force function on the underlying <a href=\".\n",
		"body": [
			"campaign_manager:create_force(${1:string faction key}, ${2:string unit list}, ${3:string region key}, ${4:number x}, ${5:number y}, ${6:boolean exclude named characters}, ${7:[opt=nil] function success callback})"
		],
	},
	"docgen:campaign_manager:cm:create_force": {
		"scope": "lua",
		"prefix": "cm:create_force",
		"description": "campaign_manager:create_force()\n-  -\n\nWrapper for create_force function on the underlying <a href=\".\n",
		"body": [
			"cm:create_force(${1:string faction key}, ${2:string unit list}, ${3:string region key}, ${4:number x}, ${5:number y}, ${6:boolean exclude named characters}, ${7:[opt=nil] function success callback})"
		],
	},
	"docgen:campaign_manager:create_force_with_general": {
		"scope": "lua",
		"prefix": "create_force_with_general",
		"description": "campaign_manager:create_force_with_general()\n-  -\n\nWrapper for create_force_with_general function on the underlying <a href=\".\n",
		"body": [
			"create_force_with_general(${1:string faction key}, ${2:string unit list}, ${3:string region key}, ${4:number x}, ${5:number y}, ${6:string agent type}, ${7:string agent subtype}, ${8:string forename}, ${9:string clan name}, ${10:string family name}, ${11:string other name}, ${12:boolean make faction leader}, ${13:[opt=nil] function success callback})"
		],
	},
	"docgen:campaign_manager:campaign_manager:create_force_with_general": {
		"scope": "lua",
		"prefix": "campaign_manager:create_force_with_general",
		"description": "campaign_manager:create_force_with_general()\n-  -\n\nWrapper for create_force_with_general function on the underlying <a href=\".\n",
		"body": [
			"campaign_manager:create_force_with_general(${1:string faction key}, ${2:string unit list}, ${3:string region key}, ${4:number x}, ${5:number y}, ${6:string agent type}, ${7:string agent subtype}, ${8:string forename}, ${9:string clan name}, ${10:string family name}, ${11:string other name}, ${12:boolean make faction leader}, ${13:[opt=nil] function success callback})"
		],
	},
	"docgen:campaign_manager:cm:create_force_with_general": {
		"scope": "lua",
		"prefix": "cm:create_force_with_general",
		"description": "campaign_manager:create_force_with_general()\n-  -\n\nWrapper for create_force_with_general function on the underlying <a href=\".\n",
		"body": [
			"cm:create_force_with_general(${1:string faction key}, ${2:string unit list}, ${3:string region key}, ${4:number x}, ${5:number y}, ${6:string agent type}, ${7:string agent subtype}, ${8:string forename}, ${9:string clan name}, ${10:string family name}, ${11:string other name}, ${12:boolean make faction leader}, ${13:[opt=nil] function success callback})"
		],
	},
	"docgen:campaign_manager:create_force_with_existing_general": {
		"scope": "lua",
		"prefix": "create_force_with_existing_general",
		"description": "campaign_manager:create_force_with_existing_general()\n-  -\n\nWrapper for create_force_with_existing_general function on the underlying <a href=\".\n",
		"body": [
			"create_force_with_existing_general(${1:string character lookup}, ${2:string faction key}, ${3:string unit list}, ${4:string region key}, ${5:number x}, ${6:number y}, ${7:[opt=nil] function success callback})"
		],
	},
	"docgen:campaign_manager:campaign_manager:create_force_with_existing_general": {
		"scope": "lua",
		"prefix": "campaign_manager:create_force_with_existing_general",
		"description": "campaign_manager:create_force_with_existing_general()\n-  -\n\nWrapper for create_force_with_existing_general function on the underlying <a href=\".\n",
		"body": [
			"campaign_manager:create_force_with_existing_general(${1:string character lookup}, ${2:string faction key}, ${3:string unit list}, ${4:string region key}, ${5:number x}, ${6:number y}, ${7:[opt=nil] function success callback})"
		],
	},
	"docgen:campaign_manager:cm:create_force_with_existing_general": {
		"scope": "lua",
		"prefix": "cm:create_force_with_existing_general",
		"description": "campaign_manager:create_force_with_existing_general()\n-  -\n\nWrapper for create_force_with_existing_general function on the underlying <a href=\".\n",
		"body": [
			"cm:create_force_with_existing_general(${1:string character lookup}, ${2:string faction key}, ${3:string unit list}, ${4:string region key}, ${5:number x}, ${6:number y}, ${7:[opt=nil] function success callback})"
		],
	},
	"docgen:campaign_manager:kill_character": {
		"scope": "lua",
		"prefix": "kill_character",
		"description": "campaign_manager:kill_character()\n-  -\n\nKills the specified character, with the ability to also destroy their whole force if they are commanding one.\n",
		"body": [
			"kill_character(${1:string character lookup string}, ${2:[opt=false] boolean destroy force}, ${3:[opt=true] boolean use command queue})"
		],
	},
	"docgen:campaign_manager:campaign_manager:kill_character": {
		"scope": "lua",
		"prefix": "campaign_manager:kill_character",
		"description": "campaign_manager:kill_character()\n-  -\n\nKills the specified character, with the ability to also destroy their whole force if they are commanding one.\n",
		"body": [
			"campaign_manager:kill_character(${1:string character lookup string}, ${2:[opt=false] boolean destroy force}, ${3:[opt=true] boolean use command queue})"
		],
	},
	"docgen:campaign_manager:cm:kill_character": {
		"scope": "lua",
		"prefix": "cm:kill_character",
		"description": "campaign_manager:kill_character()\n-  -\n\nKills the specified character, with the ability to also destroy their whole force if they are commanding one.\n",
		"body": [
			"cm:kill_character(${1:string character lookup string}, ${2:[opt=false] boolean destroy force}, ${3:[opt=true] boolean use command queue})"
		],
	},
	"docgen:campaign_manager:add_building_to_force": {
		"scope": "lua",
		"prefix": "add_building_to_force",
		"description": "campaign_manager:add_building_to_force()\n-  -\n\nAdds one or more buildings to a horde army.\n",
		"body": [
			"add_building_to_force(${1:number military force cqi}, ${2:object building(s)})"
		],
	},
	"docgen:campaign_manager:campaign_manager:add_building_to_force": {
		"scope": "lua",
		"prefix": "campaign_manager:add_building_to_force",
		"description": "campaign_manager:add_building_to_force()\n-  -\n\nAdds one or more buildings to a horde army.\n",
		"body": [
			"campaign_manager:add_building_to_force(${1:number military force cqi}, ${2:object building(s)})"
		],
	},
	"docgen:campaign_manager:cm:add_building_to_force": {
		"scope": "lua",
		"prefix": "cm:add_building_to_force",
		"description": "campaign_manager:add_building_to_force()\n-  -\n\nAdds one or more buildings to a horde army.\n",
		"body": [
			"cm:add_building_to_force(${1:number military force cqi}, ${2:object building(s)})"
		],
	},
	"docgen:campaign_manager:create_agent": {
		"scope": "lua",
		"prefix": "create_agent",
		"description": "campaign_manager:create_agent()\n-  -\n\nWrapper for create_agent function on the underlying <a href=\".\n",
		"body": [
			"create_agent(${1:string faction key}, ${2:string character type}, ${3:string character subtype}, ${4:number x}, ${5:number y}, ${6:string id}, ${7:boolean use command queue}, ${8:[opt=nil] function success callback})"
		],
	},
	"docgen:campaign_manager:campaign_manager:create_agent": {
		"scope": "lua",
		"prefix": "campaign_manager:create_agent",
		"description": "campaign_manager:create_agent()\n-  -\n\nWrapper for create_agent function on the underlying <a href=\".\n",
		"body": [
			"campaign_manager:create_agent(${1:string faction key}, ${2:string character type}, ${3:string character subtype}, ${4:number x}, ${5:number y}, ${6:string id}, ${7:boolean use command queue}, ${8:[opt=nil] function success callback})"
		],
	},
	"docgen:campaign_manager:cm:create_agent": {
		"scope": "lua",
		"prefix": "cm:create_agent",
		"description": "campaign_manager:create_agent()\n-  -\n\nWrapper for create_agent function on the underlying <a href=\".\n",
		"body": [
			"cm:create_agent(${1:string faction key}, ${2:string character type}, ${3:string character subtype}, ${4:number x}, ${5:number y}, ${6:string id}, ${7:boolean use command queue}, ${8:[opt=nil] function success callback})"
		],
	},
	"docgen:campaign_manager:reposition_starting_character_for_faction": {
		"scope": "lua",
		"prefix": "reposition_starting_character_for_faction",
		"description": "campaign_manager:reposition_starting_character_for_faction()\n-  -\n\nRepositions a specified character (the <i>target</i>) for a faction at start of a campaign, but only if another character (the <i>subject</i>) exists in that faction and is in command of an army.\n",
		"body": [
			"reposition_starting_character_for_faction(${1:string faction key}, ${2:string forename key}, ${3:string forename key}, ${4:number x}, ${5:number y})"
		],
	},
	"docgen:campaign_manager:campaign_manager:reposition_starting_character_for_faction": {
		"scope": "lua",
		"prefix": "campaign_manager:reposition_starting_character_for_faction",
		"description": "campaign_manager:reposition_starting_character_for_faction()\n-  -\n\nRepositions a specified character (the <i>target</i>) for a faction at start of a campaign, but only if another character (the <i>subject</i>) exists in that faction and is in command of an army.\n",
		"body": [
			"campaign_manager:reposition_starting_character_for_faction(${1:string faction key}, ${2:string forename key}, ${3:string forename key}, ${4:number x}, ${5:number y})"
		],
	},
	"docgen:campaign_manager:cm:reposition_starting_character_for_faction": {
		"scope": "lua",
		"prefix": "cm:reposition_starting_character_for_faction",
		"description": "campaign_manager:reposition_starting_character_for_faction()\n-  -\n\nRepositions a specified character (the <i>target</i>) for a faction at start of a campaign, but only if another character (the <i>subject</i>) exists in that faction and is in command of an army.\n",
		"body": [
			"cm:reposition_starting_character_for_faction(${1:string faction key}, ${2:string forename key}, ${3:string forename key}, ${4:number x}, ${5:number y})"
		],
	},
	"docgen:campaign_manager:spawn_army_starting_character_for_faction": {
		"scope": "lua",
		"prefix": "spawn_army_starting_character_for_faction",
		"description": "campaign_manager:spawn_army_starting_character_for_faction()\n-  -\n\nSpawns a specified force if a character (the <i>subject</i>) exists within a faction with an army.\n",
		"body": [
			"spawn_army_starting_character_for_faction(${1:string faction key}, ${2:string forename key}, ${3:string faction key}, ${4:string units}, ${5:string region key}, ${6:number x}, ${7:number y}, ${8:boolean make_immortal})"
		],
	},
	"docgen:campaign_manager:campaign_manager:spawn_army_starting_character_for_faction": {
		"scope": "lua",
		"prefix": "campaign_manager:spawn_army_starting_character_for_faction",
		"description": "campaign_manager:spawn_army_starting_character_for_faction()\n-  -\n\nSpawns a specified force if a character (the <i>subject</i>) exists within a faction with an army.\n",
		"body": [
			"campaign_manager:spawn_army_starting_character_for_faction(${1:string faction key}, ${2:string forename key}, ${3:string faction key}, ${4:string units}, ${5:string region key}, ${6:number x}, ${7:number y}, ${8:boolean make_immortal})"
		],
	},
	"docgen:campaign_manager:cm:spawn_army_starting_character_for_faction": {
		"scope": "lua",
		"prefix": "cm:spawn_army_starting_character_for_faction",
		"description": "campaign_manager:spawn_army_starting_character_for_faction()\n-  -\n\nSpawns a specified force if a character (the <i>subject</i>) exists within a faction with an army.\n",
		"body": [
			"cm:spawn_army_starting_character_for_faction(${1:string faction key}, ${2:string forename key}, ${3:string faction key}, ${4:string units}, ${5:string region key}, ${6:number x}, ${7:number y}, ${8:boolean make_immortal})"
		],
	},
	"docgen:campaign_manager:move_character": {
		"scope": "lua",
		"prefix": "move_character",
		"description": "campaign_manager:move_character()\n-  -\n\nHelper function to move a character.\n",
		"body": [
			"move_character(${1:number cqi}, ${2:number x}, ${3:number y}, ${4:[opt=false] boolean should replenish}, ${5:[opt=true] boolean allow post movement}, ${6:[opt=nil] function success callback}, ${7:[opt=nil] function fail callback})"
		],
	},
	"docgen:campaign_manager:campaign_manager:move_character": {
		"scope": "lua",
		"prefix": "campaign_manager:move_character",
		"description": "campaign_manager:move_character()\n-  -\n\nHelper function to move a character.\n",
		"body": [
			"campaign_manager:move_character(${1:number cqi}, ${2:number x}, ${3:number y}, ${4:[opt=false] boolean should replenish}, ${5:[opt=true] boolean allow post movement}, ${6:[opt=nil] function success callback}, ${7:[opt=nil] function fail callback})"
		],
	},
	"docgen:campaign_manager:cm:move_character": {
		"scope": "lua",
		"prefix": "cm:move_character",
		"description": "campaign_manager:move_character()\n-  -\n\nHelper function to move a character.\n",
		"body": [
			"cm:move_character(${1:number cqi}, ${2:number x}, ${3:number y}, ${4:[opt=false] boolean should replenish}, ${5:[opt=true] boolean allow post movement}, ${6:[opt=nil] function success callback}, ${7:[opt=nil] function fail callback})"
		],
	},
	"docgen:campaign_manager:cancel_all_move_character": {
		"scope": "lua",
		"prefix": "cancel_all_move_character",
		"description": "campaign_manager:cancel_all_move_character()\n-  -\n\nCancels any running monitors started by campaign_manager:move_character.\n",
		"body": [
			"cancel_all_move_character()"
		],
	},
	"docgen:campaign_manager:campaign_manager:cancel_all_move_character": {
		"scope": "lua",
		"prefix": "campaign_manager:cancel_all_move_character",
		"description": "campaign_manager:cancel_all_move_character()\n-  -\n\nCancels any running monitors started by campaign_manager:move_character.\n",
		"body": [
			"campaign_manager:cancel_all_move_character()"
		],
	},
	"docgen:campaign_manager:cm:cancel_all_move_character": {
		"scope": "lua",
		"prefix": "cm:cancel_all_move_character",
		"description": "campaign_manager:cancel_all_move_character()\n-  -\n\nCancels any running monitors started by campaign_manager:move_character.\n",
		"body": [
			"cm:cancel_all_move_character()"
		],
	},
	"docgen:campaign_manager:is_character_moving": {
		"scope": "lua",
		"prefix": "is_character_moving",
		"description": "campaign_manager:is_character_moving()\n-  -\n\nCalls one callback if a specified character is currently moving, and another if it's not.\n",
		"body": [
			"is_character_moving(${1:number cqi}, ${2:function moving callback}, ${3:function not moving callback})"
		],
	},
	"docgen:campaign_manager:campaign_manager:is_character_moving": {
		"scope": "lua",
		"prefix": "campaign_manager:is_character_moving",
		"description": "campaign_manager:is_character_moving()\n-  -\n\nCalls one callback if a specified character is currently moving, and another if it's not.\n",
		"body": [
			"campaign_manager:is_character_moving(${1:number cqi}, ${2:function moving callback}, ${3:function not moving callback})"
		],
	},
	"docgen:campaign_manager:cm:is_character_moving": {
		"scope": "lua",
		"prefix": "cm:is_character_moving",
		"description": "campaign_manager:is_character_moving()\n-  -\n\nCalls one callback if a specified character is currently moving, and another if it's not.\n",
		"body": [
			"cm:is_character_moving(${1:number cqi}, ${2:function moving callback}, ${3:function not moving callback})"
		],
	},
	"docgen:campaign_manager:stop_is_character_moving": {
		"scope": "lua",
		"prefix": "stop_is_character_moving",
		"description": "campaign_manager:stop_is_character_moving()\n-  -\n\nStops any running monitor started with campaign_manager:is_character_moving, by character.\n",
		"body": [
			"stop_is_character_moving(${1:number cqi})"
		],
	},
	"docgen:campaign_manager:campaign_manager:stop_is_character_moving": {
		"scope": "lua",
		"prefix": "campaign_manager:stop_is_character_moving",
		"description": "campaign_manager:stop_is_character_moving()\n-  -\n\nStops any running monitor started with campaign_manager:is_character_moving, by character.\n",
		"body": [
			"campaign_manager:stop_is_character_moving(${1:number cqi})"
		],
	},
	"docgen:campaign_manager:cm:stop_is_character_moving": {
		"scope": "lua",
		"prefix": "cm:stop_is_character_moving",
		"description": "campaign_manager:stop_is_character_moving()\n-  -\n\nStops any running monitor started with campaign_manager:is_character_moving, by character.\n",
		"body": [
			"cm:stop_is_character_moving(${1:number cqi})"
		],
	},
	"docgen:campaign_manager:notify_on_character_halt": {
		"scope": "lua",
		"prefix": "notify_on_character_halt",
		"description": "campaign_manager:notify_on_character_halt()\n-  -\n\nCalls the supplied callback as soon as a character is determined to be stationary.\n",
		"body": [
			"notify_on_character_halt(${1:number cqi}, ${2:function callback}, ${3:[opt=false] boolean must move first})"
		],
	},
	"docgen:campaign_manager:campaign_manager:notify_on_character_halt": {
		"scope": "lua",
		"prefix": "campaign_manager:notify_on_character_halt",
		"description": "campaign_manager:notify_on_character_halt()\n-  -\n\nCalls the supplied callback as soon as a character is determined to be stationary.\n",
		"body": [
			"campaign_manager:notify_on_character_halt(${1:number cqi}, ${2:function callback}, ${3:[opt=false] boolean must move first})"
		],
	},
	"docgen:campaign_manager:cm:notify_on_character_halt": {
		"scope": "lua",
		"prefix": "cm:notify_on_character_halt",
		"description": "campaign_manager:notify_on_character_halt()\n-  -\n\nCalls the supplied callback as soon as a character is determined to be stationary.\n",
		"body": [
			"cm:notify_on_character_halt(${1:number cqi}, ${2:function callback}, ${3:[opt=false] boolean must move first})"
		],
	},
	"docgen:campaign_manager:stop_notify_on_character_halt": {
		"scope": "lua",
		"prefix": "stop_notify_on_character_halt",
		"description": "campaign_manager:stop_notify_on_character_halt()\n-  -\n\nStops any monitor started by campaign_manager:notify_on_character_halt, by character cqi.\n",
		"body": [
			"stop_notify_on_character_halt(${1:number cqi})"
		],
	},
	"docgen:campaign_manager:campaign_manager:stop_notify_on_character_halt": {
		"scope": "lua",
		"prefix": "campaign_manager:stop_notify_on_character_halt",
		"description": "campaign_manager:stop_notify_on_character_halt()\n-  -\n\nStops any monitor started by campaign_manager:notify_on_character_halt, by character cqi.\n",
		"body": [
			"campaign_manager:stop_notify_on_character_halt(${1:number cqi})"
		],
	},
	"docgen:campaign_manager:cm:stop_notify_on_character_halt": {
		"scope": "lua",
		"prefix": "cm:stop_notify_on_character_halt",
		"description": "campaign_manager:stop_notify_on_character_halt()\n-  -\n\nStops any monitor started by campaign_manager:notify_on_character_halt, by character cqi.\n",
		"body": [
			"cm:stop_notify_on_character_halt(${1:number cqi})"
		],
	},
	"docgen:campaign_manager:notify_on_character_movement": {
		"scope": "lua",
		"prefix": "notify_on_character_movement",
		"description": "campaign_manager:notify_on_character_movement()\n-  -\n\nCalls the supplied callback as soon as a character is determined to be moving.\n",
		"body": [
			"notify_on_character_movement(${1:number cqi}, ${2:function callback}, ${3:[opt=false] boolean land only})"
		],
	},
	"docgen:campaign_manager:campaign_manager:notify_on_character_movement": {
		"scope": "lua",
		"prefix": "campaign_manager:notify_on_character_movement",
		"description": "campaign_manager:notify_on_character_movement()\n-  -\n\nCalls the supplied callback as soon as a character is determined to be moving.\n",
		"body": [
			"campaign_manager:notify_on_character_movement(${1:number cqi}, ${2:function callback}, ${3:[opt=false] boolean land only})"
		],
	},
	"docgen:campaign_manager:cm:notify_on_character_movement": {
		"scope": "lua",
		"prefix": "cm:notify_on_character_movement",
		"description": "campaign_manager:notify_on_character_movement()\n-  -\n\nCalls the supplied callback as soon as a character is determined to be moving.\n",
		"body": [
			"cm:notify_on_character_movement(${1:number cqi}, ${2:function callback}, ${3:[opt=false] boolean land only})"
		],
	},
	"docgen:campaign_manager:stop_notify_on_character_movement": {
		"scope": "lua",
		"prefix": "stop_notify_on_character_movement",
		"description": "campaign_manager:stop_notify_on_character_movement()\n-  -\n\nStops any monitor started by campaign_manager:notify_on_character_movement, by character cqi.\n",
		"body": [
			"stop_notify_on_character_movement(${1:number cqi})"
		],
	},
	"docgen:campaign_manager:campaign_manager:stop_notify_on_character_movement": {
		"scope": "lua",
		"prefix": "campaign_manager:stop_notify_on_character_movement",
		"description": "campaign_manager:stop_notify_on_character_movement()\n-  -\n\nStops any monitor started by campaign_manager:notify_on_character_movement, by character cqi.\n",
		"body": [
			"campaign_manager:stop_notify_on_character_movement(${1:number cqi})"
		],
	},
	"docgen:campaign_manager:cm:stop_notify_on_character_movement": {
		"scope": "lua",
		"prefix": "cm:stop_notify_on_character_movement",
		"description": "campaign_manager:stop_notify_on_character_movement()\n-  -\n\nStops any monitor started by campaign_manager:notify_on_character_movement, by character cqi.\n",
		"body": [
			"cm:stop_notify_on_character_movement(${1:number cqi})"
		],
	},
	"docgen:campaign_manager:attack": {
		"scope": "lua",
		"prefix": "attack",
		"description": "campaign_manager:attack()\n-  -\n\nInstruct a character at the head of a military force to attack another.\n",
		"body": [
			"attack(${1:string attacker}, ${2:string defender}, ${3:boolean command queue})"
		],
	},
	"docgen:campaign_manager:campaign_manager:attack": {
		"scope": "lua",
		"prefix": "campaign_manager:attack",
		"description": "campaign_manager:attack()\n-  -\n\nInstruct a character at the head of a military force to attack another.\n",
		"body": [
			"campaign_manager:attack(${1:string attacker}, ${2:string defender}, ${3:boolean command queue})"
		],
	},
	"docgen:campaign_manager:cm:attack": {
		"scope": "lua",
		"prefix": "cm:attack",
		"description": "campaign_manager:attack()\n-  -\n\nInstruct a character at the head of a military force to attack another.\n",
		"body": [
			"cm:attack(${1:string attacker}, ${2:string defender}, ${3:boolean command queue})"
		],
	},
	"docgen:campaign_manager:teleport_to": {
		"scope": "lua",
		"prefix": "teleport_to",
		"description": "campaign_manager:teleport_to()\n-  -\n\nTeleports a character to a logical position on the campaign map.\n",
		"body": [
			"teleport_to(${1:string character string}, ${2:number x}, ${3:number y}, ${4:[opt=false] boolean command queue})"
		],
	},
	"docgen:campaign_manager:campaign_manager:teleport_to": {
		"scope": "lua",
		"prefix": "campaign_manager:teleport_to",
		"description": "campaign_manager:teleport_to()\n-  -\n\nTeleports a character to a logical position on the campaign map.\n",
		"body": [
			"campaign_manager:teleport_to(${1:string character string}, ${2:number x}, ${3:number y}, ${4:[opt=false] boolean command queue})"
		],
	},
	"docgen:campaign_manager:cm:teleport_to": {
		"scope": "lua",
		"prefix": "cm:teleport_to",
		"description": "campaign_manager:teleport_to()\n-  -\n\nTeleports a character to a logical position on the campaign map.\n",
		"body": [
			"cm:teleport_to(${1:string character string}, ${2:number x}, ${3:number y}, ${4:[opt=false] boolean command queue})"
		],
	},
	"docgen:campaign_manager:enable_movement_for_character": {
		"scope": "lua",
		"prefix": "enable_movement_for_character",
		"description": "campaign_manager:enable_movement_for_character()\n-  -\n\nEnables movement for the supplied character.\n",
		"body": [
			"enable_movement_for_character(${1:string char lookup string})"
		],
	},
	"docgen:campaign_manager:campaign_manager:enable_movement_for_character": {
		"scope": "lua",
		"prefix": "campaign_manager:enable_movement_for_character",
		"description": "campaign_manager:enable_movement_for_character()\n-  -\n\nEnables movement for the supplied character.\n",
		"body": [
			"campaign_manager:enable_movement_for_character(${1:string char lookup string})"
		],
	},
	"docgen:campaign_manager:cm:enable_movement_for_character": {
		"scope": "lua",
		"prefix": "cm:enable_movement_for_character",
		"description": "campaign_manager:enable_movement_for_character()\n-  -\n\nEnables movement for the supplied character.\n",
		"body": [
			"cm:enable_movement_for_character(${1:string char lookup string})"
		],
	},
	"docgen:campaign_manager:disable_movement_for_character": {
		"scope": "lua",
		"prefix": "disable_movement_for_character",
		"description": "campaign_manager:disable_movement_for_character()\n-  -\n\nDisables movement for the supplied character.\n",
		"body": [
			"disable_movement_for_character(${1:string char lookup string})"
		],
	},
	"docgen:campaign_manager:campaign_manager:disable_movement_for_character": {
		"scope": "lua",
		"prefix": "campaign_manager:disable_movement_for_character",
		"description": "campaign_manager:disable_movement_for_character()\n-  -\n\nDisables movement for the supplied character.\n",
		"body": [
			"campaign_manager:disable_movement_for_character(${1:string char lookup string})"
		],
	},
	"docgen:campaign_manager:cm:disable_movement_for_character": {
		"scope": "lua",
		"prefix": "cm:disable_movement_for_character",
		"description": "campaign_manager:disable_movement_for_character()\n-  -\n\nDisables movement for the supplied character.\n",
		"body": [
			"cm:disable_movement_for_character(${1:string char lookup string})"
		],
	},
	"docgen:campaign_manager:enable_movement_for_faction": {
		"scope": "lua",
		"prefix": "enable_movement_for_faction",
		"description": "campaign_manager:enable_movement_for_faction()\n-  -\n\nEnables movement for the supplied faction.\n",
		"body": [
			"enable_movement_for_faction(${1:string faction key})"
		],
	},
	"docgen:campaign_manager:campaign_manager:enable_movement_for_faction": {
		"scope": "lua",
		"prefix": "campaign_manager:enable_movement_for_faction",
		"description": "campaign_manager:enable_movement_for_faction()\n-  -\n\nEnables movement for the supplied faction.\n",
		"body": [
			"campaign_manager:enable_movement_for_faction(${1:string faction key})"
		],
	},
	"docgen:campaign_manager:cm:enable_movement_for_faction": {
		"scope": "lua",
		"prefix": "cm:enable_movement_for_faction",
		"description": "campaign_manager:enable_movement_for_faction()\n-  -\n\nEnables movement for the supplied faction.\n",
		"body": [
			"cm:enable_movement_for_faction(${1:string faction key})"
		],
	},
	"docgen:campaign_manager:disable_movement_for_faction": {
		"scope": "lua",
		"prefix": "disable_movement_for_faction",
		"description": "campaign_manager:disable_movement_for_faction()\n-  -\n\nDisables movement for the supplied faction.\n",
		"body": [
			"disable_movement_for_faction(${1:string faction key})"
		],
	},
	"docgen:campaign_manager:campaign_manager:disable_movement_for_faction": {
		"scope": "lua",
		"prefix": "campaign_manager:disable_movement_for_faction",
		"description": "campaign_manager:disable_movement_for_faction()\n-  -\n\nDisables movement for the supplied faction.\n",
		"body": [
			"campaign_manager:disable_movement_for_faction(${1:string faction key})"
		],
	},
	"docgen:campaign_manager:cm:disable_movement_for_faction": {
		"scope": "lua",
		"prefix": "cm:disable_movement_for_faction",
		"description": "campaign_manager:disable_movement_for_faction()\n-  -\n\nDisables movement for the supplied faction.\n",
		"body": [
			"cm:disable_movement_for_faction(${1:string faction key})"
		],
	},
	"docgen:campaign_manager:force_add_trait": {
		"scope": "lua",
		"prefix": "force_add_trait",
		"description": "campaign_manager:force_add_trait()\n-  -\n\nForceably adds an trait to a character.\n",
		"body": [
			"force_add_trait(${1:string character string}, ${2:string trait key}, ${3:[opt=false] boolean show message}, ${4:[opt=1] number points}, ${5:[opt=true] command_queue, if this command goes to the queue})"
		],
	},
	"docgen:campaign_manager:campaign_manager:force_add_trait": {
		"scope": "lua",
		"prefix": "campaign_manager:force_add_trait",
		"description": "campaign_manager:force_add_trait()\n-  -\n\nForceably adds an trait to a character.\n",
		"body": [
			"campaign_manager:force_add_trait(${1:string character string}, ${2:string trait key}, ${3:[opt=false] boolean show message}, ${4:[opt=1] number points}, ${5:[opt=true] command_queue, if this command goes to the queue})"
		],
	},
	"docgen:campaign_manager:cm:force_add_trait": {
		"scope": "lua",
		"prefix": "cm:force_add_trait",
		"description": "campaign_manager:force_add_trait()\n-  -\n\nForceably adds an trait to a character.\n",
		"body": [
			"cm:force_add_trait(${1:string character string}, ${2:string trait key}, ${3:[opt=false] boolean show message}, ${4:[opt=1] number points}, ${5:[opt=true] command_queue, if this command goes to the queue})"
		],
	},
	"docgen:campaign_manager:force_add_skill": {
		"scope": "lua",
		"prefix": "force_add_skill",
		"description": "campaign_manager:force_add_skill()\n-  -\n\nForceably adds a skill to a character.\n",
		"body": [
			"force_add_skill(${1:string character string}, ${2:string skill key})"
		],
	},
	"docgen:campaign_manager:campaign_manager:force_add_skill": {
		"scope": "lua",
		"prefix": "campaign_manager:force_add_skill",
		"description": "campaign_manager:force_add_skill()\n-  -\n\nForceably adds a skill to a character.\n",
		"body": [
			"campaign_manager:force_add_skill(${1:string character string}, ${2:string skill key})"
		],
	},
	"docgen:campaign_manager:cm:force_add_skill": {
		"scope": "lua",
		"prefix": "cm:force_add_skill",
		"description": "campaign_manager:force_add_skill()\n-  -\n\nForceably adds a skill to a character.\n",
		"body": [
			"cm:force_add_skill(${1:string character string}, ${2:string skill key})"
		],
	},
	"docgen:campaign_manager:add_agent_experience": {
		"scope": "lua",
		"prefix": "add_agent_experience",
		"description": "campaign_manager:add_agent_experience()\n-  -\n\nForceably adds experience to a character.\n",
		"body": [
			"add_agent_experience(${1:string character string}, ${2:number experience}, ${3:[opt=false] boolean by_level})"
		],
	},
	"docgen:campaign_manager:campaign_manager:add_agent_experience": {
		"scope": "lua",
		"prefix": "campaign_manager:add_agent_experience",
		"description": "campaign_manager:add_agent_experience()\n-  -\n\nForceably adds experience to a character.\n",
		"body": [
			"campaign_manager:add_agent_experience(${1:string character string}, ${2:number experience}, ${3:[opt=false] boolean by_level})"
		],
	},
	"docgen:campaign_manager:cm:add_agent_experience": {
		"scope": "lua",
		"prefix": "cm:add_agent_experience",
		"description": "campaign_manager:add_agent_experience()\n-  -\n\nForceably adds experience to a character.\n",
		"body": [
			"cm:add_agent_experience(${1:string character string}, ${2:number experience}, ${3:[opt=false] boolean by_level})"
		],
	},
	"docgen:campaign_manager:log_to_dis": {
		"scope": "lua",
		"prefix": "log_to_dis",
		"description": "campaign_manager:log_to_dis()\n-  -\n\nConverts a set of logical co-ordinates into display co-ordinates.\n",
		"body": [
			"log_to_dis(${1:number x}, ${2:number y})"
		],
	},
	"docgen:campaign_manager:campaign_manager:log_to_dis": {
		"scope": "lua",
		"prefix": "campaign_manager:log_to_dis",
		"description": "campaign_manager:log_to_dis()\n-  -\n\nConverts a set of logical co-ordinates into display co-ordinates.\n",
		"body": [
			"campaign_manager:log_to_dis(${1:number x}, ${2:number y})"
		],
	},
	"docgen:campaign_manager:cm:log_to_dis": {
		"scope": "lua",
		"prefix": "cm:log_to_dis",
		"description": "campaign_manager:log_to_dis()\n-  -\n\nConverts a set of logical co-ordinates into display co-ordinates.\n",
		"body": [
			"cm:log_to_dis(${1:number x}, ${2:number y})"
		],
	},
	"docgen:campaign_manager:distance_squared": {
		"scope": "lua",
		"prefix": "distance_squared",
		"description": "campaign_manager:distance_squared()\n-  -\n\nReturns the distance squared between two positions.\n",
		"body": [
			"distance_squared(${1:number first x}, ${2:number first y}, ${3:number second x}, ${4:number second y})"
		],
	},
	"docgen:campaign_manager:campaign_manager:distance_squared": {
		"scope": "lua",
		"prefix": "campaign_manager:distance_squared",
		"description": "campaign_manager:distance_squared()\n-  -\n\nReturns the distance squared between two positions.\n",
		"body": [
			"campaign_manager:distance_squared(${1:number first x}, ${2:number first y}, ${3:number second x}, ${4:number second y})"
		],
	},
	"docgen:campaign_manager:cm:distance_squared": {
		"scope": "lua",
		"prefix": "cm:distance_squared",
		"description": "campaign_manager:distance_squared()\n-  -\n\nReturns the distance squared between two positions.\n",
		"body": [
			"cm:distance_squared(${1:number first x}, ${2:number first y}, ${3:number second x}, ${4:number second y})"
		],
	},
	"docgen:campaign_manager:restrict_units_for_faction": {
		"scope": "lua",
		"prefix": "restrict_units_for_faction",
		"description": "campaign_manager:restrict_units_for_faction()\n-  -\n\nApplies a restriction to or removes a restriction from a faction recruiting one or more unit types.\n",
		"body": [
			"restrict_units_for_faction(${1:string faction name}, ${2:table unit list}, ${3:[opt=true] boolean should restrict})"
		],
	},
	"docgen:campaign_manager:campaign_manager:restrict_units_for_faction": {
		"scope": "lua",
		"prefix": "campaign_manager:restrict_units_for_faction",
		"description": "campaign_manager:restrict_units_for_faction()\n-  -\n\nApplies a restriction to or removes a restriction from a faction recruiting one or more unit types.\n",
		"body": [
			"campaign_manager:restrict_units_for_faction(${1:string faction name}, ${2:table unit list}, ${3:[opt=true] boolean should restrict})"
		],
	},
	"docgen:campaign_manager:cm:restrict_units_for_faction": {
		"scope": "lua",
		"prefix": "cm:restrict_units_for_faction",
		"description": "campaign_manager:restrict_units_for_faction()\n-  -\n\nApplies a restriction to or removes a restriction from a faction recruiting one or more unit types.\n",
		"body": [
			"cm:restrict_units_for_faction(${1:string faction name}, ${2:table unit list}, ${3:[opt=true] boolean should restrict})"
		],
	},
	"docgen:campaign_manager:restrict_buildings_for_faction": {
		"scope": "lua",
		"prefix": "restrict_buildings_for_faction",
		"description": "campaign_manager:restrict_buildings_for_faction()\n-  -\n\nRestricts or unrestricts a faction from constructing one or more building types.\n",
		"body": [
			"restrict_buildings_for_faction(${1:string faction name}, ${2:table building list}, ${3:[opt=true] boolean should restrict})"
		],
	},
	"docgen:campaign_manager:campaign_manager:restrict_buildings_for_faction": {
		"scope": "lua",
		"prefix": "campaign_manager:restrict_buildings_for_faction",
		"description": "campaign_manager:restrict_buildings_for_faction()\n-  -\n\nRestricts or unrestricts a faction from constructing one or more building types.\n",
		"body": [
			"campaign_manager:restrict_buildings_for_faction(${1:string faction name}, ${2:table building list}, ${3:[opt=true] boolean should restrict})"
		],
	},
	"docgen:campaign_manager:cm:restrict_buildings_for_faction": {
		"scope": "lua",
		"prefix": "cm:restrict_buildings_for_faction",
		"description": "campaign_manager:restrict_buildings_for_faction()\n-  -\n\nRestricts or unrestricts a faction from constructing one or more building types.\n",
		"body": [
			"cm:restrict_buildings_for_faction(${1:string faction name}, ${2:table building list}, ${3:[opt=true] boolean should restrict})"
		],
	},
	"docgen:campaign_manager:restrict_technologies_for_faction": {
		"scope": "lua",
		"prefix": "restrict_technologies_for_faction",
		"description": "campaign_manager:restrict_technologies_for_faction()\n-  -\n\nRestricts or unrestricts a faction from researching one or more technologies.\n",
		"body": [
			"restrict_technologies_for_faction(${1:string faction name}, ${2:table building list}, ${3:[opt=true] boolean should restrict})"
		],
	},
	"docgen:campaign_manager:campaign_manager:restrict_technologies_for_faction": {
		"scope": "lua",
		"prefix": "campaign_manager:restrict_technologies_for_faction",
		"description": "campaign_manager:restrict_technologies_for_faction()\n-  -\n\nRestricts or unrestricts a faction from researching one or more technologies.\n",
		"body": [
			"campaign_manager:restrict_technologies_for_faction(${1:string faction name}, ${2:table building list}, ${3:[opt=true] boolean should restrict})"
		],
	},
	"docgen:campaign_manager:cm:restrict_technologies_for_faction": {
		"scope": "lua",
		"prefix": "cm:restrict_technologies_for_faction",
		"description": "campaign_manager:restrict_technologies_for_faction()\n-  -\n\nRestricts or unrestricts a faction from researching one or more technologies.\n",
		"body": [
			"cm:restrict_technologies_for_faction(${1:string faction name}, ${2:table building list}, ${3:[opt=true] boolean should restrict})"
		],
	},
	"docgen:campaign_manager:apply_effect_bundle": {
		"scope": "lua",
		"prefix": "apply_effect_bundle",
		"description": "campaign_manager:apply_effect_bundle()\n-  -\n\nApplies an effect bundle to a faction for a number of turns (can be infinite).\n",
		"body": [
			"apply_effect_bundle(${1:string effect bundle key}, ${2:string faction key}, ${3:number turns})"
		],
	},
	"docgen:campaign_manager:campaign_manager:apply_effect_bundle": {
		"scope": "lua",
		"prefix": "campaign_manager:apply_effect_bundle",
		"description": "campaign_manager:apply_effect_bundle()\n-  -\n\nApplies an effect bundle to a faction for a number of turns (can be infinite).\n",
		"body": [
			"campaign_manager:apply_effect_bundle(${1:string effect bundle key}, ${2:string faction key}, ${3:number turns})"
		],
	},
	"docgen:campaign_manager:cm:apply_effect_bundle": {
		"scope": "lua",
		"prefix": "cm:apply_effect_bundle",
		"description": "campaign_manager:apply_effect_bundle()\n-  -\n\nApplies an effect bundle to a faction for a number of turns (can be infinite).\n",
		"body": [
			"cm:apply_effect_bundle(${1:string effect bundle key}, ${2:string faction key}, ${3:number turns})"
		],
	},
	"docgen:campaign_manager:remove_effect_bundle": {
		"scope": "lua",
		"prefix": "remove_effect_bundle",
		"description": "campaign_manager:remove_effect_bundle()\n-  -\n\nRemoves an effect bundle from a faction.\n",
		"body": [
			"remove_effect_bundle(${1:string effect bundle key}, ${2:string faction key})"
		],
	},
	"docgen:campaign_manager:campaign_manager:remove_effect_bundle": {
		"scope": "lua",
		"prefix": "campaign_manager:remove_effect_bundle",
		"description": "campaign_manager:remove_effect_bundle()\n-  -\n\nRemoves an effect bundle from a faction.\n",
		"body": [
			"campaign_manager:remove_effect_bundle(${1:string effect bundle key}, ${2:string faction key})"
		],
	},
	"docgen:campaign_manager:cm:remove_effect_bundle": {
		"scope": "lua",
		"prefix": "cm:remove_effect_bundle",
		"description": "campaign_manager:remove_effect_bundle()\n-  -\n\nRemoves an effect bundle from a faction.\n",
		"body": [
			"cm:remove_effect_bundle(${1:string effect bundle key}, ${2:string faction key})"
		],
	},
	"docgen:campaign_manager:apply_effect_bundle_to_force": {
		"scope": "lua",
		"prefix": "apply_effect_bundle_to_force",
		"description": "campaign_manager:apply_effect_bundle_to_force()\n-  -\n\nApplies an effect bundle to a military force by cqi for a number of turns (can be infinite).\n",
		"body": [
			"apply_effect_bundle_to_force(${1:string effect bundle key}, ${2:string number cqi}, ${3:number turns})"
		],
	},
	"docgen:campaign_manager:campaign_manager:apply_effect_bundle_to_force": {
		"scope": "lua",
		"prefix": "campaign_manager:apply_effect_bundle_to_force",
		"description": "campaign_manager:apply_effect_bundle_to_force()\n-  -\n\nApplies an effect bundle to a military force by cqi for a number of turns (can be infinite).\n",
		"body": [
			"campaign_manager:apply_effect_bundle_to_force(${1:string effect bundle key}, ${2:string number cqi}, ${3:number turns})"
		],
	},
	"docgen:campaign_manager:cm:apply_effect_bundle_to_force": {
		"scope": "lua",
		"prefix": "cm:apply_effect_bundle_to_force",
		"description": "campaign_manager:apply_effect_bundle_to_force()\n-  -\n\nApplies an effect bundle to a military force by cqi for a number of turns (can be infinite).\n",
		"body": [
			"cm:apply_effect_bundle_to_force(${1:string effect bundle key}, ${2:string number cqi}, ${3:number turns})"
		],
	},
	"docgen:campaign_manager:remove_effect_bundle_from_force": {
		"scope": "lua",
		"prefix": "remove_effect_bundle_from_force",
		"description": "campaign_manager:remove_effect_bundle_from_force()\n-  -\n\nRemoves an effect bundle from a military force by cqi.\n",
		"body": [
			"remove_effect_bundle_from_force(${1:string effect bundle key}, ${2:string number cqi})"
		],
	},
	"docgen:campaign_manager:campaign_manager:remove_effect_bundle_from_force": {
		"scope": "lua",
		"prefix": "campaign_manager:remove_effect_bundle_from_force",
		"description": "campaign_manager:remove_effect_bundle_from_force()\n-  -\n\nRemoves an effect bundle from a military force by cqi.\n",
		"body": [
			"campaign_manager:remove_effect_bundle_from_force(${1:string effect bundle key}, ${2:string number cqi})"
		],
	},
	"docgen:campaign_manager:cm:remove_effect_bundle_from_force": {
		"scope": "lua",
		"prefix": "cm:remove_effect_bundle_from_force",
		"description": "campaign_manager:remove_effect_bundle_from_force()\n-  -\n\nRemoves an effect bundle from a military force by cqi.\n",
		"body": [
			"cm:remove_effect_bundle_from_force(${1:string effect bundle key}, ${2:string number cqi})"
		],
	},
	"docgen:campaign_manager:apply_effect_bundle_to_characters_force": {
		"scope": "lua",
		"prefix": "apply_effect_bundle_to_characters_force",
		"description": "campaign_manager:apply_effect_bundle_to_characters_force()\n-  -\n\nThis function applies an effect bundle to a military force for a number of turns (can be infinite).\n",
		"body": [
			"apply_effect_bundle_to_characters_force(${1:string effect bundle key}, ${2:string number cqi}, ${3:number turns})"
		],
	},
	"docgen:campaign_manager:campaign_manager:apply_effect_bundle_to_characters_force": {
		"scope": "lua",
		"prefix": "campaign_manager:apply_effect_bundle_to_characters_force",
		"description": "campaign_manager:apply_effect_bundle_to_characters_force()\n-  -\n\nThis function applies an effect bundle to a military force for a number of turns (can be infinite).\n",
		"body": [
			"campaign_manager:apply_effect_bundle_to_characters_force(${1:string effect bundle key}, ${2:string number cqi}, ${3:number turns})"
		],
	},
	"docgen:campaign_manager:cm:apply_effect_bundle_to_characters_force": {
		"scope": "lua",
		"prefix": "cm:apply_effect_bundle_to_characters_force",
		"description": "campaign_manager:apply_effect_bundle_to_characters_force()\n-  -\n\nThis function applies an effect bundle to a military force for a number of turns (can be infinite).\n",
		"body": [
			"cm:apply_effect_bundle_to_characters_force(${1:string effect bundle key}, ${2:string number cqi}, ${3:number turns})"
		],
	},
	"docgen:campaign_manager:remove_effect_bundle_from_characters_force": {
		"scope": "lua",
		"prefix": "remove_effect_bundle_from_characters_force",
		"description": "campaign_manager:remove_effect_bundle_from_characters_force()\n-  -\n\nRemoves an effect bundle from a military force by its commanding character's cqi.\n",
		"body": [
			"remove_effect_bundle_from_characters_force(${1:string effect bundle key}, ${2:string number cqi})"
		],
	},
	"docgen:campaign_manager:campaign_manager:remove_effect_bundle_from_characters_force": {
		"scope": "lua",
		"prefix": "campaign_manager:remove_effect_bundle_from_characters_force",
		"description": "campaign_manager:remove_effect_bundle_from_characters_force()\n-  -\n\nRemoves an effect bundle from a military force by its commanding character's cqi.\n",
		"body": [
			"campaign_manager:remove_effect_bundle_from_characters_force(${1:string effect bundle key}, ${2:string number cqi})"
		],
	},
	"docgen:campaign_manager:cm:remove_effect_bundle_from_characters_force": {
		"scope": "lua",
		"prefix": "cm:remove_effect_bundle_from_characters_force",
		"description": "campaign_manager:remove_effect_bundle_from_characters_force()\n-  -\n\nRemoves an effect bundle from a military force by its commanding character's cqi.\n",
		"body": [
			"cm:remove_effect_bundle_from_characters_force(${1:string effect bundle key}, ${2:string number cqi})"
		],
	},
	"docgen:campaign_manager:apply_effect_bundle_to_region": {
		"scope": "lua",
		"prefix": "apply_effect_bundle_to_region",
		"description": "campaign_manager:apply_effect_bundle_to_region()\n-  -\n\nApplies an effect bundle to a region for a number of turns (can be infinite).\n",
		"body": [
			"apply_effect_bundle_to_region(${1:string effect bundle key}, ${2:string region key}, ${3:number turns})"
		],
	},
	"docgen:campaign_manager:campaign_manager:apply_effect_bundle_to_region": {
		"scope": "lua",
		"prefix": "campaign_manager:apply_effect_bundle_to_region",
		"description": "campaign_manager:apply_effect_bundle_to_region()\n-  -\n\nApplies an effect bundle to a region for a number of turns (can be infinite).\n",
		"body": [
			"campaign_manager:apply_effect_bundle_to_region(${1:string effect bundle key}, ${2:string region key}, ${3:number turns})"
		],
	},
	"docgen:campaign_manager:cm:apply_effect_bundle_to_region": {
		"scope": "lua",
		"prefix": "cm:apply_effect_bundle_to_region",
		"description": "campaign_manager:apply_effect_bundle_to_region()\n-  -\n\nApplies an effect bundle to a region for a number of turns (can be infinite).\n",
		"body": [
			"cm:apply_effect_bundle_to_region(${1:string effect bundle key}, ${2:string region key}, ${3:number turns})"
		],
	},
	"docgen:campaign_manager:remove_effect_bundle_from_region": {
		"scope": "lua",
		"prefix": "remove_effect_bundle_from_region",
		"description": "campaign_manager:remove_effect_bundle_from_region()\n-  -\n\nRemoves an effect bundle from a region.\n",
		"body": [
			"remove_effect_bundle_from_region(${1:string effect bundle key}, ${2:string number cqi})"
		],
	},
	"docgen:campaign_manager:campaign_manager:remove_effect_bundle_from_region": {
		"scope": "lua",
		"prefix": "campaign_manager:remove_effect_bundle_from_region",
		"description": "campaign_manager:remove_effect_bundle_from_region()\n-  -\n\nRemoves an effect bundle from a region.\n",
		"body": [
			"campaign_manager:remove_effect_bundle_from_region(${1:string effect bundle key}, ${2:string number cqi})"
		],
	},
	"docgen:campaign_manager:cm:remove_effect_bundle_from_region": {
		"scope": "lua",
		"prefix": "cm:remove_effect_bundle_from_region",
		"description": "campaign_manager:remove_effect_bundle_from_region()\n-  -\n\nRemoves an effect bundle from a region.\n",
		"body": [
			"cm:remove_effect_bundle_from_region(${1:string effect bundle key}, ${2:string number cqi})"
		],
	},
	"docgen:campaign_manager:lift_all_shroud": {
		"scope": "lua",
		"prefix": "lift_all_shroud",
		"description": "campaign_manager:lift_all_shroud()\n-  -\n\nLifts the shroud on all regions.\n",
		"body": [
			"lift_all_shroud()"
		],
	},
	"docgen:campaign_manager:campaign_manager:lift_all_shroud": {
		"scope": "lua",
		"prefix": "campaign_manager:lift_all_shroud",
		"description": "campaign_manager:lift_all_shroud()\n-  -\n\nLifts the shroud on all regions.\n",
		"body": [
			"campaign_manager:lift_all_shroud()"
		],
	},
	"docgen:campaign_manager:cm:lift_all_shroud": {
		"scope": "lua",
		"prefix": "cm:lift_all_shroud",
		"description": "campaign_manager:lift_all_shroud()\n-  -\n\nLifts the shroud on all regions.\n",
		"body": [
			"cm:lift_all_shroud()"
		],
	},
	"docgen:campaign_manager:force_diplomacy": {
		"scope": "lua",
		"prefix": "force_diplomacy",
		"description": "campaign_manager:force_diplomacy()\n-  -\n\nRestricts or unrestricts certain types of diplomacy between factions or groups of factions.\n",
		"body": [
			"force_diplomacy(${1:string source}, ${2:string target}, ${3:string type}, ${4:boolean can offer}, ${5:boolean can accept}, ${6:[opt=false] both directions}, ${7:[opt=false] do not enable payments})"
		],
	},
	"docgen:campaign_manager:campaign_manager:force_diplomacy": {
		"scope": "lua",
		"prefix": "campaign_manager:force_diplomacy",
		"description": "campaign_manager:force_diplomacy()\n-  -\n\nRestricts or unrestricts certain types of diplomacy between factions or groups of factions.\n",
		"body": [
			"campaign_manager:force_diplomacy(${1:string source}, ${2:string target}, ${3:string type}, ${4:boolean can offer}, ${5:boolean can accept}, ${6:[opt=false] both directions}, ${7:[opt=false] do not enable payments})"
		],
	},
	"docgen:campaign_manager:cm:force_diplomacy": {
		"scope": "lua",
		"prefix": "cm:force_diplomacy",
		"description": "campaign_manager:force_diplomacy()\n-  -\n\nRestricts or unrestricts certain types of diplomacy between factions or groups of factions.\n",
		"body": [
			"cm:force_diplomacy(${1:string source}, ${2:string target}, ${3:string type}, ${4:boolean can offer}, ${5:boolean can accept}, ${6:[opt=false] both directions}, ${7:[opt=false] do not enable payments})"
		],
	},
	"docgen:campaign_manager:enable_all_diplomacy": {
		"scope": "lua",
		"prefix": "enable_all_diplomacy",
		"description": "campaign_manager:enable_all_diplomacy()\n-  -\n\nEnables or disables all diplomatic options between all factions.\n",
		"body": [
			"enable_all_diplomacy(${1:boolean enable diplomacy})"
		],
	},
	"docgen:campaign_manager:campaign_manager:enable_all_diplomacy": {
		"scope": "lua",
		"prefix": "campaign_manager:enable_all_diplomacy",
		"description": "campaign_manager:enable_all_diplomacy()\n-  -\n\nEnables or disables all diplomatic options between all factions.\n",
		"body": [
			"campaign_manager:enable_all_diplomacy(${1:boolean enable diplomacy})"
		],
	},
	"docgen:campaign_manager:cm:enable_all_diplomacy": {
		"scope": "lua",
		"prefix": "cm:enable_all_diplomacy",
		"description": "campaign_manager:enable_all_diplomacy()\n-  -\n\nEnables or disables all diplomatic options between all factions.\n",
		"body": [
			"cm:enable_all_diplomacy(${1:boolean enable diplomacy})"
		],
	},
	"docgen:campaign_manager:force_declare_war": {
		"scope": "lua",
		"prefix": "force_declare_war",
		"description": "campaign_manager:force_declare_war()\n-  -\n\nForces war between two factions.\n",
		"body": [
			"force_declare_war(${1:string faction key}, ${2:string faction key}, ${3:boolean invite faction a allies}, ${4:boolean invite faction b allies}, ${5:boolean command queue or not})"
		],
	},
	"docgen:campaign_manager:campaign_manager:force_declare_war": {
		"scope": "lua",
		"prefix": "campaign_manager:force_declare_war",
		"description": "campaign_manager:force_declare_war()\n-  -\n\nForces war between two factions.\n",
		"body": [
			"campaign_manager:force_declare_war(${1:string faction key}, ${2:string faction key}, ${3:boolean invite faction a allies}, ${4:boolean invite faction b allies}, ${5:boolean command queue or not})"
		],
	},
	"docgen:campaign_manager:cm:force_declare_war": {
		"scope": "lua",
		"prefix": "cm:force_declare_war",
		"description": "campaign_manager:force_declare_war()\n-  -\n\nForces war between two factions.\n",
		"body": [
			"cm:force_declare_war(${1:string faction key}, ${2:string faction key}, ${3:boolean invite faction a allies}, ${4:boolean invite faction b allies}, ${5:boolean command queue or not})"
		],
	},
	"docgen:campaign_manager:set_objective": {
		"scope": "lua",
		"prefix": "set_objective",
		"description": "campaign_manager:set_objective()\n-  -\n\nPass-through function for objectives_manager:set_objective on the objectives manager.\n",
		"body": [
			"set_objective(${1:string objective key}, ${2:[opt=nil] number param a, First numeric objective parameter. If set, the objective will be presented to the player in the form [objective text]: [param a] number param a}, ${3:[opt=nil] number param b, Second numeric objective parameter. A value for the first must be set if this is used. If set, the objective will be presented to the player in the form [objective text]: [param a] / [param b] number param b})"
		],
	},
	"docgen:campaign_manager:campaign_manager:set_objective": {
		"scope": "lua",
		"prefix": "campaign_manager:set_objective",
		"description": "campaign_manager:set_objective()\n-  -\n\nPass-through function for objectives_manager:set_objective on the objectives manager.\n",
		"body": [
			"campaign_manager:set_objective(${1:string objective key}, ${2:[opt=nil] number param a, First numeric objective parameter. If set, the objective will be presented to the player in the form [objective text]: [param a] number param a}, ${3:[opt=nil] number param b, Second numeric objective parameter. A value for the first must be set if this is used. If set, the objective will be presented to the player in the form [objective text]: [param a] / [param b] number param b})"
		],
	},
	"docgen:campaign_manager:cm:set_objective": {
		"scope": "lua",
		"prefix": "cm:set_objective",
		"description": "campaign_manager:set_objective()\n-  -\n\nPass-through function for objectives_manager:set_objective on the objectives manager.\n",
		"body": [
			"cm:set_objective(${1:string objective key}, ${2:[opt=nil] number param a, First numeric objective parameter. If set, the objective will be presented to the player in the form [objective text]: [param a] number param a}, ${3:[opt=nil] number param b, Second numeric objective parameter. A value for the first must be set if this is used. If set, the objective will be presented to the player in the form [objective text]: [param a] / [param b] number param b})"
		],
	},
	"docgen:campaign_manager:complete_objective": {
		"scope": "lua",
		"prefix": "complete_objective",
		"description": "campaign_manager:complete_objective()\n-  -\n\nPass-through function for objectives_manager:complete_objective on the objectives manager.\n",
		"body": [
			"complete_objective(${1:string objective key})"
		],
	},
	"docgen:campaign_manager:campaign_manager:complete_objective": {
		"scope": "lua",
		"prefix": "campaign_manager:complete_objective",
		"description": "campaign_manager:complete_objective()\n-  -\n\nPass-through function for objectives_manager:complete_objective on the objectives manager.\n",
		"body": [
			"campaign_manager:complete_objective(${1:string objective key})"
		],
	},
	"docgen:campaign_manager:cm:complete_objective": {
		"scope": "lua",
		"prefix": "cm:complete_objective",
		"description": "campaign_manager:complete_objective()\n-  -\n\nPass-through function for objectives_manager:complete_objective on the objectives manager.\n",
		"body": [
			"cm:complete_objective(${1:string objective key})"
		],
	},
	"docgen:campaign_manager:fail_objective": {
		"scope": "lua",
		"prefix": "fail_objective",
		"description": "campaign_manager:fail_objective()\n-  -\n\nPass-through function for objectives_manager:fail_objective on the objectives manager.\n",
		"body": [
			"fail_objective(${1:string objective key})"
		],
	},
	"docgen:campaign_manager:campaign_manager:fail_objective": {
		"scope": "lua",
		"prefix": "campaign_manager:fail_objective",
		"description": "campaign_manager:fail_objective()\n-  -\n\nPass-through function for objectives_manager:fail_objective on the objectives manager.\n",
		"body": [
			"campaign_manager:fail_objective(${1:string objective key})"
		],
	},
	"docgen:campaign_manager:cm:fail_objective": {
		"scope": "lua",
		"prefix": "cm:fail_objective",
		"description": "campaign_manager:fail_objective()\n-  -\n\nPass-through function for objectives_manager:fail_objective on the objectives manager.\n",
		"body": [
			"cm:fail_objective(${1:string objective key})"
		],
	},
	"docgen:campaign_manager:remove_objective": {
		"scope": "lua",
		"prefix": "remove_objective",
		"description": "campaign_manager:remove_objective()\n-  -\n\nPass-through function for objectives_manager:remove_objective on the objectives manager.\n",
		"body": [
			"remove_objective(${1:string objective key})"
		],
	},
	"docgen:campaign_manager:campaign_manager:remove_objective": {
		"scope": "lua",
		"prefix": "campaign_manager:remove_objective",
		"description": "campaign_manager:remove_objective()\n-  -\n\nPass-through function for objectives_manager:remove_objective on the objectives manager.\n",
		"body": [
			"campaign_manager:remove_objective(${1:string objective key})"
		],
	},
	"docgen:campaign_manager:cm:remove_objective": {
		"scope": "lua",
		"prefix": "cm:remove_objective",
		"description": "campaign_manager:remove_objective()\n-  -\n\nPass-through function for objectives_manager:remove_objective on the objectives manager.\n",
		"body": [
			"cm:remove_objective(${1:string objective key})"
		],
	},
	"docgen:campaign_manager:activate_objective_chain": {
		"scope": "lua",
		"prefix": "activate_objective_chain",
		"description": "campaign_manager:activate_objective_chain()\n-  -\n\nPass-through function for objectives_manager:activate_objective_chain.\n",
		"body": [
			"activate_objective_chain(${1:string chain name}, ${2:string objective key}, ${3:[opt=nil] number number param a}, ${4:[opt=nil] number number param b})"
		],
	},
	"docgen:campaign_manager:campaign_manager:activate_objective_chain": {
		"scope": "lua",
		"prefix": "campaign_manager:activate_objective_chain",
		"description": "campaign_manager:activate_objective_chain()\n-  -\n\nPass-through function for objectives_manager:activate_objective_chain.\n",
		"body": [
			"campaign_manager:activate_objective_chain(${1:string chain name}, ${2:string objective key}, ${3:[opt=nil] number number param a}, ${4:[opt=nil] number number param b})"
		],
	},
	"docgen:campaign_manager:cm:activate_objective_chain": {
		"scope": "lua",
		"prefix": "cm:activate_objective_chain",
		"description": "campaign_manager:activate_objective_chain()\n-  -\n\nPass-through function for objectives_manager:activate_objective_chain.\n",
		"body": [
			"cm:activate_objective_chain(${1:string chain name}, ${2:string objective key}, ${3:[opt=nil] number number param a}, ${4:[opt=nil] number number param b})"
		],
	},
	"docgen:campaign_manager:update_objective_chain": {
		"scope": "lua",
		"prefix": "update_objective_chain",
		"description": "campaign_manager:update_objective_chain()\n-  -\n\nPass-through function for objectives_manager:update_objective_chain.\n",
		"body": [
			"update_objective_chain(${1:string chain name}, ${2:string objective key}, ${3:[opt=nil] number number param a}, ${4:[opt=nil] number number param b})"
		],
	},
	"docgen:campaign_manager:campaign_manager:update_objective_chain": {
		"scope": "lua",
		"prefix": "campaign_manager:update_objective_chain",
		"description": "campaign_manager:update_objective_chain()\n-  -\n\nPass-through function for objectives_manager:update_objective_chain.\n",
		"body": [
			"campaign_manager:update_objective_chain(${1:string chain name}, ${2:string objective key}, ${3:[opt=nil] number number param a}, ${4:[opt=nil] number number param b})"
		],
	},
	"docgen:campaign_manager:cm:update_objective_chain": {
		"scope": "lua",
		"prefix": "cm:update_objective_chain",
		"description": "campaign_manager:update_objective_chain()\n-  -\n\nPass-through function for objectives_manager:update_objective_chain.\n",
		"body": [
			"cm:update_objective_chain(${1:string chain name}, ${2:string objective key}, ${3:[opt=nil] number number param a}, ${4:[opt=nil] number number param b})"
		],
	},
	"docgen:campaign_manager:end_objective_chain": {
		"scope": "lua",
		"prefix": "end_objective_chain",
		"description": "campaign_manager:end_objective_chain()\n-  -\n\nPass-through function for objectives_manager:end_objective_chain.\n",
		"body": [
			"end_objective_chain(${1:string chain name})"
		],
	},
	"docgen:campaign_manager:campaign_manager:end_objective_chain": {
		"scope": "lua",
		"prefix": "campaign_manager:end_objective_chain",
		"description": "campaign_manager:end_objective_chain()\n-  -\n\nPass-through function for objectives_manager:end_objective_chain.\n",
		"body": [
			"campaign_manager:end_objective_chain(${1:string chain name})"
		],
	},
	"docgen:campaign_manager:cm:end_objective_chain": {
		"scope": "lua",
		"prefix": "cm:end_objective_chain",
		"description": "campaign_manager:end_objective_chain()\n-  -\n\nPass-through function for objectives_manager:end_objective_chain.\n",
		"body": [
			"cm:end_objective_chain(${1:string chain name})"
		],
	},
	"docgen:campaign_manager:reset_objective_chain": {
		"scope": "lua",
		"prefix": "reset_objective_chain",
		"description": "campaign_manager:reset_objective_chain()\n-  -\n\nPass-through function for objectives_manager:reset_objective_chain.\n",
		"body": [
			"reset_objective_chain(${1:string chain name})"
		],
	},
	"docgen:campaign_manager:campaign_manager:reset_objective_chain": {
		"scope": "lua",
		"prefix": "campaign_manager:reset_objective_chain",
		"description": "campaign_manager:reset_objective_chain()\n-  -\n\nPass-through function for objectives_manager:reset_objective_chain.\n",
		"body": [
			"campaign_manager:reset_objective_chain(${1:string chain name})"
		],
	},
	"docgen:campaign_manager:cm:reset_objective_chain": {
		"scope": "lua",
		"prefix": "cm:reset_objective_chain",
		"description": "campaign_manager:reset_objective_chain()\n-  -\n\nPass-through function for objectives_manager:reset_objective_chain.\n",
		"body": [
			"cm:reset_objective_chain(${1:string chain name})"
		],
	},
	"docgen:campaign_manager:add_infotext": {
		"scope": "lua",
		"prefix": "add_infotext",
		"description": "campaign_manager:add_infotext()\n-  -\n\nPass-through function for infotext_manager:add_infotext.\n",
		"body": [
			"add_infotext(${1:object first param}, ${2:... additional infotext strings})"
		],
	},
	"docgen:campaign_manager:campaign_manager:add_infotext": {
		"scope": "lua",
		"prefix": "campaign_manager:add_infotext",
		"description": "campaign_manager:add_infotext()\n-  -\n\nPass-through function for infotext_manager:add_infotext.\n",
		"body": [
			"campaign_manager:add_infotext(${1:object first param}, ${2:... additional infotext strings})"
		],
	},
	"docgen:campaign_manager:cm:add_infotext": {
		"scope": "lua",
		"prefix": "cm:add_infotext",
		"description": "campaign_manager:add_infotext()\n-  -\n\nPass-through function for infotext_manager:add_infotext.\n",
		"body": [
			"cm:add_infotext(${1:object first param}, ${2:... additional infotext strings})"
		],
	},
	"docgen:campaign_manager:remove_infotext": {
		"scope": "lua",
		"prefix": "remove_infotext",
		"description": "campaign_manager:remove_infotext()\n-  -\n\nPass-through function for infotext_manager:remove_infotext.\n",
		"body": [
			"remove_infotext(${1:string infotext key})"
		],
	},
	"docgen:campaign_manager:campaign_manager:remove_infotext": {
		"scope": "lua",
		"prefix": "campaign_manager:remove_infotext",
		"description": "campaign_manager:remove_infotext()\n-  -\n\nPass-through function for infotext_manager:remove_infotext.\n",
		"body": [
			"campaign_manager:remove_infotext(${1:string infotext key})"
		],
	},
	"docgen:campaign_manager:cm:remove_infotext": {
		"scope": "lua",
		"prefix": "cm:remove_infotext",
		"description": "campaign_manager:remove_infotext()\n-  -\n\nPass-through function for infotext_manager:remove_infotext.\n",
		"body": [
			"cm:remove_infotext(${1:string infotext key})"
		],
	},
	"docgen:campaign_manager:clear_infotext": {
		"scope": "lua",
		"prefix": "clear_infotext",
		"description": "campaign_manager:clear_infotext()\n-  -\n\nPass-through function for infotext_manager:clear_infotext.\n",
		"body": [
			"clear_infotext()"
		],
	},
	"docgen:campaign_manager:campaign_manager:clear_infotext": {
		"scope": "lua",
		"prefix": "campaign_manager:clear_infotext",
		"description": "campaign_manager:clear_infotext()\n-  -\n\nPass-through function for infotext_manager:clear_infotext.\n",
		"body": [
			"campaign_manager:clear_infotext()"
		],
	},
	"docgen:campaign_manager:cm:clear_infotext": {
		"scope": "lua",
		"prefix": "cm:clear_infotext",
		"description": "campaign_manager:clear_infotext()\n-  -\n\nPass-through function for infotext_manager:clear_infotext.\n",
		"body": [
			"cm:clear_infotext()"
		],
	},
	"docgen:campaign_manager:trigger_custom_mission": {
		"scope": "lua",
		"prefix": "trigger_custom_mission",
		"description": "campaign_manager:trigger_custom_mission()\n-  -\n\nTriggers a specific custom mission from its database record key.\n",
		"body": [
			"trigger_custom_mission(${1:string faction key}, ${2:string mission key}, ${3:[opt=false] boolean use command queue}, ${4:[opt=false] boolean do not cancel}, ${5:[opt=false] boolean whitelist})"
		],
	},
	"docgen:campaign_manager:campaign_manager:trigger_custom_mission": {
		"scope": "lua",
		"prefix": "campaign_manager:trigger_custom_mission",
		"description": "campaign_manager:trigger_custom_mission()\n-  -\n\nTriggers a specific custom mission from its database record key.\n",
		"body": [
			"campaign_manager:trigger_custom_mission(${1:string faction key}, ${2:string mission key}, ${3:[opt=false] boolean use command queue}, ${4:[opt=false] boolean do not cancel}, ${5:[opt=false] boolean whitelist})"
		],
	},
	"docgen:campaign_manager:cm:trigger_custom_mission": {
		"scope": "lua",
		"prefix": "cm:trigger_custom_mission",
		"description": "campaign_manager:trigger_custom_mission()\n-  -\n\nTriggers a specific custom mission from its database record key.\n",
		"body": [
			"cm:trigger_custom_mission(${1:string faction key}, ${2:string mission key}, ${3:[opt=false] boolean use command queue}, ${4:[opt=false] boolean do not cancel}, ${5:[opt=false] boolean whitelist})"
		],
	},
	"docgen:campaign_manager:trigger_custom_mission_from_string": {
		"scope": "lua",
		"prefix": "trigger_custom_mission_from_string",
		"description": "campaign_manager:trigger_custom_mission_from_string()\n-  -\n\nTriggers a custom mission from a string passed into the function.\n",
		"body": [
			"trigger_custom_mission_from_string(${1:string faction key}, ${2:string mission}, ${3:[opt=false] boolean use command queue}, ${4:[opt=false] boolean whitelist})"
		],
	},
	"docgen:campaign_manager:campaign_manager:trigger_custom_mission_from_string": {
		"scope": "lua",
		"prefix": "campaign_manager:trigger_custom_mission_from_string",
		"description": "campaign_manager:trigger_custom_mission_from_string()\n-  -\n\nTriggers a custom mission from a string passed into the function.\n",
		"body": [
			"campaign_manager:trigger_custom_mission_from_string(${1:string faction key}, ${2:string mission}, ${3:[opt=false] boolean use command queue}, ${4:[opt=false] boolean whitelist})"
		],
	},
	"docgen:campaign_manager:cm:trigger_custom_mission_from_string": {
		"scope": "lua",
		"prefix": "cm:trigger_custom_mission_from_string",
		"description": "campaign_manager:trigger_custom_mission_from_string()\n-  -\n\nTriggers a custom mission from a string passed into the function.\n",
		"body": [
			"cm:trigger_custom_mission_from_string(${1:string faction key}, ${2:string mission}, ${3:[opt=false] boolean use command queue}, ${4:[opt=false] boolean whitelist})"
		],
	},
	"docgen:campaign_manager:trigger_mission": {
		"scope": "lua",
		"prefix": "trigger_mission",
		"description": "campaign_manager:trigger_mission()\n-  -\n\nInstructs the campaign director to attempt to trigger a mission of a particular type, based on a mission record from the database.\n",
		"body": [
			"trigger_mission(${1:string faction key}, ${2:string mission key}, ${3:[opt=false] boolean fire immediately}, ${4:[opt=false] boolean use command queue}, ${5:[opt=false] boolean whitelist})"
		],
	},
	"docgen:campaign_manager:campaign_manager:trigger_mission": {
		"scope": "lua",
		"prefix": "campaign_manager:trigger_mission",
		"description": "campaign_manager:trigger_mission()\n-  -\n\nInstructs the campaign director to attempt to trigger a mission of a particular type, based on a mission record from the database.\n",
		"body": [
			"campaign_manager:trigger_mission(${1:string faction key}, ${2:string mission key}, ${3:[opt=false] boolean fire immediately}, ${4:[opt=false] boolean use command queue}, ${5:[opt=false] boolean whitelist})"
		],
	},
	"docgen:campaign_manager:cm:trigger_mission": {
		"scope": "lua",
		"prefix": "cm:trigger_mission",
		"description": "campaign_manager:trigger_mission()\n-  -\n\nInstructs the campaign director to attempt to trigger a mission of a particular type, based on a mission record from the database.\n",
		"body": [
			"cm:trigger_mission(${1:string faction key}, ${2:string mission key}, ${3:[opt=false] boolean fire immediately}, ${4:[opt=false] boolean use command queue}, ${5:[opt=false] boolean whitelist})"
		],
	},
	"docgen:campaign_manager:trigger_dilemma": {
		"scope": "lua",
		"prefix": "trigger_dilemma",
		"description": "campaign_manager:trigger_dilemma()\n-  -\n\nTriggers dilemma with a specified key, based on a record from the database, preferentially wrapped in an intervention.\n",
		"body": [
			"trigger_dilemma(${1:string faction key}, ${2:string dilemma key}, ${3:function trigger callback})"
		],
	},
	"docgen:campaign_manager:campaign_manager:trigger_dilemma": {
		"scope": "lua",
		"prefix": "campaign_manager:trigger_dilemma",
		"description": "campaign_manager:trigger_dilemma()\n-  -\n\nTriggers dilemma with a specified key, based on a record from the database, preferentially wrapped in an intervention.\n",
		"body": [
			"campaign_manager:trigger_dilemma(${1:string faction key}, ${2:string dilemma key}, ${3:function trigger callback})"
		],
	},
	"docgen:campaign_manager:cm:trigger_dilemma": {
		"scope": "lua",
		"prefix": "cm:trigger_dilemma",
		"description": "campaign_manager:trigger_dilemma()\n-  -\n\nTriggers dilemma with a specified key, based on a record from the database, preferentially wrapped in an intervention.\n",
		"body": [
			"cm:trigger_dilemma(${1:string faction key}, ${2:string dilemma key}, ${3:function trigger callback})"
		],
	},
	"docgen:campaign_manager:trigger_dilemma_raw": {
		"scope": "lua",
		"prefix": "trigger_dilemma_raw",
		"description": "campaign_manager:trigger_dilemma_raw()\n-  -\n\nCompels the campaign director to trigger a dilemma of a particular type, based on a record from the database.\n",
		"body": [
			"trigger_dilemma_raw(${1:string faction key}, ${2:string dilemma key}, ${3:[opt=false] boolean fire immediately}, ${4:[opt=false] boolean whitelist})"
		],
	},
	"docgen:campaign_manager:campaign_manager:trigger_dilemma_raw": {
		"scope": "lua",
		"prefix": "campaign_manager:trigger_dilemma_raw",
		"description": "campaign_manager:trigger_dilemma_raw()\n-  -\n\nCompels the campaign director to trigger a dilemma of a particular type, based on a record from the database.\n",
		"body": [
			"campaign_manager:trigger_dilemma_raw(${1:string faction key}, ${2:string dilemma key}, ${3:[opt=false] boolean fire immediately}, ${4:[opt=false] boolean whitelist})"
		],
	},
	"docgen:campaign_manager:cm:trigger_dilemma_raw": {
		"scope": "lua",
		"prefix": "cm:trigger_dilemma_raw",
		"description": "campaign_manager:trigger_dilemma_raw()\n-  -\n\nCompels the campaign director to trigger a dilemma of a particular type, based on a record from the database.\n",
		"body": [
			"cm:trigger_dilemma_raw(${1:string faction key}, ${2:string dilemma key}, ${3:[opt=false] boolean fire immediately}, ${4:[opt=false] boolean whitelist})"
		],
	},
	"docgen:campaign_manager:trigger_dilemma_with_targets": {
		"scope": "lua",
		"prefix": "trigger_dilemma_with_targets",
		"description": "campaign_manager:trigger_dilemma_with_targets()\n-  -\n\nTriggers a dilemma with a specified key and one or more target game objects, preferentially wrapped in an intervention.\n",
		"body": [
			"trigger_dilemma_with_targets(${1:number faction cqi}, ${2:string dilemma key}, ${3:[opt=0] number target faction cqi}, ${4:[opt=0] number secondary faction cqi}, ${5:[opt=0] number character cqi}, ${6:[opt=0] number military force cqi}, ${7:[opt=0] number region cqi}, ${8:[opt=0] number settlement cqi}, ${9:function trigger callback})"
		],
	},
	"docgen:campaign_manager:campaign_manager:trigger_dilemma_with_targets": {
		"scope": "lua",
		"prefix": "campaign_manager:trigger_dilemma_with_targets",
		"description": "campaign_manager:trigger_dilemma_with_targets()\n-  -\n\nTriggers a dilemma with a specified key and one or more target game objects, preferentially wrapped in an intervention.\n",
		"body": [
			"campaign_manager:trigger_dilemma_with_targets(${1:number faction cqi}, ${2:string dilemma key}, ${3:[opt=0] number target faction cqi}, ${4:[opt=0] number secondary faction cqi}, ${5:[opt=0] number character cqi}, ${6:[opt=0] number military force cqi}, ${7:[opt=0] number region cqi}, ${8:[opt=0] number settlement cqi}, ${9:function trigger callback})"
		],
	},
	"docgen:campaign_manager:cm:trigger_dilemma_with_targets": {
		"scope": "lua",
		"prefix": "cm:trigger_dilemma_with_targets",
		"description": "campaign_manager:trigger_dilemma_with_targets()\n-  -\n\nTriggers a dilemma with a specified key and one or more target game objects, preferentially wrapped in an intervention.\n",
		"body": [
			"cm:trigger_dilemma_with_targets(${1:number faction cqi}, ${2:string dilemma key}, ${3:[opt=0] number target faction cqi}, ${4:[opt=0] number secondary faction cqi}, ${5:[opt=0] number character cqi}, ${6:[opt=0] number military force cqi}, ${7:[opt=0] number region cqi}, ${8:[opt=0] number settlement cqi}, ${9:function trigger callback})"
		],
	},
	"docgen:campaign_manager:trigger_dilemma_with_targets_raw": {
		"scope": "lua",
		"prefix": "trigger_dilemma_with_targets_raw",
		"description": "campaign_manager:trigger_dilemma_with_targets_raw()\n-  -\n\nDirectly triggers a dilemma with a specified key and one or more target game objects.\n",
		"body": [
			"trigger_dilemma_with_targets_raw(${1:number faction cqi}, ${2:string dilemma key}, ${3:[opt=0] number target faction cqi}, ${4:[opt=0] number secondary faction cqi}, ${5:[opt=0] number character cqi}, ${6:[opt=0] number military force cqi}, ${7:[opt=0] number region cqi}, ${8:[opt=0] number settlement cqi}, ${9:function trigger callback})"
		],
	},
	"docgen:campaign_manager:campaign_manager:trigger_dilemma_with_targets_raw": {
		"scope": "lua",
		"prefix": "campaign_manager:trigger_dilemma_with_targets_raw",
		"description": "campaign_manager:trigger_dilemma_with_targets_raw()\n-  -\n\nDirectly triggers a dilemma with a specified key and one or more target game objects.\n",
		"body": [
			"campaign_manager:trigger_dilemma_with_targets_raw(${1:number faction cqi}, ${2:string dilemma key}, ${3:[opt=0] number target faction cqi}, ${4:[opt=0] number secondary faction cqi}, ${5:[opt=0] number character cqi}, ${6:[opt=0] number military force cqi}, ${7:[opt=0] number region cqi}, ${8:[opt=0] number settlement cqi}, ${9:function trigger callback})"
		],
	},
	"docgen:campaign_manager:cm:trigger_dilemma_with_targets_raw": {
		"scope": "lua",
		"prefix": "cm:trigger_dilemma_with_targets_raw",
		"description": "campaign_manager:trigger_dilemma_with_targets_raw()\n-  -\n\nDirectly triggers a dilemma with a specified key and one or more target game objects.\n",
		"body": [
			"cm:trigger_dilemma_with_targets_raw(${1:number faction cqi}, ${2:string dilemma key}, ${3:[opt=0] number target faction cqi}, ${4:[opt=0] number secondary faction cqi}, ${5:[opt=0] number character cqi}, ${6:[opt=0] number military force cqi}, ${7:[opt=0] number region cqi}, ${8:[opt=0] number settlement cqi}, ${9:function trigger callback})"
		],
	},
	"docgen:campaign_manager:trigger_incident": {
		"scope": "lua",
		"prefix": "trigger_incident",
		"description": "campaign_manager:trigger_incident()\n-  -\n\nInstructs the campaign director to attempt to trigger a specified incident, based on record from the database.\n",
		"body": [
			"trigger_incident(${1:string faction key}, ${2:string incident key}, ${3:[opt=false] boolean fire immediately}, ${4:[opt=false] boolean whitelist})"
		],
	},
	"docgen:campaign_manager:campaign_manager:trigger_incident": {
		"scope": "lua",
		"prefix": "campaign_manager:trigger_incident",
		"description": "campaign_manager:trigger_incident()\n-  -\n\nInstructs the campaign director to attempt to trigger a specified incident, based on record from the database.\n",
		"body": [
			"campaign_manager:trigger_incident(${1:string faction key}, ${2:string incident key}, ${3:[opt=false] boolean fire immediately}, ${4:[opt=false] boolean whitelist})"
		],
	},
	"docgen:campaign_manager:cm:trigger_incident": {
		"scope": "lua",
		"prefix": "cm:trigger_incident",
		"description": "campaign_manager:trigger_incident()\n-  -\n\nInstructs the campaign director to attempt to trigger a specified incident, based on record from the database.\n",
		"body": [
			"cm:trigger_incident(${1:string faction key}, ${2:string incident key}, ${3:[opt=false] boolean fire immediately}, ${4:[opt=false] boolean whitelist})"
		],
	},
	"docgen:campaign_manager:suppress_all_event_feed_messages": {
		"scope": "lua",
		"prefix": "suppress_all_event_feed_messages",
		"description": "campaign_manager:suppress_all_event_feed_messages()\n-  -\n\nSuppresses or unsuppresses all event feed message from being displayed.\n",
		"body": [
			"suppress_all_event_feed_messages(${1:[opt=true] boolean activate suppression})"
		],
	},
	"docgen:campaign_manager:campaign_manager:suppress_all_event_feed_messages": {
		"scope": "lua",
		"prefix": "campaign_manager:suppress_all_event_feed_messages",
		"description": "campaign_manager:suppress_all_event_feed_messages()\n-  -\n\nSuppresses or unsuppresses all event feed message from being displayed.\n",
		"body": [
			"campaign_manager:suppress_all_event_feed_messages(${1:[opt=true] boolean activate suppression})"
		],
	},
	"docgen:campaign_manager:cm:suppress_all_event_feed_messages": {
		"scope": "lua",
		"prefix": "cm:suppress_all_event_feed_messages",
		"description": "campaign_manager:suppress_all_event_feed_messages()\n-  -\n\nSuppresses or unsuppresses all event feed message from being displayed.\n",
		"body": [
			"cm:suppress_all_event_feed_messages(${1:[opt=true] boolean activate suppression})"
		],
	},
	"docgen:campaign_manager:whitelist_event_feed_event_type": {
		"scope": "lua",
		"prefix": "whitelist_event_feed_event_type",
		"description": "campaign_manager:whitelist_event_feed_event_type()\n-  -\n\nWhile suppression has been activated with campaign_manager:suppress_all_event_feed_messages an event type may be whitelisted and allowed to be shown with this function.\n",
		"body": [
			"whitelist_event_feed_event_type(${1:string event type})"
		],
	},
	"docgen:campaign_manager:campaign_manager:whitelist_event_feed_event_type": {
		"scope": "lua",
		"prefix": "campaign_manager:whitelist_event_feed_event_type",
		"description": "campaign_manager:whitelist_event_feed_event_type()\n-  -\n\nWhile suppression has been activated with campaign_manager:suppress_all_event_feed_messages an event type may be whitelisted and allowed to be shown with this function.\n",
		"body": [
			"campaign_manager:whitelist_event_feed_event_type(${1:string event type})"
		],
	},
	"docgen:campaign_manager:cm:whitelist_event_feed_event_type": {
		"scope": "lua",
		"prefix": "cm:whitelist_event_feed_event_type",
		"description": "campaign_manager:whitelist_event_feed_event_type()\n-  -\n\nWhile suppression has been activated with campaign_manager:suppress_all_event_feed_messages an event type may be whitelisted and allowed to be shown with this function.\n",
		"body": [
			"cm:whitelist_event_feed_event_type(${1:string event type})"
		],
	},
	"docgen:campaign_manager:disable_event_feed_events": {
		"scope": "lua",
		"prefix": "disable_event_feed_events",
		"description": "campaign_manager:disable_event_feed_events()\n-  -\n\nWrapper for the function of the same name on the underlying <a href=\".\n",
		"body": [
			"disable_event_feed_events(${1:boolean should disable}, ${2:[opt=\"\"] string event categories}, ${3:[opt=\"\"] string event subcategories}, ${4:[opt=\"\"] string event})"
		],
	},
	"docgen:campaign_manager:campaign_manager:disable_event_feed_events": {
		"scope": "lua",
		"prefix": "campaign_manager:disable_event_feed_events",
		"description": "campaign_manager:disable_event_feed_events()\n-  -\n\nWrapper for the function of the same name on the underlying <a href=\".\n",
		"body": [
			"campaign_manager:disable_event_feed_events(${1:boolean should disable}, ${2:[opt=\"\"] string event categories}, ${3:[opt=\"\"] string event subcategories}, ${4:[opt=\"\"] string event})"
		],
	},
	"docgen:campaign_manager:cm:disable_event_feed_events": {
		"scope": "lua",
		"prefix": "cm:disable_event_feed_events",
		"description": "campaign_manager:disable_event_feed_events()\n-  -\n\nWrapper for the function of the same name on the underlying <a href=\".\n",
		"body": [
			"cm:disable_event_feed_events(${1:boolean should disable}, ${2:[opt=\"\"] string event categories}, ${3:[opt=\"\"] string event subcategories}, ${4:[opt=\"\"] string event})"
		],
	},
	"docgen:campaign_manager:show_message_event": {
		"scope": "lua",
		"prefix": "show_message_event",
		"description": "campaign_manager:show_message_event()\n-  -\n\nConstructs and displays an event.\n",
		"body": [
			"show_message_event(${1:string faction key}, ${2:string title loc key}, ${3:string primary loc key}, ${4:string secondary loc key}, ${5:boolean persistent}, ${6:number index}, ${7:[opt=false] function end callback}, ${8:[opt=0] number callback delay}, ${9:[opt=false] boolean dont whitelist})"
		],
	},
	"docgen:campaign_manager:campaign_manager:show_message_event": {
		"scope": "lua",
		"prefix": "campaign_manager:show_message_event",
		"description": "campaign_manager:show_message_event()\n-  -\n\nConstructs and displays an event.\n",
		"body": [
			"campaign_manager:show_message_event(${1:string faction key}, ${2:string title loc key}, ${3:string primary loc key}, ${4:string secondary loc key}, ${5:boolean persistent}, ${6:number index}, ${7:[opt=false] function end callback}, ${8:[opt=0] number callback delay}, ${9:[opt=false] boolean dont whitelist})"
		],
	},
	"docgen:campaign_manager:cm:show_message_event": {
		"scope": "lua",
		"prefix": "cm:show_message_event",
		"description": "campaign_manager:show_message_event()\n-  -\n\nConstructs and displays an event.\n",
		"body": [
			"cm:show_message_event(${1:string faction key}, ${2:string title loc key}, ${3:string primary loc key}, ${4:string secondary loc key}, ${5:boolean persistent}, ${6:number index}, ${7:[opt=false] function end callback}, ${8:[opt=0] number callback delay}, ${9:[opt=false] boolean dont whitelist})"
		],
	},
	"docgen:campaign_manager:show_message_event_located": {
		"scope": "lua",
		"prefix": "show_message_event_located",
		"description": "campaign_manager:show_message_event_located()\n-  -\n\nConstructs and displays a located event.\n",
		"body": [
			"show_message_event_located(${1:string faction key}, ${2:string title loc key}, ${3:string primary loc key}, ${4:string secondary loc key}, ${5:number x}, ${6:number y}, ${7:boolean persistent}, ${8:number index}, ${9:[opt=false] function end callback}, ${10:[opt=0] number callback delay})"
		],
	},
	"docgen:campaign_manager:campaign_manager:show_message_event_located": {
		"scope": "lua",
		"prefix": "campaign_manager:show_message_event_located",
		"description": "campaign_manager:show_message_event_located()\n-  -\n\nConstructs and displays a located event.\n",
		"body": [
			"campaign_manager:show_message_event_located(${1:string faction key}, ${2:string title loc key}, ${3:string primary loc key}, ${4:string secondary loc key}, ${5:number x}, ${6:number y}, ${7:boolean persistent}, ${8:number index}, ${9:[opt=false] function end callback}, ${10:[opt=0] number callback delay})"
		],
	},
	"docgen:campaign_manager:cm:show_message_event_located": {
		"scope": "lua",
		"prefix": "cm:show_message_event_located",
		"description": "campaign_manager:show_message_event_located()\n-  -\n\nConstructs and displays a located event.\n",
		"body": [
			"cm:show_message_event_located(${1:string faction key}, ${2:string title loc key}, ${3:string primary loc key}, ${4:string secondary loc key}, ${5:number x}, ${6:number y}, ${7:boolean persistent}, ${8:number index}, ${9:[opt=false] function end callback}, ${10:[opt=0] number callback delay})"
		],
	},
	"docgen:campaign_manager:trigger_transient_intervention": {
		"scope": "lua",
		"prefix": "trigger_transient_intervention",
		"description": "campaign_manager:trigger_transient_intervention()\n-  -\n\nCreates, starts, and immediately triggers a transient intervention with the supplied paramters.\n",
		"body": [
			"trigger_transient_intervention(${1:string name}, ${2:function callback}, ${3:[opt=true] boolean debug}, ${4:[opt=nil] function configuration callback})"
		],
	},
	"docgen:campaign_manager:campaign_manager:trigger_transient_intervention": {
		"scope": "lua",
		"prefix": "campaign_manager:trigger_transient_intervention",
		"description": "campaign_manager:trigger_transient_intervention()\n-  -\n\nCreates, starts, and immediately triggers a transient intervention with the supplied paramters.\n",
		"body": [
			"campaign_manager:trigger_transient_intervention(${1:string name}, ${2:function callback}, ${3:[opt=true] boolean debug}, ${4:[opt=nil] function configuration callback})"
		],
	},
	"docgen:campaign_manager:cm:trigger_transient_intervention": {
		"scope": "lua",
		"prefix": "cm:trigger_transient_intervention",
		"description": "campaign_manager:trigger_transient_intervention()\n-  -\n\nCreates, starts, and immediately triggers a transient intervention with the supplied paramters.\n",
		"body": [
			"cm:trigger_transient_intervention(${1:string name}, ${2:function callback}, ${3:[opt=true] boolean debug}, ${4:[opt=nil] function configuration callback})"
		],
	},
	"docgen:campaign_manager:add_turn_countdown_event": {
		"scope": "lua",
		"prefix": "add_turn_countdown_event",
		"description": "campaign_manager:add_turn_countdown_event()\n-  -\n\nRegisters a turn countdown event.\n",
		"body": [
			"add_turn_countdown_event(${1:string faction key}, ${2:integer turns}, ${3:string event}, ${4:[opt=\"\"] string context string})"
		],
	},
	"docgen:campaign_manager:campaign_manager:add_turn_countdown_event": {
		"scope": "lua",
		"prefix": "campaign_manager:add_turn_countdown_event",
		"description": "campaign_manager:add_turn_countdown_event()\n-  -\n\nRegisters a turn countdown event.\n",
		"body": [
			"campaign_manager:add_turn_countdown_event(${1:string faction key}, ${2:integer turns}, ${3:string event}, ${4:[opt=\"\"] string context string})"
		],
	},
	"docgen:campaign_manager:cm:add_turn_countdown_event": {
		"scope": "lua",
		"prefix": "cm:add_turn_countdown_event",
		"description": "campaign_manager:add_turn_countdown_event()\n-  -\n\nRegisters a turn countdown event.\n",
		"body": [
			"cm:add_turn_countdown_event(${1:string faction key}, ${2:integer turns}, ${3:string event}, ${4:[opt=\"\"] string context string})"
		],
	},
	"docgen:campaign_manager:start_faction_region_change_monitor": {
		"scope": "lua",
		"prefix": "start_faction_region_change_monitor",
		"description": "campaign_manager:start_faction_region_change_monitor()\n-  -\n\nStarts a region change monitor for a faction.\n",
		"body": [
			"start_faction_region_change_monitor(${1:string faction key})"
		],
	},
	"docgen:campaign_manager:campaign_manager:start_faction_region_change_monitor": {
		"scope": "lua",
		"prefix": "campaign_manager:start_faction_region_change_monitor",
		"description": "campaign_manager:start_faction_region_change_monitor()\n-  -\n\nStarts a region change monitor for a faction.\n",
		"body": [
			"campaign_manager:start_faction_region_change_monitor(${1:string faction key})"
		],
	},
	"docgen:campaign_manager:cm:start_faction_region_change_monitor": {
		"scope": "lua",
		"prefix": "cm:start_faction_region_change_monitor",
		"description": "campaign_manager:start_faction_region_change_monitor()\n-  -\n\nStarts a region change monitor for a faction.\n",
		"body": [
			"cm:start_faction_region_change_monitor(${1:string faction key})"
		],
	},
	"docgen:campaign_manager:stop_faction_region_change_monitor": {
		"scope": "lua",
		"prefix": "stop_faction_region_change_monitor",
		"description": "campaign_manager:stop_faction_region_change_monitor()\n-  -\n\nStops a running region change monitor for a faction.\n",
		"body": [
			"stop_faction_region_change_monitor(${1:string faction key})"
		],
	},
	"docgen:campaign_manager:campaign_manager:stop_faction_region_change_monitor": {
		"scope": "lua",
		"prefix": "campaign_manager:stop_faction_region_change_monitor",
		"description": "campaign_manager:stop_faction_region_change_monitor()\n-  -\n\nStops a running region change monitor for a faction.\n",
		"body": [
			"campaign_manager:stop_faction_region_change_monitor(${1:string faction key})"
		],
	},
	"docgen:campaign_manager:cm:stop_faction_region_change_monitor": {
		"scope": "lua",
		"prefix": "cm:stop_faction_region_change_monitor",
		"description": "campaign_manager:stop_faction_region_change_monitor()\n-  -\n\nStops a running region change monitor for a faction.\n",
		"body": [
			"cm:stop_faction_region_change_monitor(${1:string faction key})"
		],
	},
	"docgen:campaign_manager:find_lowest_public_order_region_on_turn_start": {
		"scope": "lua",
		"prefix": "find_lowest_public_order_region_on_turn_start",
		"description": "campaign_manager:find_lowest_public_order_region_on_turn_start()\n-  -\n\nStarts a monitor for a faction which, on turn start for that faction, triggers a event with the faction and the region they control with the lowest public order attached.\n",
		"body": [
			"find_lowest_public_order_region_on_turn_start(${1:string faction key})"
		],
	},
	"docgen:campaign_manager:campaign_manager:find_lowest_public_order_region_on_turn_start": {
		"scope": "lua",
		"prefix": "campaign_manager:find_lowest_public_order_region_on_turn_start",
		"description": "campaign_manager:find_lowest_public_order_region_on_turn_start()\n-  -\n\nStarts a monitor for a faction which, on turn start for that faction, triggers a event with the faction and the region they control with the lowest public order attached.\n",
		"body": [
			"campaign_manager:find_lowest_public_order_region_on_turn_start(${1:string faction key})"
		],
	},
	"docgen:campaign_manager:cm:find_lowest_public_order_region_on_turn_start": {
		"scope": "lua",
		"prefix": "cm:find_lowest_public_order_region_on_turn_start",
		"description": "campaign_manager:find_lowest_public_order_region_on_turn_start()\n-  -\n\nStarts a monitor for a faction which, on turn start for that faction, triggers a event with the faction and the region they control with the lowest public order attached.\n",
		"body": [
			"cm:find_lowest_public_order_region_on_turn_start(${1:string faction key})"
		],
	},
	"docgen:campaign_manager:generate_region_rebels_event_for_faction": {
		"scope": "lua",
		"prefix": "generate_region_rebels_event_for_faction",
		"description": "campaign_manager:generate_region_rebels_event_for_faction()\n-  -\n\n<code>RegionRebels</code> events are sent as a faction ends their turn but before the <code>FactionTurnEnd</code> event is received.\n",
		"body": [
			"generate_region_rebels_event_for_faction(${1:string faction key})"
		],
	},
	"docgen:campaign_manager:campaign_manager:generate_region_rebels_event_for_faction": {
		"scope": "lua",
		"prefix": "campaign_manager:generate_region_rebels_event_for_faction",
		"description": "campaign_manager:generate_region_rebels_event_for_faction()\n-  -\n\n<code>RegionRebels</code> events are sent as a faction ends their turn but before the <code>FactionTurnEnd</code> event is received.\n",
		"body": [
			"campaign_manager:generate_region_rebels_event_for_faction(${1:string faction key})"
		],
	},
	"docgen:campaign_manager:cm:generate_region_rebels_event_for_faction": {
		"scope": "lua",
		"prefix": "cm:generate_region_rebels_event_for_faction",
		"description": "campaign_manager:generate_region_rebels_event_for_faction()\n-  -\n\n<code>RegionRebels</code> events are sent as a faction ends their turn but before the <code>FactionTurnEnd</code> event is received.\n",
		"body": [
			"cm:generate_region_rebels_event_for_faction(${1:string faction key})"
		],
	},
	"docgen:campaign_manager:start_hero_action_listener": {
		"scope": "lua",
		"prefix": "start_hero_action_listener",
		"description": "campaign_manager:start_hero_action_listener()\n-  -\n\nThis fuction starts a listener for hero actions committed against a specified faction and sends out further events based on the outcome of those actions.\n",
		"body": [
			"start_hero_action_listener(${1:string faction key})"
		],
	},
	"docgen:campaign_manager:campaign_manager:start_hero_action_listener": {
		"scope": "lua",
		"prefix": "campaign_manager:start_hero_action_listener",
		"description": "campaign_manager:start_hero_action_listener()\n-  -\n\nThis fuction starts a listener for hero actions committed against a specified faction and sends out further events based on the outcome of those actions.\n",
		"body": [
			"campaign_manager:start_hero_action_listener(${1:string faction key})"
		],
	},
	"docgen:campaign_manager:cm:start_hero_action_listener": {
		"scope": "lua",
		"prefix": "cm:start_hero_action_listener",
		"description": "campaign_manager:start_hero_action_listener()\n-  -\n\nThis fuction starts a listener for hero actions committed against a specified faction and sends out further events based on the outcome of those actions.\n",
		"body": [
			"cm:start_hero_action_listener(${1:string faction key})"
		],
	},
	"docgen:campaign_manager:trigger_campaign_vo": {
		"scope": "lua",
		"prefix": "trigger_campaign_vo",
		"description": "campaign_manager:trigger_campaign_vo()\n-  -\n\nThis fuction attempts to trigger campaign vo for the given character, the event name to play is passed as a string\n",
		"body": [
			"trigger_campaign_vo(${1:string vo event name}, ${2:character character}, ${3:delay delay in seconds (as float i.e. 0.0)})"
		],
	},
	"docgen:campaign_manager:campaign_manager:trigger_campaign_vo": {
		"scope": "lua",
		"prefix": "campaign_manager:trigger_campaign_vo",
		"description": "campaign_manager:trigger_campaign_vo()\n-  -\n\nThis fuction attempts to trigger campaign vo for the given character, the event name to play is passed as a string\n",
		"body": [
			"campaign_manager:trigger_campaign_vo(${1:string vo event name}, ${2:character character}, ${3:delay delay in seconds (as float i.e. 0.0)})"
		],
	},
	"docgen:campaign_manager:cm:trigger_campaign_vo": {
		"scope": "lua",
		"prefix": "cm:trigger_campaign_vo",
		"description": "campaign_manager:trigger_campaign_vo()\n-  -\n\nThis fuction attempts to trigger campaign vo for the given character, the event name to play is passed as a string\n",
		"body": [
			"cm:trigger_campaign_vo(${1:string vo event name}, ${2:character character}, ${3:delay delay in seconds (as float i.e. 0.0)})"
		],
	},
	"docgen:campaign_manager:show_benchmark_if_required": {
		"scope": "lua",
		"prefix": "show_benchmark_if_required",
		"description": "campaign_manager:show_benchmark_if_required()\n-  -\n\nShows a benchmark constructed from supplied parameters if the campaign loaded in benchmark mode, otherwise calls a supplied callback.\n",
		"body": [
			"show_benchmark_if_required(${1:function non-benchmark callback}, ${2:string cindy file}, ${3:number benchmark duration}, ${4:number cam x}, ${5:number cam y}, ${6:number cam d}, ${7:number cam b}, ${8:number cam h})"
		],
	},
	"docgen:campaign_manager:campaign_manager:show_benchmark_if_required": {
		"scope": "lua",
		"prefix": "campaign_manager:show_benchmark_if_required",
		"description": "campaign_manager:show_benchmark_if_required()\n-  -\n\nShows a benchmark constructed from supplied parameters if the campaign loaded in benchmark mode, otherwise calls a supplied callback.\n",
		"body": [
			"campaign_manager:show_benchmark_if_required(${1:function non-benchmark callback}, ${2:string cindy file}, ${3:number benchmark duration}, ${4:number cam x}, ${5:number cam y}, ${6:number cam d}, ${7:number cam b}, ${8:number cam h})"
		],
	},
	"docgen:campaign_manager:cm:show_benchmark_if_required": {
		"scope": "lua",
		"prefix": "cm:show_benchmark_if_required",
		"description": "campaign_manager:show_benchmark_if_required()\n-  -\n\nShows a benchmark constructed from supplied parameters if the campaign loaded in benchmark mode, otherwise calls a supplied callback.\n",
		"body": [
			"cm:show_benchmark_if_required(${1:function non-benchmark callback}, ${2:string cindy file}, ${3:number benchmark duration}, ${4:number cam x}, ${5:number cam y}, ${6:number cam d}, ${7:number cam b}, ${8:number cam h})"
		],
	},
	"docgen:mission_manager:new": {
		"scope": "lua",
		"prefix": "new",
		"description": "mission_manager:new()\n-  -\n\nCreates a mission manager object.\n",
		"body": [
			"new(${1:string faction name}, ${2:string mission key}, ${3:[opt=nil] function success callback}, ${4:[opt=nil] function failure callback}, ${5:[opt=nil] function cancellation callback}, ${6:[opt=nil] function nearing-expiry callback})"
		],
	},
	"docgen:mission_manager:mission_manager:new": {
		"scope": "lua",
		"prefix": "mission_manager:new",
		"description": "mission_manager:new()\n-  -\n\nCreates a mission manager object.\n",
		"body": [
			"mission_manager:new(${1:string faction name}, ${2:string mission key}, ${3:[opt=nil] function success callback}, ${4:[opt=nil] function failure callback}, ${5:[opt=nil] function cancellation callback}, ${6:[opt=nil] function nearing-expiry callback})"
		],
	},
	"docgen:mission_manager:set_should_cancel_before_issuing": {
		"scope": "lua",
		"prefix": "set_should_cancel_before_issuing",
		"description": "mission_manager:set_should_cancel_before_issuing()\n-  -\n\nWhen it goes to trigger the mission manager will, if the mission is persistent (see mission_manager:Persistence), issue a call to cancel any mission with the key specified in mission_manager:new before issuing its mission.\n",
		"body": [
			"set_should_cancel_before_issuing(${1:[opt=true] boolean cancel before issuing})"
		],
	},
	"docgen:mission_manager:mission_manager:set_should_cancel_before_issuing": {
		"scope": "lua",
		"prefix": "mission_manager:set_should_cancel_before_issuing",
		"description": "mission_manager:set_should_cancel_before_issuing()\n-  -\n\nWhen it goes to trigger the mission manager will, if the mission is persistent (see mission_manager:Persistence), issue a call to cancel any mission with the key specified in mission_manager:new before issuing its mission.\n",
		"body": [
			"mission_manager:set_should_cancel_before_issuing(${1:[opt=true] boolean cancel before issuing})"
		],
	},
	"docgen:mission_manager:set_should_whitelist": {
		"scope": "lua",
		"prefix": "set_should_whitelist",
		"description": "mission_manager:set_should_whitelist()\n-  -\n\nWhen it goes to trigger the mission manager will, by default, add the relevant mission/dilemma/incident type to the event whitelist so that it triggers even if event messages are currently suppressed (see campaign_manager:suppress_all_event_feed_messages).\n",
		"body": [
			"set_should_whitelist(${1:[opt=true] boolean should whitelist})"
		],
	},
	"docgen:mission_manager:mission_manager:set_should_whitelist": {
		"scope": "lua",
		"prefix": "mission_manager:set_should_whitelist",
		"description": "mission_manager:set_should_whitelist()\n-  -\n\nWhen it goes to trigger the mission manager will, by default, add the relevant mission/dilemma/incident type to the event whitelist so that it triggers even if event messages are currently suppressed (see campaign_manager:suppress_all_event_feed_messages).\n",
		"body": [
			"mission_manager:set_should_whitelist(${1:[opt=true] boolean should whitelist})"
		],
	},
	"docgen:mission_manager:set_first_time_startup_callback": {
		"scope": "lua",
		"prefix": "set_first_time_startup_callback",
		"description": "mission_manager:set_first_time_startup_callback()\n-  -\n\nSpecifies a callback to call, one time, when the mission is first triggered.\n",
		"body": [
			"set_first_time_startup_callback(${1:function callback})"
		],
	},
	"docgen:mission_manager:mission_manager:set_first_time_startup_callback": {
		"scope": "lua",
		"prefix": "mission_manager:set_first_time_startup_callback",
		"description": "mission_manager:set_first_time_startup_callback()\n-  -\n\nSpecifies a callback to call, one time, when the mission is first triggered.\n",
		"body": [
			"mission_manager:set_first_time_startup_callback(${1:function callback})"
		],
	},
	"docgen:mission_manager:set_each_time_startup_callback": {
		"scope": "lua",
		"prefix": "set_each_time_startup_callback",
		"description": "mission_manager:set_each_time_startup_callback()\n-  -\n\nSpecifies a callback to call each time the script is started while this mission is active - after the mission is first triggered and before it's completed.\n",
		"body": [
			"set_each_time_startup_callback(${1:function callback})"
		],
	},
	"docgen:mission_manager:mission_manager:set_each_time_startup_callback": {
		"scope": "lua",
		"prefix": "mission_manager:set_each_time_startup_callback",
		"description": "mission_manager:set_each_time_startup_callback()\n-  -\n\nSpecifies a callback to call each time the script is started while this mission is active - after the mission is first triggered and before it's completed.\n",
		"body": [
			"mission_manager:set_each_time_startup_callback(${1:function callback})"
		],
	},
	"docgen:mission_manager:add_new_objective": {
		"scope": "lua",
		"prefix": "add_new_objective",
		"description": "mission_manager:add_new_objective()\n-  -\n\nAdds a new objective type to the mission specification, and also sets the mission manager to construct its mission from a string.\n",
		"body": [
			"add_new_objective(${1:string objective type})"
		],
	},
	"docgen:mission_manager:mission_manager:add_new_objective": {
		"scope": "lua",
		"prefix": "mission_manager:add_new_objective",
		"description": "mission_manager:add_new_objective()\n-  -\n\nAdds a new objective type to the mission specification, and also sets the mission manager to construct its mission from a string.\n",
		"body": [
			"mission_manager:add_new_objective(${1:string objective type})"
		],
	},
	"docgen:mission_manager:add_condition": {
		"scope": "lua",
		"prefix": "add_condition",
		"description": "mission_manager:add_condition()\n-  -\n\nAdds a condition to the objective last added with mission_manager:add_new_objective.\n",
		"body": [
			"add_condition(${1:string condition})"
		],
	},
	"docgen:mission_manager:mission_manager:add_condition": {
		"scope": "lua",
		"prefix": "mission_manager:add_condition",
		"description": "mission_manager:add_condition()\n-  -\n\nAdds a condition to the objective last added with mission_manager:add_new_objective.\n",
		"body": [
			"mission_manager:add_condition(${1:string condition})"
		],
	},
	"docgen:mission_manager:add_payload": {
		"scope": "lua",
		"prefix": "add_payload",
		"description": "mission_manager:add_payload()\n-  -\n\nAdds a payload (reward) to the objective last added with mission_manager:add_new_objective.\n",
		"body": [
			"add_payload(${1:string payload})"
		],
	},
	"docgen:mission_manager:mission_manager:add_payload": {
		"scope": "lua",
		"prefix": "mission_manager:add_payload",
		"description": "mission_manager:add_payload()\n-  -\n\nAdds a payload (reward) to the objective last added with mission_manager:add_new_objective.\n",
		"body": [
			"mission_manager:add_payload(${1:string payload})"
		],
	},
	"docgen:mission_manager:add_heading": {
		"scope": "lua",
		"prefix": "add_heading",
		"description": "mission_manager:add_heading()\n-  -\n\nAdds a heading key override for the objective last added with mission_manager:add_new_objective.\n",
		"body": [
			"add_heading(${1:string heading key})"
		],
	},
	"docgen:mission_manager:mission_manager:add_heading": {
		"scope": "lua",
		"prefix": "mission_manager:add_heading",
		"description": "mission_manager:add_heading()\n-  -\n\nAdds a heading key override for the objective last added with mission_manager:add_new_objective.\n",
		"body": [
			"mission_manager:add_heading(${1:string heading key})"
		],
	},
	"docgen:mission_manager:add_description": {
		"scope": "lua",
		"prefix": "add_description",
		"description": "mission_manager:add_description()\n-  -\n\nAdds a description key override for the objective last added with mission_manager:add_new_objective.\n",
		"body": [
			"add_description(${1:string heading key})"
		],
	},
	"docgen:mission_manager:mission_manager:add_description": {
		"scope": "lua",
		"prefix": "mission_manager:add_description",
		"description": "mission_manager:add_description()\n-  -\n\nAdds a description key override for the objective last added with mission_manager:add_new_objective.\n",
		"body": [
			"mission_manager:add_description(${1:string heading key})"
		],
	},
	"docgen:mission_manager:set_turn_limit": {
		"scope": "lua",
		"prefix": "set_turn_limit",
		"description": "mission_manager:set_turn_limit()\n-  -\n\nSets a turn limit for the entire mission.\n",
		"body": [
			"set_turn_limit(${1:number turn limit})"
		],
	},
	"docgen:mission_manager:mission_manager:set_turn_limit": {
		"scope": "lua",
		"prefix": "mission_manager:set_turn_limit",
		"description": "mission_manager:set_turn_limit()\n-  -\n\nSets a turn limit for the entire mission.\n",
		"body": [
			"mission_manager:set_turn_limit(${1:number turn limit})"
		],
	},
	"docgen:mission_manager:set_chapter": {
		"scope": "lua",
		"prefix": "set_chapter",
		"description": "mission_manager:set_chapter()\n-  -\n\nSets this mission to be a particular chapter mission, which affects how it is displayed and categorised on the UI.\n",
		"body": [
			"set_chapter(${1:number chapter number})"
		],
	},
	"docgen:mission_manager:mission_manager:set_chapter": {
		"scope": "lua",
		"prefix": "mission_manager:set_chapter",
		"description": "mission_manager:set_chapter()\n-  -\n\nSets this mission to be a particular chapter mission, which affects how it is displayed and categorised on the UI.\n",
		"body": [
			"mission_manager:set_chapter(${1:number chapter number})"
		],
	},
	"docgen:mission_manager:set_mission_issuer": {
		"scope": "lua",
		"prefix": "set_mission_issuer",
		"description": "mission_manager:set_mission_issuer()\n-  -\n\nSets an issuer for this mission, which determines some aspects of the mission's presentation.\n",
		"body": [
			"set_mission_issuer(${1:string mission issuer})"
		],
	},
	"docgen:mission_manager:mission_manager:set_mission_issuer": {
		"scope": "lua",
		"prefix": "mission_manager:set_mission_issuer",
		"description": "mission_manager:set_mission_issuer()\n-  -\n\nSets an issuer for this mission, which determines some aspects of the mission's presentation.\n",
		"body": [
			"mission_manager:set_mission_issuer(${1:string mission issuer})"
		],
	},
	"docgen:mission_manager:add_new_scripted_objective": {
		"scope": "lua",
		"prefix": "add_new_scripted_objective",
		"description": "mission_manager:add_new_scripted_objective()\n-  -\n\nAdds a new scripted objective, along with some text to display, a completion event and condition to monitor.\n",
		"body": [
			"add_new_scripted_objective(${1:string display text}, ${2:string event}, ${3:function condition}, ${4:[opt=nil] string script name})"
		],
	},
	"docgen:mission_manager:mission_manager:add_new_scripted_objective": {
		"scope": "lua",
		"prefix": "mission_manager:add_new_scripted_objective",
		"description": "mission_manager:add_new_scripted_objective()\n-  -\n\nAdds a new scripted objective, along with some text to display, a completion event and condition to monitor.\n",
		"body": [
			"mission_manager:add_new_scripted_objective(${1:string display text}, ${2:string event}, ${3:function condition}, ${4:[opt=nil] string script name})"
		],
	},
	"docgen:mission_manager:add_scripted_objective_success_condition": {
		"scope": "lua",
		"prefix": "add_scripted_objective_success_condition",
		"description": "mission_manager:add_scripted_objective_success_condition()\n-  -\n\nAdds a new success condition to a scripted objective.\n",
		"body": [
			"add_scripted_objective_success_condition(${1:string event}, ${2:function condition}, ${3:[opt=nil] string script name})"
		],
	},
	"docgen:mission_manager:mission_manager:add_scripted_objective_success_condition": {
		"scope": "lua",
		"prefix": "mission_manager:add_scripted_objective_success_condition",
		"description": "mission_manager:add_scripted_objective_success_condition()\n-  -\n\nAdds a new success condition to a scripted objective.\n",
		"body": [
			"mission_manager:add_scripted_objective_success_condition(${1:string event}, ${2:function condition}, ${3:[opt=nil] string script name})"
		],
	},
	"docgen:mission_manager:add_scripted_objective_failure_condition": {
		"scope": "lua",
		"prefix": "add_scripted_objective_failure_condition",
		"description": "mission_manager:add_scripted_objective_failure_condition()\n-  -\n\nAdds a new failure condition to a scripted objective.\n",
		"body": [
			"add_scripted_objective_failure_condition(${1:string event}, ${2:function condition}, ${3:[opt=nil] string script name})"
		],
	},
	"docgen:mission_manager:mission_manager:add_scripted_objective_failure_condition": {
		"scope": "lua",
		"prefix": "mission_manager:add_scripted_objective_failure_condition",
		"description": "mission_manager:add_scripted_objective_failure_condition()\n-  -\n\nAdds a new failure condition to a scripted objective.\n",
		"body": [
			"mission_manager:add_scripted_objective_failure_condition(${1:string event}, ${2:function condition}, ${3:[opt=nil] string script name})"
		],
	},
	"docgen:mission_manager:force_scripted_objective_success": {
		"scope": "lua",
		"prefix": "force_scripted_objective_success",
		"description": "mission_manager:force_scripted_objective_success()\n-  -\n\nImmediately forces the success of a scripted objective.\n",
		"body": [
			"force_scripted_objective_success(${1:[opt=nil] string script name})"
		],
	},
	"docgen:mission_manager:mission_manager:force_scripted_objective_success": {
		"scope": "lua",
		"prefix": "mission_manager:force_scripted_objective_success",
		"description": "mission_manager:force_scripted_objective_success()\n-  -\n\nImmediately forces the success of a scripted objective.\n",
		"body": [
			"mission_manager:force_scripted_objective_success(${1:[opt=nil] string script name})"
		],
	},
	"docgen:mission_manager:force_scripted_objective_failure": {
		"scope": "lua",
		"prefix": "force_scripted_objective_failure",
		"description": "mission_manager:force_scripted_objective_failure()\n-  -\n\nImmediately forces the failure of a scripted objective.\n",
		"body": [
			"force_scripted_objective_failure(${1:[opt=nil] string script name})"
		],
	},
	"docgen:mission_manager:mission_manager:force_scripted_objective_failure": {
		"scope": "lua",
		"prefix": "mission_manager:force_scripted_objective_failure",
		"description": "mission_manager:force_scripted_objective_failure()\n-  -\n\nImmediately forces the failure of a scripted objective.\n",
		"body": [
			"mission_manager:force_scripted_objective_failure(${1:[opt=nil] string script name})"
		],
	},
	"docgen:mission_manager:update_scripted_objective_text": {
		"scope": "lua",
		"prefix": "update_scripted_objective_text",
		"description": "mission_manager:update_scripted_objective_text()\n-  -\n\nUpdates the displayed objective text of a scripted objective.\n",
		"body": [
			"update_scripted_objective_text(${1:string display text}, ${2:[opt=nil] string script name})"
		],
	},
	"docgen:mission_manager:mission_manager:update_scripted_objective_text": {
		"scope": "lua",
		"prefix": "mission_manager:update_scripted_objective_text",
		"description": "mission_manager:update_scripted_objective_text()\n-  -\n\nUpdates the displayed objective text of a scripted objective.\n",
		"body": [
			"mission_manager:update_scripted_objective_text(${1:string display text}, ${2:[opt=nil] string script name})"
		],
	},
	"docgen:mission_manager:set_is_mission_in_db": {
		"scope": "lua",
		"prefix": "set_is_mission_in_db",
		"description": "mission_manager:set_is_mission_in_db()\n-  -\n\nSets that the mission objectives should be constructed from records in the game database.\n",
		"body": [
			"set_is_mission_in_db()"
		],
	},
	"docgen:mission_manager:mission_manager:set_is_mission_in_db": {
		"scope": "lua",
		"prefix": "mission_manager:set_is_mission_in_db",
		"description": "mission_manager:set_is_mission_in_db()\n-  -\n\nSets that the mission objectives should be constructed from records in the game database.\n",
		"body": [
			"mission_manager:set_is_mission_in_db()"
		],
	},
	"docgen:mission_manager:set_is_incident_in_db": {
		"scope": "lua",
		"prefix": "set_is_incident_in_db",
		"description": "mission_manager:set_is_incident_in_db()\n-  -\n\nSets that the mission objectives should be constructed from records in the game database, and that the mission is actually an incident.\n",
		"body": [
			"set_is_incident_in_db()"
		],
	},
	"docgen:mission_manager:mission_manager:set_is_incident_in_db": {
		"scope": "lua",
		"prefix": "mission_manager:set_is_incident_in_db",
		"description": "mission_manager:set_is_incident_in_db()\n-  -\n\nSets that the mission objectives should be constructed from records in the game database, and that the mission is actually an incident.\n",
		"body": [
			"mission_manager:set_is_incident_in_db()"
		],
	},
	"docgen:mission_manager:set_is_dilemma_in_db": {
		"scope": "lua",
		"prefix": "set_is_dilemma_in_db",
		"description": "mission_manager:set_is_dilemma_in_db()\n-  -\n\nSets that the mission objectives should be constructed from records in the game database, and that the mission is actually a dilemma.\n",
		"body": [
			"set_is_dilemma_in_db(${1:[opt=false] boolean is intervention})"
		],
	},
	"docgen:mission_manager:mission_manager:set_is_dilemma_in_db": {
		"scope": "lua",
		"prefix": "mission_manager:set_is_dilemma_in_db",
		"description": "mission_manager:set_is_dilemma_in_db()\n-  -\n\nSets that the mission objectives should be constructed from records in the game database, and that the mission is actually a dilemma.\n",
		"body": [
			"mission_manager:set_is_dilemma_in_db(${1:[opt=false] boolean is intervention})"
		],
	},
	"docgen:mission_manager:has_been_triggered": {
		"scope": "lua",
		"prefix": "has_been_triggered",
		"description": "mission_manager:has_been_triggered()\n-  -\n\nReturns <code>true</code> if the mission manager has been triggered in the past, <code>false</code> otherwise.\n",
		"body": [
			"has_been_triggered()"
		],
	},
	"docgen:mission_manager:mission_manager:has_been_triggered": {
		"scope": "lua",
		"prefix": "mission_manager:has_been_triggered",
		"description": "mission_manager:has_been_triggered()\n-  -\n\nReturns <code>true</code> if the mission manager has been triggered in the past, <code>false</code> otherwise.\n",
		"body": [
			"mission_manager:has_been_triggered()"
		],
	},
	"docgen:mission_manager:is_completed": {
		"scope": "lua",
		"prefix": "is_completed",
		"description": "mission_manager:is_completed()\n-  -\n\nReturns <code>true</code> if the mission has been completed, <code>false</code> otherwise.\n",
		"body": [
			"is_completed()"
		],
	},
	"docgen:mission_manager:mission_manager:is_completed": {
		"scope": "lua",
		"prefix": "mission_manager:is_completed",
		"description": "mission_manager:is_completed()\n-  -\n\nReturns <code>true</code> if the mission has been completed, <code>false</code> otherwise.\n",
		"body": [
			"mission_manager:is_completed()"
		],
	},
	"docgen:mission_manager:trigger": {
		"scope": "lua",
		"prefix": "trigger",
		"description": "mission_manager:trigger()\n-  -\n\nTriggers the mission, causing it to be issued.\n",
		"body": [
			"trigger(${1:[opt=nil] function dismiss callback}, ${2:[opt=nil] number callback delay})"
		],
	},
	"docgen:mission_manager:mission_manager:trigger": {
		"scope": "lua",
		"prefix": "mission_manager:trigger",
		"description": "mission_manager:trigger()\n-  -\n\nTriggers the mission, causing it to be issued.\n",
		"body": [
			"mission_manager:trigger(${1:[opt=nil] function dismiss callback}, ${2:[opt=nil] number callback delay})"
		],
	},
	"docgen:mission_manager:cancel_dismiss_callback_listeners": {
		"scope": "lua",
		"prefix": "cancel_dismiss_callback_listeners",
		"description": "mission_manager:cancel_dismiss_callback_listeners()\n-  -\n\nCancels any listeners associated with the dismiss callback added with mission_manager:trigger.\n",
		"body": [
			"cancel_dismiss_callback_listeners()"
		],
	},
	"docgen:mission_manager:mission_manager:cancel_dismiss_callback_listeners": {
		"scope": "lua",
		"prefix": "mission_manager:cancel_dismiss_callback_listeners",
		"description": "mission_manager:cancel_dismiss_callback_listeners()\n-  -\n\nCancels any listeners associated with the dismiss callback added with mission_manager:trigger.\n",
		"body": [
			"mission_manager:cancel_dismiss_callback_listeners()"
		],
	},
	"docgen:chapter_mission:new": {
		"scope": "lua",
		"prefix": "new",
		"description": "chapter_mission:new()\n-  -\n\nCreates a chapter mission object.\n",
		"body": [
			"new(${1:number chapter number}, ${2:string faction key}, ${3:string mission key}, ${4:[opt=nil] string advice key}, ${5:[opt=nil] table infotext})"
		],
	},
	"docgen:chapter_mission:chapter_mission:new": {
		"scope": "lua",
		"prefix": "chapter_mission:new",
		"description": "chapter_mission:new()\n-  -\n\nCreates a chapter mission object.\n",
		"body": [
			"chapter_mission:new(${1:number chapter number}, ${2:string faction key}, ${3:string mission key}, ${4:[opt=nil] string advice key}, ${5:[opt=nil] table infotext})"
		],
	},
	"docgen:chapter_mission:has_been_issued": {
		"scope": "lua",
		"prefix": "has_been_issued",
		"description": "chapter_mission:has_been_issued()\n-  -\n\nreturns whether the chapter mission has been issued.\n",
		"body": [
			"has_been_issued()"
		],
	},
	"docgen:chapter_mission:chapter_mission:has_been_issued": {
		"scope": "lua",
		"prefix": "chapter_mission:has_been_issued",
		"description": "chapter_mission:has_been_issued()\n-  -\n\nreturns whether the chapter mission has been issued.\n",
		"body": [
			"chapter_mission:has_been_issued()"
		],
	},
	"docgen:chapter_mission:has_been_completed": {
		"scope": "lua",
		"prefix": "has_been_completed",
		"description": "chapter_mission:has_been_completed()\n-  -\n\nreturns whether the chapter mission has been completed.\n",
		"body": [
			"has_been_completed()"
		],
	},
	"docgen:chapter_mission:chapter_mission:has_been_completed": {
		"scope": "lua",
		"prefix": "chapter_mission:has_been_completed",
		"description": "chapter_mission:has_been_completed()\n-  -\n\nreturns whether the chapter mission has been completed.\n",
		"body": [
			"chapter_mission:has_been_completed()"
		],
	},
	"docgen:chapter_mission:manual_start": {
		"scope": "lua",
		"prefix": "manual_start",
		"description": "chapter_mission:manual_start()\n-  -\n\nManually starts the chapter mission.\n",
		"body": [
			"manual_start()"
		],
	},
	"docgen:chapter_mission:chapter_mission:manual_start": {
		"scope": "lua",
		"prefix": "chapter_mission:manual_start",
		"description": "chapter_mission:manual_start()\n-  -\n\nManually starts the chapter mission.\n",
		"body": [
			"chapter_mission:manual_start()"
		],
	},
	"docgen:random_army_manager:new_force": {
		"scope": "lua",
		"prefix": "new_force",
		"description": "random_army_manager:new_force()\n-  -\n\nAdds a new force to the random army manager\n",
		"body": [
			"new_force(${1:string force key})"
		],
	},
	"docgen:random_army_manager:random_army_manager:new_force": {
		"scope": "lua",
		"prefix": "random_army_manager:new_force",
		"description": "random_army_manager:new_force()\n-  -\n\nAdds a new force to the random army manager\n",
		"body": [
			"random_army_manager:new_force(${1:string force key})"
		],
	},
	"docgen:random_army_manager:add_unit": {
		"scope": "lua",
		"prefix": "add_unit",
		"description": "random_army_manager:add_unit()\n-  -\n\nAdds a unit to a force, making it available for random selection if this force is generated.\n",
		"body": [
			"add_unit(${1:string key of the force}, ${2:string key of the unit}, ${3:number weight value})"
		],
	},
	"docgen:random_army_manager:random_army_manager:add_unit": {
		"scope": "lua",
		"prefix": "random_army_manager:add_unit",
		"description": "random_army_manager:add_unit()\n-  -\n\nAdds a unit to a force, making it available for random selection if this force is generated.\n",
		"body": [
			"random_army_manager:add_unit(${1:string key of the force}, ${2:string key of the unit}, ${3:number weight value})"
		],
	},
	"docgen:random_army_manager:add_mandatory_unit": {
		"scope": "lua",
		"prefix": "add_mandatory_unit",
		"description": "random_army_manager:add_mandatory_unit()\n-  -\n\nAdds a mandatory unit to a force composition, making it so that if this force is generated this unit will always be part of it\n",
		"body": [
			"add_mandatory_unit(${1:string key of the force}, ${2:string key of the unit}, ${3:number amount of these units})"
		],
	},
	"docgen:random_army_manager:random_army_manager:add_mandatory_unit": {
		"scope": "lua",
		"prefix": "random_army_manager:add_mandatory_unit",
		"description": "random_army_manager:add_mandatory_unit()\n-  -\n\nAdds a mandatory unit to a force composition, making it so that if this force is generated this unit will always be part of it\n",
		"body": [
			"random_army_manager:add_mandatory_unit(${1:string key of the force}, ${2:string key of the unit}, ${3:number amount of these units})"
		],
	},
	"docgen:random_army_manager:generate_force": {
		"scope": "lua",
		"prefix": "generate_force",
		"description": "random_army_manager:generate_force()\n-  -\n\nThis generates a force randomly, first taking into account the mandatory unit and then making random selection of units based on weighting.\n",
		"body": [
			"generate_force(${1:string key of the force}, ${2:number amount of units}, ${3:boolean pass true to return the force as a table})"
		],
	},
	"docgen:random_army_manager:random_army_manager:generate_force": {
		"scope": "lua",
		"prefix": "random_army_manager:generate_force",
		"description": "random_army_manager:generate_force()\n-  -\n\nThis generates a force randomly, first taking into account the mandatory unit and then making random selection of units based on weighting.\n",
		"body": [
			"random_army_manager:generate_force(${1:string key of the force}, ${2:number amount of units}, ${3:boolean pass true to return the force as a table})"
		],
	},
	"docgen:random_army_manager:remove_force": {
		"scope": "lua",
		"prefix": "remove_force",
		"description": "random_army_manager:remove_force()\n-  -\n\nRemove an existing force from the force list\n",
		"body": [
			"remove_force(${1:string key of the force})"
		],
	},
	"docgen:random_army_manager:random_army_manager:remove_force": {
		"scope": "lua",
		"prefix": "random_army_manager:remove_force",
		"description": "random_army_manager:remove_force()\n-  -\n\nRemove an existing force from the force list\n",
		"body": [
			"random_army_manager:remove_force(${1:string key of the force})"
		],
	},
	"docgen:random_army_manager:mandatory_unit_count": {
		"scope": "lua",
		"prefix": "mandatory_unit_count",
		"description": "random_army_manager:mandatory_unit_count()\n-  -\n\nReturns the amount of mandatory units specified in this force\n",
		"body": [
			"mandatory_unit_count(${1:string key of the force})"
		],
	},
	"docgen:random_army_manager:random_army_manager:mandatory_unit_count": {
		"scope": "lua",
		"prefix": "random_army_manager:mandatory_unit_count",
		"description": "random_army_manager:mandatory_unit_count()\n-  -\n\nReturns the amount of mandatory units specified in this force\n",
		"body": [
			"random_army_manager:mandatory_unit_count(${1:string key of the force})"
		],
	},
	"docgen:campaign_ui_manager:new": {
		"scope": "lua",
		"prefix": "new",
		"description": "campaign_ui_manager:new()\n-  -\n\nCreates and returns a new campaign ui manager object, or returns an existing one if one was previously created.\n",
		"body": [
			"new()"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:new": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:new",
		"description": "campaign_ui_manager:new()\n-  -\n\nCreates and returns a new campaign ui manager object, or returns an existing one if one was previously created.\n",
		"body": [
			"campaign_ui_manager:new()"
		],
	},
	"docgen:campaign_ui_manager:is_panel_open": {
		"scope": "lua",
		"prefix": "is_panel_open",
		"description": "campaign_ui_manager:is_panel_open()\n-  -\n\nReturns whether a ui panel with the supplied name is currently open.\n",
		"body": [
			"is_panel_open(${1:string panel name})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:is_panel_open": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:is_panel_open",
		"description": "campaign_ui_manager:is_panel_open()\n-  -\n\nReturns whether a ui panel with the supplied name is currently open.\n",
		"body": [
			"campaign_ui_manager:is_panel_open(${1:string panel name})"
		],
	},
	"docgen:campaign_ui_manager:is_event_panel_open": {
		"scope": "lua",
		"prefix": "is_event_panel_open",
		"description": "campaign_ui_manager:is_event_panel_open()\n-  -\n\nReturns whether an event panel is currently open.\n",
		"body": [
			"is_event_panel_open()"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:is_event_panel_open": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:is_event_panel_open",
		"description": "campaign_ui_manager:is_event_panel_open()\n-  -\n\nReturns whether an event panel is currently open.\n",
		"body": [
			"campaign_ui_manager:is_event_panel_open()"
		],
	},
	"docgen:campaign_ui_manager:get_open_fullscreen_panel": {
		"scope": "lua",
		"prefix": "get_open_fullscreen_panel",
		"description": "campaign_ui_manager:get_open_fullscreen_panel()\n-  -\n\nReturns the name of the first fullscreen panel that's open, or <code>false</code> if no panels are open.\n",
		"body": [
			"get_open_fullscreen_panel()"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:get_open_fullscreen_panel": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:get_open_fullscreen_panel",
		"description": "campaign_ui_manager:get_open_fullscreen_panel()\n-  -\n\nReturns the name of the first fullscreen panel that's open, or <code>false</code> if no panels are open.\n",
		"body": [
			"campaign_ui_manager:get_open_fullscreen_panel()"
		],
	},
	"docgen:campaign_ui_manager:is_char_selected": {
		"scope": "lua",
		"prefix": "is_char_selected",
		"description": "campaign_ui_manager:is_char_selected()\n-  -\n\nReturns whether the supplied character is selected.\n",
		"body": [
			"is_char_selected(${1:character character})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:is_char_selected": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:is_char_selected",
		"description": "campaign_ui_manager:is_char_selected()\n-  -\n\nReturns whether the supplied character is selected.\n",
		"body": [
			"campaign_ui_manager:is_char_selected(${1:character character})"
		],
	},
	"docgen:campaign_ui_manager:get_char_selected_cqi": {
		"scope": "lua",
		"prefix": "get_char_selected_cqi",
		"description": "campaign_ui_manager:get_char_selected_cqi()\n-  -\n\nReturns the cqi of the selected character.\n",
		"body": [
			"get_char_selected_cqi(${1:character character})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:get_char_selected_cqi": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:get_char_selected_cqi",
		"description": "campaign_ui_manager:get_char_selected_cqi()\n-  -\n\nReturns the cqi of the selected character.\n",
		"body": [
			"campaign_ui_manager:get_char_selected_cqi(${1:character character})"
		],
	},
	"docgen:campaign_ui_manager:is_char_selected_from_faction": {
		"scope": "lua",
		"prefix": "is_char_selected_from_faction",
		"description": "campaign_ui_manager:is_char_selected_from_faction()\n-  -\n\nReturns whether a character from the supplied faction is selected.\n",
		"body": [
			"is_char_selected_from_faction(${1:string faction name})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:is_char_selected_from_faction": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:is_char_selected_from_faction",
		"description": "campaign_ui_manager:is_char_selected_from_faction()\n-  -\n\nReturns whether a character from the supplied faction is selected.\n",
		"body": [
			"campaign_ui_manager:is_char_selected_from_faction(${1:string faction name})"
		],
	},
	"docgen:campaign_ui_manager:is_settlement_selected": {
		"scope": "lua",
		"prefix": "is_settlement_selected",
		"description": "campaign_ui_manager:is_settlement_selected()\n-  -\n\nReturns whether a settlement in a region with the supplied name is selected.\n",
		"body": [
			"is_settlement_selected(${1:string region name})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:is_settlement_selected": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:is_settlement_selected",
		"description": "campaign_ui_manager:is_settlement_selected()\n-  -\n\nReturns whether a settlement in a region with the supplied name is selected.\n",
		"body": [
			"campaign_ui_manager:is_settlement_selected(${1:string region name})"
		],
	},
	"docgen:campaign_ui_manager:start_scripted_sequence": {
		"scope": "lua",
		"prefix": "start_scripted_sequence",
		"description": "campaign_ui_manager:start_scripted_sequence()\n-  -\n\nThis is a mechanism by which client scripts can notify the ui manager that a scripted sequence has started, which registers \"scripted_sequence\" in the panel open list.\n",
		"body": [
			"start_scripted_sequence()"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:start_scripted_sequence": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:start_scripted_sequence",
		"description": "campaign_ui_manager:start_scripted_sequence()\n-  -\n\nThis is a mechanism by which client scripts can notify the ui manager that a scripted sequence has started, which registers \"scripted_sequence\" in the panel open list.\n",
		"body": [
			"campaign_ui_manager:start_scripted_sequence()"
		],
	},
	"docgen:campaign_ui_manager:stop_scripted_sequence": {
		"scope": "lua",
		"prefix": "stop_scripted_sequence",
		"description": "campaign_ui_manager:stop_scripted_sequence()\n-  -\n\nRemoves \"scripted_sequence\" from the panel open list.\n",
		"body": [
			"stop_scripted_sequence()"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:stop_scripted_sequence": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:stop_scripted_sequence",
		"description": "campaign_ui_manager:stop_scripted_sequence()\n-  -\n\nRemoves \"scripted_sequence\" from the panel open list.\n",
		"body": [
			"campaign_ui_manager:stop_scripted_sequence()"
		],
	},
	"docgen:campaign_ui_manager:suppress_end_of_turn_warning": {
		"scope": "lua",
		"prefix": "suppress_end_of_turn_warning",
		"description": "campaign_ui_manager:suppress_end_of_turn_warning()\n-  -\n\nSuppresses or un-suppresses an end turn warning from appearing.\n",
		"body": [
			"suppress_end_of_turn_warning(${1:string warning name}, ${2:[opt=false] boolean should suppress})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:suppress_end_of_turn_warning": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:suppress_end_of_turn_warning",
		"description": "campaign_ui_manager:suppress_end_of_turn_warning()\n-  -\n\nSuppresses or un-suppresses an end turn warning from appearing.\n",
		"body": [
			"campaign_ui_manager:suppress_end_of_turn_warning(${1:string warning name}, ${2:[opt=false] boolean should suppress})"
		],
	},
	"docgen:campaign_ui_manager:get_next_output_stamp": {
		"scope": "lua",
		"prefix": "get_next_output_stamp",
		"description": "campaign_ui_manager:get_next_output_stamp()\n-  -\n\nReturns an incremental number which can be used for matching output between tabs.\n",
		"body": [
			"get_next_output_stamp()"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:get_next_output_stamp": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:get_next_output_stamp",
		"description": "campaign_ui_manager:get_next_output_stamp()\n-  -\n\nReturns an incremental number which can be used for matching output between tabs.\n",
		"body": [
			"campaign_ui_manager:get_next_output_stamp()"
		],
	},
	"docgen:campaign_ui_manager:lock_ui": {
		"scope": "lua",
		"prefix": "lock_ui",
		"description": "campaign_ui_manager:lock_ui()\n-  -\n\nPartially locks the ui, preventing the player from ending turn or moving armies and suppressing the events rollout.\n",
		"body": [
			"lock_ui()"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:lock_ui": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:lock_ui",
		"description": "campaign_ui_manager:lock_ui()\n-  -\n\nPartially locks the ui, preventing the player from ending turn or moving armies and suppressing the events rollout.\n",
		"body": [
			"campaign_ui_manager:lock_ui()"
		],
	},
	"docgen:campaign_ui_manager:unlock_ui": {
		"scope": "lua",
		"prefix": "unlock_ui",
		"description": "campaign_ui_manager:unlock_ui()\n-  -\n\nAttempts to unlock the ui after it has been locked with campaign_ui_manager:lock_ui.\n",
		"body": [
			"unlock_ui()"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:unlock_ui": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:unlock_ui",
		"description": "campaign_ui_manager:unlock_ui()\n-  -\n\nAttempts to unlock the ui after it has been locked with campaign_ui_manager:lock_ui.\n",
		"body": [
			"campaign_ui_manager:unlock_ui()"
		],
	},
	"docgen:campaign_ui_manager:enable_event_panel_auto_open": {
		"scope": "lua",
		"prefix": "enable_event_panel_auto_open",
		"description": "campaign_ui_manager:enable_event_panel_auto_open()\n-  -\n\nEnables or disables the event panel from auto-opening.\n",
		"body": [
			"enable_event_panel_auto_open(${1:boolean should enable})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:enable_event_panel_auto_open": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:enable_event_panel_auto_open",
		"description": "campaign_ui_manager:enable_event_panel_auto_open()\n-  -\n\nEnables or disables the event panel from auto-opening.\n",
		"body": [
			"campaign_ui_manager:enable_event_panel_auto_open(${1:boolean should enable})"
		],
	},
	"docgen:campaign_ui_manager:set_should_save_override_state": {
		"scope": "lua",
		"prefix": "set_should_save_override_state",
		"description": "campaign_ui_manager:set_should_save_override_state()\n-  -\n\nSets the campaign ui manager to save and restore the state of all ui overrides when the game is saved and reloaded.\n",
		"body": [
			"set_should_save_override_state(${1:boolean should save})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:set_should_save_override_state": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:set_should_save_override_state",
		"description": "campaign_ui_manager:set_should_save_override_state()\n-  -\n\nSets the campaign ui manager to save and restore the state of all ui overrides when the game is saved and reloaded.\n",
		"body": [
			"campaign_ui_manager:set_should_save_override_state(${1:boolean should save})"
		],
	},
	"docgen:campaign_ui_manager:enable_character_selection_whitelist": {
		"scope": "lua",
		"prefix": "enable_character_selection_whitelist",
		"description": "campaign_ui_manager:enable_character_selection_whitelist()\n-  -\n\nEnables the character selection whitelist so that it starts being enforced.\n",
		"body": [
			"enable_character_selection_whitelist()"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:enable_character_selection_whitelist": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:enable_character_selection_whitelist",
		"description": "campaign_ui_manager:enable_character_selection_whitelist()\n-  -\n\nEnables the character selection whitelist so that it starts being enforced.\n",
		"body": [
			"campaign_ui_manager:enable_character_selection_whitelist()"
		],
	},
	"docgen:campaign_ui_manager:disable_character_selection_whitelist": {
		"scope": "lua",
		"prefix": "disable_character_selection_whitelist",
		"description": "campaign_ui_manager:disable_character_selection_whitelist()\n-  -\n\nDisables the character selection whitelist so that it is no longer enforced.\n",
		"body": [
			"disable_character_selection_whitelist()"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:disable_character_selection_whitelist": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:disable_character_selection_whitelist",
		"description": "campaign_ui_manager:disable_character_selection_whitelist()\n-  -\n\nDisables the character selection whitelist so that it is no longer enforced.\n",
		"body": [
			"campaign_ui_manager:disable_character_selection_whitelist()"
		],
	},
	"docgen:campaign_ui_manager:add_character_selection_whitelist": {
		"scope": "lua",
		"prefix": "add_character_selection_whitelist",
		"description": "campaign_ui_manager:add_character_selection_whitelist()\n-  -\n\nAdds a character to the character whitelist by cqi.\n",
		"body": [
			"add_character_selection_whitelist(${1:number character cqi})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:add_character_selection_whitelist": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:add_character_selection_whitelist",
		"description": "campaign_ui_manager:add_character_selection_whitelist()\n-  -\n\nAdds a character to the character whitelist by cqi.\n",
		"body": [
			"campaign_ui_manager:add_character_selection_whitelist(${1:number character cqi})"
		],
	},
	"docgen:campaign_ui_manager:remove_character_selection_whitelist": {
		"scope": "lua",
		"prefix": "remove_character_selection_whitelist",
		"description": "campaign_ui_manager:remove_character_selection_whitelist()\n-  -\n\nRemoves a character from the character whitelist by cqi.\n",
		"body": [
			"remove_character_selection_whitelist(${1:number character cqi})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:remove_character_selection_whitelist": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:remove_character_selection_whitelist",
		"description": "campaign_ui_manager:remove_character_selection_whitelist()\n-  -\n\nRemoves a character from the character whitelist by cqi.\n",
		"body": [
			"campaign_ui_manager:remove_character_selection_whitelist(${1:number character cqi})"
		],
	},
	"docgen:campaign_ui_manager:clear_character_selection_whitelist": {
		"scope": "lua",
		"prefix": "clear_character_selection_whitelist",
		"description": "campaign_ui_manager:clear_character_selection_whitelist()\n-  -\n\nClears all characters from the character whitelist.\n",
		"body": [
			"clear_character_selection_whitelist()"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:clear_character_selection_whitelist": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:clear_character_selection_whitelist",
		"description": "campaign_ui_manager:clear_character_selection_whitelist()\n-  -\n\nClears all characters from the character whitelist.\n",
		"body": [
			"campaign_ui_manager:clear_character_selection_whitelist()"
		],
	},
	"docgen:campaign_ui_manager:add_all_characters_for_faction_selection_whitelist": {
		"scope": "lua",
		"prefix": "add_all_characters_for_faction_selection_whitelist",
		"description": "campaign_ui_manager:add_all_characters_for_faction_selection_whitelist()\n-  -\n\nAdds all characters from the specified faction to the character selection whitelist.\n",
		"body": [
			"add_all_characters_for_faction_selection_whitelist(${1:string faction name})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:add_all_characters_for_faction_selection_whitelist": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:add_all_characters_for_faction_selection_whitelist",
		"description": "campaign_ui_manager:add_all_characters_for_faction_selection_whitelist()\n-  -\n\nAdds all characters from the specified faction to the character selection whitelist.\n",
		"body": [
			"campaign_ui_manager:add_all_characters_for_faction_selection_whitelist(${1:string faction name})"
		],
	},
	"docgen:campaign_ui_manager:enable_settlement_selection_whitelist": {
		"scope": "lua",
		"prefix": "enable_settlement_selection_whitelist",
		"description": "campaign_ui_manager:enable_settlement_selection_whitelist()\n-  -\n\nEnables the settlement selection whitelist so that it starts being enforced.\n",
		"body": [
			"enable_settlement_selection_whitelist()"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:enable_settlement_selection_whitelist": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:enable_settlement_selection_whitelist",
		"description": "campaign_ui_manager:enable_settlement_selection_whitelist()\n-  -\n\nEnables the settlement selection whitelist so that it starts being enforced.\n",
		"body": [
			"campaign_ui_manager:enable_settlement_selection_whitelist()"
		],
	},
	"docgen:campaign_ui_manager:disable_settlement_selection_whitelist": {
		"scope": "lua",
		"prefix": "disable_settlement_selection_whitelist",
		"description": "campaign_ui_manager:disable_settlement_selection_whitelist()\n-  -\n\nDiables the settlement selection whitelist so that it is no longer enforced.\n",
		"body": [
			"disable_settlement_selection_whitelist()"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:disable_settlement_selection_whitelist": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:disable_settlement_selection_whitelist",
		"description": "campaign_ui_manager:disable_settlement_selection_whitelist()\n-  -\n\nDiables the settlement selection whitelist so that it is no longer enforced.\n",
		"body": [
			"campaign_ui_manager:disable_settlement_selection_whitelist()"
		],
	},
	"docgen:campaign_ui_manager:add_settlement_selection_whitelist": {
		"scope": "lua",
		"prefix": "add_settlement_selection_whitelist",
		"description": "campaign_ui_manager:add_settlement_selection_whitelist()\n-  -\n\nAdds the specified settlement to the settlement selection whitelist.\n",
		"body": [
			"add_settlement_selection_whitelist(${1:string settlement name})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:add_settlement_selection_whitelist": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:add_settlement_selection_whitelist",
		"description": "campaign_ui_manager:add_settlement_selection_whitelist()\n-  -\n\nAdds the specified settlement to the settlement selection whitelist.\n",
		"body": [
			"campaign_ui_manager:add_settlement_selection_whitelist(${1:string settlement name})"
		],
	},
	"docgen:campaign_ui_manager:remove_settlement_selection_whitelist": {
		"scope": "lua",
		"prefix": "remove_settlement_selection_whitelist",
		"description": "campaign_ui_manager:remove_settlement_selection_whitelist()\n-  -\n\nRemoves the specified settlement from the settlement selection whitelist.\n",
		"body": [
			"remove_settlement_selection_whitelist(${1:string settlement name})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:remove_settlement_selection_whitelist": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:remove_settlement_selection_whitelist",
		"description": "campaign_ui_manager:remove_settlement_selection_whitelist()\n-  -\n\nRemoves the specified settlement from the settlement selection whitelist.\n",
		"body": [
			"campaign_ui_manager:remove_settlement_selection_whitelist(${1:string settlement name})"
		],
	},
	"docgen:campaign_ui_manager:clear_settlement_selection_whitelist": {
		"scope": "lua",
		"prefix": "clear_settlement_selection_whitelist",
		"description": "campaign_ui_manager:clear_settlement_selection_whitelist()\n-  -\n\nClears the settlement selection whitelist.\n",
		"body": [
			"clear_settlement_selection_whitelist()"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:clear_settlement_selection_whitelist": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:clear_settlement_selection_whitelist",
		"description": "campaign_ui_manager:clear_settlement_selection_whitelist()\n-  -\n\nClears the settlement selection whitelist.\n",
		"body": [
			"campaign_ui_manager:clear_settlement_selection_whitelist()"
		],
	},
	"docgen:campaign_ui_manager:add_all_settlements_for_faction_selection_whitelist": {
		"scope": "lua",
		"prefix": "add_all_settlements_for_faction_selection_whitelist",
		"description": "campaign_ui_manager:add_all_settlements_for_faction_selection_whitelist()\n-  -\n\nAdds all settlements belonging to the specified faction to the settlement whitelist.\n",
		"body": [
			"add_all_settlements_for_faction_selection_whitelist(${1:string faction name})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:add_all_settlements_for_faction_selection_whitelist": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:add_all_settlements_for_faction_selection_whitelist",
		"description": "campaign_ui_manager:add_all_settlements_for_faction_selection_whitelist()\n-  -\n\nAdds all settlements belonging to the specified faction to the settlement whitelist.\n",
		"body": [
			"campaign_ui_manager:add_all_settlements_for_faction_selection_whitelist(${1:string faction name})"
		],
	},
	"docgen:campaign_ui_manager:get_panel_pulse_strength": {
		"scope": "lua",
		"prefix": "get_panel_pulse_strength",
		"description": "campaign_ui_manager:get_panel_pulse_strength()\n-  -\n\nReturns the panel pulse strength constant (currently 5).\n",
		"body": [
			"get_panel_pulse_strength()"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:get_panel_pulse_strength": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:get_panel_pulse_strength",
		"description": "campaign_ui_manager:get_panel_pulse_strength()\n-  -\n\nReturns the panel pulse strength constant (currently 5).\n",
		"body": [
			"campaign_ui_manager:get_panel_pulse_strength()"
		],
	},
	"docgen:campaign_ui_manager:get_button_pulse_strength": {
		"scope": "lua",
		"prefix": "get_button_pulse_strength",
		"description": "campaign_ui_manager:get_button_pulse_strength()\n-  -\n\nReturns the button pulse strength constant (currently 10).\n",
		"body": [
			"get_button_pulse_strength()"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:get_button_pulse_strength": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:get_button_pulse_strength",
		"description": "campaign_ui_manager:get_button_pulse_strength()\n-  -\n\nReturns the button pulse strength constant (currently 10).\n",
		"body": [
			"campaign_ui_manager:get_button_pulse_strength()"
		],
	},
	"docgen:campaign_ui_manager:highlight_settlement": {
		"scope": "lua",
		"prefix": "highlight_settlement",
		"description": "campaign_ui_manager:highlight_settlement()\n-  -\n\nPlaces a highlight effect at the position of the supplied settlement.\n",
		"body": [
			"highlight_settlement(${1:string settlement name}, ${2:[opt=nil] string marker type}, ${3:[opt=0] number x offset}, ${4:[opt=0] number y offset}, ${5:[opt=0] number height offset})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_settlement": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_settlement",
		"description": "campaign_ui_manager:highlight_settlement()\n-  -\n\nPlaces a highlight effect at the position of the supplied settlement.\n",
		"body": [
			"campaign_ui_manager:highlight_settlement(${1:string settlement name}, ${2:[opt=nil] string marker type}, ${3:[opt=0] number x offset}, ${4:[opt=0] number y offset}, ${5:[opt=0] number height offset})"
		],
	},
	"docgen:campaign_ui_manager:unhighlight_settlement": {
		"scope": "lua",
		"prefix": "unhighlight_settlement",
		"description": "campaign_ui_manager:unhighlight_settlement()\n-  -\n\nRemoves a highlight effect at the position of the supplied settlement that was previously added with campaign_ui_manager:highlight_settlement.\n",
		"body": [
			"unhighlight_settlement(${1:string settlement name}, ${2:[opt=false] boolean is marker})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:unhighlight_settlement": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:unhighlight_settlement",
		"description": "campaign_ui_manager:unhighlight_settlement()\n-  -\n\nRemoves a highlight effect at the position of the supplied settlement that was previously added with campaign_ui_manager:highlight_settlement.\n",
		"body": [
			"campaign_ui_manager:unhighlight_settlement(${1:string settlement name}, ${2:[opt=false] boolean is marker})"
		],
	},
	"docgen:campaign_ui_manager:highlight_all_settlements_for_faction": {
		"scope": "lua",
		"prefix": "highlight_all_settlements_for_faction",
		"description": "campaign_ui_manager:highlight_all_settlements_for_faction()\n-  -\n\nA shorthand method for highlighting or unhighlighting all settlements belonging to a specified faction.\n",
		"body": [
			"highlight_all_settlements_for_faction(${1:string faction key}, ${2:[opt=false] boolean show highlight}, ${3:[opt=nil] string marker type})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_all_settlements_for_faction": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_all_settlements_for_faction",
		"description": "campaign_ui_manager:highlight_all_settlements_for_faction()\n-  -\n\nA shorthand method for highlighting or unhighlighting all settlements belonging to a specified faction.\n",
		"body": [
			"campaign_ui_manager:highlight_all_settlements_for_faction(${1:string faction key}, ${2:[opt=false] boolean show highlight}, ${3:[opt=nil] string marker type})"
		],
	},
	"docgen:campaign_ui_manager:highlight_all_settlements_near_camera": {
		"scope": "lua",
		"prefix": "highlight_all_settlements_near_camera",
		"description": "campaign_ui_manager:highlight_all_settlements_near_camera()\n-  -\n\nA shorthand method for highlighting or unhighlighting all settlements currently near the position of the camera.\n",
		"body": [
			"highlight_all_settlements_near_camera(${1:[opt=false] boolean show highlight}, ${2:number radius}, ${3:[opt=nil] function condition})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_all_settlements_near_camera": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_all_settlements_near_camera",
		"description": "campaign_ui_manager:highlight_all_settlements_near_camera()\n-  -\n\nA shorthand method for highlighting or unhighlighting all settlements currently near the position of the camera.\n",
		"body": [
			"campaign_ui_manager:highlight_all_settlements_near_camera(${1:[opt=false] boolean show highlight}, ${2:number radius}, ${3:[opt=nil] function condition})"
		],
	},
	"docgen:campaign_ui_manager:highlight_settlement_for_selection": {
		"scope": "lua",
		"prefix": "highlight_settlement_for_selection",
		"description": "campaign_ui_manager:highlight_settlement_for_selection()\n-  -\n\nHighlights a settlement, and then calls a supplied callback when that character is selected.\n",
		"body": [
			"highlight_settlement_for_selection(${1:string settlement name}, ${2:string province name}, ${3:function callback}, ${4:[opt=0] number x offset}, ${5:[opt=0] number y offset})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_settlement_for_selection": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_settlement_for_selection",
		"description": "campaign_ui_manager:highlight_settlement_for_selection()\n-  -\n\nHighlights a settlement, and then calls a supplied callback when that character is selected.\n",
		"body": [
			"campaign_ui_manager:highlight_settlement_for_selection(${1:string settlement name}, ${2:string province name}, ${3:function callback}, ${4:[opt=0] number x offset}, ${5:[opt=0] number y offset})"
		],
	},
	"docgen:campaign_ui_manager:unhighlight_settlement_for_selection": {
		"scope": "lua",
		"prefix": "unhighlight_settlement_for_selection",
		"description": "campaign_ui_manager:unhighlight_settlement_for_selection()\n-  -\n\nUnhighlights a settlement after it has been highlighted with campaign_ui_manager:highlight_settlement_for_selection.\n",
		"body": [
			"unhighlight_settlement_for_selection(${1:character character object})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:unhighlight_settlement_for_selection": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:unhighlight_settlement_for_selection",
		"description": "campaign_ui_manager:unhighlight_settlement_for_selection()\n-  -\n\nUnhighlights a settlement after it has been highlighted with campaign_ui_manager:highlight_settlement_for_selection.\n",
		"body": [
			"campaign_ui_manager:unhighlight_settlement_for_selection(${1:character character object})"
		],
	},
	"docgen:campaign_ui_manager:highlight_character": {
		"scope": "lua",
		"prefix": "highlight_character",
		"description": "campaign_ui_manager:highlight_character()\n-  -\n\nPlaces a highlight effect at the position of the supplied character.\n",
		"body": [
			"highlight_character(${1:character character object}, ${2:[opt=nil] string marker type}, ${3:[opt=0] number height offset})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_character": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_character",
		"description": "campaign_ui_manager:highlight_character()\n-  -\n\nPlaces a highlight effect at the position of the supplied character.\n",
		"body": [
			"campaign_ui_manager:highlight_character(${1:character character object}, ${2:[opt=nil] string marker type}, ${3:[opt=0] number height offset})"
		],
	},
	"docgen:campaign_ui_manager:unhighlight_character": {
		"scope": "lua",
		"prefix": "unhighlight_character",
		"description": "campaign_ui_manager:unhighlight_character()\n-  -\n\nRemoves a highlight effect at the position of the supplied character that was previously added with campaign_ui_manager:highlight_character.\n",
		"body": [
			"unhighlight_character(${1:character character object}, ${2:[opt=false] boolean is marker})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:unhighlight_character": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:unhighlight_character",
		"description": "campaign_ui_manager:unhighlight_character()\n-  -\n\nRemoves a highlight effect at the position of the supplied character that was previously added with campaign_ui_manager:highlight_character.\n",
		"body": [
			"campaign_ui_manager:unhighlight_character(${1:character character object}, ${2:[opt=false] boolean is marker})"
		],
	},
	"docgen:campaign_ui_manager:highlight_all_general_characters_for_faction": {
		"scope": "lua",
		"prefix": "highlight_all_general_characters_for_faction",
		"description": "campaign_ui_manager:highlight_all_general_characters_for_faction()\n-  -\n\nA shorthand method for highlighting/unhighlight all armies for a faction.\n",
		"body": [
			"highlight_all_general_characters_for_faction(${1:string faction key}, ${2:[opt=false] boolean should highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_all_general_characters_for_faction": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_all_general_characters_for_faction",
		"description": "campaign_ui_manager:highlight_all_general_characters_for_faction()\n-  -\n\nA shorthand method for highlighting/unhighlight all armies for a faction.\n",
		"body": [
			"campaign_ui_manager:highlight_all_general_characters_for_faction(${1:string faction key}, ${2:[opt=false] boolean should highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_all_characters_near_camera": {
		"scope": "lua",
		"prefix": "highlight_all_characters_near_camera",
		"description": "campaign_ui_manager:highlight_all_characters_near_camera()\n-  -\n\nA shorthand method for highlighting or unhighlighting all characters currently near the position of the camera.\n",
		"body": [
			"highlight_all_characters_near_camera(${1:[opt=false] boolean show highlight}, ${2:number radius}, ${3:[opt=nil] function condition})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_all_characters_near_camera": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_all_characters_near_camera",
		"description": "campaign_ui_manager:highlight_all_characters_near_camera()\n-  -\n\nA shorthand method for highlighting or unhighlighting all characters currently near the position of the camera.\n",
		"body": [
			"campaign_ui_manager:highlight_all_characters_near_camera(${1:[opt=false] boolean show highlight}, ${2:number radius}, ${3:[opt=nil] function condition})"
		],
	},
	"docgen:campaign_ui_manager:highlight_all_generals_near_camera": {
		"scope": "lua",
		"prefix": "highlight_all_generals_near_camera",
		"description": "campaign_ui_manager:highlight_all_generals_near_camera()\n-  -\n\nA shorthand method for highlighting or unhighlighting all general/lord characters currently near the position of the camera.\n",
		"body": [
			"highlight_all_generals_near_camera(${1:[opt=false] boolean show highlight}, ${2:number radius}, ${3:[opt=nil] function condition})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_all_generals_near_camera": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_all_generals_near_camera",
		"description": "campaign_ui_manager:highlight_all_generals_near_camera()\n-  -\n\nA shorthand method for highlighting or unhighlighting all general/lord characters currently near the position of the camera.\n",
		"body": [
			"campaign_ui_manager:highlight_all_generals_near_camera(${1:[opt=false] boolean show highlight}, ${2:number radius}, ${3:[opt=nil] function condition})"
		],
	},
	"docgen:campaign_ui_manager:highlight_all_heroes_near_camera": {
		"scope": "lua",
		"prefix": "highlight_all_heroes_near_camera",
		"description": "campaign_ui_manager:highlight_all_heroes_near_camera()\n-  -\n\nA shorthand method for highlighting or unhighlighting all hero characters currently near the position of the camera.\n",
		"body": [
			"highlight_all_heroes_near_camera(${1:[opt=false] boolean show highlight}, ${2:number radius}, ${3:[opt=nil] function condition})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_all_heroes_near_camera": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_all_heroes_near_camera",
		"description": "campaign_ui_manager:highlight_all_heroes_near_camera()\n-  -\n\nA shorthand method for highlighting or unhighlighting all hero characters currently near the position of the camera.\n",
		"body": [
			"campaign_ui_manager:highlight_all_heroes_near_camera(${1:[opt=false] boolean show highlight}, ${2:number radius}, ${3:[opt=nil] function condition})"
		],
	},
	"docgen:campaign_ui_manager:highlight_character_for_selection": {
		"scope": "lua",
		"prefix": "highlight_character_for_selection",
		"description": "campaign_ui_manager:highlight_character_for_selection()\n-  -\n\nHighlights a character, and then calls a supplied callback when that character is selected.\n",
		"body": [
			"highlight_character_for_selection(${1:character character object}, ${2:function callback}, ${3:[opt=0] number height offset})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_character_for_selection": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_character_for_selection",
		"description": "campaign_ui_manager:highlight_character_for_selection()\n-  -\n\nHighlights a character, and then calls a supplied callback when that character is selected.\n",
		"body": [
			"campaign_ui_manager:highlight_character_for_selection(${1:character character object}, ${2:function callback}, ${3:[opt=0] number height offset})"
		],
	},
	"docgen:campaign_ui_manager:unhighlight_character_for_selection": {
		"scope": "lua",
		"prefix": "unhighlight_character_for_selection",
		"description": "campaign_ui_manager:unhighlight_character_for_selection()\n-  -\n\nUnhighlights a character after it has been highlighted with campaign_ui_manager:highlight_character_for_selection.\n",
		"body": [
			"unhighlight_character_for_selection(${1:character character object})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:unhighlight_character_for_selection": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:unhighlight_character_for_selection",
		"description": "campaign_ui_manager:unhighlight_character_for_selection()\n-  -\n\nUnhighlights a character after it has been highlighted with campaign_ui_manager:highlight_character_for_selection.\n",
		"body": [
			"campaign_ui_manager:unhighlight_character_for_selection(${1:character character object})"
		],
	},
	"docgen:campaign_ui_manager:display_first_turn_ui": {
		"scope": "lua",
		"prefix": "display_first_turn_ui",
		"description": "campaign_ui_manager:display_first_turn_ui()\n-  -\n\nHides or shows a large amount of the campaign UI.\n",
		"body": [
			"display_first_turn_ui(${1:boolean show ui})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:display_first_turn_ui": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:display_first_turn_ui",
		"description": "campaign_ui_manager:display_first_turn_ui()\n-  -\n\nHides or shows a large amount of the campaign UI.\n",
		"body": [
			"campaign_ui_manager:display_first_turn_ui(${1:boolean show ui})"
		],
	},
	"docgen:campaign_ui_manager:display_faction_buttons": {
		"scope": "lua",
		"prefix": "display_faction_buttons",
		"description": "campaign_ui_manager:display_faction_buttons()\n-  -\n\nHides or shows the faction buttons docker on the campaign UI, which is the panel on which the end-turn button is displayed.\n",
		"body": [
			"display_faction_buttons(${1:boolean should show})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:display_faction_buttons": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:display_faction_buttons",
		"description": "campaign_ui_manager:display_faction_buttons()\n-  -\n\nHides or shows the faction buttons docker on the campaign UI, which is the panel on which the end-turn button is displayed.\n",
		"body": [
			"campaign_ui_manager:display_faction_buttons(${1:boolean should show})"
		],
	},
	"docgen:campaign_ui_manager:display_resources_bar": {
		"scope": "lua",
		"prefix": "display_resources_bar",
		"description": "campaign_ui_manager:display_resources_bar()\n-  -\n\nHides or shows the resources bar at the top of the campaign UI.\n",
		"body": [
			"display_resources_bar(${1:boolean should show})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:display_resources_bar": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:display_resources_bar",
		"description": "campaign_ui_manager:display_resources_bar()\n-  -\n\nHides or shows the resources bar at the top of the campaign UI.\n",
		"body": [
			"campaign_ui_manager:display_resources_bar(${1:boolean should show})"
		],
	},
	"docgen:campaign_ui_manager:num_queued_unit_cards_visible": {
		"scope": "lua",
		"prefix": "num_queued_unit_cards_visible",
		"description": "campaign_ui_manager:num_queued_unit_cards_visible()\n-  -\n\nReturns the number of unit cards currently queued for recruitment on the army panel.\n",
		"body": [
			"num_queued_unit_cards_visible()"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:num_queued_unit_cards_visible": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:num_queued_unit_cards_visible",
		"description": "campaign_ui_manager:num_queued_unit_cards_visible()\n-  -\n\nReturns the number of unit cards currently queued for recruitment on the army panel.\n",
		"body": [
			"campaign_ui_manager:num_queued_unit_cards_visible()"
		],
	},
	"docgen:campaign_ui_manager:add_interaction_monitor": {
		"scope": "lua",
		"prefix": "add_interaction_monitor",
		"description": "campaign_ui_manager:add_interaction_monitor()\n-  -\n\nSets up an interaction monitor.\n",
		"body": [
			"add_interaction_monitor(${1:string key}, ${2:string event name}, ${3:[opt=true] function condition})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:add_interaction_monitor": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:add_interaction_monitor",
		"description": "campaign_ui_manager:add_interaction_monitor()\n-  -\n\nSets up an interaction monitor.\n",
		"body": [
			"campaign_ui_manager:add_interaction_monitor(${1:string key}, ${2:string event name}, ${3:[opt=true] function condition})"
		],
	},
	"docgen:campaign_ui_manager:add_click_interaction_monitor": {
		"scope": "lua",
		"prefix": "add_click_interaction_monitor",
		"description": "campaign_ui_manager:add_click_interaction_monitor()\n-  -\n\nSets up an on-click interaction monitor.\n",
		"body": [
			"add_click_interaction_monitor(${1:string key}, ${2:[opt=true] function condition})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:add_click_interaction_monitor": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:add_click_interaction_monitor",
		"description": "campaign_ui_manager:add_click_interaction_monitor()\n-  -\n\nSets up an on-click interaction monitor.\n",
		"body": [
			"campaign_ui_manager:add_click_interaction_monitor(${1:string key}, ${2:[opt=true] function condition})"
		],
	},
	"docgen:campaign_ui_manager:add_campaign_panel_closed_interaction_monitor": {
		"scope": "lua",
		"prefix": "add_campaign_panel_closed_interaction_monitor",
		"description": "campaign_ui_manager:add_campaign_panel_closed_interaction_monitor()\n-  -\n\nSets up a panel-closing interaction monitor.\n",
		"body": [
			"add_campaign_panel_closed_interaction_monitor(${1:string key}, ${2:[opt=true] function condition})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:add_campaign_panel_closed_interaction_monitor": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:add_campaign_panel_closed_interaction_monitor",
		"description": "campaign_ui_manager:add_campaign_panel_closed_interaction_monitor()\n-  -\n\nSets up a panel-closing interaction monitor.\n",
		"body": [
			"campaign_ui_manager:add_campaign_panel_closed_interaction_monitor(${1:string key}, ${2:[opt=true] function condition})"
		],
	},
	"docgen:campaign_ui_manager:get_interaction_monitor_state": {
		"scope": "lua",
		"prefix": "get_interaction_monitor_state",
		"description": "campaign_ui_manager:get_interaction_monitor_state()\n-  -\n\nGets the state of a supplied interaction monitor.\n",
		"body": [
			"get_interaction_monitor_state(${1:string key})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:get_interaction_monitor_state": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:get_interaction_monitor_state",
		"description": "campaign_ui_manager:get_interaction_monitor_state()\n-  -\n\nGets the state of a supplied interaction monitor.\n",
		"body": [
			"campaign_ui_manager:get_interaction_monitor_state(${1:string key})"
		],
	},
	"docgen:campaign_ui_manager:lock_diplomacy_audio": {
		"scope": "lua",
		"prefix": "lock_diplomacy_audio",
		"description": "campaign_ui_manager:lock_diplomacy_audio()\n-  -\n\nIncreases the lock level on the <code>diplomacy_audio</code> ui override, locking it if the level is moving from 0 to 1.\n",
		"body": [
			"lock_diplomacy_audio()"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:lock_diplomacy_audio": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:lock_diplomacy_audio",
		"description": "campaign_ui_manager:lock_diplomacy_audio()\n-  -\n\nIncreases the lock level on the <code>diplomacy_audio</code> ui override, locking it if the level is moving from 0 to 1.\n",
		"body": [
			"campaign_ui_manager:lock_diplomacy_audio()"
		],
	},
	"docgen:campaign_ui_manager:unlock_diplomacy_audio": {
		"scope": "lua",
		"prefix": "unlock_diplomacy_audio",
		"description": "campaign_ui_manager:unlock_diplomacy_audio()\n-  -\n\nDecreases the lock level on the <code>diplomacy_audio</code> ui override, unlocking it if the level is moving from 1 to 0.\n",
		"body": [
			"unlock_diplomacy_audio()"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:unlock_diplomacy_audio": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:unlock_diplomacy_audio",
		"description": "campaign_ui_manager:unlock_diplomacy_audio()\n-  -\n\nDecreases the lock level on the <code>diplomacy_audio</code> ui override, unlocking it if the level is moving from 1 to 0.\n",
		"body": [
			"campaign_ui_manager:unlock_diplomacy_audio()"
		],
	},
	"docgen:campaign_ui_manager:unhighlight_all_for_tooltips": {
		"scope": "lua",
		"prefix": "unhighlight_all_for_tooltips",
		"description": "campaign_ui_manager:unhighlight_all_for_tooltips()\n-  -\n\nUnhighlights any component that's been highlighted by the tooltip system using one of the other functions in this section.\n",
		"body": [
			"unhighlight_all_for_tooltips(${1:[opt=false] boolean force unhighlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:unhighlight_all_for_tooltips": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:unhighlight_all_for_tooltips",
		"description": "campaign_ui_manager:unhighlight_all_for_tooltips()\n-  -\n\nUnhighlights any component that's been highlighted by the tooltip system using one of the other functions in this section.\n",
		"body": [
			"campaign_ui_manager:unhighlight_all_for_tooltips(${1:[opt=false] boolean force unhighlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_advice_history_buttons": {
		"scope": "lua",
		"prefix": "highlight_advice_history_buttons",
		"description": "campaign_ui_manager:highlight_advice_history_buttons()\n-  -\n\nHighlights the advice history buttons.\n",
		"body": [
			"highlight_advice_history_buttons(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_advice_history_buttons": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_advice_history_buttons",
		"description": "campaign_ui_manager:highlight_advice_history_buttons()\n-  -\n\nHighlights the advice history buttons.\n",
		"body": [
			"campaign_ui_manager:highlight_advice_history_buttons(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_advisor_button": {
		"scope": "lua",
		"prefix": "highlight_advisor_button",
		"description": "campaign_ui_manager:highlight_advisor_button()\n-  -\n\nHighlights the advisor button.\n",
		"body": [
			"highlight_advisor_button(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_advisor_button": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_advisor_button",
		"description": "campaign_ui_manager:highlight_advisor_button()\n-  -\n\nHighlights the advisor button.\n",
		"body": [
			"campaign_ui_manager:highlight_advisor_button(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_advisor": {
		"scope": "lua",
		"prefix": "highlight_advisor",
		"description": "campaign_ui_manager:highlight_advisor()\n-  -\n\nHighlights the advisor.\n",
		"body": [
			"highlight_advisor(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_advisor": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_advisor",
		"description": "campaign_ui_manager:highlight_advisor()\n-  -\n\nHighlights the advisor.\n",
		"body": [
			"campaign_ui_manager:highlight_advisor(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_armies": {
		"scope": "lua",
		"prefix": "highlight_armies",
		"description": "campaign_ui_manager:highlight_armies()\n-  -\n\nHighlights armies near the camera, optionally for a target faction.\n",
		"body": [
			"highlight_armies(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] string faction key}, ${3:[opt=nil] number pulse strength override}, ${4:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_armies": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_armies",
		"description": "campaign_ui_manager:highlight_armies()\n-  -\n\nHighlights armies near the camera, optionally for a target faction.\n",
		"body": [
			"campaign_ui_manager:highlight_armies(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] string faction key}, ${3:[opt=nil] number pulse strength override}, ${4:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_armies_at_sea": {
		"scope": "lua",
		"prefix": "highlight_armies_at_sea",
		"description": "campaign_ui_manager:highlight_armies_at_sea()\n-  -\n\nHighlights armies at sea near the camera, optionally for a target faction.\n",
		"body": [
			"highlight_armies_at_sea(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] string faction key}, ${3:[opt=nil] number pulse strength override}, ${4:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_armies_at_sea": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_armies_at_sea",
		"description": "campaign_ui_manager:highlight_armies_at_sea()\n-  -\n\nHighlights armies at sea near the camera, optionally for a target faction.\n",
		"body": [
			"campaign_ui_manager:highlight_armies_at_sea(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] string faction key}, ${3:[opt=nil] number pulse strength override}, ${4:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_army_panel": {
		"scope": "lua",
		"prefix": "highlight_army_panel",
		"description": "campaign_ui_manager:highlight_army_panel()\n-  -\n\nHighlights the army panel.\n",
		"body": [
			"highlight_army_panel(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_army_panel": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_army_panel",
		"description": "campaign_ui_manager:highlight_army_panel()\n-  -\n\nHighlights the army panel.\n",
		"body": [
			"campaign_ui_manager:highlight_army_panel(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_army_panel_unit_cards": {
		"scope": "lua",
		"prefix": "highlight_army_panel_unit_cards",
		"description": "campaign_ui_manager:highlight_army_panel_unit_cards()\n-  -\n\nHighlights the unit cards on the army panel.\n",
		"body": [
			"highlight_army_panel_unit_cards(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_army_panel_unit_cards": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_army_panel_unit_cards",
		"description": "campaign_ui_manager:highlight_army_panel_unit_cards()\n-  -\n\nHighlights the unit cards on the army panel.\n",
		"body": [
			"campaign_ui_manager:highlight_army_panel_unit_cards(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_autoresolve_button": {
		"scope": "lua",
		"prefix": "highlight_autoresolve_button",
		"description": "campaign_ui_manager:highlight_autoresolve_button()\n-  -\n\nHighlights the autoresolve button.\n",
		"body": [
			"highlight_autoresolve_button(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_autoresolve_button": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_autoresolve_button",
		"description": "campaign_ui_manager:highlight_autoresolve_button()\n-  -\n\nHighlights the autoresolve button.\n",
		"body": [
			"campaign_ui_manager:highlight_autoresolve_button(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_balance_of_power_bar": {
		"scope": "lua",
		"prefix": "highlight_balance_of_power_bar",
		"description": "campaign_ui_manager:highlight_balance_of_power_bar()\n-  -\n\nHighlights the balance of power bar.\n",
		"body": [
			"highlight_balance_of_power_bar(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_balance_of_power_bar": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_balance_of_power_bar",
		"description": "campaign_ui_manager:highlight_balance_of_power_bar()\n-  -\n\nHighlights the balance of power bar.\n",
		"body": [
			"campaign_ui_manager:highlight_balance_of_power_bar(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_banners_and_marks": {
		"scope": "lua",
		"prefix": "highlight_banners_and_marks",
		"description": "campaign_ui_manager:highlight_banners_and_marks()\n-  -\n\nHighlights banners and marks.\n",
		"body": [
			"highlight_banners_and_marks(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_banners_and_marks": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_banners_and_marks",
		"description": "campaign_ui_manager:highlight_banners_and_marks()\n-  -\n\nHighlights banners and marks.\n",
		"body": [
			"campaign_ui_manager:highlight_banners_and_marks(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_blessed_spawnings_button": {
		"scope": "lua",
		"prefix": "highlight_blessed_spawnings_button",
		"description": "campaign_ui_manager:highlight_blessed_spawnings_button()\n-  -\n\nHighlights the blessed spawnings button.\n",
		"body": [
			"highlight_blessed_spawnings_button(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_blessed_spawnings_button": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_blessed_spawnings_button",
		"description": "campaign_ui_manager:highlight_blessed_spawnings_button()\n-  -\n\nHighlights the blessed spawnings button.\n",
		"body": [
			"campaign_ui_manager:highlight_blessed_spawnings_button(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_blood_kiss": {
		"scope": "lua",
		"prefix": "highlight_blood_kiss",
		"description": "campaign_ui_manager:highlight_blood_kiss()\n-  -\n\nHighlights blood kiss indicator.\n",
		"body": [
			"highlight_blood_kiss(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_blood_kiss": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_blood_kiss",
		"description": "campaign_ui_manager:highlight_blood_kiss()\n-  -\n\nHighlights blood kiss indicator.\n",
		"body": [
			"campaign_ui_manager:highlight_blood_kiss(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_bloodlines_button": {
		"scope": "lua",
		"prefix": "highlight_bloodlines_button",
		"description": "campaign_ui_manager:highlight_bloodlines_button()\n-  -\n\nHighlights the bloodlines button.\n",
		"body": [
			"highlight_bloodlines_button(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_bloodlines_button": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_bloodlines_button",
		"description": "campaign_ui_manager:highlight_bloodlines_button()\n-  -\n\nHighlights the bloodlines button.\n",
		"body": [
			"campaign_ui_manager:highlight_bloodlines_button(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_bloodlines_panel": {
		"scope": "lua",
		"prefix": "highlight_bloodlines_panel",
		"description": "campaign_ui_manager:highlight_bloodlines_panel()\n-  -\n\nHighlights the bloodlines panel.\n",
		"body": [
			"highlight_bloodlines_panel(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_bloodlines_panel": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_bloodlines_panel",
		"description": "campaign_ui_manager:highlight_bloodlines_panel()\n-  -\n\nHighlights the bloodlines panel.\n",
		"body": [
			"campaign_ui_manager:highlight_bloodlines_panel(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_book_of_grudges_bar": {
		"scope": "lua",
		"prefix": "highlight_book_of_grudges_bar",
		"description": "campaign_ui_manager:highlight_book_of_grudges_bar()\n-  -\n\nHighlights the book of grudges bar.\n",
		"body": [
			"highlight_book_of_grudges_bar(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_book_of_grudges_bar": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_book_of_grudges_bar",
		"description": "campaign_ui_manager:highlight_book_of_grudges_bar()\n-  -\n\nHighlights the book of grudges bar.\n",
		"body": [
			"campaign_ui_manager:highlight_book_of_grudges_bar(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_books_of_nagash": {
		"scope": "lua",
		"prefix": "highlight_books_of_nagash",
		"description": "campaign_ui_manager:highlight_books_of_nagash()\n-  -\n\nHighlights book of nagash.\n",
		"body": [
			"highlight_books_of_nagash(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_books_of_nagash": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_books_of_nagash",
		"description": "campaign_ui_manager:highlight_books_of_nagash()\n-  -\n\nHighlights book of nagash.\n",
		"body": [
			"campaign_ui_manager:highlight_books_of_nagash(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_books_of_nagash_button": {
		"scope": "lua",
		"prefix": "highlight_books_of_nagash_button",
		"description": "campaign_ui_manager:highlight_books_of_nagash_button()\n-  -\n\nHighlights the books of nagash button.\n",
		"body": [
			"highlight_books_of_nagash_button(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_books_of_nagash_button": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_books_of_nagash_button",
		"description": "campaign_ui_manager:highlight_books_of_nagash_button()\n-  -\n\nHighlights the books of nagash button.\n",
		"body": [
			"campaign_ui_manager:highlight_books_of_nagash_button(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_books_of_nagash_panel": {
		"scope": "lua",
		"prefix": "highlight_books_of_nagash_panel",
		"description": "campaign_ui_manager:highlight_books_of_nagash_panel()\n-  -\n\nHighlights the books of nagash panel.\n",
		"body": [
			"highlight_books_of_nagash_panel(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_books_of_nagash_panel": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_books_of_nagash_panel",
		"description": "campaign_ui_manager:highlight_books_of_nagash_panel()\n-  -\n\nHighlights the books of nagash panel.\n",
		"body": [
			"campaign_ui_manager:highlight_books_of_nagash_panel(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_building_browser_button": {
		"scope": "lua",
		"prefix": "highlight_building_browser_button",
		"description": "campaign_ui_manager:highlight_building_browser_button()\n-  -\n\nHighlights the building browser button.\n",
		"body": [
			"highlight_building_browser_button(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_building_browser_button": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_building_browser_button",
		"description": "campaign_ui_manager:highlight_building_browser_button()\n-  -\n\nHighlights the building browser button.\n",
		"body": [
			"campaign_ui_manager:highlight_building_browser_button(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_building_browser": {
		"scope": "lua",
		"prefix": "highlight_building_browser",
		"description": "campaign_ui_manager:highlight_building_browser()\n-  -\n\nHighlights the building browser.\n",
		"body": [
			"highlight_building_browser(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_building_browser": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_building_browser",
		"description": "campaign_ui_manager:highlight_building_browser()\n-  -\n\nHighlights the building browser.\n",
		"body": [
			"campaign_ui_manager:highlight_building_browser(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_building_browser_buildings": {
		"scope": "lua",
		"prefix": "highlight_building_browser_buildings",
		"description": "campaign_ui_manager:highlight_building_browser_buildings()\n-  -\n\nHighlights building browser buildings.\n",
		"body": [
			"highlight_building_browser_buildings(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight}, ${4:[opt=false] boolean dont highlight upstream})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_building_browser_buildings": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_building_browser_buildings",
		"description": "campaign_ui_manager:highlight_building_browser_buildings()\n-  -\n\nHighlights building browser buildings.\n",
		"body": [
			"campaign_ui_manager:highlight_building_browser_buildings(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight}, ${4:[opt=false] boolean dont highlight upstream})"
		],
	},
	"docgen:campaign_ui_manager:highlight_building_panel": {
		"scope": "lua",
		"prefix": "highlight_building_panel",
		"description": "campaign_ui_manager:highlight_building_panel()\n-  -\n\nHighlights the building panel.\n",
		"body": [
			"highlight_building_panel(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight}, ${4:[opt=false] boolean dont highlight upstream})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_building_panel": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_building_panel",
		"description": "campaign_ui_manager:highlight_building_panel()\n-  -\n\nHighlights the building panel.\n",
		"body": [
			"campaign_ui_manager:highlight_building_panel(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight}, ${4:[opt=false] boolean dont highlight upstream})"
		],
	},
	"docgen:campaign_ui_manager:highlight_building_panel_tab": {
		"scope": "lua",
		"prefix": "highlight_building_panel_tab",
		"description": "campaign_ui_manager:highlight_building_panel_tab()\n-  -\n\nHighlights the building panel tab on the army panel.\n",
		"body": [
			"highlight_building_panel_tab(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_building_panel_tab": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_building_panel_tab",
		"description": "campaign_ui_manager:highlight_building_panel_tab()\n-  -\n\nHighlights the building panel tab on the army panel.\n",
		"body": [
			"campaign_ui_manager:highlight_building_panel_tab(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_buildings": {
		"scope": "lua",
		"prefix": "highlight_buildings",
		"description": "campaign_ui_manager:highlight_buildings()\n-  -\n\nHighlights buildings on the army panel.\n",
		"body": [
			"highlight_buildings(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight}, ${4:[opt=false] boolean first settlement only}, ${5:[opt=false] boolean all but first settlement})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_buildings": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_buildings",
		"description": "campaign_ui_manager:highlight_buildings()\n-  -\n\nHighlights buildings on the army panel.\n",
		"body": [
			"campaign_ui_manager:highlight_buildings(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight}, ${4:[opt=false] boolean first settlement only}, ${5:[opt=false] boolean all but first settlement})"
		],
	},
	"docgen:campaign_ui_manager:highlight_canopic_jars": {
		"scope": "lua",
		"prefix": "highlight_canopic_jars",
		"description": "campaign_ui_manager:highlight_canopic_jars()\n-  -\n\nHighlights canopic jars.\n",
		"body": [
			"highlight_canopic_jars(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_canopic_jars": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_canopic_jars",
		"description": "campaign_ui_manager:highlight_canopic_jars()\n-  -\n\nHighlights canopic jars.\n",
		"body": [
			"campaign_ui_manager:highlight_canopic_jars(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_character_available_skill_points": {
		"scope": "lua",
		"prefix": "highlight_character_available_skill_points",
		"description": "campaign_ui_manager:highlight_character_available_skill_points()\n-  -\n\nHighlights the available skill points indicator on the character details panel.\n",
		"body": [
			"highlight_character_available_skill_points(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight}, ${4:[opt=false] boolean dont highlight upstream})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_character_available_skill_points": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_character_available_skill_points",
		"description": "campaign_ui_manager:highlight_character_available_skill_points()\n-  -\n\nHighlights the available skill points indicator on the character details panel.\n",
		"body": [
			"campaign_ui_manager:highlight_character_available_skill_points(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight}, ${4:[opt=false] boolean dont highlight upstream})"
		],
	},
	"docgen:campaign_ui_manager:highlight_character_details": {
		"scope": "lua",
		"prefix": "highlight_character_details",
		"description": "campaign_ui_manager:highlight_character_details()\n-  -\n\nHighlights the character details subpanel on the character details panel.\n",
		"body": [
			"highlight_character_details(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_character_details": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_character_details",
		"description": "campaign_ui_manager:highlight_character_details()\n-  -\n\nHighlights the character details subpanel on the character details panel.\n",
		"body": [
			"campaign_ui_manager:highlight_character_details(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_character_details_button": {
		"scope": "lua",
		"prefix": "highlight_character_details_button",
		"description": "campaign_ui_manager:highlight_character_details_button()\n-  -\n\nHighlights the character details button.\n",
		"body": [
			"highlight_character_details_button(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight}, ${4:[opt=false] boolean dont highlight upstream})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_character_details_button": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_character_details_button",
		"description": "campaign_ui_manager:highlight_character_details_button()\n-  -\n\nHighlights the character details button.\n",
		"body": [
			"campaign_ui_manager:highlight_character_details_button(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight}, ${4:[opt=false] boolean dont highlight upstream})"
		],
	},
	"docgen:campaign_ui_manager:highlight_character_details_panel": {
		"scope": "lua",
		"prefix": "highlight_character_details_panel",
		"description": "campaign_ui_manager:highlight_character_details_panel()\n-  -\n\nHighlights the character details panel.\n",
		"body": [
			"highlight_character_details_panel(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_character_details_panel": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_character_details_panel",
		"description": "campaign_ui_manager:highlight_character_details_panel()\n-  -\n\nHighlights the character details panel.\n",
		"body": [
			"campaign_ui_manager:highlight_character_details_panel(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_character_details_panel_details_button": {
		"scope": "lua",
		"prefix": "highlight_character_details_panel_details_button",
		"description": "campaign_ui_manager:highlight_character_details_panel_details_button()\n-  -\n\nHighlights the details tab button on the character details panel.\n",
		"body": [
			"highlight_character_details_panel_details_button(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight}, ${4:[opt=false] boolean dont highlight upstream})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_character_details_panel_details_button": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_character_details_panel_details_button",
		"description": "campaign_ui_manager:highlight_character_details_panel_details_button()\n-  -\n\nHighlights the details tab button on the character details panel.\n",
		"body": [
			"campaign_ui_manager:highlight_character_details_panel_details_button(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight}, ${4:[opt=false] boolean dont highlight upstream})"
		],
	},
	"docgen:campaign_ui_manager:highlight_character_details_panel_rank_indicator": {
		"scope": "lua",
		"prefix": "highlight_character_details_panel_rank_indicator",
		"description": "campaign_ui_manager:highlight_character_details_panel_rank_indicator()\n-  -\n\nHighlights the character rank indicator on the character details panel.\n",
		"body": [
			"highlight_character_details_panel_rank_indicator(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_character_details_panel_rank_indicator": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_character_details_panel_rank_indicator",
		"description": "campaign_ui_manager:highlight_character_details_panel_rank_indicator()\n-  -\n\nHighlights the character rank indicator on the character details panel.\n",
		"body": [
			"campaign_ui_manager:highlight_character_details_panel_rank_indicator(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_character_details_panel_skills_button": {
		"scope": "lua",
		"prefix": "highlight_character_details_panel_skills_button",
		"description": "campaign_ui_manager:highlight_character_details_panel_skills_button()\n-  -\n\nHighlights the skills tab button on the character details panel.\n",
		"body": [
			"highlight_character_details_panel_skills_button(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight}, ${4:[opt=false] boolean dont highlight upstream})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_character_details_panel_skills_button": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_character_details_panel_skills_button",
		"description": "campaign_ui_manager:highlight_character_details_panel_skills_button()\n-  -\n\nHighlights the skills tab button on the character details panel.\n",
		"body": [
			"campaign_ui_manager:highlight_character_details_panel_skills_button(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight}, ${4:[opt=false] boolean dont highlight upstream})"
		],
	},
	"docgen:campaign_ui_manager:highlight_character_info_panel": {
		"scope": "lua",
		"prefix": "highlight_character_info_panel",
		"description": "campaign_ui_manager:highlight_character_info_panel()\n-  -\n\nHighlights the character info panel that appears when a character is selected.\n",
		"body": [
			"highlight_character_info_panel(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_character_info_panel": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_character_info_panel",
		"description": "campaign_ui_manager:highlight_character_info_panel()\n-  -\n\nHighlights the character info panel that appears when a character is selected.\n",
		"body": [
			"campaign_ui_manager:highlight_character_info_panel(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_character_magic_items": {
		"scope": "lua",
		"prefix": "highlight_character_magic_items",
		"description": "campaign_ui_manager:highlight_character_magic_items()\n-  -\n\nHighlights magic items on the character details panel.\n",
		"body": [
			"highlight_character_magic_items(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_character_magic_items": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_character_magic_items",
		"description": "campaign_ui_manager:highlight_character_magic_items()\n-  -\n\nHighlights magic items on the character details panel.\n",
		"body": [
			"campaign_ui_manager:highlight_character_magic_items(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_character_skills": {
		"scope": "lua",
		"prefix": "highlight_character_skills",
		"description": "campaign_ui_manager:highlight_character_skills()\n-  -\n\nHighlights the character skills subpanel on the character details panel.\n",
		"body": [
			"highlight_character_skills(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_character_skills": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_character_skills",
		"description": "campaign_ui_manager:highlight_character_skills()\n-  -\n\nHighlights the character skills subpanel on the character details panel.\n",
		"body": [
			"campaign_ui_manager:highlight_character_skills(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_character_skills_button": {
		"scope": "lua",
		"prefix": "highlight_character_skills_button",
		"description": "campaign_ui_manager:highlight_character_skills_button()\n-  -\n\nHighlights the character skills button on the character details panel.\n",
		"body": [
			"highlight_character_skills_button(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight}, ${4:[opt=false] boolean dont highlight upstream})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_character_skills_button": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_character_skills_button",
		"description": "campaign_ui_manager:highlight_character_skills_button()\n-  -\n\nHighlights the character skills button on the character details panel.\n",
		"body": [
			"campaign_ui_manager:highlight_character_skills_button(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight}, ${4:[opt=false] boolean dont highlight upstream})"
		],
	},
	"docgen:campaign_ui_manager:highlight_character_traits": {
		"scope": "lua",
		"prefix": "highlight_character_traits",
		"description": "campaign_ui_manager:highlight_character_traits()\n-  -\n\nHighlights the character traits on the character details panel.\n",
		"body": [
			"highlight_character_traits(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_character_traits": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_character_traits",
		"description": "campaign_ui_manager:highlight_character_traits()\n-  -\n\nHighlights the character traits on the character details panel.\n",
		"body": [
			"campaign_ui_manager:highlight_character_traits(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_chivalry": {
		"scope": "lua",
		"prefix": "highlight_chivalry",
		"description": "campaign_ui_manager:highlight_chivalry()\n-  -\n\nHighlights the chivalry bar.\n",
		"body": [
			"highlight_chivalry(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_chivalry": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_chivalry",
		"description": "campaign_ui_manager:highlight_chivalry()\n-  -\n\nHighlights the chivalry bar.\n",
		"body": [
			"campaign_ui_manager:highlight_chivalry(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_commandments": {
		"scope": "lua",
		"prefix": "highlight_commandments",
		"description": "campaign_ui_manager:highlight_commandments()\n-  -\n\nHighlights commandments.\n",
		"body": [
			"highlight_commandments(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_commandments": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_commandments",
		"description": "campaign_ui_manager:highlight_commandments()\n-  -\n\nHighlights commandments.\n",
		"body": [
			"campaign_ui_manager:highlight_commandments(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_corruption": {
		"scope": "lua",
		"prefix": "highlight_corruption",
		"description": "campaign_ui_manager:highlight_corruption()\n-  -\n\nHighlights corruption.\n",
		"body": [
			"highlight_corruption(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_corruption": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_corruption",
		"description": "campaign_ui_manager:highlight_corruption()\n-  -\n\nHighlights corruption.\n",
		"body": [
			"campaign_ui_manager:highlight_corruption(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_diplomacy_attitude_icons": {
		"scope": "lua",
		"prefix": "highlight_diplomacy_attitude_icons",
		"description": "campaign_ui_manager:highlight_diplomacy_attitude_icons()\n-  -\n\nHighlights diplomacy attitude icons on the diplomacy screen.\n",
		"body": [
			"highlight_diplomacy_attitude_icons(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_diplomacy_attitude_icons": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_diplomacy_attitude_icons",
		"description": "campaign_ui_manager:highlight_diplomacy_attitude_icons()\n-  -\n\nHighlights diplomacy attitude icons on the diplomacy screen.\n",
		"body": [
			"campaign_ui_manager:highlight_diplomacy_attitude_icons(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_diplomacy_button": {
		"scope": "lua",
		"prefix": "highlight_diplomacy_button",
		"description": "campaign_ui_manager:highlight_diplomacy_button()\n-  -\n\nHighlights the diplomacy button.\n",
		"body": [
			"highlight_diplomacy_button(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_diplomacy_button": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_diplomacy_button",
		"description": "campaign_ui_manager:highlight_diplomacy_button()\n-  -\n\nHighlights the diplomacy button.\n",
		"body": [
			"campaign_ui_manager:highlight_diplomacy_button(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_diplomacy_centre_panel": {
		"scope": "lua",
		"prefix": "highlight_diplomacy_centre_panel",
		"description": "campaign_ui_manager:highlight_diplomacy_centre_panel()\n-  -\n\nHighlights the centre panel on the diplomacy screen.\n",
		"body": [
			"highlight_diplomacy_centre_panel(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight}, ${4:[opt=false] boolean dont highlight upstream})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_diplomacy_centre_panel": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_diplomacy_centre_panel",
		"description": "campaign_ui_manager:highlight_diplomacy_centre_panel()\n-  -\n\nHighlights the centre panel on the diplomacy screen.\n",
		"body": [
			"campaign_ui_manager:highlight_diplomacy_centre_panel(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight}, ${4:[opt=false] boolean dont highlight upstream})"
		],
	},
	"docgen:campaign_ui_manager:highlight_diplomacy_left_panel": {
		"scope": "lua",
		"prefix": "highlight_diplomacy_left_panel",
		"description": "campaign_ui_manager:highlight_diplomacy_left_panel()\n-  -\n\nHighlights the left panel on the diplomacy screen.\n",
		"body": [
			"highlight_diplomacy_left_panel(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight}, ${4:[opt=false] boolean dont highlight upstream})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_diplomacy_left_panel": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_diplomacy_left_panel",
		"description": "campaign_ui_manager:highlight_diplomacy_left_panel()\n-  -\n\nHighlights the left panel on the diplomacy screen.\n",
		"body": [
			"campaign_ui_manager:highlight_diplomacy_left_panel(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight}, ${4:[opt=false] boolean dont highlight upstream})"
		],
	},
	"docgen:campaign_ui_manager:highlight_diplomacy_right_panel": {
		"scope": "lua",
		"prefix": "highlight_diplomacy_right_panel",
		"description": "campaign_ui_manager:highlight_diplomacy_right_panel()\n-  -\n\nHighlights the right panel on the diplomacy screen.\n",
		"body": [
			"highlight_diplomacy_right_panel(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight}, ${4:[opt=false] boolean dont highlight upstream})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_diplomacy_right_panel": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_diplomacy_right_panel",
		"description": "campaign_ui_manager:highlight_diplomacy_right_panel()\n-  -\n\nHighlights the right panel on the diplomacy screen.\n",
		"body": [
			"campaign_ui_manager:highlight_diplomacy_right_panel(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight}, ${4:[opt=false] boolean dont highlight upstream})"
		],
	},
	"docgen:campaign_ui_manager:highlight_diplomacy_screen": {
		"scope": "lua",
		"prefix": "highlight_diplomacy_screen",
		"description": "campaign_ui_manager:highlight_diplomacy_screen()\n-  -\n\nHighlights just the diplomacy screen.\n",
		"body": [
			"highlight_diplomacy_screen(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_diplomacy_screen": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_diplomacy_screen",
		"description": "campaign_ui_manager:highlight_diplomacy_screen()\n-  -\n\nHighlights just the diplomacy screen.\n",
		"body": [
			"campaign_ui_manager:highlight_diplomacy_screen(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_drop_down_list_buttons": {
		"scope": "lua",
		"prefix": "highlight_drop_down_list_buttons",
		"description": "campaign_ui_manager:highlight_drop_down_list_buttons()\n-  -\n\nHighlights the drop-down list buttons.\n",
		"body": [
			"highlight_drop_down_list_buttons(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_drop_down_list_buttons": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_drop_down_list_buttons",
		"description": "campaign_ui_manager:highlight_drop_down_list_buttons()\n-  -\n\nHighlights the drop-down list buttons.\n",
		"body": [
			"campaign_ui_manager:highlight_drop_down_list_buttons(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_dynasties": {
		"scope": "lua",
		"prefix": "highlight_dynasties",
		"description": "campaign_ui_manager:highlight_dynasties()\n-  -\n\nHighlights dynasties.\n",
		"body": [
			"highlight_dynasties(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_dynasties": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_dynasties",
		"description": "campaign_ui_manager:highlight_dynasties()\n-  -\n\nHighlights dynasties.\n",
		"body": [
			"campaign_ui_manager:highlight_dynasties(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_dynasties_panel": {
		"scope": "lua",
		"prefix": "highlight_dynasties_panel",
		"description": "campaign_ui_manager:highlight_dynasties_panel()\n-  -\n\nHighlights the dynasties panel.\n",
		"body": [
			"highlight_dynasties_panel(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_dynasties_panel": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_dynasties_panel",
		"description": "campaign_ui_manager:highlight_dynasties_panel()\n-  -\n\nHighlights the dynasties panel.\n",
		"body": [
			"campaign_ui_manager:highlight_dynasties_panel(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_end_turn_button": {
		"scope": "lua",
		"prefix": "highlight_end_turn_button",
		"description": "campaign_ui_manager:highlight_end_turn_button()\n-  -\n\nHighlights the end-turn button.\n",
		"body": [
			"highlight_end_turn_button(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_end_turn_button": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_end_turn_button",
		"description": "campaign_ui_manager:highlight_end_turn_button()\n-  -\n\nHighlights the end-turn button.\n",
		"body": [
			"campaign_ui_manager:highlight_end_turn_button(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_events_list": {
		"scope": "lua",
		"prefix": "highlight_events_list",
		"description": "campaign_ui_manager:highlight_events_list()\n-  -\n\nHighlights the events drop-down list.\n",
		"body": [
			"highlight_events_list(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_events_list": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_events_list",
		"description": "campaign_ui_manager:highlight_events_list()\n-  -\n\nHighlights the events drop-down list.\n",
		"body": [
			"campaign_ui_manager:highlight_events_list(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_factions_list": {
		"scope": "lua",
		"prefix": "highlight_factions_list",
		"description": "campaign_ui_manager:highlight_factions_list()\n-  -\n\nHighlights the factions drop-down list.\n",
		"body": [
			"highlight_factions_list(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_factions_list": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_factions_list",
		"description": "campaign_ui_manager:highlight_factions_list()\n-  -\n\nHighlights the factions drop-down list.\n",
		"body": [
			"campaign_ui_manager:highlight_factions_list(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_faction_summary_button": {
		"scope": "lua",
		"prefix": "highlight_faction_summary_button",
		"description": "campaign_ui_manager:highlight_faction_summary_button()\n-  -\n\nHighlights the factions summary button.\n",
		"body": [
			"highlight_faction_summary_button(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_faction_summary_button": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_faction_summary_button",
		"description": "campaign_ui_manager:highlight_faction_summary_button()\n-  -\n\nHighlights the factions summary button.\n",
		"body": [
			"campaign_ui_manager:highlight_faction_summary_button(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_faction_summary_records_tab": {
		"scope": "lua",
		"prefix": "highlight_faction_summary_records_tab",
		"description": "campaign_ui_manager:highlight_faction_summary_records_tab()\n-  -\n\nHighlights the records tab on the faction screen.\n",
		"body": [
			"highlight_faction_summary_records_tab(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight}, ${4:[opt=false] boolean dont highlight upstream})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_faction_summary_records_tab": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_faction_summary_records_tab",
		"description": "campaign_ui_manager:highlight_faction_summary_records_tab()\n-  -\n\nHighlights the records tab on the faction screen.\n",
		"body": [
			"campaign_ui_manager:highlight_faction_summary_records_tab(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight}, ${4:[opt=false] boolean dont highlight upstream})"
		],
	},
	"docgen:campaign_ui_manager:highlight_faction_summary_screen": {
		"scope": "lua",
		"prefix": "highlight_faction_summary_screen",
		"description": "campaign_ui_manager:highlight_faction_summary_screen()\n-  -\n\nHighlights the faction summary screen.\n",
		"body": [
			"highlight_faction_summary_screen(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_faction_summary_screen": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_faction_summary_screen",
		"description": "campaign_ui_manager:highlight_faction_summary_screen()\n-  -\n\nHighlights the faction summary screen.\n",
		"body": [
			"campaign_ui_manager:highlight_faction_summary_screen(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_faction_summary_summary_tab": {
		"scope": "lua",
		"prefix": "highlight_faction_summary_summary_tab",
		"description": "campaign_ui_manager:highlight_faction_summary_summary_tab()\n-  -\n\nHighlights the summary tab on the faction screen.\n",
		"body": [
			"highlight_faction_summary_summary_tab(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight}, ${4:[opt=false] boolean dont highlight upstream})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_faction_summary_summary_tab": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_faction_summary_summary_tab",
		"description": "campaign_ui_manager:highlight_faction_summary_summary_tab()\n-  -\n\nHighlights the summary tab on the faction screen.\n",
		"body": [
			"campaign_ui_manager:highlight_faction_summary_summary_tab(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight}, ${4:[opt=false] boolean dont highlight upstream})"
		],
	},
	"docgen:campaign_ui_manager:highlight_faction_summary_statistics_tab": {
		"scope": "lua",
		"prefix": "highlight_faction_summary_statistics_tab",
		"description": "campaign_ui_manager:highlight_faction_summary_statistics_tab()\n-  -\n\nHighlights the statistics tab on the faction screen.\n",
		"body": [
			"highlight_faction_summary_statistics_tab(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight}, ${4:[opt=false] boolean dont highlight upstream})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_faction_summary_statistics_tab": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_faction_summary_statistics_tab",
		"description": "campaign_ui_manager:highlight_faction_summary_statistics_tab()\n-  -\n\nHighlights the statistics tab on the faction screen.\n",
		"body": [
			"campaign_ui_manager:highlight_faction_summary_statistics_tab(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight}, ${4:[opt=false] boolean dont highlight upstream})"
		],
	},
	"docgen:campaign_ui_manager:highlight_fightiness_bar": {
		"scope": "lua",
		"prefix": "highlight_fightiness_bar",
		"description": "campaign_ui_manager:highlight_fightiness_bar()\n-  -\n\nHighlights the fightiness bar.\n",
		"body": [
			"highlight_fightiness_bar(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight}, ${4:[opt=false] boolean dont highlight upstream})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_fightiness_bar": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_fightiness_bar",
		"description": "campaign_ui_manager:highlight_fightiness_bar()\n-  -\n\nHighlights the fightiness bar.\n",
		"body": [
			"campaign_ui_manager:highlight_fightiness_bar(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight}, ${4:[opt=false] boolean dont highlight upstream})"
		],
	},
	"docgen:campaign_ui_manager:highlight_fleet_office_button": {
		"scope": "lua",
		"prefix": "highlight_fleet_office_button",
		"description": "campaign_ui_manager:highlight_fleet_office_button()\n-  -\n\nHighlights the fleet office button.\n",
		"body": [
			"highlight_fleet_office_button(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_fleet_office_button": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_fleet_office_button",
		"description": "campaign_ui_manager:highlight_fleet_office_button()\n-  -\n\nHighlights the fleet office button.\n",
		"body": [
			"campaign_ui_manager:highlight_fleet_office_button(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_fleet_office_panel": {
		"scope": "lua",
		"prefix": "highlight_fleet_office_panel",
		"description": "campaign_ui_manager:highlight_fleet_office_panel()\n-  -\n\nHighlights the fleet office panel.\n",
		"body": [
			"highlight_fleet_office_panel(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_fleet_office_panel": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_fleet_office_panel",
		"description": "campaign_ui_manager:highlight_fleet_office_panel()\n-  -\n\nHighlights the fleet office panel.\n",
		"body": [
			"campaign_ui_manager:highlight_fleet_office_panel(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_food": {
		"scope": "lua",
		"prefix": "highlight_food",
		"description": "campaign_ui_manager:highlight_food()\n-  -\n\nHighlights the food indicator on the top bar of the campaign interface.\n",
		"body": [
			"highlight_food(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_food": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_food",
		"description": "campaign_ui_manager:highlight_food()\n-  -\n\nHighlights the food indicator on the top bar of the campaign interface.\n",
		"body": [
			"campaign_ui_manager:highlight_food(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_food_bar": {
		"scope": "lua",
		"prefix": "highlight_food_bar",
		"description": "campaign_ui_manager:highlight_food_bar()\n-  -\n\nHighlights the food bar.\n",
		"body": [
			"highlight_food_bar(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_food_bar": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_food_bar",
		"description": "campaign_ui_manager:highlight_food_bar()\n-  -\n\nHighlights the food bar.\n",
		"body": [
			"campaign_ui_manager:highlight_food_bar(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_forces_list": {
		"scope": "lua",
		"prefix": "highlight_forces_list",
		"description": "campaign_ui_manager:highlight_forces_list()\n-  -\n\nHighlights the forces drop-down list.\n",
		"body": [
			"highlight_forces_list(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_forces_list": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_forces_list",
		"description": "campaign_ui_manager:highlight_forces_list()\n-  -\n\nHighlights the forces drop-down list.\n",
		"body": [
			"campaign_ui_manager:highlight_forces_list(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_forging_magic_items_button": {
		"scope": "lua",
		"prefix": "highlight_forging_magic_items_button",
		"description": "campaign_ui_manager:highlight_forging_magic_items_button()\n-  -\n\nHighlights the forging magic items button.\n",
		"body": [
			"highlight_forging_magic_items_button(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_forging_magic_items_button": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_forging_magic_items_button",
		"description": "campaign_ui_manager:highlight_forging_magic_items_button()\n-  -\n\nHighlights the forging magic items button.\n",
		"body": [
			"campaign_ui_manager:highlight_forging_magic_items_button(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_forging_magic_items_panel": {
		"scope": "lua",
		"prefix": "highlight_forging_magic_items_panel",
		"description": "campaign_ui_manager:highlight_forging_magic_items_panel()\n-  -\n\nHighlights the forging magic items panel.\n",
		"body": [
			"highlight_forging_magic_items_panel(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight}, ${4:[opt=false] boolean dont highlight upstream})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_forging_magic_items_panel": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_forging_magic_items_panel",
		"description": "campaign_ui_manager:highlight_forging_magic_items_panel()\n-  -\n\nHighlights the forging magic items panel.\n",
		"body": [
			"campaign_ui_manager:highlight_forging_magic_items_panel(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight}, ${4:[opt=false] boolean dont highlight upstream})"
		],
	},
	"docgen:campaign_ui_manager:highlight_garrison_armies": {
		"scope": "lua",
		"prefix": "highlight_garrison_armies",
		"description": "campaign_ui_manager:highlight_garrison_armies()\n-  -\n\nHighlights garrison army unit cards on the army panel.\n",
		"body": [
			"highlight_garrison_armies(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_garrison_armies": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_garrison_armies",
		"description": "campaign_ui_manager:highlight_garrison_armies()\n-  -\n\nHighlights garrison army unit cards on the army panel.\n",
		"body": [
			"campaign_ui_manager:highlight_garrison_armies(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_garrison_details_button": {
		"scope": "lua",
		"prefix": "highlight_garrison_details_button",
		"description": "campaign_ui_manager:highlight_garrison_details_button()\n-  -\n\nHighlights the garrison details button.\n",
		"body": [
			"highlight_garrison_details_button(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_garrison_details_button": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_garrison_details_button",
		"description": "campaign_ui_manager:highlight_garrison_details_button()\n-  -\n\nHighlights the garrison details button.\n",
		"body": [
			"campaign_ui_manager:highlight_garrison_details_button(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_geomantic_web_button": {
		"scope": "lua",
		"prefix": "highlight_geomantic_web_button",
		"description": "campaign_ui_manager:highlight_geomantic_web_button()\n-  -\n\nHighlights the geomantic web button.\n",
		"body": [
			"highlight_geomantic_web_button(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_geomantic_web_button": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_geomantic_web_button",
		"description": "campaign_ui_manager:highlight_geomantic_web_button()\n-  -\n\nHighlights the geomantic web button.\n",
		"body": [
			"campaign_ui_manager:highlight_geomantic_web_button(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_global_recruitment_pool": {
		"scope": "lua",
		"prefix": "highlight_global_recruitment_pool",
		"description": "campaign_ui_manager:highlight_global_recruitment_pool()\n-  -\n\nHighlights the global recruitment pool on the recruitment panel.\n",
		"body": [
			"highlight_global_recruitment_pool(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight}, ${4:[opt=false] boolean dont highlight upstream})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_global_recruitment_pool": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_global_recruitment_pool",
		"description": "campaign_ui_manager:highlight_global_recruitment_pool()\n-  -\n\nHighlights the global recruitment pool on the recruitment panel.\n",
		"body": [
			"campaign_ui_manager:highlight_global_recruitment_pool(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight}, ${4:[opt=false] boolean dont highlight upstream})"
		],
	},
	"docgen:campaign_ui_manager:highlight_gods_bar": {
		"scope": "lua",
		"prefix": "highlight_gods_bar",
		"description": "campaign_ui_manager:highlight_gods_bar()\n-  -\n\nHighlights the gods bar.\n",
		"body": [
			"highlight_gods_bar(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_gods_bar": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_gods_bar",
		"description": "campaign_ui_manager:highlight_gods_bar()\n-  -\n\nHighlights the gods bar.\n",
		"body": [
			"campaign_ui_manager:highlight_gods_bar(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_growth": {
		"scope": "lua",
		"prefix": "highlight_growth",
		"description": "campaign_ui_manager:highlight_growth()\n-  -\n\nHighlights the growth section of the province info panel.\n",
		"body": [
			"highlight_growth(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_growth": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_growth",
		"description": "campaign_ui_manager:highlight_growth()\n-  -\n\nHighlights the growth section of the province info panel.\n",
		"body": [
			"campaign_ui_manager:highlight_growth(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_grudges_bar": {
		"scope": "lua",
		"prefix": "highlight_grudges_bar",
		"description": "campaign_ui_manager:highlight_grudges_bar()\n-  -\n\nHighlights the grudges bar.\n",
		"body": [
			"highlight_grudges_bar(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_grudges_bar": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_grudges_bar",
		"description": "campaign_ui_manager:highlight_grudges_bar()\n-  -\n\nHighlights the grudges bar.\n",
		"body": [
			"campaign_ui_manager:highlight_grudges_bar(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_grudges_button": {
		"scope": "lua",
		"prefix": "highlight_grudges_button",
		"description": "campaign_ui_manager:highlight_grudges_button()\n-  -\n\nHighlights the grudges button.\n",
		"body": [
			"highlight_grudges_button(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_grudges_button": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_grudges_button",
		"description": "campaign_ui_manager:highlight_grudges_button()\n-  -\n\nHighlights the grudges button.\n",
		"body": [
			"campaign_ui_manager:highlight_grudges_button(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_help_pages_button": {
		"scope": "lua",
		"prefix": "highlight_help_pages_button",
		"description": "campaign_ui_manager:highlight_help_pages_button()\n-  -\n\nHighlights the help pages button.\n",
		"body": [
			"highlight_help_pages_button(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_help_pages_button": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_help_pages_button",
		"description": "campaign_ui_manager:highlight_help_pages_button()\n-  -\n\nHighlights the help pages button.\n",
		"body": [
			"campaign_ui_manager:highlight_help_pages_button(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_heroes": {
		"scope": "lua",
		"prefix": "highlight_heroes",
		"description": "campaign_ui_manager:highlight_heroes()\n-  -\n\nHighlights any visible heroes on the campaign map.\n",
		"body": [
			"highlight_heroes(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] string faction key}, ${3:[opt=nil] number pulse strength override}, ${4:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_heroes": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_heroes",
		"description": "campaign_ui_manager:highlight_heroes()\n-  -\n\nHighlights any visible heroes on the campaign map.\n",
		"body": [
			"campaign_ui_manager:highlight_heroes(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] string faction key}, ${3:[opt=nil] number pulse strength override}, ${4:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_hero_deployment_button": {
		"scope": "lua",
		"prefix": "highlight_hero_deployment_button",
		"description": "campaign_ui_manager:highlight_hero_deployment_button()\n-  -\n\nHighlights the hero deployment button.\n",
		"body": [
			"highlight_hero_deployment_button(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_hero_deployment_button": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_hero_deployment_button",
		"description": "campaign_ui_manager:highlight_hero_deployment_button()\n-  -\n\nHighlights the hero deployment button.\n",
		"body": [
			"campaign_ui_manager:highlight_hero_deployment_button(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_hero_recruitment_panel": {
		"scope": "lua",
		"prefix": "highlight_hero_recruitment_panel",
		"description": "campaign_ui_manager:highlight_hero_recruitment_panel()\n-  -\n\nHighlights the hero recruitment panel.\n",
		"body": [
			"highlight_hero_recruitment_panel(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_hero_recruitment_panel": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_hero_recruitment_panel",
		"description": "campaign_ui_manager:highlight_hero_recruitment_panel()\n-  -\n\nHighlights the hero recruitment panel.\n",
		"body": [
			"campaign_ui_manager:highlight_hero_recruitment_panel(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_hero_recruitment_panel_tab_buttons": {
		"scope": "lua",
		"prefix": "highlight_hero_recruitment_panel_tab_buttons",
		"description": "campaign_ui_manager:highlight_hero_recruitment_panel_tab_buttons()\n-  -\n\nHighlights the hero recruitment panel tab buttons.\n",
		"body": [
			"highlight_hero_recruitment_panel_tab_buttons(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_hero_recruitment_panel_tab_buttons": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_hero_recruitment_panel_tab_buttons",
		"description": "campaign_ui_manager:highlight_hero_recruitment_panel_tab_buttons()\n-  -\n\nHighlights the hero recruitment panel tab buttons.\n",
		"body": [
			"campaign_ui_manager:highlight_hero_recruitment_panel_tab_buttons(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_horde_growth": {
		"scope": "lua",
		"prefix": "highlight_horde_growth",
		"description": "campaign_ui_manager:highlight_horde_growth()\n-  -\n\nHighlights horde growth.\n",
		"body": [
			"highlight_horde_growth(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_horde_growth": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_horde_growth",
		"description": "campaign_ui_manager:highlight_horde_growth()\n-  -\n\nHighlights horde growth.\n",
		"body": [
			"campaign_ui_manager:highlight_horde_growth(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_horde_buildings": {
		"scope": "lua",
		"prefix": "highlight_horde_buildings",
		"description": "campaign_ui_manager:highlight_horde_buildings()\n-  -\n\nHighlights horde buildings.\n",
		"body": [
			"highlight_horde_buildings(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight}, ${4:[opt=false] boolean dont highlight upstream})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_horde_buildings": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_horde_buildings",
		"description": "campaign_ui_manager:highlight_horde_buildings()\n-  -\n\nHighlights horde buildings.\n",
		"body": [
			"campaign_ui_manager:highlight_horde_buildings(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight}, ${4:[opt=false] boolean dont highlight upstream})"
		],
	},
	"docgen:campaign_ui_manager:highlight_infamy": {
		"scope": "lua",
		"prefix": "highlight_infamy",
		"description": "campaign_ui_manager:highlight_infamy()\n-  -\n\nHighlights the infamy indicator.\n",
		"body": [
			"highlight_infamy(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_infamy": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_infamy",
		"description": "campaign_ui_manager:highlight_infamy()\n-  -\n\nHighlights the infamy indicator.\n",
		"body": [
			"campaign_ui_manager:highlight_infamy(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_influence": {
		"scope": "lua",
		"prefix": "highlight_influence",
		"description": "campaign_ui_manager:highlight_influence()\n-  -\n\nHighlights the influence indicator on the top bar of the campaign interface.\n",
		"body": [
			"highlight_influence(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_influence": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_influence",
		"description": "campaign_ui_manager:highlight_influence()\n-  -\n\nHighlights the influence indicator on the top bar of the campaign interface.\n",
		"body": [
			"campaign_ui_manager:highlight_influence(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_interventions": {
		"scope": "lua",
		"prefix": "highlight_interventions",
		"description": "campaign_ui_manager:highlight_interventions()\n-  -\n\nHighlights the interventions button.\n",
		"body": [
			"highlight_interventions(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_interventions": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_interventions",
		"description": "campaign_ui_manager:highlight_interventions()\n-  -\n\nHighlights the interventions button.\n",
		"body": [
			"campaign_ui_manager:highlight_interventions(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_intrigue_at_the_court_button": {
		"scope": "lua",
		"prefix": "highlight_intrigue_at_the_court_button",
		"description": "campaign_ui_manager:highlight_intrigue_at_the_court_button()\n-  -\n\nHighlights the intrigue at the court button.\n",
		"body": [
			"highlight_intrigue_at_the_court_button(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_intrigue_at_the_court_button": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_intrigue_at_the_court_button",
		"description": "campaign_ui_manager:highlight_intrigue_at_the_court_button()\n-  -\n\nHighlights the intrigue at the court button.\n",
		"body": [
			"campaign_ui_manager:highlight_intrigue_at_the_court_button(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_intrigue_at_the_court_panel": {
		"scope": "lua",
		"prefix": "highlight_intrigue_at_the_court_panel",
		"description": "campaign_ui_manager:highlight_intrigue_at_the_court_panel()\n-  -\n\nHighlights the intrigue at the court panel.\n",
		"body": [
			"highlight_intrigue_at_the_court_panel(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_intrigue_at_the_court_panel": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_intrigue_at_the_court_panel",
		"description": "campaign_ui_manager:highlight_intrigue_at_the_court_panel()\n-  -\n\nHighlights the intrigue at the court panel.\n",
		"body": [
			"campaign_ui_manager:highlight_intrigue_at_the_court_panel(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_legendary_knight_button": {
		"scope": "lua",
		"prefix": "highlight_legendary_knight_button",
		"description": "campaign_ui_manager:highlight_legendary_knight_button()\n-  -\n\nHighlights the Legendary Knight button.\n",
		"body": [
			"highlight_legendary_knight_button(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_legendary_knight_button": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_legendary_knight_button",
		"description": "campaign_ui_manager:highlight_legendary_knight_button()\n-  -\n\nHighlights the Legendary Knight button.\n",
		"body": [
			"campaign_ui_manager:highlight_legendary_knight_button(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_list_button_events": {
		"scope": "lua",
		"prefix": "highlight_list_button_events",
		"description": "campaign_ui_manager:highlight_list_button_events()\n-  -\n\nHighlights the events list button.\n",
		"body": [
			"highlight_list_button_events(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_list_button_events": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_list_button_events",
		"description": "campaign_ui_manager:highlight_list_button_events()\n-  -\n\nHighlights the events list button.\n",
		"body": [
			"campaign_ui_manager:highlight_list_button_events(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_list_button_factions": {
		"scope": "lua",
		"prefix": "highlight_list_button_factions",
		"description": "campaign_ui_manager:highlight_list_button_factions()\n-  -\n\nHighlights the factions list button.\n",
		"body": [
			"highlight_list_button_factions(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_list_button_factions": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_list_button_factions",
		"description": "campaign_ui_manager:highlight_list_button_factions()\n-  -\n\nHighlights the factions list button.\n",
		"body": [
			"campaign_ui_manager:highlight_list_button_factions(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_list_button_forces": {
		"scope": "lua",
		"prefix": "highlight_list_button_forces",
		"description": "campaign_ui_manager:highlight_list_button_forces()\n-  -\n\nHighlights the forces list button.\n",
		"body": [
			"highlight_list_button_forces(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_list_button_forces": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_list_button_forces",
		"description": "campaign_ui_manager:highlight_list_button_forces()\n-  -\n\nHighlights the forces list button.\n",
		"body": [
			"campaign_ui_manager:highlight_list_button_forces(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_list_button_missions": {
		"scope": "lua",
		"prefix": "highlight_list_button_missions",
		"description": "campaign_ui_manager:highlight_list_button_missions()\n-  -\n\nHighlights the missions list button.\n",
		"body": [
			"highlight_list_button_missions(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_list_button_missions": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_list_button_missions",
		"description": "campaign_ui_manager:highlight_list_button_missions()\n-  -\n\nHighlights the missions list button.\n",
		"body": [
			"campaign_ui_manager:highlight_list_button_missions(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_list_button_provinces": {
		"scope": "lua",
		"prefix": "highlight_list_button_provinces",
		"description": "campaign_ui_manager:highlight_list_button_provinces()\n-  -\n\nHighlights the provinces list button.\n",
		"body": [
			"highlight_list_button_provinces(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_list_button_provinces": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_list_button_provinces",
		"description": "campaign_ui_manager:highlight_list_button_provinces()\n-  -\n\nHighlights the provinces list button.\n",
		"body": [
			"campaign_ui_manager:highlight_list_button_provinces(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_local_recruitment_pool": {
		"scope": "lua",
		"prefix": "highlight_local_recruitment_pool",
		"description": "campaign_ui_manager:highlight_local_recruitment_pool()\n-  -\n\nHighlights the local recruitment pool on the recruitment panel.\n",
		"body": [
			"highlight_local_recruitment_pool(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight}, ${4:[opt=false] boolean dont highlight upstream})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_local_recruitment_pool": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_local_recruitment_pool",
		"description": "campaign_ui_manager:highlight_local_recruitment_pool()\n-  -\n\nHighlights the local recruitment pool on the recruitment panel.\n",
		"body": [
			"campaign_ui_manager:highlight_local_recruitment_pool(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight}, ${4:[opt=false] boolean dont highlight upstream})"
		],
	},
	"docgen:campaign_ui_manager:highlight_lords": {
		"scope": "lua",
		"prefix": "highlight_lords",
		"description": "campaign_ui_manager:highlight_lords()\n-  -\n\nHighlights lords on the pre-battle screen.\n",
		"body": [
			"highlight_lords(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_lords": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_lords",
		"description": "campaign_ui_manager:highlight_lords()\n-  -\n\nHighlights lords on the pre-battle screen.\n",
		"body": [
			"campaign_ui_manager:highlight_lords(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_lords_pre_battle_screen": {
		"scope": "lua",
		"prefix": "highlight_lords_pre_battle_screen",
		"description": "campaign_ui_manager:highlight_lords_pre_battle_screen()\n-  -\n\nHighlights lords on the pre-battle screen.\n",
		"body": [
			"highlight_lords_pre_battle_screen(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight}, ${4:[opt=false] boolean reinforcements only})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_lords_pre_battle_screen": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_lords_pre_battle_screen",
		"description": "campaign_ui_manager:highlight_lords_pre_battle_screen()\n-  -\n\nHighlights lords on the pre-battle screen.\n",
		"body": [
			"campaign_ui_manager:highlight_lords_pre_battle_screen(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight}, ${4:[opt=false] boolean reinforcements only})"
		],
	},
	"docgen:campaign_ui_manager:highlight_missions_list": {
		"scope": "lua",
		"prefix": "highlight_missions_list",
		"description": "campaign_ui_manager:highlight_missions_list()\n-  -\n\nHighlights the missions list.\n",
		"body": [
			"highlight_missions_list(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_missions_list": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_missions_list",
		"description": "campaign_ui_manager:highlight_missions_list()\n-  -\n\nHighlights the missions list.\n",
		"body": [
			"campaign_ui_manager:highlight_missions_list(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_monstrous_arcanum_button": {
		"scope": "lua",
		"prefix": "highlight_monstrous_arcanum_button",
		"description": "campaign_ui_manager:highlight_monstrous_arcanum_button()\n-  -\n\nHighlights the monstrous arcanum button.\n",
		"body": [
			"highlight_monstrous_arcanum_button(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_monstrous_arcanum_button": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_monstrous_arcanum_button",
		"description": "campaign_ui_manager:highlight_monstrous_arcanum_button()\n-  -\n\nHighlights the monstrous arcanum button.\n",
		"body": [
			"campaign_ui_manager:highlight_monstrous_arcanum_button(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_mortuary_cult_button": {
		"scope": "lua",
		"prefix": "highlight_mortuary_cult_button",
		"description": "campaign_ui_manager:highlight_mortuary_cult_button()\n-  -\n\nHighlights the mortuary cult button.\n",
		"body": [
			"highlight_mortuary_cult_button(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_mortuary_cult_button": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_mortuary_cult_button",
		"description": "campaign_ui_manager:highlight_mortuary_cult_button()\n-  -\n\nHighlights the mortuary cult button.\n",
		"body": [
			"campaign_ui_manager:highlight_mortuary_cult_button(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_mortuary_cult_panel": {
		"scope": "lua",
		"prefix": "highlight_mortuary_cult_panel",
		"description": "campaign_ui_manager:highlight_mortuary_cult_panel()\n-  -\n\nHighlights the mortuary cult panel.\n",
		"body": [
			"highlight_mortuary_cult_panel(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight}, ${4:[opt=false] boolean dont highlight upstream})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_mortuary_cult_panel": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_mortuary_cult_panel",
		"description": "campaign_ui_manager:highlight_mortuary_cult_panel()\n-  -\n\nHighlights the mortuary cult panel.\n",
		"body": [
			"campaign_ui_manager:highlight_mortuary_cult_panel(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight}, ${4:[opt=false] boolean dont highlight upstream})"
		],
	},
	"docgen:campaign_ui_manager:highlight_movement_range": {
		"scope": "lua",
		"prefix": "highlight_movement_range",
		"description": "campaign_ui_manager:highlight_movement_range()\n-  -\n\nHighlights the movement range indicator on the character info panel.\n",
		"body": [
			"highlight_movement_range(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight}, ${4:[opt=false] boolean dont highlight upstream})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_movement_range": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_movement_range",
		"description": "campaign_ui_manager:highlight_movement_range()\n-  -\n\nHighlights the movement range indicator on the character info panel.\n",
		"body": [
			"campaign_ui_manager:highlight_movement_range(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight}, ${4:[opt=false] boolean dont highlight upstream})"
		],
	},
	"docgen:campaign_ui_manager:highlight_oathgold": {
		"scope": "lua",
		"prefix": "highlight_oathgold",
		"description": "campaign_ui_manager:highlight_oathgold()\n-  -\n\nHighlights oathgold indicator.\n",
		"body": [
			"highlight_oathgold(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_oathgold": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_oathgold",
		"description": "campaign_ui_manager:highlight_oathgold()\n-  -\n\nHighlights oathgold indicator.\n",
		"body": [
			"campaign_ui_manager:highlight_oathgold(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_objectives_button": {
		"scope": "lua",
		"prefix": "highlight_objectives_button",
		"description": "campaign_ui_manager:highlight_objectives_button()\n-  -\n\nHighlights the objectives button.\n",
		"body": [
			"highlight_objectives_button(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_objectives_button": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_objectives_button",
		"description": "campaign_ui_manager:highlight_objectives_button()\n-  -\n\nHighlights the objectives button.\n",
		"body": [
			"campaign_ui_manager:highlight_objectives_button(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_objectives_panel": {
		"scope": "lua",
		"prefix": "highlight_objectives_panel",
		"description": "campaign_ui_manager:highlight_objectives_panel()\n-  -\n\nHighlights the objectives panel.\n",
		"body": [
			"highlight_objectives_panel(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_objectives_panel": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_objectives_panel",
		"description": "campaign_ui_manager:highlight_objectives_panel()\n-  -\n\nHighlights the objectives panel.\n",
		"body": [
			"campaign_ui_manager:highlight_objectives_panel(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_objectives_panel_chapter_missions": {
		"scope": "lua",
		"prefix": "highlight_objectives_panel_chapter_missions",
		"description": "campaign_ui_manager:highlight_objectives_panel_chapter_missions()\n-  -\n\nHighlights the chapter missions tab on the objectives panel.\n",
		"body": [
			"highlight_objectives_panel_chapter_missions(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_objectives_panel_chapter_missions": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_objectives_panel_chapter_missions",
		"description": "campaign_ui_manager:highlight_objectives_panel_chapter_missions()\n-  -\n\nHighlights the chapter missions tab on the objectives panel.\n",
		"body": [
			"campaign_ui_manager:highlight_objectives_panel_chapter_missions(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_objectives_panel_victory_conditions": {
		"scope": "lua",
		"prefix": "highlight_objectives_panel_victory_conditions",
		"description": "campaign_ui_manager:highlight_objectives_panel_victory_conditions()\n-  -\n\nHighlights the victory conditions tab on the objectives panel.\n",
		"body": [
			"highlight_objectives_panel_victory_conditions(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_objectives_panel_victory_conditions": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_objectives_panel_victory_conditions",
		"description": "campaign_ui_manager:highlight_objectives_panel_victory_conditions()\n-  -\n\nHighlights the victory conditions tab on the objectives panel.\n",
		"body": [
			"campaign_ui_manager:highlight_objectives_panel_victory_conditions(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_offices": {
		"scope": "lua",
		"prefix": "highlight_offices",
		"description": "campaign_ui_manager:highlight_offices()\n-  -\n\nHighlights the offices panel.\n",
		"body": [
			"highlight_offices(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_offices": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_offices",
		"description": "campaign_ui_manager:highlight_offices()\n-  -\n\nHighlights the offices panel.\n",
		"body": [
			"campaign_ui_manager:highlight_offices(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_offices_button": {
		"scope": "lua",
		"prefix": "highlight_offices_button",
		"description": "campaign_ui_manager:highlight_offices_button()\n-  -\n\nHighlights the offices button.\n",
		"body": [
			"highlight_offices_button(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_offices_button": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_offices_button",
		"description": "campaign_ui_manager:highlight_offices_button()\n-  -\n\nHighlights the offices button.\n",
		"body": [
			"campaign_ui_manager:highlight_offices_button(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_peasants": {
		"scope": "lua",
		"prefix": "highlight_peasants",
		"description": "campaign_ui_manager:highlight_peasants()\n-  -\n\nHighlights peasants.\n",
		"body": [
			"highlight_peasants(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_peasants": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_peasants",
		"description": "campaign_ui_manager:highlight_peasants()\n-  -\n\nHighlights peasants.\n",
		"body": [
			"campaign_ui_manager:highlight_peasants(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_per_turn_income": {
		"scope": "lua",
		"prefix": "highlight_per_turn_income",
		"description": "campaign_ui_manager:highlight_per_turn_income()\n-  -\n\nHighlights the per-turn income indicator.\n",
		"body": [
			"highlight_per_turn_income(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_per_turn_income": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_per_turn_income",
		"description": "campaign_ui_manager:highlight_per_turn_income()\n-  -\n\nHighlights the per-turn income indicator.\n",
		"body": [
			"campaign_ui_manager:highlight_per_turn_income(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_pieces_of_eight_button": {
		"scope": "lua",
		"prefix": "highlight_pieces_of_eight_button",
		"description": "campaign_ui_manager:highlight_pieces_of_eight_button()\n-  -\n\nHighlights the Pieces of Eight button.\n",
		"body": [
			"highlight_pieces_of_eight_button(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_pieces_of_eight_button": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_pieces_of_eight_button",
		"description": "campaign_ui_manager:highlight_pieces_of_eight_button()\n-  -\n\nHighlights the Pieces of Eight button.\n",
		"body": [
			"campaign_ui_manager:highlight_pieces_of_eight_button(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_pieces_of_eight_panel": {
		"scope": "lua",
		"prefix": "highlight_pieces_of_eight_panel",
		"description": "campaign_ui_manager:highlight_pieces_of_eight_panel()\n-  -\n\nHighlights the pieces of eight panel.\n",
		"body": [
			"highlight_pieces_of_eight_panel(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_pieces_of_eight_panel": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_pieces_of_eight_panel",
		"description": "campaign_ui_manager:highlight_pieces_of_eight_panel()\n-  -\n\nHighlights the pieces of eight panel.\n",
		"body": [
			"campaign_ui_manager:highlight_pieces_of_eight_panel(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_pirate_coves": {
		"scope": "lua",
		"prefix": "highlight_pirate_coves",
		"description": "campaign_ui_manager:highlight_pirate_coves()\n-  -\n\nHighlights any visible port settlements with pirate coves.\n",
		"body": [
			"highlight_pirate_coves(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] string faction key}, ${3:[opt=nil] number pulse strength override}, ${4:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_pirate_coves": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_pirate_coves",
		"description": "campaign_ui_manager:highlight_pirate_coves()\n-  -\n\nHighlights any visible port settlements with pirate coves.\n",
		"body": [
			"campaign_ui_manager:highlight_pirate_coves(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] string faction key}, ${3:[opt=nil] number pulse strength override}, ${4:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_ports": {
		"scope": "lua",
		"prefix": "highlight_ports",
		"description": "campaign_ui_manager:highlight_ports()\n-  -\n\nHighlights any visible port settlements.\n",
		"body": [
			"highlight_ports(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] string faction key}, ${3:[opt=nil] number pulse strength override}, ${4:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_ports": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_ports",
		"description": "campaign_ui_manager:highlight_ports()\n-  -\n\nHighlights any visible port settlements.\n",
		"body": [
			"campaign_ui_manager:highlight_ports(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] string faction key}, ${3:[opt=nil] number pulse strength override}, ${4:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_post_battle_options": {
		"scope": "lua",
		"prefix": "highlight_post_battle_options",
		"description": "campaign_ui_manager:highlight_post_battle_options()\n-  -\n\nHighlights post battle option buttons.\n",
		"body": [
			"highlight_post_battle_options(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_post_battle_options": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_post_battle_options",
		"description": "campaign_ui_manager:highlight_post_battle_options()\n-  -\n\nHighlights post battle option buttons.\n",
		"body": [
			"campaign_ui_manager:highlight_post_battle_options(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_post_battle_options_for_click": {
		"scope": "lua",
		"prefix": "highlight_post_battle_options_for_click",
		"description": "campaign_ui_manager:highlight_post_battle_options_for_click()\n-  -\n\nHighlights post battle option buttons for clicking.\n",
		"body": [
			"highlight_post_battle_options_for_click(${1:[opt=false] boolean show highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_post_battle_options_for_click": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_post_battle_options_for_click",
		"description": "campaign_ui_manager:highlight_post_battle_options_for_click()\n-  -\n\nHighlights post battle option buttons for clicking.\n",
		"body": [
			"campaign_ui_manager:highlight_post_battle_options_for_click(${1:[opt=false] boolean show highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_post_battle_panel": {
		"scope": "lua",
		"prefix": "highlight_post_battle_panel",
		"description": "campaign_ui_manager:highlight_post_battle_panel()\n-  -\n\nHighlights the post battle panel.\n",
		"body": [
			"highlight_post_battle_panel(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_post_battle_panel": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_post_battle_panel",
		"description": "campaign_ui_manager:highlight_post_battle_panel()\n-  -\n\nHighlights the post battle panel.\n",
		"body": [
			"campaign_ui_manager:highlight_post_battle_panel(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_post_battle_panel_unit_cards": {
		"scope": "lua",
		"prefix": "highlight_post_battle_panel_unit_cards",
		"description": "campaign_ui_manager:highlight_post_battle_panel_unit_cards()\n-  -\n\nHighlights unit cards on the post battle panel.\n",
		"body": [
			"highlight_post_battle_panel_unit_cards(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight}, ${4:[opt=false] boolean unit types only}, ${5:[opt=false] boolean unit experience only}, ${6:[opt=false] boolean unit banners only})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_post_battle_panel_unit_cards": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_post_battle_panel_unit_cards",
		"description": "campaign_ui_manager:highlight_post_battle_panel_unit_cards()\n-  -\n\nHighlights unit cards on the post battle panel.\n",
		"body": [
			"campaign_ui_manager:highlight_post_battle_panel_unit_cards(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight}, ${4:[opt=false] boolean unit types only}, ${5:[opt=false] boolean unit experience only}, ${6:[opt=false] boolean unit banners only})"
		],
	},
	"docgen:campaign_ui_manager:highlight_pre_battle_options": {
		"scope": "lua",
		"prefix": "highlight_pre_battle_options",
		"description": "campaign_ui_manager:highlight_pre_battle_options()\n-  -\n\nHighlights unit cards on the pre-battle panel.\n",
		"body": [
			"highlight_pre_battle_options(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_pre_battle_options": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_pre_battle_options",
		"description": "campaign_ui_manager:highlight_pre_battle_options()\n-  -\n\nHighlights unit cards on the pre-battle panel.\n",
		"body": [
			"campaign_ui_manager:highlight_pre_battle_options(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_pre_battle_panel": {
		"scope": "lua",
		"prefix": "highlight_pre_battle_panel",
		"description": "campaign_ui_manager:highlight_pre_battle_panel()\n-  -\n\nHighlights the pre-battle panel.\n",
		"body": [
			"highlight_pre_battle_panel(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_pre_battle_panel": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_pre_battle_panel",
		"description": "campaign_ui_manager:highlight_pre_battle_panel()\n-  -\n\nHighlights the pre-battle panel.\n",
		"body": [
			"campaign_ui_manager:highlight_pre_battle_panel(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_pre_battle_panel_unit_cards": {
		"scope": "lua",
		"prefix": "highlight_pre_battle_panel_unit_cards",
		"description": "campaign_ui_manager:highlight_pre_battle_panel_unit_cards()\n-  -\n\nHighlights unit cards on the pre-battle panel.\n",
		"body": [
			"highlight_pre_battle_panel_unit_cards(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight}, ${4:[opt=false] boolean is post-battle panel}, ${5:[opt=false] boolean unit types only}, ${6:[opt=false] boolean unit experience only}, ${7:[opt=false] boolean unit banners only})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_pre_battle_panel_unit_cards": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_pre_battle_panel_unit_cards",
		"description": "campaign_ui_manager:highlight_pre_battle_panel_unit_cards()\n-  -\n\nHighlights unit cards on the pre-battle panel.\n",
		"body": [
			"campaign_ui_manager:highlight_pre_battle_panel_unit_cards(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight}, ${4:[opt=false] boolean is post-battle panel}, ${5:[opt=false] boolean unit types only}, ${6:[opt=false] boolean unit experience only}, ${7:[opt=false] boolean unit banners only})"
		],
	},
	"docgen:campaign_ui_manager:highlight_province_info_panel": {
		"scope": "lua",
		"prefix": "highlight_province_info_panel",
		"description": "campaign_ui_manager:highlight_province_info_panel()\n-  -\n\nHighlights the province info panel.\n",
		"body": [
			"highlight_province_info_panel(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_province_info_panel": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_province_info_panel",
		"description": "campaign_ui_manager:highlight_province_info_panel()\n-  -\n\nHighlights the province info panel.\n",
		"body": [
			"campaign_ui_manager:highlight_province_info_panel(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_provinces_list": {
		"scope": "lua",
		"prefix": "highlight_provinces_list",
		"description": "campaign_ui_manager:highlight_provinces_list()\n-  -\n\nHighlights the provinces drop-down list.\n",
		"body": [
			"highlight_provinces_list(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_provinces_list": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_provinces_list",
		"description": "campaign_ui_manager:highlight_provinces_list()\n-  -\n\nHighlights the provinces drop-down list.\n",
		"body": [
			"campaign_ui_manager:highlight_provinces_list(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_province_overview_panel": {
		"scope": "lua",
		"prefix": "highlight_province_overview_panel",
		"description": "campaign_ui_manager:highlight_province_overview_panel()\n-  -\n\nHighlights the province overview panel.\n",
		"body": [
			"highlight_province_overview_panel(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_province_overview_panel": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_province_overview_panel",
		"description": "campaign_ui_manager:highlight_province_overview_panel()\n-  -\n\nHighlights the province overview panel.\n",
		"body": [
			"campaign_ui_manager:highlight_province_overview_panel(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_province_overview_panel_settlement_headers": {
		"scope": "lua",
		"prefix": "highlight_province_overview_panel_settlement_headers",
		"description": "campaign_ui_manager:highlight_province_overview_panel_settlement_headers()\n-  -\n\nHighlights just the settlement headers on the province overview panel.\n",
		"body": [
			"highlight_province_overview_panel_settlement_headers(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight}, ${4:[opt=false] boolean first settlement only}, ${5:[opt=false] boolean all but first settlement})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_province_overview_panel_settlement_headers": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_province_overview_panel_settlement_headers",
		"description": "campaign_ui_manager:highlight_province_overview_panel_settlement_headers()\n-  -\n\nHighlights just the settlement headers on the province overview panel.\n",
		"body": [
			"campaign_ui_manager:highlight_province_overview_panel_settlement_headers(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight}, ${4:[opt=false] boolean first settlement only}, ${5:[opt=false] boolean all but first settlement})"
		],
	},
	"docgen:campaign_ui_manager:highlight_public_order": {
		"scope": "lua",
		"prefix": "highlight_public_order",
		"description": "campaign_ui_manager:highlight_public_order()\n-  -\n\nHighlights public order on the province info panel.\n",
		"body": [
			"highlight_public_order(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_public_order": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_public_order",
		"description": "campaign_ui_manager:highlight_public_order()\n-  -\n\nHighlights public order on the province info panel.\n",
		"body": [
			"campaign_ui_manager:highlight_public_order(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_raise_dead_button": {
		"scope": "lua",
		"prefix": "highlight_raise_dead_button",
		"description": "campaign_ui_manager:highlight_raise_dead_button()\n-  -\n\nHighlights the raise dead button.\n",
		"body": [
			"highlight_raise_dead_button(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_raise_dead_button": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_raise_dead_button",
		"description": "campaign_ui_manager:highlight_raise_dead_button()\n-  -\n\nHighlights the raise dead button.\n",
		"body": [
			"campaign_ui_manager:highlight_raise_dead_button(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_raise_dead_panel": {
		"scope": "lua",
		"prefix": "highlight_raise_dead_panel",
		"description": "campaign_ui_manager:highlight_raise_dead_panel()\n-  -\n\nHighlights the raise dead panel.\n",
		"body": [
			"highlight_raise_dead_panel(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_raise_dead_panel": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_raise_dead_panel",
		"description": "campaign_ui_manager:highlight_raise_dead_panel()\n-  -\n\nHighlights the raise dead panel.\n",
		"body": [
			"campaign_ui_manager:highlight_raise_dead_panel(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_raise_dead_panel_unit_cards": {
		"scope": "lua",
		"prefix": "highlight_raise_dead_panel_unit_cards",
		"description": "campaign_ui_manager:highlight_raise_dead_panel_unit_cards()\n-  -\n\nHighlights unit cards on the raise dead panel.\n",
		"body": [
			"highlight_raise_dead_panel_unit_cards(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight}, ${4:[opt=false] boolean unit types only}, ${5:[opt=false] boolean unit experience only})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_raise_dead_panel_unit_cards": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_raise_dead_panel_unit_cards",
		"description": "campaign_ui_manager:highlight_raise_dead_panel_unit_cards()\n-  -\n\nHighlights unit cards on the raise dead panel.\n",
		"body": [
			"campaign_ui_manager:highlight_raise_dead_panel_unit_cards(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight}, ${4:[opt=false] boolean unit types only}, ${5:[opt=false] boolean unit experience only})"
		],
	},
	"docgen:campaign_ui_manager:highlight_raise_forces_button": {
		"scope": "lua",
		"prefix": "highlight_raise_forces_button",
		"description": "campaign_ui_manager:highlight_raise_forces_button()\n-  -\n\nHighlights the raise forces button.\n",
		"body": [
			"highlight_raise_forces_button(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_raise_forces_button": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_raise_forces_button",
		"description": "campaign_ui_manager:highlight_raise_forces_button()\n-  -\n\nHighlights the raise forces button.\n",
		"body": [
			"campaign_ui_manager:highlight_raise_forces_button(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_raise_forces_panel": {
		"scope": "lua",
		"prefix": "highlight_raise_forces_panel",
		"description": "campaign_ui_manager:highlight_raise_forces_panel()\n-  -\n\nHighlights the raise forces panel.\n",
		"body": [
			"highlight_raise_forces_panel(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_raise_forces_panel": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_raise_forces_panel",
		"description": "campaign_ui_manager:highlight_raise_forces_panel()\n-  -\n\nHighlights the raise forces panel.\n",
		"body": [
			"campaign_ui_manager:highlight_raise_forces_panel(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_recruit_black_ark_button": {
		"scope": "lua",
		"prefix": "highlight_recruit_black_ark_button",
		"description": "campaign_ui_manager:highlight_recruit_black_ark_button()\n-  -\n\nHighlights the recruit black ark button.\n",
		"body": [
			"highlight_recruit_black_ark_button(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_recruit_black_ark_button": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_recruit_black_ark_button",
		"description": "campaign_ui_manager:highlight_recruit_black_ark_button()\n-  -\n\nHighlights the recruit black ark button.\n",
		"body": [
			"campaign_ui_manager:highlight_recruit_black_ark_button(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_recruit_hero_button": {
		"scope": "lua",
		"prefix": "highlight_recruit_hero_button",
		"description": "campaign_ui_manager:highlight_recruit_hero_button()\n-  -\n\nHighlights the recruit hero button.\n",
		"body": [
			"highlight_recruit_hero_button(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_recruit_hero_button": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_recruit_hero_button",
		"description": "campaign_ui_manager:highlight_recruit_hero_button()\n-  -\n\nHighlights the recruit hero button.\n",
		"body": [
			"campaign_ui_manager:highlight_recruit_hero_button(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_recruitment_button": {
		"scope": "lua",
		"prefix": "highlight_recruitment_button",
		"description": "campaign_ui_manager:highlight_recruitment_button()\n-  -\n\nHighlights the recruitment button.\n",
		"body": [
			"highlight_recruitment_button(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_recruitment_button": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_recruitment_button",
		"description": "campaign_ui_manager:highlight_recruitment_button()\n-  -\n\nHighlights the recruitment button.\n",
		"body": [
			"campaign_ui_manager:highlight_recruitment_button(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_recruitment_capacity": {
		"scope": "lua",
		"prefix": "highlight_recruitment_capacity",
		"description": "campaign_ui_manager:highlight_recruitment_capacity()\n-  -\n\nHighlights the recruitment capacity indicators on the recruitment panel.\n",
		"body": [
			"highlight_recruitment_capacity(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight}, ${4:[opt=false] boolean dont highlight upstream})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_recruitment_capacity": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_recruitment_capacity",
		"description": "campaign_ui_manager:highlight_recruitment_capacity()\n-  -\n\nHighlights the recruitment capacity indicators on the recruitment panel.\n",
		"body": [
			"campaign_ui_manager:highlight_recruitment_capacity(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight}, ${4:[opt=false] boolean dont highlight upstream})"
		],
	},
	"docgen:campaign_ui_manager:highlight_recruitment_panel_unit_cards": {
		"scope": "lua",
		"prefix": "highlight_recruitment_panel_unit_cards",
		"description": "campaign_ui_manager:highlight_recruitment_panel_unit_cards()\n-  -\n\nHighlights unit cards on the recruitment panel.\n",
		"body": [
			"highlight_recruitment_panel_unit_cards(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight}, ${4:[opt=false] boolean unit types only}, ${5:[opt=false] boolean unit experience only})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_recruitment_panel_unit_cards": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_recruitment_panel_unit_cards",
		"description": "campaign_ui_manager:highlight_recruitment_panel_unit_cards()\n-  -\n\nHighlights unit cards on the recruitment panel.\n",
		"body": [
			"campaign_ui_manager:highlight_recruitment_panel_unit_cards(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight}, ${4:[opt=false] boolean unit types only}, ${5:[opt=false] boolean unit experience only})"
		],
	},
	"docgen:campaign_ui_manager:highlight_regiments_of_renown_panel": {
		"scope": "lua",
		"prefix": "highlight_regiments_of_renown_panel",
		"description": "campaign_ui_manager:highlight_regiments_of_renown_panel()\n-  -\n\nHighlights the regiments of renown panel.\n",
		"body": [
			"highlight_regiments_of_renown_panel(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_regiments_of_renown_panel": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_regiments_of_renown_panel",
		"description": "campaign_ui_manager:highlight_regiments_of_renown_panel()\n-  -\n\nHighlights the regiments of renown panel.\n",
		"body": [
			"campaign_ui_manager:highlight_regiments_of_renown_panel(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_regiments_of_renown_button": {
		"scope": "lua",
		"prefix": "highlight_regiments_of_renown_button",
		"description": "campaign_ui_manager:highlight_regiments_of_renown_button()\n-  -\n\nHighlights the regiments of renown button.\n",
		"body": [
			"highlight_regiments_of_renown_button(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_regiments_of_renown_button": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_regiments_of_renown_button",
		"description": "campaign_ui_manager:highlight_regiments_of_renown_button()\n-  -\n\nHighlights the regiments of renown button.\n",
		"body": [
			"campaign_ui_manager:highlight_regiments_of_renown_button(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_reinforcements": {
		"scope": "lua",
		"prefix": "highlight_reinforcements",
		"description": "campaign_ui_manager:highlight_reinforcements()\n-  -\n\nHighlights reinforcements on the pre-battle screen.\n",
		"body": [
			"highlight_reinforcements(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_reinforcements": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_reinforcements",
		"description": "campaign_ui_manager:highlight_reinforcements()\n-  -\n\nHighlights reinforcements on the pre-battle screen.\n",
		"body": [
			"campaign_ui_manager:highlight_reinforcements(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_rites_button": {
		"scope": "lua",
		"prefix": "highlight_rites_button",
		"description": "campaign_ui_manager:highlight_rites_button()\n-  -\n\nHighlights the rites button.\n",
		"body": [
			"highlight_rites_button(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_rites_button": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_rites_button",
		"description": "campaign_ui_manager:highlight_rites_button()\n-  -\n\nHighlights the rites button.\n",
		"body": [
			"campaign_ui_manager:highlight_rites_button(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_rites_panel": {
		"scope": "lua",
		"prefix": "highlight_rites_panel",
		"description": "campaign_ui_manager:highlight_rites_panel()\n-  -\n\nHighlights the rites panel.\n",
		"body": [
			"highlight_rites_panel(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_rites_panel": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_rites_panel",
		"description": "campaign_ui_manager:highlight_rites_panel()\n-  -\n\nHighlights the rites panel.\n",
		"body": [
			"campaign_ui_manager:highlight_rites_panel(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_ritual_buttons": {
		"scope": "lua",
		"prefix": "highlight_ritual_buttons",
		"description": "campaign_ui_manager:highlight_ritual_buttons()\n-  -\n\nHighlights ritual buttons.\n",
		"body": [
			"highlight_ritual_buttons(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_ritual_buttons": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_ritual_buttons",
		"description": "campaign_ui_manager:highlight_ritual_buttons()\n-  -\n\nHighlights ritual buttons.\n",
		"body": [
			"campaign_ui_manager:highlight_ritual_buttons(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_ritual_rival_icons": {
		"scope": "lua",
		"prefix": "highlight_ritual_rival_icons",
		"description": "campaign_ui_manager:highlight_ritual_rival_icons()\n-  -\n\nHighlights ritual rival icons.\n",
		"body": [
			"highlight_ritual_rival_icons(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_ritual_rival_icons": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_ritual_rival_icons",
		"description": "campaign_ui_manager:highlight_ritual_rival_icons()\n-  -\n\nHighlights ritual rival icons.\n",
		"body": [
			"campaign_ui_manager:highlight_ritual_rival_icons(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_rituals_bar": {
		"scope": "lua",
		"prefix": "highlight_rituals_bar",
		"description": "campaign_ui_manager:highlight_rituals_bar()\n-  -\n\nHighlights the rituals bar.\n",
		"body": [
			"highlight_rituals_bar(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_rituals_bar": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_rituals_bar",
		"description": "campaign_ui_manager:highlight_rituals_bar()\n-  -\n\nHighlights the rituals bar.\n",
		"body": [
			"campaign_ui_manager:highlight_rituals_bar(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_settlements": {
		"scope": "lua",
		"prefix": "highlight_settlements",
		"description": "campaign_ui_manager:highlight_settlements()\n-  -\n\nHighlights any visible settlements.\n",
		"body": [
			"highlight_settlements(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight}, ${4:[opt=nil] string faction key})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_settlements": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_settlements",
		"description": "campaign_ui_manager:highlight_settlements()\n-  -\n\nHighlights any visible settlements.\n",
		"body": [
			"campaign_ui_manager:highlight_settlements(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight}, ${4:[opt=nil] string faction key})"
		],
	},
	"docgen:campaign_ui_manager:highlight_ship_building_button": {
		"scope": "lua",
		"prefix": "highlight_ship_building_button",
		"description": "campaign_ui_manager:highlight_ship_building_button()\n-  -\n\nHighlights the shipbuilding tab on the army panel.\n",
		"body": [
			"highlight_ship_building_button(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_ship_building_button": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_ship_building_button",
		"description": "campaign_ui_manager:highlight_ship_building_button()\n-  -\n\nHighlights the shipbuilding tab on the army panel.\n",
		"body": [
			"campaign_ui_manager:highlight_ship_building_button(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_ship_building_panel": {
		"scope": "lua",
		"prefix": "highlight_ship_building_panel",
		"description": "campaign_ui_manager:highlight_ship_building_panel()\n-  -\n\nHighlights the shipbuilding panel.\n",
		"body": [
			"highlight_ship_building_panel(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight}, ${4:[opt=false] boolean dont highlight upstream})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_ship_building_panel": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_ship_building_panel",
		"description": "campaign_ui_manager:highlight_ship_building_panel()\n-  -\n\nHighlights the shipbuilding panel.\n",
		"body": [
			"campaign_ui_manager:highlight_ship_building_panel(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight}, ${4:[opt=false] boolean dont highlight upstream})"
		],
	},
	"docgen:campaign_ui_manager:highlight_siege_panel": {
		"scope": "lua",
		"prefix": "highlight_siege_panel",
		"description": "campaign_ui_manager:highlight_siege_panel()\n-  -\n\nHighlights the siege panel.\n",
		"body": [
			"highlight_siege_panel(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_siege_panel": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_siege_panel",
		"description": "campaign_ui_manager:highlight_siege_panel()\n-  -\n\nHighlights the siege panel.\n",
		"body": [
			"campaign_ui_manager:highlight_siege_panel(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_siege_weapons": {
		"scope": "lua",
		"prefix": "highlight_siege_weapons",
		"description": "campaign_ui_manager:highlight_siege_weapons()\n-  -\n\nHighlights siege weapons on the siege panel.\n",
		"body": [
			"highlight_siege_weapons(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_siege_weapons": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_siege_weapons",
		"description": "campaign_ui_manager:highlight_siege_weapons()\n-  -\n\nHighlights siege weapons on the siege panel.\n",
		"body": [
			"campaign_ui_manager:highlight_siege_weapons(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_slaves_button": {
		"scope": "lua",
		"prefix": "highlight_slaves_button",
		"description": "campaign_ui_manager:highlight_slaves_button()\n-  -\n\nHighlights the slaves button.\n",
		"body": [
			"highlight_slaves_button(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_slaves_button": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_slaves_button",
		"description": "campaign_ui_manager:highlight_slaves_button()\n-  -\n\nHighlights the slaves button.\n",
		"body": [
			"campaign_ui_manager:highlight_slaves_button(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_slaves_buttons": {
		"scope": "lua",
		"prefix": "highlight_slaves_buttons",
		"description": "campaign_ui_manager:highlight_slaves_buttons()\n-  -\n\nHighlights the slaves buttons that appear on the province info panel when playing as Dark Elves.\n",
		"body": [
			"highlight_slaves_buttons(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight}, ${4:[opt=false] boolean dont highlight upstream})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_slaves_buttons": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_slaves_buttons",
		"description": "campaign_ui_manager:highlight_slaves_buttons()\n-  -\n\nHighlights the slaves buttons that appear on the province info panel when playing as Dark Elves.\n",
		"body": [
			"campaign_ui_manager:highlight_slaves_buttons(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight}, ${4:[opt=false] boolean dont highlight upstream})"
		],
	},
	"docgen:campaign_ui_manager:highlight_stances": {
		"scope": "lua",
		"prefix": "highlight_stances",
		"description": "campaign_ui_manager:highlight_stances()\n-  -\n\nHighlights the stances rollout.\n",
		"body": [
			"highlight_stances(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight}, ${4:[opt=false] boolean dont highlight upstream})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_stances": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_stances",
		"description": "campaign_ui_manager:highlight_stances()\n-  -\n\nHighlights the stances rollout.\n",
		"body": [
			"campaign_ui_manager:highlight_stances(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight}, ${4:[opt=false] boolean dont highlight upstream})"
		],
	},
	"docgen:campaign_ui_manager:highlight_strategic_map_layer_buttons": {
		"scope": "lua",
		"prefix": "highlight_strategic_map_layer_buttons",
		"description": "campaign_ui_manager:highlight_strategic_map_layer_buttons()\n-  -\n\nHighlights the layer buttons on the strategic map.\n",
		"body": [
			"highlight_strategic_map_layer_buttons(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_strategic_map_layer_buttons": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_strategic_map_layer_buttons",
		"description": "campaign_ui_manager:highlight_strategic_map_layer_buttons()\n-  -\n\nHighlights the layer buttons on the strategic map.\n",
		"body": [
			"campaign_ui_manager:highlight_strategic_map_layer_buttons(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_strat_map_button": {
		"scope": "lua",
		"prefix": "highlight_strat_map_button",
		"description": "campaign_ui_manager:highlight_strat_map_button()\n-  -\n\nHighlights the strategy map button.\n",
		"body": [
			"highlight_strat_map_button(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_strat_map_button": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_strat_map_button",
		"description": "campaign_ui_manager:highlight_strat_map_button()\n-  -\n\nHighlights the strategy map button.\n",
		"body": [
			"campaign_ui_manager:highlight_strat_map_button(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_tax": {
		"scope": "lua",
		"prefix": "highlight_tax",
		"description": "campaign_ui_manager:highlight_tax()\n-  -\n\nHighlights the tax indicator on the province info panel.\n",
		"body": [
			"highlight_tax(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_tax": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_tax",
		"description": "campaign_ui_manager:highlight_tax()\n-  -\n\nHighlights the tax indicator on the province info panel.\n",
		"body": [
			"campaign_ui_manager:highlight_tax(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_technologies": {
		"scope": "lua",
		"prefix": "highlight_technologies",
		"description": "campaign_ui_manager:highlight_technologies()\n-  -\n\nHighlights technologies.\n",
		"body": [
			"highlight_technologies(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight}, ${4:[opt=false] boolean dont highlight upstream})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_technologies": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_technologies",
		"description": "campaign_ui_manager:highlight_technologies()\n-  -\n\nHighlights technologies.\n",
		"body": [
			"campaign_ui_manager:highlight_technologies(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight}, ${4:[opt=false] boolean dont highlight upstream})"
		],
	},
	"docgen:campaign_ui_manager:highlight_technology_button": {
		"scope": "lua",
		"prefix": "highlight_technology_button",
		"description": "campaign_ui_manager:highlight_technology_button()\n-  -\n\nHighlights the technologies button.\n",
		"body": [
			"highlight_technology_button(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_technology_button": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_technology_button",
		"description": "campaign_ui_manager:highlight_technology_button()\n-  -\n\nHighlights the technologies button.\n",
		"body": [
			"campaign_ui_manager:highlight_technology_button(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_technology_panel": {
		"scope": "lua",
		"prefix": "highlight_technology_panel",
		"description": "campaign_ui_manager:highlight_technology_panel()\n-  -\n\nHighlights the technologies panel.\n",
		"body": [
			"highlight_technology_panel(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_technology_panel": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_technology_panel",
		"description": "campaign_ui_manager:highlight_technology_panel()\n-  -\n\nHighlights the technologies panel.\n",
		"body": [
			"campaign_ui_manager:highlight_technology_panel(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_treasure_map_button": {
		"scope": "lua",
		"prefix": "highlight_treasure_map_button",
		"description": "campaign_ui_manager:highlight_treasure_map_button()\n-  -\n\nHighlights the Treasure map button.\n",
		"body": [
			"highlight_treasure_map_button(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_treasure_map_button": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_treasure_map_button",
		"description": "campaign_ui_manager:highlight_treasure_map_button()\n-  -\n\nHighlights the Treasure map button.\n",
		"body": [
			"campaign_ui_manager:highlight_treasure_map_button(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_treasure_map_panel": {
		"scope": "lua",
		"prefix": "highlight_treasure_map_panel",
		"description": "campaign_ui_manager:highlight_treasure_map_panel()\n-  -\n\nHighlights the treasure maps panel.\n",
		"body": [
			"highlight_treasure_map_panel(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_treasure_map_panel": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_treasure_map_panel",
		"description": "campaign_ui_manager:highlight_treasure_map_panel()\n-  -\n\nHighlights the treasure maps panel.\n",
		"body": [
			"campaign_ui_manager:highlight_treasure_map_panel(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_treasury": {
		"scope": "lua",
		"prefix": "highlight_treasury",
		"description": "campaign_ui_manager:highlight_treasury()\n-  -\n\nHighlights the treasury value.\n",
		"body": [
			"highlight_treasury(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_treasury": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_treasury",
		"description": "campaign_ui_manager:highlight_treasury()\n-  -\n\nHighlights the treasury value.\n",
		"body": [
			"campaign_ui_manager:highlight_treasury(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_treasury_button": {
		"scope": "lua",
		"prefix": "highlight_treasury_button",
		"description": "campaign_ui_manager:highlight_treasury_button()\n-  -\n\nHighlights the treasury button.\n",
		"body": [
			"highlight_treasury_button(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_treasury_button": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_treasury_button",
		"description": "campaign_ui_manager:highlight_treasury_button()\n-  -\n\nHighlights the treasury button.\n",
		"body": [
			"campaign_ui_manager:highlight_treasury_button(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_treasury_panel": {
		"scope": "lua",
		"prefix": "highlight_treasury_panel",
		"description": "campaign_ui_manager:highlight_treasury_panel()\n-  -\n\nHighlights the treasury panel.\n",
		"body": [
			"highlight_treasury_panel(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_treasury_panel": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_treasury_panel",
		"description": "campaign_ui_manager:highlight_treasury_panel()\n-  -\n\nHighlights the treasury panel.\n",
		"body": [
			"campaign_ui_manager:highlight_treasury_panel(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_treasury_panel_details_tab": {
		"scope": "lua",
		"prefix": "highlight_treasury_panel_details_tab",
		"description": "campaign_ui_manager:highlight_treasury_panel_details_tab()\n-  -\n\nHighlights the details tab on the treasury panel.\n",
		"body": [
			"highlight_treasury_panel_details_tab(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight}, ${4:[opt=false] boolean dont highlight upstream})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_treasury_panel_details_tab": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_treasury_panel_details_tab",
		"description": "campaign_ui_manager:highlight_treasury_panel_details_tab()\n-  -\n\nHighlights the details tab on the treasury panel.\n",
		"body": [
			"campaign_ui_manager:highlight_treasury_panel_details_tab(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight}, ${4:[opt=false] boolean dont highlight upstream})"
		],
	},
	"docgen:campaign_ui_manager:highlight_treasury_panel_summary_tab": {
		"scope": "lua",
		"prefix": "highlight_treasury_panel_summary_tab",
		"description": "campaign_ui_manager:highlight_treasury_panel_summary_tab()\n-  -\n\nHighlights the summary tab on the treasury panel.\n",
		"body": [
			"highlight_treasury_panel_summary_tab(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight}, ${4:[opt=false] boolean dont highlight upstream})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_treasury_panel_summary_tab": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_treasury_panel_summary_tab",
		"description": "campaign_ui_manager:highlight_treasury_panel_summary_tab()\n-  -\n\nHighlights the summary tab on the treasury panel.\n",
		"body": [
			"campaign_ui_manager:highlight_treasury_panel_summary_tab(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight}, ${4:[opt=false] boolean dont highlight upstream})"
		],
	},
	"docgen:campaign_ui_manager:highlight_treasury_panel_trade_tab": {
		"scope": "lua",
		"prefix": "highlight_treasury_panel_trade_tab",
		"description": "campaign_ui_manager:highlight_treasury_panel_trade_tab()\n-  -\n\nHighlights the trade tab on the treasury panel.\n",
		"body": [
			"highlight_treasury_panel_trade_tab(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight}, ${4:[opt=false] boolean dont highlight upstream})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_treasury_panel_trade_tab": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_treasury_panel_trade_tab",
		"description": "campaign_ui_manager:highlight_treasury_panel_trade_tab()\n-  -\n\nHighlights the trade tab on the treasury panel.\n",
		"body": [
			"campaign_ui_manager:highlight_treasury_panel_trade_tab(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight}, ${4:[opt=false] boolean dont highlight upstream})"
		],
	},
	"docgen:campaign_ui_manager:highlight_unit_cards": {
		"scope": "lua",
		"prefix": "highlight_unit_cards",
		"description": "campaign_ui_manager:highlight_unit_cards()\n-  -\n\nHighlights unit cards across the campaign UI.\n",
		"body": [
			"highlight_unit_cards(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight}, ${4:[opt=false] boolean dont highlight upstream}, ${5:[opt=false] boolean unit types only}, ${6:[opt=false] boolean unit experience only})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_unit_cards": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_unit_cards",
		"description": "campaign_ui_manager:highlight_unit_cards()\n-  -\n\nHighlights unit cards across the campaign UI.\n",
		"body": [
			"campaign_ui_manager:highlight_unit_cards(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight}, ${4:[opt=false] boolean dont highlight upstream}, ${5:[opt=false] boolean unit types only}, ${6:[opt=false] boolean unit experience only})"
		],
	},
	"docgen:campaign_ui_manager:highlight_unit_exchange_panel": {
		"scope": "lua",
		"prefix": "highlight_unit_exchange_panel",
		"description": "campaign_ui_manager:highlight_unit_exchange_panel()\n-  -\n\nHighlights the unit exchange panel.\n",
		"body": [
			"highlight_unit_exchange_panel(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_unit_exchange_panel": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_unit_exchange_panel",
		"description": "campaign_ui_manager:highlight_unit_exchange_panel()\n-  -\n\nHighlights the unit exchange panel.\n",
		"body": [
			"campaign_ui_manager:highlight_unit_exchange_panel(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_unit_experience": {
		"scope": "lua",
		"prefix": "highlight_unit_experience",
		"description": "campaign_ui_manager:highlight_unit_experience()\n-  -\n\nHighlights experience indicators on visible unit cards.\n",
		"body": [
			"highlight_unit_experience(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_unit_experience": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_unit_experience",
		"description": "campaign_ui_manager:highlight_unit_experience()\n-  -\n\nHighlights experience indicators on visible unit cards.\n",
		"body": [
			"campaign_ui_manager:highlight_unit_experience(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_unit_information_panel": {
		"scope": "lua",
		"prefix": "highlight_unit_information_panel",
		"description": "campaign_ui_manager:highlight_unit_information_panel()\n-  -\n\nHighlights the unit information panel.\n",
		"body": [
			"highlight_unit_information_panel(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_unit_information_panel": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_unit_information_panel",
		"description": "campaign_ui_manager:highlight_unit_information_panel()\n-  -\n\nHighlights the unit information panel.\n",
		"body": [
			"campaign_ui_manager:highlight_unit_information_panel(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_unit_recruitment_panel": {
		"scope": "lua",
		"prefix": "highlight_unit_recruitment_panel",
		"description": "campaign_ui_manager:highlight_unit_recruitment_panel()\n-  -\n\nHighlights the unit recruitment panel.\n",
		"body": [
			"highlight_unit_recruitment_panel(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_unit_recruitment_panel": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_unit_recruitment_panel",
		"description": "campaign_ui_manager:highlight_unit_recruitment_panel()\n-  -\n\nHighlights the unit recruitment panel.\n",
		"body": [
			"campaign_ui_manager:highlight_unit_recruitment_panel(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_unit_types": {
		"scope": "lua",
		"prefix": "highlight_unit_types",
		"description": "campaign_ui_manager:highlight_unit_types()\n-  -\n\nHighlights unit type indicators on visible unit cards.\n",
		"body": [
			"highlight_unit_types(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_unit_types": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_unit_types",
		"description": "campaign_ui_manager:highlight_unit_types()\n-  -\n\nHighlights unit type indicators on visible unit cards.\n",
		"body": [
			"campaign_ui_manager:highlight_unit_types(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:highlight_winds_of_magic": {
		"scope": "lua",
		"prefix": "highlight_winds_of_magic",
		"description": "campaign_ui_manager:highlight_winds_of_magic()\n-  -\n\nHighlights the winds of magic indicators on the army panel and the pre-battle panel.\n",
		"body": [
			"highlight_winds_of_magic(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:campaign_ui_manager:campaign_ui_manager:highlight_winds_of_magic": {
		"scope": "lua",
		"prefix": "campaign_ui_manager:highlight_winds_of_magic",
		"description": "campaign_ui_manager:highlight_winds_of_magic()\n-  -\n\nHighlights the winds of magic indicators on the army panel and the pre-battle panel.\n",
		"body": [
			"campaign_ui_manager:highlight_winds_of_magic(${1:[opt=false] boolean show highlight}, ${2:[opt=nil] number pulse strength override}, ${3:[opt=false] boolean force highlight})"
		],
	},
	"docgen:text_pointer:new": {
		"scope": "lua",
		"prefix": "new",
		"description": "text_pointer:new()\n-  -\n\nCreates a text_pointer object.\n",
		"body": [
			"new(${1:string name}, ${2:[opt=0] number x position}, ${3:[opt=0] number y position}, ${4:[opt=0] number length}, ${5:[opt=\"bottom\"] string display mode})"
		],
	},
	"docgen:text_pointer:text_pointer:new": {
		"scope": "lua",
		"prefix": "text_pointer:new",
		"description": "text_pointer:new()\n-  -\n\nCreates a text_pointer object.\n",
		"body": [
			"text_pointer:new(${1:string name}, ${2:[opt=0] number x position}, ${3:[opt=0] number y position}, ${4:[opt=0] number length}, ${5:[opt=\"bottom\"] string display mode})"
		],
	},
	"docgen:text_pointer:set_layout_path": {
		"scope": "lua",
		"prefix": "set_layout_path",
		"description": "text_pointer:set_layout_path()\n-  -\n\nSets the path to the folder that contains the component layout file.\n",
		"body": [
			"set_layout_path(${1:string path})"
		],
	},
	"docgen:text_pointer:text_pointer:set_layout_path": {
		"scope": "lua",
		"prefix": "text_pointer:set_layout_path",
		"description": "text_pointer:set_layout_path()\n-  -\n\nSets the path to the folder that contains the component layout file.\n",
		"body": [
			"text_pointer:set_layout_path(${1:string path})"
		],
	},
	"docgen:text_pointer:set_layout": {
		"scope": "lua",
		"prefix": "set_layout",
		"description": "text_pointer:set_layout()\n-  -\n\nSets the name of the layout to use for this text pointer.\n",
		"body": [
			"set_layout(${1:string path})"
		],
	},
	"docgen:text_pointer:text_pointer:set_layout": {
		"scope": "lua",
		"prefix": "text_pointer:set_layout",
		"description": "text_pointer:set_layout()\n-  -\n\nSets the name of the layout to use for this text pointer.\n",
		"body": [
			"text_pointer:set_layout(${1:string path})"
		],
	},
	"docgen:text_pointer:get_text_label": {
		"scope": "lua",
		"prefix": "get_text_label",
		"description": "text_pointer:get_text_label()\n-  -\n\nReturns the text label uicomponent\n",
		"body": [
			"get_text_label()"
		],
	},
	"docgen:text_pointer:text_pointer:get_text_label": {
		"scope": "lua",
		"prefix": "text_pointer:get_text_label",
		"description": "text_pointer:get_text_label()\n-  -\n\nReturns the text label uicomponent\n",
		"body": [
			"text_pointer:get_text_label()"
		],
	},
	"docgen:text_pointer:set_pointer_width": {
		"scope": "lua",
		"prefix": "set_pointer_width",
		"description": "text_pointer:set_pointer_width()\n-  -\n\nSets the width of the pointer line.\n",
		"body": [
			"set_pointer_width(${1:number pointer width})"
		],
	},
	"docgen:text_pointer:text_pointer:set_pointer_width": {
		"scope": "lua",
		"prefix": "text_pointer:set_pointer_width",
		"description": "text_pointer:set_pointer_width()\n-  -\n\nSets the width of the pointer line.\n",
		"body": [
			"text_pointer:set_pointer_width(${1:number pointer width})"
		],
	},
	"docgen:text_pointer:set_panel_width": {
		"scope": "lua",
		"prefix": "set_panel_width",
		"description": "text_pointer:set_panel_width()\n-  -\n\nSets the width of the text panel on-screen.\n",
		"body": [
			"set_panel_width(${1:number panel width}, ${2:[opt=false] boolean shrink horizontally})"
		],
	},
	"docgen:text_pointer:text_pointer:set_panel_width": {
		"scope": "lua",
		"prefix": "text_pointer:set_panel_width",
		"description": "text_pointer:set_panel_width()\n-  -\n\nSets the width of the text panel on-screen.\n",
		"body": [
			"text_pointer:set_panel_width(${1:number panel width}, ${2:[opt=false] boolean shrink horizontally})"
		],
	},
	"docgen:text_pointer:set_panel_width_to_screen": {
		"scope": "lua",
		"prefix": "set_panel_width_to_screen",
		"description": "text_pointer:set_panel_width_to_screen()\n-  -\n\nSets the width of the text panel on-screen to be the screen width minus a supplied numeric value.\n",
		"body": [
			"set_panel_width_to_screen(${1:number difference}, ${2:[opt=false] boolean shrink horizontally})"
		],
	},
	"docgen:text_pointer:text_pointer:set_panel_width_to_screen": {
		"scope": "lua",
		"prefix": "text_pointer:set_panel_width_to_screen",
		"description": "text_pointer:set_panel_width_to_screen()\n-  -\n\nSets the width of the text panel on-screen to be the screen width minus a supplied numeric value.\n",
		"body": [
			"text_pointer:set_panel_width_to_screen(${1:number difference}, ${2:[opt=false] boolean shrink horizontally})"
		],
	},
	"docgen:text_pointer:set_worldspace_display_height": {
		"scope": "lua",
		"prefix": "set_worldspace_display_height",
		"description": "text_pointer:set_worldspace_display_height()\n-  -\n\nSets the height of the terrain at the pointer position.\n",
		"body": [
			"set_worldspace_display_height(${1:number display height})"
		],
	},
	"docgen:text_pointer:text_pointer:set_worldspace_display_height": {
		"scope": "lua",
		"prefix": "text_pointer:set_worldspace_display_height",
		"description": "text_pointer:set_worldspace_display_height()\n-  -\n\nSets the height of the terrain at the pointer position.\n",
		"body": [
			"text_pointer:set_worldspace_display_height(${1:number display height})"
		],
	},
	"docgen:text_pointer:set_label_offset": {
		"scope": "lua",
		"prefix": "set_label_offset",
		"description": "text_pointer:set_label_offset()\n-  -\n\nWithout setting a label offset, the text label with be centred to the position being pointed at e.\n",
		"body": [
			"set_label_offset(${1:number x offset}, ${2:number y offset})"
		],
	},
	"docgen:text_pointer:text_pointer:set_label_offset": {
		"scope": "lua",
		"prefix": "text_pointer:set_label_offset",
		"description": "text_pointer:set_label_offset()\n-  -\n\nWithout setting a label offset, the text label with be centred to the position being pointed at e.\n",
		"body": [
			"text_pointer:set_label_offset(${1:number x offset}, ${2:number y offset})"
		],
	},
	"docgen:text_pointer:set_priority": {
		"scope": "lua",
		"prefix": "set_priority",
		"description": "text_pointer:set_priority()\n-  -\n\nSets the component priority of the text pointer.\n",
		"body": [
			"set_priority(${1:number priority})"
		],
	},
	"docgen:text_pointer:text_pointer:set_priority": {
		"scope": "lua",
		"prefix": "text_pointer:set_priority",
		"description": "text_pointer:set_priority()\n-  -\n\nSets the component priority of the text pointer.\n",
		"body": [
			"text_pointer:set_priority(${1:number priority})"
		],
	},
	"docgen:text_pointer:set_topmost": {
		"scope": "lua",
		"prefix": "set_topmost",
		"description": "text_pointer:set_topmost()\n-  -\n\nSets the text pointer components to be topmost in the UI heirarchy.\n",
		"body": [
			"set_topmost(${1:[opt=true] boolean topmost})"
		],
	},
	"docgen:text_pointer:text_pointer:set_topmost": {
		"scope": "lua",
		"prefix": "text_pointer:set_topmost",
		"description": "text_pointer:set_topmost()\n-  -\n\nSets the text pointer components to be topmost in the UI heirarchy.\n",
		"body": [
			"text_pointer:set_topmost(${1:[opt=true] boolean topmost})"
		],
	},
	"docgen:text_pointer:set_should_pulse": {
		"scope": "lua",
		"prefix": "set_should_pulse",
		"description": "text_pointer:set_should_pulse()\n-  -\n\nSets the text pointer to pulse-highlight when it shows.\n",
		"body": [
			"set_should_pulse(${1:[opt=true] boolean pulse}, ${2:[opt=nil] number pulse strength})"
		],
	},
	"docgen:text_pointer:text_pointer:set_should_pulse": {
		"scope": "lua",
		"prefix": "text_pointer:set_should_pulse",
		"description": "text_pointer:set_should_pulse()\n-  -\n\nSets the text pointer to pulse-highlight when it shows.\n",
		"body": [
			"text_pointer:set_should_pulse(${1:[opt=true] boolean pulse}, ${2:[opt=nil] number pulse strength})"
		],
	},
	"docgen:text_pointer:set_stream_by_char": {
		"scope": "lua",
		"prefix": "set_stream_by_char",
		"description": "text_pointer:set_stream_by_char()\n-  -\n\nSets the text pointer to stream its text, and optionally sets the duration over which the text is to be streamed.\n",
		"body": [
			"set_stream_by_char(${1:boolean should stream}, ${2:[opt=nil] number stream duration})"
		],
	},
	"docgen:text_pointer:text_pointer:set_stream_by_char": {
		"scope": "lua",
		"prefix": "text_pointer:set_stream_by_char",
		"description": "text_pointer:set_stream_by_char()\n-  -\n\nSets the text pointer to stream its text, and optionally sets the duration over which the text is to be streamed.\n",
		"body": [
			"text_pointer:set_stream_by_char(${1:boolean should stream}, ${2:[opt=nil] number stream duration})"
		],
	},
	"docgen:text_pointer:set_stream_duration": {
		"scope": "lua",
		"prefix": "set_stream_duration",
		"description": "text_pointer:set_stream_duration()\n-  -\n\nSets just the duration over which the text is to be streamed.\n",
		"body": [
			"set_stream_duration(${1:number stream duration})"
		],
	},
	"docgen:text_pointer:text_pointer:set_stream_duration": {
		"scope": "lua",
		"prefix": "text_pointer:set_stream_duration",
		"description": "text_pointer:set_stream_duration()\n-  -\n\nSets just the duration over which the text is to be streamed.\n",
		"body": [
			"text_pointer:set_stream_duration(${1:number stream duration})"
		],
	},
	"docgen:text_pointer:set_panel_show_animation": {
		"scope": "lua",
		"prefix": "set_panel_show_animation",
		"description": "text_pointer:set_panel_show_animation()\n-  -\n\nSets a different panel show animation.\n",
		"body": [
			"set_panel_show_animation(${1:string animation name})"
		],
	},
	"docgen:text_pointer:text_pointer:set_panel_show_animation": {
		"scope": "lua",
		"prefix": "text_pointer:set_panel_show_animation",
		"description": "text_pointer:set_panel_show_animation()\n-  -\n\nSets a different panel show animation.\n",
		"body": [
			"text_pointer:set_panel_show_animation(${1:string animation name})"
		],
	},
	"docgen:text_pointer:set_panel_hide_animation": {
		"scope": "lua",
		"prefix": "set_panel_hide_animation",
		"description": "text_pointer:set_panel_hide_animation()\n-  -\n\nSets a different panel hide animation.\n",
		"body": [
			"set_panel_hide_animation(${1:string animation name})"
		],
	},
	"docgen:text_pointer:text_pointer:set_panel_hide_animation": {
		"scope": "lua",
		"prefix": "text_pointer:set_panel_hide_animation",
		"description": "text_pointer:set_panel_hide_animation()\n-  -\n\nSets a different panel hide animation.\n",
		"body": [
			"text_pointer:set_panel_hide_animation(${1:string animation name})"
		],
	},
	"docgen:text_pointer:set_text_show_animation": {
		"scope": "lua",
		"prefix": "set_text_show_animation",
		"description": "text_pointer:set_text_show_animation()\n-  -\n\nSets a text show animation.\n",
		"body": [
			"set_text_show_animation(${1:string animation name})"
		],
	},
	"docgen:text_pointer:text_pointer:set_text_show_animation": {
		"scope": "lua",
		"prefix": "text_pointer:set_text_show_animation",
		"description": "text_pointer:set_text_show_animation()\n-  -\n\nSets a text show animation.\n",
		"body": [
			"text_pointer:set_text_show_animation(${1:string animation name})"
		],
	},
	"docgen:text_pointer:set_text_hide_animation": {
		"scope": "lua",
		"prefix": "set_text_hide_animation",
		"description": "text_pointer:set_text_hide_animation()\n-  -\n\nSets a text hide animation.\n",
		"body": [
			"set_text_hide_animation(${1:string animation name})"
		],
	},
	"docgen:text_pointer:text_pointer:set_text_hide_animation": {
		"scope": "lua",
		"prefix": "text_pointer:set_text_hide_animation",
		"description": "text_pointer:set_text_hide_animation()\n-  -\n\nSets a text hide animation.\n",
		"body": [
			"text_pointer:set_text_hide_animation(${1:string animation name})"
		],
	},
	"docgen:text_pointer:set_panel_state_override": {
		"scope": "lua",
		"prefix": "set_panel_state_override",
		"description": "text_pointer:set_panel_state_override()\n-  -\n\nSets a different state for the text pointer panel.\n",
		"body": [
			"set_panel_state_override(${1:string state name})"
		],
	},
	"docgen:text_pointer:text_pointer:set_panel_state_override": {
		"scope": "lua",
		"prefix": "text_pointer:set_panel_state_override",
		"description": "text_pointer:set_panel_state_override()\n-  -\n\nSets a different state for the text pointer panel.\n",
		"body": [
			"text_pointer:set_panel_state_override(${1:string state name})"
		],
	},
	"docgen:text_pointer:set_text_state_override": {
		"scope": "lua",
		"prefix": "set_text_state_override",
		"description": "text_pointer:set_text_state_override()\n-  -\n\nSets a different state for each line of text pointer panel.\n",
		"body": [
			"set_text_state_override(${1:string state name})"
		],
	},
	"docgen:text_pointer:text_pointer:set_text_state_override": {
		"scope": "lua",
		"prefix": "text_pointer:set_text_state_override",
		"description": "text_pointer:set_text_state_override()\n-  -\n\nSets a different state for each line of text pointer panel.\n",
		"body": [
			"text_pointer:set_text_state_override(${1:string state name})"
		],
	},
	"docgen:text_pointer:set_show_close_button": {
		"scope": "lua",
		"prefix": "set_show_close_button",
		"description": "text_pointer:set_show_close_button()\n-  -\n\nShows a close button on the text pointer.\n",
		"body": [
			"set_show_close_button(${1:[opt=true] boolean show button})"
		],
	},
	"docgen:text_pointer:text_pointer:set_show_close_button": {
		"scope": "lua",
		"prefix": "text_pointer:set_show_close_button",
		"description": "text_pointer:set_show_close_button()\n-  -\n\nShows a close button on the text pointer.\n",
		"body": [
			"text_pointer:set_show_close_button(${1:[opt=true] boolean show button})"
		],
	},
	"docgen:text_pointer:set_hide_on_close_button_clicked": {
		"scope": "lua",
		"prefix": "set_hide_on_close_button_clicked",
		"description": "text_pointer:set_hide_on_close_button_clicked()\n-  -\n\nHides the text pointer when the close button is clicked.\n",
		"body": [
			"set_hide_on_close_button_clicked(${1:[opt=true] boolean close on click})"
		],
	},
	"docgen:text_pointer:text_pointer:set_hide_on_close_button_clicked": {
		"scope": "lua",
		"prefix": "text_pointer:set_hide_on_close_button_clicked",
		"description": "text_pointer:set_hide_on_close_button_clicked()\n-  -\n\nHides the text pointer when the close button is clicked.\n",
		"body": [
			"text_pointer:set_hide_on_close_button_clicked(${1:[opt=true] boolean close on click})"
		],
	},
	"docgen:text_pointer:set_close_button_callback": {
		"scope": "lua",
		"prefix": "set_close_button_callback",
		"description": "text_pointer:set_close_button_callback()\n-  -\n\nSet a callback to call when the close button is clicked.\n",
		"body": [
			"set_close_button_callback(${1:function callback}, ${2:[opt=0] number delay})"
		],
	},
	"docgen:text_pointer:text_pointer:set_close_button_callback": {
		"scope": "lua",
		"prefix": "text_pointer:set_close_button_callback",
		"description": "text_pointer:set_close_button_callback()\n-  -\n\nSet a callback to call when the close button is clicked.\n",
		"body": [
			"text_pointer:set_close_button_callback(${1:function callback}, ${2:[opt=0] number delay})"
		],
	},
	"docgen:text_pointer:set_close_button_component": {
		"scope": "lua",
		"prefix": "set_close_button_component",
		"description": "text_pointer:set_close_button_component()\n-  -\n\nOverrides the component to use as the close button, by name.\n",
		"body": [
			"set_close_button_component(${1:string component name})"
		],
	},
	"docgen:text_pointer:text_pointer:set_close_button_component": {
		"scope": "lua",
		"prefix": "text_pointer:set_close_button_component",
		"description": "text_pointer:set_close_button_component()\n-  -\n\nOverrides the component to use as the close button, by name.\n",
		"body": [
			"text_pointer:set_close_button_component(${1:string component name})"
		],
	},
	"docgen:text_pointer:set_highlight_close_button": {
		"scope": "lua",
		"prefix": "set_highlight_close_button",
		"description": "text_pointer:set_highlight_close_button()\n-  -\n\nInstructs the text pointer to highlight the close button when it shows, with an optional delay between the time of showing and the time the close button is highlighted.\n",
		"body": [
			"set_highlight_close_button(${1:[opt=0] delay, Period the text pointer should wait after being shown before the button highlight begins. This is specified in s in campaign})"
		],
	},
	"docgen:text_pointer:text_pointer:set_highlight_close_button": {
		"scope": "lua",
		"prefix": "text_pointer:set_highlight_close_button",
		"description": "text_pointer:set_highlight_close_button()\n-  -\n\nInstructs the text pointer to highlight the close button when it shows, with an optional delay between the time of showing and the time the close button is highlighted.\n",
		"body": [
			"text_pointer:set_highlight_close_button(${1:[opt=0] delay, Period the text pointer should wait after being shown before the button highlight begins. This is specified in s in campaign})"
		],
	},
	"docgen:text_pointer:set_subtitle": {
		"scope": "lua",
		"prefix": "set_subtitle",
		"description": "text_pointer:set_subtitle()\n-  -\n\nSets the text pointer to position itself/behave as a cutscene subtitle, in the lower cinematic bar.\n",
		"body": [
			"set_subtitle()"
		],
	},
	"docgen:text_pointer:text_pointer:set_subtitle": {
		"scope": "lua",
		"prefix": "text_pointer:set_subtitle",
		"description": "text_pointer:set_subtitle()\n-  -\n\nSets the text pointer to position itself/behave as a cutscene subtitle, in the lower cinematic bar.\n",
		"body": [
			"text_pointer:set_subtitle()"
		],
	},
	"docgen:text_pointer:set_subtitle_position": {
		"scope": "lua",
		"prefix": "set_subtitle_position",
		"description": "text_pointer:set_subtitle_position()\n-  -\n\nSets a subtitle position string, which determines where the subtitle is displayed.\n",
		"body": [
			"set_subtitle_position(${1:string position})"
		],
	},
	"docgen:text_pointer:text_pointer:set_subtitle_position": {
		"scope": "lua",
		"prefix": "text_pointer:set_subtitle_position",
		"description": "text_pointer:set_subtitle_position()\n-  -\n\nSets a subtitle position string, which determines where the subtitle is displayed.\n",
		"body": [
			"text_pointer:set_subtitle_position(${1:string position})"
		],
	},
	"docgen:text_pointer:set_position_offset_to_text_pointer": {
		"scope": "lua",
		"prefix": "set_position_offset_to_text_pointer",
		"description": "text_pointer:set_position_offset_to_text_pointer()\n-  -\n\nSets the position of this text pointer relative to another pointer.\n",
		"body": [
			"set_position_offset_to_text_pointer(${1:text_pointer text pointer}, ${2:number x offset}, ${3:number y offset})"
		],
	},
	"docgen:text_pointer:text_pointer:set_position_offset_to_text_pointer": {
		"scope": "lua",
		"prefix": "text_pointer:set_position_offset_to_text_pointer",
		"description": "text_pointer:set_position_offset_to_text_pointer()\n-  -\n\nSets the position of this text pointer relative to another pointer.\n",
		"body": [
			"text_pointer:set_position_offset_to_text_pointer(${1:text_pointer text pointer}, ${2:number x offset}, ${3:number y offset})"
		],
	},
	"docgen:text_pointer:add_component_text": {
		"scope": "lua",
		"prefix": "add_component_text",
		"description": "text_pointer:add_component_text()\n-  -\n\nSets the text of the specified component on the text pointer to that looked up by a supplied db text key.\n",
		"body": [
			"add_component_text(${1:string component name}, ${2:string override text key}, ${3:[opt=false] exempt from streaming})"
		],
	},
	"docgen:text_pointer:text_pointer:add_component_text": {
		"scope": "lua",
		"prefix": "text_pointer:add_component_text",
		"description": "text_pointer:add_component_text()\n-  -\n\nSets the text of the specified component on the text pointer to that looked up by a supplied db text key.\n",
		"body": [
			"text_pointer:add_component_text(${1:string component name}, ${2:string override text key}, ${3:[opt=false] exempt from streaming})"
		],
	},
	"docgen:text_pointer:show": {
		"scope": "lua",
		"prefix": "show",
		"description": "text_pointer:show()\n-  -\n\nMakes the text pointer visible.\n",
		"body": [
			"show(${1:[opt=false] force display})"
		],
	},
	"docgen:text_pointer:text_pointer:show": {
		"scope": "lua",
		"prefix": "text_pointer:show",
		"description": "text_pointer:show()\n-  -\n\nMakes the text pointer visible.\n",
		"body": [
			"text_pointer:show(${1:[opt=false] force display})"
		],
	},
	"docgen:text_pointer:hide": {
		"scope": "lua",
		"prefix": "hide",
		"description": "text_pointer:hide()\n-  -\n\nHides the text pointer.\n",
		"body": [
			"hide(${1:[opt=false] hide immediately})"
		],
	},
	"docgen:text_pointer:text_pointer:hide": {
		"scope": "lua",
		"prefix": "text_pointer:hide",
		"description": "text_pointer:hide()\n-  -\n\nHides the text pointer.\n",
		"body": [
			"text_pointer:hide(${1:[opt=false] hide immediately})"
		],
	},
	"docgen:text_pointer:set_style": {
		"scope": "lua",
		"prefix": "set_style",
		"description": "text_pointer:set_style()\n-  -\n\nSets the style of this text pointer.\n",
		"body": [
			"set_style(${1:string style})"
		],
	},
	"docgen:text_pointer:text_pointer:set_style": {
		"scope": "lua",
		"prefix": "text_pointer:set_style",
		"description": "text_pointer:set_style()\n-  -\n\nSets the style of this text pointer.\n",
		"body": [
			"text_pointer:set_style(${1:string style})"
		],
	},
	"docgen:convex_area:new": {
		"scope": "lua",
		"prefix": "new",
		"description": "convex_area:new()\n-  -\n\nCreates a convex area from a supplied table of vectors.\n",
		"body": [
			"new(${1:table positions})"
		],
	},
	"docgen:convex_area:convex_area:new": {
		"scope": "lua",
		"prefix": "convex_area:new",
		"description": "convex_area:new()\n-  -\n\nCreates a convex area from a supplied table of vectors.\n",
		"body": [
			"convex_area:new(${1:table positions})"
		],
	},
	"docgen:convex_area:item": {
		"scope": "lua",
		"prefix": "item",
		"description": "convex_area:item()\n-  -\n\nRetrieves the nth vector in the convex area.\n",
		"body": [
			"item(${1:integer index})"
		],
	},
	"docgen:convex_area:convex_area:item": {
		"scope": "lua",
		"prefix": "convex_area:item",
		"description": "convex_area:item()\n-  -\n\nRetrieves the nth vector in the convex area.\n",
		"body": [
			"convex_area:item(${1:integer index})"
		],
	},
	"docgen:convex_area:count": {
		"scope": "lua",
		"prefix": "count",
		"description": "convex_area:count()\n-  -\n\nReturns the number of vector positions that make up this convex area shape\n",
		"body": [
			"count()"
		],
	},
	"docgen:convex_area:convex_area:count": {
		"scope": "lua",
		"prefix": "convex_area:count",
		"description": "convex_area:count()\n-  -\n\nReturns the number of vector positions that make up this convex area shape\n",
		"body": [
			"convex_area:count()"
		],
	},
	"docgen:convex_area:is_in_area": {
		"scope": "lua",
		"prefix": "is_in_area",
		"description": "convex_area:is_in_area()\n-  -\n\nReturns true if any element of the supplied object or collection is in the convex area, false otherwise.\n",
		"body": [
			"is_in_area(${1:object collection}, ${2:[opt=false] boolean standing only})"
		],
	},
	"docgen:convex_area:convex_area:is_in_area": {
		"scope": "lua",
		"prefix": "convex_area:is_in_area",
		"description": "convex_area:is_in_area()\n-  -\n\nReturns true if any element of the supplied object or collection is in the convex area, false otherwise.\n",
		"body": [
			"convex_area:is_in_area(${1:object collection}, ${2:[opt=false] boolean standing only})"
		],
	},
	"docgen:convex_area:standing_is_in_area": {
		"scope": "lua",
		"prefix": "standing_is_in_area",
		"description": "convex_area:standing_is_in_area()\n-  -\n\nAlias for <code>is_in_area(obj, <strong>true</strong>)</code>.\n",
		"body": [
			"standing_is_in_area(${1:object object or collection to test})"
		],
	},
	"docgen:convex_area:convex_area:standing_is_in_area": {
		"scope": "lua",
		"prefix": "convex_area:standing_is_in_area",
		"description": "convex_area:standing_is_in_area()\n-  -\n\nAlias for <code>is_in_area(obj, <strong>true</strong>)</code>.\n",
		"body": [
			"convex_area:standing_is_in_area(${1:object object or collection to test})"
		],
	},
	"docgen:convex_area:not_in_area": {
		"scope": "lua",
		"prefix": "not_in_area",
		"description": "convex_area:not_in_area()\n-  -\n\nReturns true if any element of the supplied object or collection is NOT in the convex area, false otherwise.\n",
		"body": [
			"not_in_area(${1:object collection}, ${2:[opt=false] boolean standing only})"
		],
	},
	"docgen:convex_area:convex_area:not_in_area": {
		"scope": "lua",
		"prefix": "convex_area:not_in_area",
		"description": "convex_area:not_in_area()\n-  -\n\nReturns true if any element of the supplied object or collection is NOT in the convex area, false otherwise.\n",
		"body": [
			"convex_area:not_in_area(${1:object collection}, ${2:[opt=false] boolean standing only})"
		],
	},
	"docgen:convex_area:standing_not_in_area": {
		"scope": "lua",
		"prefix": "standing_not_in_area",
		"description": "convex_area:standing_not_in_area()\n-  -\n\nAlias for <code>not_in_area(obj, <strong>true</strong>)</code>.\n",
		"body": [
			"standing_not_in_area(${1:object collection})"
		],
	},
	"docgen:convex_area:convex_area:standing_not_in_area": {
		"scope": "lua",
		"prefix": "convex_area:standing_not_in_area",
		"description": "convex_area:standing_not_in_area()\n-  -\n\nAlias for <code>not_in_area(obj, <strong>true</strong>)</code>.\n",
		"body": [
			"convex_area:standing_not_in_area(${1:object collection})"
		],
	},
	"docgen:convex_area:number_in_area": {
		"scope": "lua",
		"prefix": "number_in_area",
		"description": "convex_area:number_in_area()\n-  -\n\nReturns the number of elements in the target collection that fall in the convex area.\n",
		"body": [
			"number_in_area(${1:object collection}, ${2:[opt=false] boolean standing only})"
		],
	},
	"docgen:convex_area:convex_area:number_in_area": {
		"scope": "lua",
		"prefix": "convex_area:number_in_area",
		"description": "convex_area:number_in_area()\n-  -\n\nReturns the number of elements in the target collection that fall in the convex area.\n",
		"body": [
			"convex_area:number_in_area(${1:object collection}, ${2:[opt=false] boolean standing only})"
		],
	},
	"docgen:convex_area:standing_number_in_area": {
		"scope": "lua",
		"prefix": "standing_number_in_area",
		"description": "convex_area:standing_number_in_area()\n-  -\n\nAlias for <code>standing_number_in_area(obj, <strong>true</strong>)</code>.\n",
		"body": [
			"standing_number_in_area(${1:object collection})"
		],
	},
	"docgen:convex_area:convex_area:standing_number_in_area": {
		"scope": "lua",
		"prefix": "convex_area:standing_number_in_area",
		"description": "convex_area:standing_number_in_area()\n-  -\n\nAlias for <code>standing_number_in_area(obj, <strong>true</strong>)</code>.\n",
		"body": [
			"convex_area:standing_number_in_area(${1:object collection})"
		],
	},
	"docgen:core:new": {
		"scope": "lua",
		"prefix": "new",
		"description": "core:new()\n-  -\n\nCreates a core object.\n",
		"body": [
			"new()"
		],
	},
	"docgen:core:core:new": {
		"scope": "lua",
		"prefix": "core:new",
		"description": "core:new()\n-  -\n\nCreates a core object.\n",
		"body": [
			"core:new()"
		],
	},
	"docgen:core:get_ui_root": {
		"scope": "lua",
		"prefix": "get_ui_root",
		"description": "core:get_ui_root()\n-  -\n\nGets a handle to the ui root object.\n",
		"body": [
			"get_ui_root()"
		],
	},
	"docgen:core:core:get_ui_root": {
		"scope": "lua",
		"prefix": "core:get_ui_root",
		"description": "core:get_ui_root()\n-  -\n\nGets a handle to the ui root object.\n",
		"body": [
			"core:get_ui_root()"
		],
	},
	"docgen:core:set_ui_root": {
		"scope": "lua",
		"prefix": "set_ui_root",
		"description": "core:set_ui_root()\n-  -\n\nsets the ui root object that the core stores.\n",
		"body": [
			"set_ui_root(${1:uicomponent ui root})"
		],
	},
	"docgen:core:core:set_ui_root": {
		"scope": "lua",
		"prefix": "core:set_ui_root",
		"description": "core:set_ui_root()\n-  -\n\nsets the ui root object that the core stores.\n",
		"body": [
			"core:set_ui_root(${1:uicomponent ui root})"
		],
	},
	"docgen:core:is_ui_created": {
		"scope": "lua",
		"prefix": "is_ui_created",
		"description": "core:is_ui_created()\n-  -\n\nReturns whether the ui has been created or not.\n",
		"body": [
			"is_ui_created()"
		],
	},
	"docgen:core:core:is_ui_created": {
		"scope": "lua",
		"prefix": "core:is_ui_created",
		"description": "core:is_ui_created()\n-  -\n\nReturns whether the ui has been created or not.\n",
		"body": [
			"core:is_ui_created()"
		],
	},
	"docgen:core:add_ui_created_callback": {
		"scope": "lua",
		"prefix": "add_ui_created_callback",
		"description": "core:add_ui_created_callback()\n-  -\n\nAdds a callback to be called when the UI is created.\n",
		"body": [
			"add_ui_created_callback(${1:function callback})"
		],
	},
	"docgen:core:core:add_ui_created_callback": {
		"scope": "lua",
		"prefix": "core:add_ui_created_callback",
		"description": "core:add_ui_created_callback()\n-  -\n\nAdds a callback to be called when the UI is created.\n",
		"body": [
			"core:add_ui_created_callback(${1:function callback})"
		],
	},
	"docgen:core:add_ui_destroyed_callback": {
		"scope": "lua",
		"prefix": "add_ui_destroyed_callback",
		"description": "core:add_ui_destroyed_callback()\n-  -\n\nAdds a callback to be called when the UI is destroyed.\n",
		"body": [
			"add_ui_destroyed_callback(${1:function callback})"
		],
	},
	"docgen:core:core:add_ui_destroyed_callback": {
		"scope": "lua",
		"prefix": "core:add_ui_destroyed_callback",
		"description": "core:add_ui_destroyed_callback()\n-  -\n\nAdds a callback to be called when the UI is destroyed.\n",
		"body": [
			"core:add_ui_destroyed_callback(${1:function callback})"
		],
	},
	"docgen:core:is_debug_config": {
		"scope": "lua",
		"prefix": "is_debug_config",
		"description": "core:is_debug_config()\n-  -\n\nReturns true if the game is not running in final release or intel configurations, false if the game is running in debug or profile configuration\n",
		"body": [
			"is_debug_config()"
		],
	},
	"docgen:core:core:is_debug_config": {
		"scope": "lua",
		"prefix": "core:is_debug_config",
		"description": "core:is_debug_config()\n-  -\n\nReturns true if the game is not running in final release or intel configurations, false if the game is running in debug or profile configuration\n",
		"body": [
			"core:is_debug_config()"
		],
	},
	"docgen:core:is_tweaker_set": {
		"scope": "lua",
		"prefix": "is_tweaker_set",
		"description": "core:is_tweaker_set()\n-  -\n\nReturns whether a tweaker with the supplied name is set\n",
		"body": [
			"is_tweaker_set(${1:string tweaker name})"
		],
	},
	"docgen:core:core:is_tweaker_set": {
		"scope": "lua",
		"prefix": "core:is_tweaker_set",
		"description": "core:is_tweaker_set()\n-  -\n\nReturns whether a tweaker with the supplied name is set\n",
		"body": [
			"core:is_tweaker_set(${1:string tweaker name})"
		],
	},
	"docgen:core:get_screen_resolution": {
		"scope": "lua",
		"prefix": "get_screen_resolution",
		"description": "core:get_screen_resolution()\n-  -\n\nReturns the current screen resolution\n",
		"body": [
			"get_screen_resolution()"
		],
	},
	"docgen:core:core:get_screen_resolution": {
		"scope": "lua",
		"prefix": "core:get_screen_resolution",
		"description": "core:get_screen_resolution()\n-  -\n\nReturns the current screen resolution\n",
		"body": [
			"core:get_screen_resolution()"
		],
	},
	"docgen:core:is_campaign": {
		"scope": "lua",
		"prefix": "is_campaign",
		"description": "core:is_campaign()\n-  -\n\nReturns whether the game is currently in campaign mode\n",
		"body": [
			"is_campaign()"
		],
	},
	"docgen:core:core:is_campaign": {
		"scope": "lua",
		"prefix": "core:is_campaign",
		"description": "core:is_campaign()\n-  -\n\nReturns whether the game is currently in campaign mode\n",
		"body": [
			"core:is_campaign()"
		],
	},
	"docgen:core:is_battle": {
		"scope": "lua",
		"prefix": "is_battle",
		"description": "core:is_battle()\n-  -\n\nReturns whether the game is currently in battle mode\n",
		"body": [
			"is_battle()"
		],
	},
	"docgen:core:core:is_battle": {
		"scope": "lua",
		"prefix": "core:is_battle",
		"description": "core:is_battle()\n-  -\n\nReturns whether the game is currently in battle mode\n",
		"body": [
			"core:is_battle()"
		],
	},
	"docgen:core:is_frontend": {
		"scope": "lua",
		"prefix": "is_frontend",
		"description": "core:is_frontend()\n-  -\n\nReturns whether the game is currently in the frontend\n",
		"body": [
			"is_frontend()"
		],
	},
	"docgen:core:core:is_frontend": {
		"scope": "lua",
		"prefix": "core:is_frontend",
		"description": "core:is_frontend()\n-  -\n\nReturns whether the game is currently in the frontend\n",
		"body": [
			"core:is_frontend()"
		],
	},
	"docgen:core:get_env": {
		"scope": "lua",
		"prefix": "get_env",
		"description": "core:get_env()\n-  -\n\nReturns the current global lua function environment.\n",
		"body": [
			"get_env()"
		],
	},
	"docgen:core:core:get_env": {
		"scope": "lua",
		"prefix": "core:get_env",
		"description": "core:get_env()\n-  -\n\nReturns the current global lua function environment.\n",
		"body": [
			"core:get_env()"
		],
	},
	"docgen:core:load_mods": {
		"scope": "lua",
		"prefix": "load_mods",
		"description": "core:load_mods()\n-  -\n\nLoads all mod scripts found on each of the supplied paths, setting the environment of every loaded mod to the global environment.\n",
		"body": [
			"load_mods(${1:... paths})"
		],
	},
	"docgen:core:core:load_mods": {
		"scope": "lua",
		"prefix": "core:load_mods",
		"description": "core:load_mods()\n-  -\n\nLoads all mod scripts found on each of the supplied paths, setting the environment of every loaded mod to the global environment.\n",
		"body": [
			"core:load_mods(${1:... paths})"
		],
	},
	"docgen:core:execute_mods": {
		"scope": "lua",
		"prefix": "execute_mods",
		"description": "core:execute_mods()\n-  -\n\nAttempts to execute a function of the same name as the filename of each mod that has previously been loaded by core:load_mods.\n",
		"body": [
			"execute_mods(${1:... arguments})"
		],
	},
	"docgen:core:core:execute_mods": {
		"scope": "lua",
		"prefix": "core:execute_mods",
		"description": "core:execute_mods()\n-  -\n\nAttempts to execute a function of the same name as the filename of each mod that has previously been loaded by core:load_mods.\n",
		"body": [
			"core:execute_mods(${1:... arguments})"
		],
	},
	"docgen:core:is_mod_loaded": {
		"scope": "lua",
		"prefix": "is_mod_loaded",
		"description": "core:is_mod_loaded()\n-  -\n\nReturns whether a mod with the supplied name is loaded.\n",
		"body": [
			"is_mod_loaded(${1:string mod name})"
		],
	},
	"docgen:core:core:is_mod_loaded": {
		"scope": "lua",
		"prefix": "core:is_mod_loaded",
		"description": "core:is_mod_loaded()\n-  -\n\nReturns whether a mod with the supplied name is loaded.\n",
		"body": [
			"core:is_mod_loaded(${1:string mod name})"
		],
	},
	"docgen:core:get_advice_level": {
		"scope": "lua",
		"prefix": "get_advice_level",
		"description": "core:get_advice_level()\n-  -\n\nReturns the current advice level value.\n",
		"body": [
			"get_advice_level()"
		],
	},
	"docgen:core:core:get_advice_level": {
		"scope": "lua",
		"prefix": "core:get_advice_level",
		"description": "core:get_advice_level()\n-  -\n\nReturns the current advice level value.\n",
		"body": [
			"core:get_advice_level()"
		],
	},
	"docgen:core:is_advice_level_minimal": {
		"scope": "lua",
		"prefix": "is_advice_level_minimal",
		"description": "core:is_advice_level_minimal()\n-  -\n\nReturns whether the advice level is currently set to minimal.\n",
		"body": [
			"is_advice_level_minimal()"
		],
	},
	"docgen:core:core:is_advice_level_minimal": {
		"scope": "lua",
		"prefix": "core:is_advice_level_minimal",
		"description": "core:is_advice_level_minimal()\n-  -\n\nReturns whether the advice level is currently set to minimal.\n",
		"body": [
			"core:is_advice_level_minimal()"
		],
	},
	"docgen:core:is_advice_level_low": {
		"scope": "lua",
		"prefix": "is_advice_level_low",
		"description": "core:is_advice_level_low()\n-  -\n\nReturns whether the advice level is currently set to low.\n",
		"body": [
			"is_advice_level_low()"
		],
	},
	"docgen:core:core:is_advice_level_low": {
		"scope": "lua",
		"prefix": "core:is_advice_level_low",
		"description": "core:is_advice_level_low()\n-  -\n\nReturns whether the advice level is currently set to low.\n",
		"body": [
			"core:is_advice_level_low()"
		],
	},
	"docgen:core:is_advice_level_high": {
		"scope": "lua",
		"prefix": "is_advice_level_high",
		"description": "core:is_advice_level_high()\n-  -\n\nReturns whether the advice level is currently set to high.\n",
		"body": [
			"is_advice_level_high()"
		],
	},
	"docgen:core:core:is_advice_level_high": {
		"scope": "lua",
		"prefix": "core:is_advice_level_high",
		"description": "core:is_advice_level_high()\n-  -\n\nReturns whether the advice level is currently set to high.\n",
		"body": [
			"core:is_advice_level_high()"
		],
	},
	"docgen:core:get_svr": {
		"scope": "lua",
		"prefix": "get_svr",
		"description": "core:get_svr()\n-  -\n\nReturns a handle to the scripted value registry object.\n",
		"body": [
			"get_svr()"
		],
	},
	"docgen:core:core:get_svr": {
		"scope": "lua",
		"prefix": "core:get_svr",
		"description": "core:get_svr()\n-  -\n\nReturns a handle to the scripted value registry object.\n",
		"body": [
			"core:get_svr()"
		],
	},
	"docgen:core:svr_save_bool": {
		"scope": "lua",
		"prefix": "svr_save_bool",
		"description": "core:svr_save_bool()\n-  -\n\nSaves a boolean value to the svr.\n",
		"body": [
			"svr_save_bool(${1:string value name}, ${2:boolean value})"
		],
	},
	"docgen:core:core:svr_save_bool": {
		"scope": "lua",
		"prefix": "core:svr_save_bool",
		"description": "core:svr_save_bool()\n-  -\n\nSaves a boolean value to the svr.\n",
		"body": [
			"core:svr_save_bool(${1:string value name}, ${2:boolean value})"
		],
	},
	"docgen:core:svr_load_bool": {
		"scope": "lua",
		"prefix": "svr_load_bool",
		"description": "core:svr_load_bool()\n-  -\n\nRetrieves a boolean value from the svr.\n",
		"body": [
			"svr_load_bool(${1:string value name})"
		],
	},
	"docgen:core:core:svr_load_bool": {
		"scope": "lua",
		"prefix": "core:svr_load_bool",
		"description": "core:svr_load_bool()\n-  -\n\nRetrieves a boolean value from the svr.\n",
		"body": [
			"core:svr_load_bool(${1:string value name})"
		],
	},
	"docgen:core:svr_save_string": {
		"scope": "lua",
		"prefix": "svr_save_string",
		"description": "core:svr_save_string()\n-  -\n\nSaves a string value to the svr.\n",
		"body": [
			"svr_save_string(${1:string value name}, ${2:string value})"
		],
	},
	"docgen:core:core:svr_save_string": {
		"scope": "lua",
		"prefix": "core:svr_save_string",
		"description": "core:svr_save_string()\n-  -\n\nSaves a string value to the svr.\n",
		"body": [
			"core:svr_save_string(${1:string value name}, ${2:string value})"
		],
	},
	"docgen:core:svr_load_string": {
		"scope": "lua",
		"prefix": "svr_load_string",
		"description": "core:svr_load_string()\n-  -\n\nRetrieves a string value from the svr.\n",
		"body": [
			"svr_load_string(${1:string value name})"
		],
	},
	"docgen:core:core:svr_load_string": {
		"scope": "lua",
		"prefix": "core:svr_load_string",
		"description": "core:svr_load_string()\n-  -\n\nRetrieves a string value from the svr.\n",
		"body": [
			"core:svr_load_string(${1:string value name})"
		],
	},
	"docgen:core:svr_save_registry_bool": {
		"scope": "lua",
		"prefix": "svr_save_registry_bool",
		"description": "core:svr_save_registry_bool()\n-  -\n\nSaves a boolean value to the registry.\n",
		"body": [
			"svr_save_registry_bool(${1:string value name}, ${2:boolean value})"
		],
	},
	"docgen:core:core:svr_save_registry_bool": {
		"scope": "lua",
		"prefix": "core:svr_save_registry_bool",
		"description": "core:svr_save_registry_bool()\n-  -\n\nSaves a boolean value to the registry.\n",
		"body": [
			"core:svr_save_registry_bool(${1:string value name}, ${2:boolean value})"
		],
	},
	"docgen:core:svr_load_registry_bool": {
		"scope": "lua",
		"prefix": "svr_load_registry_bool",
		"description": "core:svr_load_registry_bool()\n-  -\n\nLoads a boolean value from the registry.\n",
		"body": [
			"svr_load_registry_bool(${1:string value name})"
		],
	},
	"docgen:core:core:svr_load_registry_bool": {
		"scope": "lua",
		"prefix": "core:svr_load_registry_bool",
		"description": "core:svr_load_registry_bool()\n-  -\n\nLoads a boolean value from the registry.\n",
		"body": [
			"core:svr_load_registry_bool(${1:string value name})"
		],
	},
	"docgen:core:show_fullscreen_highlight_around_components": {
		"scope": "lua",
		"prefix": "show_fullscreen_highlight_around_components",
		"description": "core:show_fullscreen_highlight_around_components()\n-  -\n\nShows a fullscreen highlight around a supplied component list.\n",
		"body": [
			"show_fullscreen_highlight_around_components(${1:number padding}, ${2:[opt=nil] string highlight text key Highlight text key}, ${3:... uicomponent list})"
		],
	},
	"docgen:core:core:show_fullscreen_highlight_around_components": {
		"scope": "lua",
		"prefix": "core:show_fullscreen_highlight_around_components",
		"description": "core:show_fullscreen_highlight_around_components()\n-  -\n\nShows a fullscreen highlight around a supplied component list.\n",
		"body": [
			"core:show_fullscreen_highlight_around_components(${1:number padding}, ${2:[opt=nil] string highlight text key Highlight text key}, ${3:... uicomponent list})"
		],
	},
	"docgen:core:hide_fullscreen_highlight": {
		"scope": "lua",
		"prefix": "hide_fullscreen_highlight",
		"description": "core:hide_fullscreen_highlight()\n-  -\n\nHides/destroys the active fullscreen highlight.\n",
		"body": [
			"hide_fullscreen_highlight()"
		],
	},
	"docgen:core:core:hide_fullscreen_highlight": {
		"scope": "lua",
		"prefix": "core:hide_fullscreen_highlight",
		"description": "core:hide_fullscreen_highlight()\n-  -\n\nHides/destroys the active fullscreen highlight.\n",
		"body": [
			"core:hide_fullscreen_highlight()"
		],
	},
	"docgen:core:set_fullscreen_highlight_interactive": {
		"scope": "lua",
		"prefix": "set_fullscreen_highlight_interactive",
		"description": "core:set_fullscreen_highlight_interactive()\n-  -\n\nSets the active fullscreen highlight to be interactive.\n",
		"body": [
			"set_fullscreen_highlight_interactive(${1:[opt=true] boolean value})"
		],
	},
	"docgen:core:core:set_fullscreen_highlight_interactive": {
		"scope": "lua",
		"prefix": "core:set_fullscreen_highlight_interactive",
		"description": "core:set_fullscreen_highlight_interactive()\n-  -\n\nSets the active fullscreen highlight to be interactive.\n",
		"body": [
			"core:set_fullscreen_highlight_interactive(${1:[opt=true] boolean value})"
		],
	},
	"docgen:core:cache_and_set_advisor_priority": {
		"scope": "lua",
		"prefix": "cache_and_set_advisor_priority",
		"description": "core:cache_and_set_advisor_priority()\n-  -\n\nSets the advisor priority to the supplied value, and caches the value previously set.\n",
		"body": [
			"cache_and_set_advisor_priority()"
		],
	},
	"docgen:core:core:cache_and_set_advisor_priority": {
		"scope": "lua",
		"prefix": "core:cache_and_set_advisor_priority",
		"description": "core:cache_and_set_advisor_priority()\n-  -\n\nSets the advisor priority to the supplied value, and caches the value previously set.\n",
		"body": [
			"core:cache_and_set_advisor_priority()"
		],
	},
	"docgen:core:restore_advisor_priority": {
		"scope": "lua",
		"prefix": "restore_advisor_priority",
		"description": "core:restore_advisor_priority()\n-  -\n\nRestores the advisor priority to a value previously cached with <code>cache_and_set_advisor_priority</code>.\n",
		"body": [
			"restore_advisor_priority()"
		],
	},
	"docgen:core:core:restore_advisor_priority": {
		"scope": "lua",
		"prefix": "core:restore_advisor_priority",
		"description": "core:restore_advisor_priority()\n-  -\n\nRestores the advisor priority to a value previously cached with <code>cache_and_set_advisor_priority</code>.\n",
		"body": [
			"core:restore_advisor_priority()"
		],
	},
	"docgen:core:get_or_create_component": {
		"scope": "lua",
		"prefix": "get_or_create_component",
		"description": "core:get_or_create_component()\n-  -\n\nCreates a UI component with the supplied name, or retrieves it if it's already been created.\n",
		"body": [
			"get_or_create_component(${1:string name}, ${2:string file path}, ${3:[opt=ui_root] uicomponent parent})"
		],
	},
	"docgen:core:core:get_or_create_component": {
		"scope": "lua",
		"prefix": "core:get_or_create_component",
		"description": "core:get_or_create_component()\n-  -\n\nCreates a UI component with the supplied name, or retrieves it if it's already been created.\n",
		"body": [
			"core:get_or_create_component(${1:string name}, ${2:string file path}, ${3:[opt=ui_root] uicomponent parent})"
		],
	},
	"docgen:core:add_listener": {
		"scope": "lua",
		"prefix": "add_listener",
		"description": "core:add_listener()\n-  -\n\nAdds a listener for an event.\n",
		"body": [
			"add_listener(${1:string listener name}, ${2:string event name}, ${3:function conditional test}, ${4:function target callback}, ${5:boolean listener persists after target callback called})"
		],
	},
	"docgen:core:core:add_listener": {
		"scope": "lua",
		"prefix": "core:add_listener",
		"description": "core:add_listener()\n-  -\n\nAdds a listener for an event.\n",
		"body": [
			"core:add_listener(${1:string listener name}, ${2:string event name}, ${3:function conditional test}, ${4:function target callback}, ${5:boolean listener persists after target callback called})"
		],
	},
	"docgen:core:remove_listener": {
		"scope": "lua",
		"prefix": "remove_listener",
		"description": "core:remove_listener()\n-  -\n\nRemoves and stops any event listeners with the specified name.\n",
		"body": [
			"remove_listener(${1:string listener name})"
		],
	},
	"docgen:core:core:remove_listener": {
		"scope": "lua",
		"prefix": "core:remove_listener",
		"description": "core:remove_listener()\n-  -\n\nRemoves and stops any event listeners with the specified name.\n",
		"body": [
			"core:remove_listener(${1:string listener name})"
		],
	},
	"docgen:core:trigger_event": {
		"scope": "lua",
		"prefix": "trigger_event",
		"description": "core:trigger_event()\n-  -\n\nTriggers an event from script, to which event listeners will respond.\n",
		"body": [
			"trigger_event(${1:string event name}, ${2:... context data items})"
		],
	},
	"docgen:core:core:trigger_event": {
		"scope": "lua",
		"prefix": "core:trigger_event",
		"description": "core:trigger_event()\n-  -\n\nTriggers an event from script, to which event listeners will respond.\n",
		"body": [
			"core:trigger_event(${1:string event name}, ${2:... context data items})"
		],
	},
	"docgen:core:start_custom_event_generator": {
		"scope": "lua",
		"prefix": "start_custom_event_generator",
		"description": "core:start_custom_event_generator()\n-  -\n\nAdds a custom event generator.\n",
		"body": [
			"start_custom_event_generator(${1:string source event}, ${2:function condition}, ${3:string target event}, ${4:[opt=nil] function context generator})"
		],
	},
	"docgen:core:core:start_custom_event_generator": {
		"scope": "lua",
		"prefix": "core:start_custom_event_generator",
		"description": "core:start_custom_event_generator()\n-  -\n\nAdds a custom event generator.\n",
		"body": [
			"core:start_custom_event_generator(${1:string source event}, ${2:function condition}, ${3:string target event}, ${4:[opt=nil] function context generator})"
		],
	},
	"docgen:core:stop_custom_event_generator": {
		"scope": "lua",
		"prefix": "stop_custom_event_generator",
		"description": "core:stop_custom_event_generator()\n-  -\n\nStops a custom event generator, by the name of the target event.\n",
		"body": [
			"stop_custom_event_generator()"
		],
	},
	"docgen:core:core:stop_custom_event_generator": {
		"scope": "lua",
		"prefix": "core:stop_custom_event_generator",
		"description": "core:stop_custom_event_generator()\n-  -\n\nStops a custom event generator, by the name of the target event.\n",
		"body": [
			"core:stop_custom_event_generator()"
		],
	},
	"docgen:core:monitor_performance": {
		"scope": "lua",
		"prefix": "monitor_performance",
		"description": "core:monitor_performance()\n-  -\n\nImmediately calls a supplied function, and monitors how long it takes to complete.\n",
		"body": [
			"monitor_performance(${1:function function to call}, ${2:number time limit in s}, ${3:string name})"
		],
	},
	"docgen:core:core:monitor_performance": {
		"scope": "lua",
		"prefix": "core:monitor_performance",
		"description": "core:monitor_performance()\n-  -\n\nImmediately calls a supplied function, and monitors how long it takes to complete.\n",
		"body": [
			"core:monitor_performance(${1:function function to call}, ${2:number time limit in s}, ${3:string name})"
		],
	},
	"docgen:core:call_limited": {
		"scope": "lua",
		"prefix": "call_limited",
		"description": "core:call_limited()\n-  -\n\nCalls the supplied function if the number of previously function calls with the supplied name is less than the supplied limit.\n",
		"body": [
			"call_limited(${1:string name}, ${2:function callback}, ${3:[opt=1] number quantity})"
		],
	},
	"docgen:core:core:call_limited": {
		"scope": "lua",
		"prefix": "core:call_limited",
		"description": "core:call_limited()\n-  -\n\nCalls the supplied function if the number of previously function calls with the supplied name is less than the supplied limit.\n",
		"body": [
			"core:call_limited(${1:string name}, ${2:function callback}, ${3:[opt=1] number quantity})"
		],
	},
	"docgen:core:call_once": {
		"scope": "lua",
		"prefix": "call_once",
		"description": "core:call_once()\n-  -\n\nCalls the supplied function if no function with the supplied name has previously been called by <code>call_once</code> or core:call_limited.\n",
		"body": [
			"call_once(${1:string name}, ${2:function callback})"
		],
	},
	"docgen:core:core:call_once": {
		"scope": "lua",
		"prefix": "core:call_once",
		"description": "core:call_once()\n-  -\n\nCalls the supplied function if no function with the supplied name has previously been called by <code>call_once</code> or core:call_limited.\n",
		"body": [
			"core:call_once(${1:string name}, ${2:function callback})"
		],
	},
	"docgen:core:is_text_pointer_name_registered": {
		"scope": "lua",
		"prefix": "is_text_pointer_name_registered",
		"description": "core:is_text_pointer_name_registered()\n-  -\n\nReturns true if a text pointer with the supplied name has already been registered, false otherwise.\n",
		"body": [
			"is_text_pointer_name_registered(${1:string text pointer name})"
		],
	},
	"docgen:core:core:is_text_pointer_name_registered": {
		"scope": "lua",
		"prefix": "core:is_text_pointer_name_registered",
		"description": "core:is_text_pointer_name_registered()\n-  -\n\nReturns true if a text pointer with the supplied name has already been registered, false otherwise.\n",
		"body": [
			"core:is_text_pointer_name_registered(${1:string text pointer name})"
		],
	},
	"docgen:core:register_text_pointer_name": {
		"scope": "lua",
		"prefix": "register_text_pointer_name",
		"description": "core:register_text_pointer_name()\n-  -\n\nRegisters a text pointer with the supplied name.\n",
		"body": [
			"register_text_pointer_name(${1:string text pointer name})"
		],
	},
	"docgen:core:core:register_text_pointer_name": {
		"scope": "lua",
		"prefix": "core:register_text_pointer_name",
		"description": "core:register_text_pointer_name()\n-  -\n\nRegisters a text pointer with the supplied name.\n",
		"body": [
			"core:register_text_pointer_name(${1:string text pointer name})"
		],
	},
	"docgen:core:hide_all_text_pointers": {
		"scope": "lua",
		"prefix": "hide_all_text_pointers",
		"description": "core:hide_all_text_pointers()\n-  -\n\nHide any text_pointer's current visible.\n",
		"body": [
			"hide_all_text_pointers()"
		],
	},
	"docgen:core:core:hide_all_text_pointers": {
		"scope": "lua",
		"prefix": "core:hide_all_text_pointers",
		"description": "core:hide_all_text_pointers()\n-  -\n\nHide any text_pointer's current visible.\n",
		"body": [
			"core:hide_all_text_pointers()"
		],
	},
	"docgen:core:get_unique_counter": {
		"scope": "lua",
		"prefix": "get_unique_counter",
		"description": "core:get_unique_counter()\n-  -\n\nRetrieves a unique integer number.\n",
		"body": [
			"get_unique_counter()"
		],
	},
	"docgen:core:core:get_unique_counter": {
		"scope": "lua",
		"prefix": "core:get_unique_counter",
		"description": "core:get_unique_counter()\n-  -\n\nRetrieves a unique integer number.\n",
		"body": [
			"core:get_unique_counter()"
		],
	},
	"docgen:core:progress_on_loading_screen_dismissed": {
		"scope": "lua",
		"prefix": "progress_on_loading_screen_dismissed",
		"description": "core:progress_on_loading_screen_dismissed()\n-  -\n\nCalls the supplied callback once the loading screen has been dismissed.\n",
		"body": [
			"progress_on_loading_screen_dismissed(${1:function callback})"
		],
	},
	"docgen:core:core:progress_on_loading_screen_dismissed": {
		"scope": "lua",
		"prefix": "core:progress_on_loading_screen_dismissed",
		"description": "core:progress_on_loading_screen_dismissed()\n-  -\n\nCalls the supplied callback once the loading screen has been dismissed.\n",
		"body": [
			"core:progress_on_loading_screen_dismissed(${1:function callback})"
		],
	},
	"docgen:core:progress_on_uicomponent_animation_finished": {
		"scope": "lua",
		"prefix": "progress_on_uicomponent_animation_finished",
		"description": "core:progress_on_uicomponent_animation_finished()\n-  -\n\nCalls the supplied callback once the supplied component has finished animating.\n",
		"body": [
			"progress_on_uicomponent_animation_finished(${1:uicomponent uicomponent}, ${2:function callback})"
		],
	},
	"docgen:core:core:progress_on_uicomponent_animation_finished": {
		"scope": "lua",
		"prefix": "core:progress_on_uicomponent_animation_finished",
		"description": "core:progress_on_uicomponent_animation_finished()\n-  -\n\nCalls the supplied callback once the supplied component has finished animating.\n",
		"body": [
			"core:progress_on_uicomponent_animation_finished(${1:uicomponent uicomponent}, ${2:function callback})"
		],
	},
	"docgen:core:progress_on_uicomponent_animation": {
		"scope": "lua",
		"prefix": "progress_on_uicomponent_animation",
		"description": "core:progress_on_uicomponent_animation()\n-  -\n\nCalls the supplied callback when the active animation on the supplied uicomponent returns a certain string.\n",
		"body": [
			"progress_on_uicomponent_animation(${1:string unique name}, ${2:uicomponent uicomponent}, ${3:function callback}, ${4:[opt=0] number callback delay}, ${5:[opt=\"\"] string animation name})"
		],
	},
	"docgen:core:core:progress_on_uicomponent_animation": {
		"scope": "lua",
		"prefix": "core:progress_on_uicomponent_animation",
		"description": "core:progress_on_uicomponent_animation()\n-  -\n\nCalls the supplied callback when the active animation on the supplied uicomponent returns a certain string.\n",
		"body": [
			"core:progress_on_uicomponent_animation(${1:string unique name}, ${2:uicomponent uicomponent}, ${3:function callback}, ${4:[opt=0] number callback delay}, ${5:[opt=\"\"] string animation name})"
		],
	},
	"docgen:core:cancel_progress_on_uicomponent_animation": {
		"scope": "lua",
		"prefix": "cancel_progress_on_uicomponent_animation",
		"description": "core:cancel_progress_on_uicomponent_animation()\n-  -\n\nCancels a monitor started with core:progress_on_uicomponent_animation by name.\n",
		"body": [
			"cancel_progress_on_uicomponent_animation(${1:string unique name})"
		],
	},
	"docgen:core:core:cancel_progress_on_uicomponent_animation": {
		"scope": "lua",
		"prefix": "core:cancel_progress_on_uicomponent_animation",
		"description": "core:cancel_progress_on_uicomponent_animation()\n-  -\n\nCancels a monitor started with core:progress_on_uicomponent_animation by name.\n",
		"body": [
			"core:cancel_progress_on_uicomponent_animation(${1:string unique name})"
		],
	},
	"docgen:core:cache_and_set_tooltip_for_component_state": {
		"scope": "lua",
		"prefix": "cache_and_set_tooltip_for_component_state",
		"description": "core:cache_and_set_tooltip_for_component_state()\n-  -\n\nCaches and sets the tooltip for a particular state of a component.\n",
		"body": [
			"cache_and_set_tooltip_for_component_state(${1:uicomponent subject uicomponent}, ${2:string state name}, ${3:string text key})"
		],
	},
	"docgen:core:core:cache_and_set_tooltip_for_component_state": {
		"scope": "lua",
		"prefix": "core:cache_and_set_tooltip_for_component_state",
		"description": "core:cache_and_set_tooltip_for_component_state()\n-  -\n\nCaches and sets the tooltip for a particular state of a component.\n",
		"body": [
			"core:cache_and_set_tooltip_for_component_state(${1:uicomponent subject uicomponent}, ${2:string state name}, ${3:string text key})"
		],
	},
	"docgen:core:restore_tooltip_for_component_state": {
		"scope": "lua",
		"prefix": "restore_tooltip_for_component_state",
		"description": "core:restore_tooltip_for_component_state()\n-  -\n\nRestores a tooltip for a uicomponent state that's been previously modified with <code>cache_and_set_tooltip_for_component_state</code>.\n",
		"body": [
			"restore_tooltip_for_component_state(${1:uicomponent subject uicomponent}, ${2:string state name})"
		],
	},
	"docgen:core:core:restore_tooltip_for_component_state": {
		"scope": "lua",
		"prefix": "core:restore_tooltip_for_component_state",
		"description": "core:restore_tooltip_for_component_state()\n-  -\n\nRestores a tooltip for a uicomponent state that's been previously modified with <code>cache_and_set_tooltip_for_component_state</code>.\n",
		"body": [
			"core:restore_tooltip_for_component_state(${1:uicomponent subject uicomponent}, ${2:string state name})"
		],
	},
	"docgen:core:strip_tags_from_localised_text": {
		"scope": "lua",
		"prefix": "strip_tags_from_localised_text",
		"description": "core:strip_tags_from_localised_text()\n-  -\n\nStrips any tags out of a localised text string.\n",
		"body": [
			"strip_tags_from_localised_text(${1:string text})"
		],
	},
	"docgen:core:core:strip_tags_from_localised_text": {
		"scope": "lua",
		"prefix": "core:strip_tags_from_localised_text",
		"description": "core:strip_tags_from_localised_text()\n-  -\n\nStrips any tags out of a localised text string.\n",
		"body": [
			"core:strip_tags_from_localised_text(${1:string text})"
		],
	},
	"docgen:core:check_bit": {
		"scope": "lua",
		"prefix": "check_bit",
		"description": "core:check_bit()\n-  -\n\nTakes a number value and a numeric bit position.\n",
		"body": [
			"check_bit(${1:number subject value}, ${2:integer bit position})"
		],
	},
	"docgen:core:core:check_bit": {
		"scope": "lua",
		"prefix": "core:check_bit",
		"description": "core:check_bit()\n-  -\n\nTakes a number value and a numeric bit position.\n",
		"body": [
			"core:check_bit(${1:number subject value}, ${2:integer bit position})"
		],
	},
	"docgen:core:add_static_object": {
		"scope": "lua",
		"prefix": "add_static_object",
		"description": "core:add_static_object()\n-  -\n\nRegisters a static object by a string name, which can be retrieved later with core:get_static_object.\n",
		"body": [
			"add_static_object(${1:string object name}, ${2:object object to register}, ${3:[opt=false] boolean overwrite})"
		],
	},
	"docgen:core:core:add_static_object": {
		"scope": "lua",
		"prefix": "core:add_static_object",
		"description": "core:add_static_object()\n-  -\n\nRegisters a static object by a string name, which can be retrieved later with core:get_static_object.\n",
		"body": [
			"core:add_static_object(${1:string object name}, ${2:object object to register}, ${3:[opt=false] boolean overwrite})"
		],
	},
	"docgen:core:get_static_object": {
		"scope": "lua",
		"prefix": "get_static_object",
		"description": "core:get_static_object()\n-  -\n\nReturns the static object registered with the supplied string name using core:add_static_object, if any such object has been registered, otherwise it returns nil.\n",
		"body": [
			"get_static_object(${1:string object name})"
		],
	},
	"docgen:core:core:get_static_object": {
		"scope": "lua",
		"prefix": "core:get_static_object",
		"description": "core:get_static_object()\n-  -\n\nReturns the static object registered with the supplied string name using core:add_static_object, if any such object has been registered, otherwise it returns nil.\n",
		"body": [
			"core:get_static_object(${1:string object name})"
		],
	},
	"docgen:custom_context:new": {
		"scope": "lua",
		"prefix": "new",
		"description": "custom_context:new()\n-  -\n\nCreates a custom context object.\n",
		"body": [
			"new()"
		],
	},
	"docgen:custom_context:custom_context:new": {
		"scope": "lua",
		"prefix": "custom_context:new",
		"description": "custom_context:new()\n-  -\n\nCreates a custom context object.\n",
		"body": [
			"custom_context:new()"
		],
	},
	"docgen:custom_context:add_data": {
		"scope": "lua",
		"prefix": "add_data",
		"description": "custom_context:add_data()\n-  -\n\nadds data to the custom context object.\n",
		"body": [
			"add_data(${1:object context data})"
		],
	},
	"docgen:custom_context:custom_context:add_data": {
		"scope": "lua",
		"prefix": "custom_context:add_data",
		"description": "custom_context:add_data()\n-  -\n\nadds data to the custom context object.\n",
		"body": [
			"custom_context:add_data(${1:object context data})"
		],
	},
	"docgen:custom_context:table_data": {
		"scope": "lua",
		"prefix": "table_data",
		"description": "custom_context:table_data()\n-  -\n\nCalled by the receiving script to retrieve the table placed on the custom context, were one specified by the script that created it.\n",
		"body": [
			"table_data()"
		],
	},
	"docgen:custom_context:custom_context:table_data": {
		"scope": "lua",
		"prefix": "custom_context:table_data",
		"description": "custom_context:table_data()\n-  -\n\nCalled by the receiving script to retrieve the table placed on the custom context, were one specified by the script that created it.\n",
		"body": [
			"custom_context:table_data()"
		],
	},
	"docgen:custom_context:region": {
		"scope": "lua",
		"prefix": "region",
		"description": "custom_context:region()\n-  -\n\nCalled by the receiving script to retrieve the region object placed on the custom context, were one specified by the script that created it.\n",
		"body": [
			"region()"
		],
	},
	"docgen:custom_context:custom_context:region": {
		"scope": "lua",
		"prefix": "custom_context:region",
		"description": "custom_context:region()\n-  -\n\nCalled by the receiving script to retrieve the region object placed on the custom context, were one specified by the script that created it.\n",
		"body": [
			"custom_context:region()"
		],
	},
	"docgen:custom_context:character": {
		"scope": "lua",
		"prefix": "character",
		"description": "custom_context:character()\n-  -\n\nCalled by the receiving script to retrieve the character object placed on the custom context, were one specified by the script that created it.\n",
		"body": [
			"character()"
		],
	},
	"docgen:custom_context:custom_context:character": {
		"scope": "lua",
		"prefix": "custom_context:character",
		"description": "custom_context:character()\n-  -\n\nCalled by the receiving script to retrieve the character object placed on the custom context, were one specified by the script that created it.\n",
		"body": [
			"custom_context:character()"
		],
	},
	"docgen:custom_context:target_character": {
		"scope": "lua",
		"prefix": "target_character",
		"description": "custom_context:target_character()\n-  -\n\nCalled by the receiving script to retrieve the target character object placed on the custom context, were one specified by the script that created it.\n",
		"body": [
			"target_character()"
		],
	},
	"docgen:custom_context:custom_context:target_character": {
		"scope": "lua",
		"prefix": "custom_context:target_character",
		"description": "custom_context:target_character()\n-  -\n\nCalled by the receiving script to retrieve the target character object placed on the custom context, were one specified by the script that created it.\n",
		"body": [
			"custom_context:target_character()"
		],
	},
	"docgen:custom_context:faction": {
		"scope": "lua",
		"prefix": "faction",
		"description": "custom_context:faction()\n-  -\n\nCalled by the receiving script to retrieve the faction object placed on the custom context, were one specified by the script that created it.\n",
		"body": [
			"faction()"
		],
	},
	"docgen:custom_context:custom_context:faction": {
		"scope": "lua",
		"prefix": "custom_context:faction",
		"description": "custom_context:faction()\n-  -\n\nCalled by the receiving script to retrieve the faction object placed on the custom context, were one specified by the script that created it.\n",
		"body": [
			"custom_context:faction()"
		],
	},
	"docgen:custom_context:component": {
		"scope": "lua",
		"prefix": "component",
		"description": "custom_context:component()\n-  -\n\nCalled by the receiving script to retrieve the component object placed on the custom context, were one specified by the script that created it.\n",
		"body": [
			"component()"
		],
	},
	"docgen:custom_context:custom_context:component": {
		"scope": "lua",
		"prefix": "custom_context:component",
		"description": "custom_context:component()\n-  -\n\nCalled by the receiving script to retrieve the component object placed on the custom context, were one specified by the script that created it.\n",
		"body": [
			"custom_context:component()"
		],
	},
	"docgen:custom_context:military_force": {
		"scope": "lua",
		"prefix": "military_force",
		"description": "custom_context:military_force()\n-  -\n\nCalled by the receiving script to retrieve the military force object placed on the custom context, were one specified by the script that created it.\n",
		"body": [
			"military_force()"
		],
	},
	"docgen:custom_context:custom_context:military_force": {
		"scope": "lua",
		"prefix": "custom_context:military_force",
		"description": "custom_context:military_force()\n-  -\n\nCalled by the receiving script to retrieve the military force object placed on the custom context, were one specified by the script that created it.\n",
		"body": [
			"custom_context:military_force()"
		],
	},
	"docgen:custom_context:pending_battle": {
		"scope": "lua",
		"prefix": "pending_battle",
		"description": "custom_context:pending_battle()\n-  -\n\nCalled by the receiving script to retrieve the pending battle object placed on the custom context, were one specified by the script that created it.\n",
		"body": [
			"pending_battle()"
		],
	},
	"docgen:custom_context:custom_context:pending_battle": {
		"scope": "lua",
		"prefix": "custom_context:pending_battle",
		"description": "custom_context:pending_battle()\n-  -\n\nCalled by the receiving script to retrieve the pending battle object placed on the custom context, were one specified by the script that created it.\n",
		"body": [
			"custom_context:pending_battle()"
		],
	},
	"docgen:custom_context:garrison_residence": {
		"scope": "lua",
		"prefix": "garrison_residence",
		"description": "custom_context:garrison_residence()\n-  -\n\nCalled by the receiving script to retrieve the garrison residence object placed on the custom context, were one specified by the script that created it.\n",
		"body": [
			"garrison_residence()"
		],
	},
	"docgen:custom_context:custom_context:garrison_residence": {
		"scope": "lua",
		"prefix": "custom_context:garrison_residence",
		"description": "custom_context:garrison_residence()\n-  -\n\nCalled by the receiving script to retrieve the garrison residence object placed on the custom context, were one specified by the script that created it.\n",
		"body": [
			"custom_context:garrison_residence()"
		],
	},
	"docgen:custom_context:building": {
		"scope": "lua",
		"prefix": "building",
		"description": "custom_context:building()\n-  -\n\nCalled by the receiving script to retrieve the building object placed on the custom context, were one specified by the script that created it.\n",
		"body": [
			"building()"
		],
	},
	"docgen:custom_context:custom_context:building": {
		"scope": "lua",
		"prefix": "custom_context:building",
		"description": "custom_context:building()\n-  -\n\nCalled by the receiving script to retrieve the building object placed on the custom context, were one specified by the script that created it.\n",
		"body": [
			"custom_context:building()"
		],
	},
	"docgen:custom_context:vector": {
		"scope": "lua",
		"prefix": "vector",
		"description": "custom_context:vector()\n-  -\n\nCalled by the receiving script to retrieve the vector object placed on the custom context, were one specified by the script that created it.\n",
		"body": [
			"vector()"
		],
	},
	"docgen:custom_context:custom_context:vector": {
		"scope": "lua",
		"prefix": "custom_context:vector",
		"description": "custom_context:vector()\n-  -\n\nCalled by the receiving script to retrieve the vector object placed on the custom context, were one specified by the script that created it.\n",
		"body": [
			"custom_context:vector()"
		],
	},
	"docgen:generated_battle:new": {
		"scope": "lua",
		"prefix": "new",
		"description": "generated_battle:new()\n-  -\n\nCreates a generated_battle.\n",
		"body": [
			"new(${1:[opt=false] boolean screen starts black}, ${2:[opt=false] boolean prevent player deployment}, ${3:[opt=false] boolean prevent ai deployment}, ${4:[opt=nil] function intro cutscene}, ${5:[opt=false] boolean debug mode})"
		],
	},
	"docgen:generated_battle:generated_battle:new": {
		"scope": "lua",
		"prefix": "generated_battle:new",
		"description": "generated_battle:new()\n-  -\n\nCreates a generated_battle.\n",
		"body": [
			"generated_battle:new(${1:[opt=false] boolean screen starts black}, ${2:[opt=false] boolean prevent player deployment}, ${3:[opt=false] boolean prevent ai deployment}, ${4:[opt=nil] function intro cutscene}, ${5:[opt=false] boolean debug mode})"
		],
	},
	"docgen:generated_battle:gb:new": {
		"scope": "lua",
		"prefix": "gb:new",
		"description": "generated_battle:new()\n-  -\n\nCreates a generated_battle.\n",
		"body": [
			"gb:new(${1:[opt=false] boolean screen starts black}, ${2:[opt=false] boolean prevent player deployment}, ${3:[opt=false] boolean prevent ai deployment}, ${4:[opt=nil] function intro cutscene}, ${5:[opt=false] boolean debug mode})"
		],
	},
	"docgen:generated_battle:set_cutscene_during_deployment": {
		"scope": "lua",
		"prefix": "set_cutscene_during_deployment",
		"description": "generated_battle:set_cutscene_during_deployment()\n-  -\n\nSets the supplied intro cutscene callback specified in generated_battle:new to play at the start of deployment, rather than at the end.\n",
		"body": [
			"set_cutscene_during_deployment(${1:[opt=true] boolean play in deployment})"
		],
	},
	"docgen:generated_battle:generated_battle:set_cutscene_during_deployment": {
		"scope": "lua",
		"prefix": "generated_battle:set_cutscene_during_deployment",
		"description": "generated_battle:set_cutscene_during_deployment()\n-  -\n\nSets the supplied intro cutscene callback specified in generated_battle:new to play at the start of deployment, rather than at the end.\n",
		"body": [
			"generated_battle:set_cutscene_during_deployment(${1:[opt=true] boolean play in deployment})"
		],
	},
	"docgen:generated_battle:gb:set_cutscene_during_deployment": {
		"scope": "lua",
		"prefix": "gb:set_cutscene_during_deployment",
		"description": "generated_battle:set_cutscene_during_deployment()\n-  -\n\nSets the supplied intro cutscene callback specified in generated_battle:new to play at the start of deployment, rather than at the end.\n",
		"body": [
			"gb:set_cutscene_during_deployment(${1:[opt=true] boolean play in deployment})"
		],
	},
	"docgen:generated_battle:has_battle_started": {
		"scope": "lua",
		"prefix": "has_battle_started",
		"description": "generated_battle:has_battle_started()\n-  -\n\nReturns <code>true</code> if the combat phase of the battle has started, <code>false</code> otherwise.\n",
		"body": [
			"has_battle_started()"
		],
	},
	"docgen:generated_battle:generated_battle:has_battle_started": {
		"scope": "lua",
		"prefix": "generated_battle:has_battle_started",
		"description": "generated_battle:has_battle_started()\n-  -\n\nReturns <code>true</code> if the combat phase of the battle has started, <code>false</code> otherwise.\n",
		"body": [
			"generated_battle:has_battle_started()"
		],
	},
	"docgen:generated_battle:gb:has_battle_started": {
		"scope": "lua",
		"prefix": "gb:has_battle_started",
		"description": "generated_battle:has_battle_started()\n-  -\n\nReturns <code>true</code> if the combat phase of the battle has started, <code>false</code> otherwise.\n",
		"body": [
			"gb:has_battle_started()"
		],
	},
	"docgen:generated_battle:get_player_alliance_num": {
		"scope": "lua",
		"prefix": "get_player_alliance_num",
		"description": "generated_battle:get_player_alliance_num()\n-  -\n\nReturns the index of the alliance the player is a part of.\n",
		"body": [
			"get_player_alliance_num()"
		],
	},
	"docgen:generated_battle:generated_battle:get_player_alliance_num": {
		"scope": "lua",
		"prefix": "generated_battle:get_player_alliance_num",
		"description": "generated_battle:get_player_alliance_num()\n-  -\n\nReturns the index of the alliance the player is a part of.\n",
		"body": [
			"generated_battle:get_player_alliance_num()"
		],
	},
	"docgen:generated_battle:gb:get_player_alliance_num": {
		"scope": "lua",
		"prefix": "gb:get_player_alliance_num",
		"description": "generated_battle:get_player_alliance_num()\n-  -\n\nReturns the index of the alliance the player is a part of.\n",
		"body": [
			"gb:get_player_alliance_num()"
		],
	},
	"docgen:generated_battle:get_non_player_alliance_num": {
		"scope": "lua",
		"prefix": "get_non_player_alliance_num",
		"description": "generated_battle:get_non_player_alliance_num()\n-  -\n\nReturns the index of the enemy alliance to the player.\n",
		"body": [
			"get_non_player_alliance_num()"
		],
	},
	"docgen:generated_battle:generated_battle:get_non_player_alliance_num": {
		"scope": "lua",
		"prefix": "generated_battle:get_non_player_alliance_num",
		"description": "generated_battle:get_non_player_alliance_num()\n-  -\n\nReturns the index of the enemy alliance to the player.\n",
		"body": [
			"generated_battle:get_non_player_alliance_num()"
		],
	},
	"docgen:generated_battle:gb:get_non_player_alliance_num": {
		"scope": "lua",
		"prefix": "gb:get_non_player_alliance_num",
		"description": "generated_battle:get_non_player_alliance_num()\n-  -\n\nReturns the index of the enemy alliance to the player.\n",
		"body": [
			"gb:get_non_player_alliance_num()"
		],
	},
	"docgen:generated_battle:get_army": {
		"scope": "lua",
		"prefix": "get_army",
		"description": "generated_battle:get_army()\n-  -\n\nReturns a generated_army corresponding to the supplied arguments.\n",
		"body": [
			"get_army()"
		],
	},
	"docgen:generated_battle:generated_battle:get_army": {
		"scope": "lua",
		"prefix": "generated_battle:get_army",
		"description": "generated_battle:get_army()\n-  -\n\nReturns a generated_army corresponding to the supplied arguments.\n",
		"body": [
			"generated_battle:get_army()"
		],
	},
	"docgen:generated_battle:gb:get_army": {
		"scope": "lua",
		"prefix": "gb:get_army",
		"description": "generated_battle:get_army()\n-  -\n\nReturns a generated_army corresponding to the supplied arguments.\n",
		"body": [
			"gb:get_army()"
		],
	},
	"docgen:generated_battle:add_listener": {
		"scope": "lua",
		"prefix": "add_listener",
		"description": "generated_battle:add_listener()\n-  -\n\nAllows the generated_battle object to listen for a message and trigger an arbitrary callback.\n",
		"body": [
			"add_listener(${1:string message name}, ${2:function callback to call}, ${3:[opt=false] boolean persistent})"
		],
	},
	"docgen:generated_battle:generated_battle:add_listener": {
		"scope": "lua",
		"prefix": "generated_battle:add_listener",
		"description": "generated_battle:add_listener()\n-  -\n\nAllows the generated_battle object to listen for a message and trigger an arbitrary callback.\n",
		"body": [
			"generated_battle:add_listener(${1:string message name}, ${2:function callback to call}, ${3:[opt=false] boolean persistent})"
		],
	},
	"docgen:generated_battle:gb:add_listener": {
		"scope": "lua",
		"prefix": "gb:add_listener",
		"description": "generated_battle:add_listener()\n-  -\n\nAllows the generated_battle object to listen for a message and trigger an arbitrary callback.\n",
		"body": [
			"gb:add_listener(${1:string message name}, ${2:function callback to call}, ${3:[opt=false] boolean persistent})"
		],
	},
	"docgen:generated_battle:remove_listener": {
		"scope": "lua",
		"prefix": "remove_listener",
		"description": "generated_battle:remove_listener()\n-  -\n\nRemoves any listener listening for a particular message.\n",
		"body": [
			"remove_listener(${1:string message name})"
		],
	},
	"docgen:generated_battle:generated_battle:remove_listener": {
		"scope": "lua",
		"prefix": "generated_battle:remove_listener",
		"description": "generated_battle:remove_listener()\n-  -\n\nRemoves any listener listening for a particular message.\n",
		"body": [
			"generated_battle:remove_listener(${1:string message name})"
		],
	},
	"docgen:generated_battle:gb:remove_listener": {
		"scope": "lua",
		"prefix": "gb:remove_listener",
		"description": "generated_battle:remove_listener()\n-  -\n\nRemoves any listener listening for a particular message.\n",
		"body": [
			"gb:remove_listener(${1:string message name})"
		],
	},
	"docgen:generated_battle:advice_on_message": {
		"scope": "lua",
		"prefix": "advice_on_message",
		"description": "generated_battle:advice_on_message()\n-  -\n\nTakes a string message, a string advice key, and an optional time offset in ms.\n",
		"body": [
			"advice_on_message(${1:string message}, ${2:string advice key}, ${3:[opt=0] number wait offset in ms})"
		],
	},
	"docgen:generated_battle:generated_battle:advice_on_message": {
		"scope": "lua",
		"prefix": "generated_battle:advice_on_message",
		"description": "generated_battle:advice_on_message()\n-  -\n\nTakes a string message, a string advice key, and an optional time offset in ms.\n",
		"body": [
			"generated_battle:advice_on_message(${1:string message}, ${2:string advice key}, ${3:[opt=0] number wait offset in ms})"
		],
	},
	"docgen:generated_battle:gb:advice_on_message": {
		"scope": "lua",
		"prefix": "gb:advice_on_message",
		"description": "generated_battle:advice_on_message()\n-  -\n\nTakes a string message, a string advice key, and an optional time offset in ms.\n",
		"body": [
			"gb:advice_on_message(${1:string message}, ${2:string advice key}, ${3:[opt=0] number wait offset in ms})"
		],
	},
	"docgen:generated_battle:play_sound_on_message": {
		"scope": "lua",
		"prefix": "play_sound_on_message",
		"description": "generated_battle:play_sound_on_message()\n-  -\n\nInstruct the generated_battle to play a sound on receipt of a message.\n",
		"body": [
			"play_sound_on_message(${1:string message}, ${2:battle_sound_effect sound}, ${3:[opt=nil] vector position}, ${4:[opt=0] number wait offset}, ${5:[opt=nil] string end message}, ${6:[opt=500] number minimum duration})"
		],
	},
	"docgen:generated_battle:generated_battle:play_sound_on_message": {
		"scope": "lua",
		"prefix": "generated_battle:play_sound_on_message",
		"description": "generated_battle:play_sound_on_message()\n-  -\n\nInstruct the generated_battle to play a sound on receipt of a message.\n",
		"body": [
			"generated_battle:play_sound_on_message(${1:string message}, ${2:battle_sound_effect sound}, ${3:[opt=nil] vector position}, ${4:[opt=0] number wait offset}, ${5:[opt=nil] string end message}, ${6:[opt=500] number minimum duration})"
		],
	},
	"docgen:generated_battle:gb:play_sound_on_message": {
		"scope": "lua",
		"prefix": "gb:play_sound_on_message",
		"description": "generated_battle:play_sound_on_message()\n-  -\n\nInstruct the generated_battle to play a sound on receipt of a message.\n",
		"body": [
			"gb:play_sound_on_message(${1:string message}, ${2:battle_sound_effect sound}, ${3:[opt=nil] vector position}, ${4:[opt=0] number wait offset}, ${5:[opt=nil] string end message}, ${6:[opt=500] number minimum duration})"
		],
	},
	"docgen:generated_battle:stop_sound_on_message": {
		"scope": "lua",
		"prefix": "stop_sound_on_message",
		"description": "generated_battle:stop_sound_on_message()\n-  -\n\nInstructs the generated_battle to stop a sound on receipt of a message.\n",
		"body": [
			"stop_sound_on_message(${1:string message}, ${2:battle_sound_effect sound}, ${3:[opt=0] number wait offset})"
		],
	},
	"docgen:generated_battle:generated_battle:stop_sound_on_message": {
		"scope": "lua",
		"prefix": "generated_battle:stop_sound_on_message",
		"description": "generated_battle:stop_sound_on_message()\n-  -\n\nInstructs the generated_battle to stop a sound on receipt of a message.\n",
		"body": [
			"generated_battle:stop_sound_on_message(${1:string message}, ${2:battle_sound_effect sound}, ${3:[opt=0] number wait offset})"
		],
	},
	"docgen:generated_battle:gb:stop_sound_on_message": {
		"scope": "lua",
		"prefix": "gb:stop_sound_on_message",
		"description": "generated_battle:stop_sound_on_message()\n-  -\n\nInstructs the generated_battle to stop a sound on receipt of a message.\n",
		"body": [
			"gb:stop_sound_on_message(${1:string message}, ${2:battle_sound_effect sound}, ${3:[opt=0] number wait offset})"
		],
	},
	"docgen:generated_battle:start_terrain_composite_scene_on_message": {
		"scope": "lua",
		"prefix": "start_terrain_composite_scene_on_message",
		"description": "generated_battle:start_terrain_composite_scene_on_message()\n-  -\n\nInstructs the generated_battle to start a terrain composite scene on receipt of a message.\n",
		"body": [
			"start_terrain_composite_scene_on_message(${1:string message}, ${2:string scene key}, ${3:[opt=0] number wait offset}, ${4:[opt=false] string group name}, ${5:[opt=false] number delay if queued})"
		],
	},
	"docgen:generated_battle:generated_battle:start_terrain_composite_scene_on_message": {
		"scope": "lua",
		"prefix": "generated_battle:start_terrain_composite_scene_on_message",
		"description": "generated_battle:start_terrain_composite_scene_on_message()\n-  -\n\nInstructs the generated_battle to start a terrain composite scene on receipt of a message.\n",
		"body": [
			"generated_battle:start_terrain_composite_scene_on_message(${1:string message}, ${2:string scene key}, ${3:[opt=0] number wait offset}, ${4:[opt=false] string group name}, ${5:[opt=false] number delay if queued})"
		],
	},
	"docgen:generated_battle:gb:start_terrain_composite_scene_on_message": {
		"scope": "lua",
		"prefix": "gb:start_terrain_composite_scene_on_message",
		"description": "generated_battle:start_terrain_composite_scene_on_message()\n-  -\n\nInstructs the generated_battle to start a terrain composite scene on receipt of a message.\n",
		"body": [
			"gb:start_terrain_composite_scene_on_message(${1:string message}, ${2:string scene key}, ${3:[opt=0] number wait offset}, ${4:[opt=false] string group name}, ${5:[opt=false] number delay if queued})"
		],
	},
	"docgen:generated_battle:stop_terrain_composite_scene_on_message": {
		"scope": "lua",
		"prefix": "stop_terrain_composite_scene_on_message",
		"description": "generated_battle:stop_terrain_composite_scene_on_message()\n-  -\n\nInstructs the generated_battle to stop a terrain composite scene on receipt of a message.\n",
		"body": [
			"stop_terrain_composite_scene_on_message(${1:string message}, ${2:string scene key}, ${3:[opt=0] number wait offset})"
		],
	},
	"docgen:generated_battle:generated_battle:stop_terrain_composite_scene_on_message": {
		"scope": "lua",
		"prefix": "generated_battle:stop_terrain_composite_scene_on_message",
		"description": "generated_battle:stop_terrain_composite_scene_on_message()\n-  -\n\nInstructs the generated_battle to stop a terrain composite scene on receipt of a message.\n",
		"body": [
			"generated_battle:stop_terrain_composite_scene_on_message(${1:string message}, ${2:string scene key}, ${3:[opt=0] number wait offset})"
		],
	},
	"docgen:generated_battle:gb:stop_terrain_composite_scene_on_message": {
		"scope": "lua",
		"prefix": "gb:stop_terrain_composite_scene_on_message",
		"description": "generated_battle:stop_terrain_composite_scene_on_message()\n-  -\n\nInstructs the generated_battle to stop a terrain composite scene on receipt of a message.\n",
		"body": [
			"gb:stop_terrain_composite_scene_on_message(${1:string message}, ${2:string scene key}, ${3:[opt=0] number wait offset})"
		],
	},
	"docgen:generated_battle:set_objective_on_message": {
		"scope": "lua",
		"prefix": "set_objective_on_message",
		"description": "generated_battle:set_objective_on_message()\n-  -\n\nInstructs the generated_battle to add a scripted obective to the objectives panel, or update an existing scripted objective, on receipt of a message.\n",
		"body": [
			"set_objective_on_message(${1:string message}, ${2:string objective key}, ${3:[opt=0] number wait offset}, ${4:[opt=nil] number objective param a}, ${5:[opt=nil] number objective param b})"
		],
	},
	"docgen:generated_battle:generated_battle:set_objective_on_message": {
		"scope": "lua",
		"prefix": "generated_battle:set_objective_on_message",
		"description": "generated_battle:set_objective_on_message()\n-  -\n\nInstructs the generated_battle to add a scripted obective to the objectives panel, or update an existing scripted objective, on receipt of a message.\n",
		"body": [
			"generated_battle:set_objective_on_message(${1:string message}, ${2:string objective key}, ${3:[opt=0] number wait offset}, ${4:[opt=nil] number objective param a}, ${5:[opt=nil] number objective param b})"
		],
	},
	"docgen:generated_battle:gb:set_objective_on_message": {
		"scope": "lua",
		"prefix": "gb:set_objective_on_message",
		"description": "generated_battle:set_objective_on_message()\n-  -\n\nInstructs the generated_battle to add a scripted obective to the objectives panel, or update an existing scripted objective, on receipt of a message.\n",
		"body": [
			"gb:set_objective_on_message(${1:string message}, ${2:string objective key}, ${3:[opt=0] number wait offset}, ${4:[opt=nil] number objective param a}, ${5:[opt=nil] number objective param b})"
		],
	},
	"docgen:generated_battle:complete_objective_on_message": {
		"scope": "lua",
		"prefix": "complete_objective_on_message",
		"description": "generated_battle:complete_objective_on_message()\n-  -\n\nInstructs the generated_battle to mark a specified objective as complete, on receipt of a message.\n",
		"body": [
			"complete_objective_on_message(${1:string message}, ${2:string objective key}, ${3:[opt=0] number wait offset})"
		],
	},
	"docgen:generated_battle:generated_battle:complete_objective_on_message": {
		"scope": "lua",
		"prefix": "generated_battle:complete_objective_on_message",
		"description": "generated_battle:complete_objective_on_message()\n-  -\n\nInstructs the generated_battle to mark a specified objective as complete, on receipt of a message.\n",
		"body": [
			"generated_battle:complete_objective_on_message(${1:string message}, ${2:string objective key}, ${3:[opt=0] number wait offset})"
		],
	},
	"docgen:generated_battle:gb:complete_objective_on_message": {
		"scope": "lua",
		"prefix": "gb:complete_objective_on_message",
		"description": "generated_battle:complete_objective_on_message()\n-  -\n\nInstructs the generated_battle to mark a specified objective as complete, on receipt of a message.\n",
		"body": [
			"gb:complete_objective_on_message(${1:string message}, ${2:string objective key}, ${3:[opt=0] number wait offset})"
		],
	},
	"docgen:generated_battle:fail_objective_on_message": {
		"scope": "lua",
		"prefix": "fail_objective_on_message",
		"description": "generated_battle:fail_objective_on_message()\n-  -\n\nInstructs the generated_battle to mark a specified objective as failed, on receipt of a message.\n",
		"body": [
			"fail_objective_on_message(${1:string message}, ${2:string objective key}, ${3:[opt=0] number wait offset})"
		],
	},
	"docgen:generated_battle:generated_battle:fail_objective_on_message": {
		"scope": "lua",
		"prefix": "generated_battle:fail_objective_on_message",
		"description": "generated_battle:fail_objective_on_message()\n-  -\n\nInstructs the generated_battle to mark a specified objective as failed, on receipt of a message.\n",
		"body": [
			"generated_battle:fail_objective_on_message(${1:string message}, ${2:string objective key}, ${3:[opt=0] number wait offset})"
		],
	},
	"docgen:generated_battle:gb:fail_objective_on_message": {
		"scope": "lua",
		"prefix": "gb:fail_objective_on_message",
		"description": "generated_battle:fail_objective_on_message()\n-  -\n\nInstructs the generated_battle to mark a specified objective as failed, on receipt of a message.\n",
		"body": [
			"gb:fail_objective_on_message(${1:string message}, ${2:string objective key}, ${3:[opt=0] number wait offset})"
		],
	},
	"docgen:generated_battle:remove_objective_on_message": {
		"scope": "lua",
		"prefix": "remove_objective_on_message",
		"description": "generated_battle:remove_objective_on_message()\n-  -\n\nInstructs the generated_battle to remove a specified objective from the UI on receipt of a message.\n",
		"body": [
			"remove_objective_on_message(${1:string message}, ${2:string objective key}, ${3:[opt=0] number wait offset})"
		],
	},
	"docgen:generated_battle:generated_battle:remove_objective_on_message": {
		"scope": "lua",
		"prefix": "generated_battle:remove_objective_on_message",
		"description": "generated_battle:remove_objective_on_message()\n-  -\n\nInstructs the generated_battle to remove a specified objective from the UI on receipt of a message.\n",
		"body": [
			"generated_battle:remove_objective_on_message(${1:string message}, ${2:string objective key}, ${3:[opt=0] number wait offset})"
		],
	},
	"docgen:generated_battle:gb:remove_objective_on_message": {
		"scope": "lua",
		"prefix": "gb:remove_objective_on_message",
		"description": "generated_battle:remove_objective_on_message()\n-  -\n\nInstructs the generated_battle to remove a specified objective from the UI on receipt of a message.\n",
		"body": [
			"gb:remove_objective_on_message(${1:string message}, ${2:string objective key}, ${3:[opt=0] number wait offset})"
		],
	},
	"docgen:generated_battle:set_locatable_objective_on_message": {
		"scope": "lua",
		"prefix": "set_locatable_objective_on_message",
		"description": "generated_battle:set_locatable_objective_on_message()\n-  -\n\nInstructs the generated_battle to set a locatable objective on receipt of a message.\n",
		"body": [
			"set_locatable_objective_on_message(${1:string message}, ${2:string objective key}, ${3:[opt=0] number wait offset}, ${4:vector camera position}, ${5:vector camera target}, ${6:number camera move time})"
		],
	},
	"docgen:generated_battle:generated_battle:set_locatable_objective_on_message": {
		"scope": "lua",
		"prefix": "generated_battle:set_locatable_objective_on_message",
		"description": "generated_battle:set_locatable_objective_on_message()\n-  -\n\nInstructs the generated_battle to set a locatable objective on receipt of a message.\n",
		"body": [
			"generated_battle:set_locatable_objective_on_message(${1:string message}, ${2:string objective key}, ${3:[opt=0] number wait offset}, ${4:vector camera position}, ${5:vector camera target}, ${6:number camera move time})"
		],
	},
	"docgen:generated_battle:gb:set_locatable_objective_on_message": {
		"scope": "lua",
		"prefix": "gb:set_locatable_objective_on_message",
		"description": "generated_battle:set_locatable_objective_on_message()\n-  -\n\nInstructs the generated_battle to set a locatable objective on receipt of a message.\n",
		"body": [
			"gb:set_locatable_objective_on_message(${1:string message}, ${2:string objective key}, ${3:[opt=0] number wait offset}, ${4:vector camera position}, ${5:vector camera target}, ${6:number camera move time})"
		],
	},
	"docgen:generated_battle:add_ping_icon_on_message": {
		"scope": "lua",
		"prefix": "add_ping_icon_on_message",
		"description": "generated_battle:add_ping_icon_on_message()\n-  -\n\nInstructs the generated_battle to add a battlefield ping icon on receipt of a message.\n",
		"body": [
			"add_ping_icon_on_message(${1:string message}, ${2:vector marker position}, ${3:number marker type}, ${4:[opt=0] number wait offset}, ${5:[opt=nil] number duration})"
		],
	},
	"docgen:generated_battle:generated_battle:add_ping_icon_on_message": {
		"scope": "lua",
		"prefix": "generated_battle:add_ping_icon_on_message",
		"description": "generated_battle:add_ping_icon_on_message()\n-  -\n\nInstructs the generated_battle to add a battlefield ping icon on receipt of a message.\n",
		"body": [
			"generated_battle:add_ping_icon_on_message(${1:string message}, ${2:vector marker position}, ${3:number marker type}, ${4:[opt=0] number wait offset}, ${5:[opt=nil] number duration})"
		],
	},
	"docgen:generated_battle:gb:add_ping_icon_on_message": {
		"scope": "lua",
		"prefix": "gb:add_ping_icon_on_message",
		"description": "generated_battle:add_ping_icon_on_message()\n-  -\n\nInstructs the generated_battle to add a battlefield ping icon on receipt of a message.\n",
		"body": [
			"gb:add_ping_icon_on_message(${1:string message}, ${2:vector marker position}, ${3:number marker type}, ${4:[opt=0] number wait offset}, ${5:[opt=nil] number duration})"
		],
	},
	"docgen:generated_battle:remove_ping_icon_on_message": {
		"scope": "lua",
		"prefix": "remove_ping_icon_on_message",
		"description": "generated_battle:remove_ping_icon_on_message()\n-  -\n\nInstructs the generated_battle to remove a battlefield ping icon on receipt of a message.\n",
		"body": [
			"remove_ping_icon_on_message(${1:string message}, ${2:vector marker position}, ${3:[opt=0] number wait offset})"
		],
	},
	"docgen:generated_battle:generated_battle:remove_ping_icon_on_message": {
		"scope": "lua",
		"prefix": "generated_battle:remove_ping_icon_on_message",
		"description": "generated_battle:remove_ping_icon_on_message()\n-  -\n\nInstructs the generated_battle to remove a battlefield ping icon on receipt of a message.\n",
		"body": [
			"generated_battle:remove_ping_icon_on_message(${1:string message}, ${2:vector marker position}, ${3:[opt=0] number wait offset})"
		],
	},
	"docgen:generated_battle:gb:remove_ping_icon_on_message": {
		"scope": "lua",
		"prefix": "gb:remove_ping_icon_on_message",
		"description": "generated_battle:remove_ping_icon_on_message()\n-  -\n\nInstructs the generated_battle to remove a battlefield ping icon on receipt of a message.\n",
		"body": [
			"gb:remove_ping_icon_on_message(${1:string message}, ${2:vector marker position}, ${3:[opt=0] number wait offset})"
		],
	},
	"docgen:generated_battle:fade_in_on_message": {
		"scope": "lua",
		"prefix": "fade_in_on_message",
		"description": "generated_battle:fade_in_on_message()\n-  -\n\nTakes a string message, and a fade duration in seconds.\n",
		"body": [
			"fade_in_on_message(${1:string message}, ${2:number duration})"
		],
	},
	"docgen:generated_battle:generated_battle:fade_in_on_message": {
		"scope": "lua",
		"prefix": "generated_battle:fade_in_on_message",
		"description": "generated_battle:fade_in_on_message()\n-  -\n\nTakes a string message, and a fade duration in seconds.\n",
		"body": [
			"generated_battle:fade_in_on_message(${1:string message}, ${2:number duration})"
		],
	},
	"docgen:generated_battle:gb:fade_in_on_message": {
		"scope": "lua",
		"prefix": "gb:fade_in_on_message",
		"description": "generated_battle:fade_in_on_message()\n-  -\n\nTakes a string message, and a fade duration in seconds.\n",
		"body": [
			"gb:fade_in_on_message(${1:string message}, ${2:number duration})"
		],
	},
	"docgen:generated_battle:set_custom_loading_screen_on_message": {
		"scope": "lua",
		"prefix": "set_custom_loading_screen_on_message",
		"description": "generated_battle:set_custom_loading_screen_on_message()\n-  -\n\nTakes a string message and a string custom loading screen key.\n",
		"body": [
			"set_custom_loading_screen_on_message(${1:string message}, ${2:number duration})"
		],
	},
	"docgen:generated_battle:generated_battle:set_custom_loading_screen_on_message": {
		"scope": "lua",
		"prefix": "generated_battle:set_custom_loading_screen_on_message",
		"description": "generated_battle:set_custom_loading_screen_on_message()\n-  -\n\nTakes a string message and a string custom loading screen key.\n",
		"body": [
			"generated_battle:set_custom_loading_screen_on_message(${1:string message}, ${2:number duration})"
		],
	},
	"docgen:generated_battle:gb:set_custom_loading_screen_on_message": {
		"scope": "lua",
		"prefix": "gb:set_custom_loading_screen_on_message",
		"description": "generated_battle:set_custom_loading_screen_on_message()\n-  -\n\nTakes a string message and a string custom loading screen key.\n",
		"body": [
			"gb:set_custom_loading_screen_on_message(${1:string message}, ${2:number duration})"
		],
	},
	"docgen:generated_battle:start_terrain_effect_on_message": {
		"scope": "lua",
		"prefix": "start_terrain_effect_on_message",
		"description": "generated_battle:start_terrain_effect_on_message()\n-  -\n\nInstructs the generated_battle to start a terrain effect on receipt of a message.\n",
		"body": [
			"start_terrain_effect_on_message(${1:string message}, ${2:string effect name}, ${3:[opt=0] number wait offset})"
		],
	},
	"docgen:generated_battle:generated_battle:start_terrain_effect_on_message": {
		"scope": "lua",
		"prefix": "generated_battle:start_terrain_effect_on_message",
		"description": "generated_battle:start_terrain_effect_on_message()\n-  -\n\nInstructs the generated_battle to start a terrain effect on receipt of a message.\n",
		"body": [
			"generated_battle:start_terrain_effect_on_message(${1:string message}, ${2:string effect name}, ${3:[opt=0] number wait offset})"
		],
	},
	"docgen:generated_battle:gb:start_terrain_effect_on_message": {
		"scope": "lua",
		"prefix": "gb:start_terrain_effect_on_message",
		"description": "generated_battle:start_terrain_effect_on_message()\n-  -\n\nInstructs the generated_battle to start a terrain effect on receipt of a message.\n",
		"body": [
			"gb:start_terrain_effect_on_message(${1:string message}, ${2:string effect name}, ${3:[opt=0] number wait offset})"
		],
	},
	"docgen:generated_battle:stop_terrain_effect_on_message": {
		"scope": "lua",
		"prefix": "stop_terrain_effect_on_message",
		"description": "generated_battle:stop_terrain_effect_on_message()\n-  -\n\nInstructs the generated_battle to stop a terrain effect on receipt of a message.\n",
		"body": [
			"stop_terrain_effect_on_message(${1:string message}, ${2:string effect name}, ${3:[opt=0] number wait offset})"
		],
	},
	"docgen:generated_battle:generated_battle:stop_terrain_effect_on_message": {
		"scope": "lua",
		"prefix": "generated_battle:stop_terrain_effect_on_message",
		"description": "generated_battle:stop_terrain_effect_on_message()\n-  -\n\nInstructs the generated_battle to stop a terrain effect on receipt of a message.\n",
		"body": [
			"generated_battle:stop_terrain_effect_on_message(${1:string message}, ${2:string effect name}, ${3:[opt=0] number wait offset})"
		],
	},
	"docgen:generated_battle:gb:stop_terrain_effect_on_message": {
		"scope": "lua",
		"prefix": "gb:stop_terrain_effect_on_message",
		"description": "generated_battle:stop_terrain_effect_on_message()\n-  -\n\nInstructs the generated_battle to stop a terrain effect on receipt of a message.\n",
		"body": [
			"gb:stop_terrain_effect_on_message(${1:string message}, ${2:string effect name}, ${3:[opt=0] number wait offset})"
		],
	},
	"docgen:generated_battle:queue_help_on_message": {
		"scope": "lua",
		"prefix": "queue_help_on_message",
		"description": "generated_battle:queue_help_on_message()\n-  -\n\nEnqueues a help message for display on-screen on receipt of a message.\n",
		"body": [
			"queue_help_on_message(${1:string message}, ${2:string objective key}, ${3:[opt=10000] number display time}, ${4:[opt=2000] number display time}, ${5:[opt=0] number wait offset}, ${6:[opt=false] boolean high priority}, ${7:[opt=nil] string message on trigger})"
		],
	},
	"docgen:generated_battle:generated_battle:queue_help_on_message": {
		"scope": "lua",
		"prefix": "generated_battle:queue_help_on_message",
		"description": "generated_battle:queue_help_on_message()\n-  -\n\nEnqueues a help message for display on-screen on receipt of a message.\n",
		"body": [
			"generated_battle:queue_help_on_message(${1:string message}, ${2:string objective key}, ${3:[opt=10000] number display time}, ${4:[opt=2000] number display time}, ${5:[opt=0] number wait offset}, ${6:[opt=false] boolean high priority}, ${7:[opt=nil] string message on trigger})"
		],
	},
	"docgen:generated_battle:gb:queue_help_on_message": {
		"scope": "lua",
		"prefix": "gb:queue_help_on_message",
		"description": "generated_battle:queue_help_on_message()\n-  -\n\nEnqueues a help message for display on-screen on receipt of a message.\n",
		"body": [
			"gb:queue_help_on_message(${1:string message}, ${2:string objective key}, ${3:[opt=10000] number display time}, ${4:[opt=2000] number display time}, ${5:[opt=0] number wait offset}, ${6:[opt=false] boolean high priority}, ${7:[opt=nil] string message on trigger})"
		],
	},
	"docgen:generated_battle:set_victory_countdown_on_message": {
		"scope": "lua",
		"prefix": "set_victory_countdown_on_message",
		"description": "generated_battle:set_victory_countdown_on_message()\n-  -\n\nSets the victory countdown time for the battle to the specified value when the specified message is received.\n",
		"body": [
			"set_victory_countdown_on_message(${1:string message}, ${2:number countdown time})"
		],
	},
	"docgen:generated_battle:generated_battle:set_victory_countdown_on_message": {
		"scope": "lua",
		"prefix": "generated_battle:set_victory_countdown_on_message",
		"description": "generated_battle:set_victory_countdown_on_message()\n-  -\n\nSets the victory countdown time for the battle to the specified value when the specified message is received.\n",
		"body": [
			"generated_battle:set_victory_countdown_on_message(${1:string message}, ${2:number countdown time})"
		],
	},
	"docgen:generated_battle:gb:set_victory_countdown_on_message": {
		"scope": "lua",
		"prefix": "gb:set_victory_countdown_on_message",
		"description": "generated_battle:set_victory_countdown_on_message()\n-  -\n\nSets the victory countdown time for the battle to the specified value when the specified message is received.\n",
		"body": [
			"gb:set_victory_countdown_on_message(${1:string message}, ${2:number countdown time})"
		],
	},
	"docgen:generated_battle:block_message_on_message": {
		"scope": "lua",
		"prefix": "block_message_on_message",
		"description": "generated_battle:block_message_on_message()\n-  -\n\nBlocks or unblocks a message from being triggered, on receipt of a message.\n",
		"body": [
			"block_message_on_message(${1:string message}, ${2:string message to block}, ${3:[opt=true] boolean should block})"
		],
	},
	"docgen:generated_battle:generated_battle:block_message_on_message": {
		"scope": "lua",
		"prefix": "generated_battle:block_message_on_message",
		"description": "generated_battle:block_message_on_message()\n-  -\n\nBlocks or unblocks a message from being triggered, on receipt of a message.\n",
		"body": [
			"generated_battle:block_message_on_message(${1:string message}, ${2:string message to block}, ${3:[opt=true] boolean should block})"
		],
	},
	"docgen:generated_battle:gb:block_message_on_message": {
		"scope": "lua",
		"prefix": "gb:block_message_on_message",
		"description": "generated_battle:block_message_on_message()\n-  -\n\nBlocks or unblocks a message from being triggered, on receipt of a message.\n",
		"body": [
			"gb:block_message_on_message(${1:string message}, ${2:string message to block}, ${3:[opt=true] boolean should block})"
		],
	},
	"docgen:generated_battle:message_on_all_messages_received": {
		"scope": "lua",
		"prefix": "message_on_all_messages_received",
		"description": "generated_battle:message_on_all_messages_received()\n-  -\n\nTakes a subject message, and then one or more other messages.\n",
		"body": [
			"message_on_all_messages_received(${1:string message}, ${2:... messages})"
		],
	},
	"docgen:generated_battle:generated_battle:message_on_all_messages_received": {
		"scope": "lua",
		"prefix": "generated_battle:message_on_all_messages_received",
		"description": "generated_battle:message_on_all_messages_received()\n-  -\n\nTakes a subject message, and then one or more other messages.\n",
		"body": [
			"generated_battle:message_on_all_messages_received(${1:string message}, ${2:... messages})"
		],
	},
	"docgen:generated_battle:gb:message_on_all_messages_received": {
		"scope": "lua",
		"prefix": "gb:message_on_all_messages_received",
		"description": "generated_battle:message_on_all_messages_received()\n-  -\n\nTakes a subject message, and then one or more other messages.\n",
		"body": [
			"gb:message_on_all_messages_received(${1:string message}, ${2:... messages})"
		],
	},
	"docgen:generated_battle:message_on_any_message_received": {
		"scope": "lua",
		"prefix": "message_on_any_message_received",
		"description": "generated_battle:message_on_any_message_received()\n-  -\n\nTakes a subject message, and then one or more other messages.\n",
		"body": [
			"message_on_any_message_received(${1:string message}, ${2:... messages})"
		],
	},
	"docgen:generated_battle:generated_battle:message_on_any_message_received": {
		"scope": "lua",
		"prefix": "generated_battle:message_on_any_message_received",
		"description": "generated_battle:message_on_any_message_received()\n-  -\n\nTakes a subject message, and then one or more other messages.\n",
		"body": [
			"generated_battle:message_on_any_message_received(${1:string message}, ${2:... messages})"
		],
	},
	"docgen:generated_battle:gb:message_on_any_message_received": {
		"scope": "lua",
		"prefix": "gb:message_on_any_message_received",
		"description": "generated_battle:message_on_any_message_received()\n-  -\n\nTakes a subject message, and then one or more other messages.\n",
		"body": [
			"gb:message_on_any_message_received(${1:string message}, ${2:... messages})"
		],
	},
	"docgen:generated_battle:message_on_time_offset": {
		"scope": "lua",
		"prefix": "message_on_time_offset",
		"description": "generated_battle:message_on_time_offset()\n-  -\n\nTakes a string message and a wait time in ms.\n",
		"body": [
			"message_on_time_offset(${1:string message}, ${2:number wait time}, ${3:[opt=\"battle_started\"] string start message}, ${4:[opt=false] string cancel message})"
		],
	},
	"docgen:generated_battle:generated_battle:message_on_time_offset": {
		"scope": "lua",
		"prefix": "generated_battle:message_on_time_offset",
		"description": "generated_battle:message_on_time_offset()\n-  -\n\nTakes a string message and a wait time in ms.\n",
		"body": [
			"generated_battle:message_on_time_offset(${1:string message}, ${2:number wait time}, ${3:[opt=\"battle_started\"] string start message}, ${4:[opt=false] string cancel message})"
		],
	},
	"docgen:generated_battle:gb:message_on_time_offset": {
		"scope": "lua",
		"prefix": "gb:message_on_time_offset",
		"description": "generated_battle:message_on_time_offset()\n-  -\n\nTakes a string message and a wait time in ms.\n",
		"body": [
			"gb:message_on_time_offset(${1:string message}, ${2:number wait time}, ${3:[opt=\"battle_started\"] string start message}, ${4:[opt=false] string cancel message})"
		],
	},
	"docgen:generated_army:get_script_name": {
		"scope": "lua",
		"prefix": "get_script_name",
		"description": "generated_army:get_script_name()\n-  -\n\nGets the script_name of the generated army.\n",
		"body": [
			"get_script_name()"
		],
	},
	"docgen:generated_army:generated_army:get_script_name": {
		"scope": "lua",
		"prefix": "generated_army:get_script_name",
		"description": "generated_army:get_script_name()\n-  -\n\nGets the script_name of the generated army.\n",
		"body": [
			"generated_army:get_script_name()"
		],
	},
	"docgen:generated_army:ga:get_script_name": {
		"scope": "lua",
		"prefix": "ga:get_script_name",
		"description": "generated_army:get_script_name()\n-  -\n\nGets the script_name of the generated army.\n",
		"body": [
			"ga:get_script_name()"
		],
	},
	"docgen:generated_army:get_unitcontroller": {
		"scope": "lua",
		"prefix": "get_unitcontroller",
		"description": "generated_army:get_unitcontroller()\n-  -\n\nGets a unitcontroller with control over all units in the generated army.\n",
		"body": [
			"get_unitcontroller()"
		],
	},
	"docgen:generated_army:generated_army:get_unitcontroller": {
		"scope": "lua",
		"prefix": "generated_army:get_unitcontroller",
		"description": "generated_army:get_unitcontroller()\n-  -\n\nGets a unitcontroller with control over all units in the generated army.\n",
		"body": [
			"generated_army:get_unitcontroller()"
		],
	},
	"docgen:generated_army:ga:get_unitcontroller": {
		"scope": "lua",
		"prefix": "ga:get_unitcontroller",
		"description": "generated_army:get_unitcontroller()\n-  -\n\nGets a unitcontroller with control over all units in the generated army.\n",
		"body": [
			"ga:get_unitcontroller()"
		],
	},
	"docgen:generated_army:get_handicap": {
		"scope": "lua",
		"prefix": "get_handicap",
		"description": "generated_army:get_handicap()\n-  -\n\nReturns the battle difficulty.\n",
		"body": [
			"get_handicap()"
		],
	},
	"docgen:generated_army:generated_army:get_handicap": {
		"scope": "lua",
		"prefix": "generated_army:get_handicap",
		"description": "generated_army:get_handicap()\n-  -\n\nReturns the battle difficulty.\n",
		"body": [
			"generated_army:get_handicap()"
		],
	},
	"docgen:generated_army:ga:get_handicap": {
		"scope": "lua",
		"prefix": "ga:get_handicap",
		"description": "generated_army:get_handicap()\n-  -\n\nReturns the battle difficulty.\n",
		"body": [
			"ga:get_handicap()"
		],
	},
	"docgen:generated_army:get_first_scriptunit": {
		"scope": "lua",
		"prefix": "get_first_scriptunit",
		"description": "generated_army:get_first_scriptunit()\n-  -\n\nReturns the first scriptunit of the generated army.\n",
		"body": [
			"get_first_scriptunit()"
		],
	},
	"docgen:generated_army:generated_army:get_first_scriptunit": {
		"scope": "lua",
		"prefix": "generated_army:get_first_scriptunit",
		"description": "generated_army:get_first_scriptunit()\n-  -\n\nReturns the first scriptunit of the generated army.\n",
		"body": [
			"generated_army:get_first_scriptunit()"
		],
	},
	"docgen:generated_army:ga:get_first_scriptunit": {
		"scope": "lua",
		"prefix": "ga:get_first_scriptunit",
		"description": "generated_army:get_first_scriptunit()\n-  -\n\nReturns the first scriptunit of the generated army.\n",
		"body": [
			"ga:get_first_scriptunit()"
		],
	},
	"docgen:generated_army:get_most_westerly_scriptunit": {
		"scope": "lua",
		"prefix": "get_most_westerly_scriptunit",
		"description": "generated_army:get_most_westerly_scriptunit()\n-  -\n\nReturns the script_unit within the generated army positioned furthest to the west.\n",
		"body": [
			"get_most_westerly_scriptunit()"
		],
	},
	"docgen:generated_army:generated_army:get_most_westerly_scriptunit": {
		"scope": "lua",
		"prefix": "generated_army:get_most_westerly_scriptunit",
		"description": "generated_army:get_most_westerly_scriptunit()\n-  -\n\nReturns the script_unit within the generated army positioned furthest to the west.\n",
		"body": [
			"generated_army:get_most_westerly_scriptunit()"
		],
	},
	"docgen:generated_army:ga:get_most_westerly_scriptunit": {
		"scope": "lua",
		"prefix": "ga:get_most_westerly_scriptunit",
		"description": "generated_army:get_most_westerly_scriptunit()\n-  -\n\nReturns the script_unit within the generated army positioned furthest to the west.\n",
		"body": [
			"ga:get_most_westerly_scriptunit()"
		],
	},
	"docgen:generated_army:get_most_easterly_scriptunit": {
		"scope": "lua",
		"prefix": "get_most_easterly_scriptunit",
		"description": "generated_army:get_most_easterly_scriptunit()\n-  -\n\nReturns the script_unit within the generated army positioned furthest to the east.\n",
		"body": [
			"get_most_easterly_scriptunit()"
		],
	},
	"docgen:generated_army:generated_army:get_most_easterly_scriptunit": {
		"scope": "lua",
		"prefix": "generated_army:get_most_easterly_scriptunit",
		"description": "generated_army:get_most_easterly_scriptunit()\n-  -\n\nReturns the script_unit within the generated army positioned furthest to the east.\n",
		"body": [
			"generated_army:get_most_easterly_scriptunit()"
		],
	},
	"docgen:generated_army:ga:get_most_easterly_scriptunit": {
		"scope": "lua",
		"prefix": "ga:get_most_easterly_scriptunit",
		"description": "generated_army:get_most_easterly_scriptunit()\n-  -\n\nReturns the script_unit within the generated army positioned furthest to the east.\n",
		"body": [
			"ga:get_most_easterly_scriptunit()"
		],
	},
	"docgen:generated_army:get_most_northerly_scriptunit": {
		"scope": "lua",
		"prefix": "get_most_northerly_scriptunit",
		"description": "generated_army:get_most_northerly_scriptunit()\n-  -\n\nReturns the script_unit within the generated army positioned furthest to the north.\n",
		"body": [
			"get_most_northerly_scriptunit()"
		],
	},
	"docgen:generated_army:generated_army:get_most_northerly_scriptunit": {
		"scope": "lua",
		"prefix": "generated_army:get_most_northerly_scriptunit",
		"description": "generated_army:get_most_northerly_scriptunit()\n-  -\n\nReturns the script_unit within the generated army positioned furthest to the north.\n",
		"body": [
			"generated_army:get_most_northerly_scriptunit()"
		],
	},
	"docgen:generated_army:ga:get_most_northerly_scriptunit": {
		"scope": "lua",
		"prefix": "ga:get_most_northerly_scriptunit",
		"description": "generated_army:get_most_northerly_scriptunit()\n-  -\n\nReturns the script_unit within the generated army positioned furthest to the north.\n",
		"body": [
			"ga:get_most_northerly_scriptunit()"
		],
	},
	"docgen:generated_army:get_most_southerly_scriptunit": {
		"scope": "lua",
		"prefix": "get_most_southerly_scriptunit",
		"description": "generated_army:get_most_southerly_scriptunit()\n-  -\n\nReturns the script_unit within the generated army positioned furthest to the south.\n",
		"body": [
			"get_most_southerly_scriptunit()"
		],
	},
	"docgen:generated_army:generated_army:get_most_southerly_scriptunit": {
		"scope": "lua",
		"prefix": "generated_army:get_most_southerly_scriptunit",
		"description": "generated_army:get_most_southerly_scriptunit()\n-  -\n\nReturns the script_unit within the generated army positioned furthest to the south.\n",
		"body": [
			"generated_army:get_most_southerly_scriptunit()"
		],
	},
	"docgen:generated_army:ga:get_most_southerly_scriptunit": {
		"scope": "lua",
		"prefix": "ga:get_most_southerly_scriptunit",
		"description": "generated_army:get_most_southerly_scriptunit()\n-  -\n\nReturns the script_unit within the generated army positioned furthest to the south.\n",
		"body": [
			"ga:get_most_southerly_scriptunit()"
		],
	},
	"docgen:generated_army:get_casualty_rate": {
		"scope": "lua",
		"prefix": "get_casualty_rate",
		"description": "generated_army:get_casualty_rate()\n-  -\n\nReturns the amount of casualties this generated army has taken as a unary value e.\n",
		"body": [
			"get_casualty_rate()"
		],
	},
	"docgen:generated_army:generated_army:get_casualty_rate": {
		"scope": "lua",
		"prefix": "generated_army:get_casualty_rate",
		"description": "generated_army:get_casualty_rate()\n-  -\n\nReturns the amount of casualties this generated army has taken as a unary value e.\n",
		"body": [
			"generated_army:get_casualty_rate()"
		],
	},
	"docgen:generated_army:ga:get_casualty_rate": {
		"scope": "lua",
		"prefix": "ga:get_casualty_rate",
		"description": "generated_army:get_casualty_rate()\n-  -\n\nReturns the amount of casualties this generated army has taken as a unary value e.\n",
		"body": [
			"ga:get_casualty_rate()"
		],
	},
	"docgen:generated_army:get_rout_proportion": {
		"scope": "lua",
		"prefix": "get_rout_proportion",
		"description": "generated_army:get_rout_proportion()\n-  -\n\nReturns the unary proportion (0 - 1) of the units in this generated army that are routing e.\n",
		"body": [
			"get_rout_proportion()"
		],
	},
	"docgen:generated_army:generated_army:get_rout_proportion": {
		"scope": "lua",
		"prefix": "generated_army:get_rout_proportion",
		"description": "generated_army:get_rout_proportion()\n-  -\n\nReturns the unary proportion (0 - 1) of the units in this generated army that are routing e.\n",
		"body": [
			"generated_army:get_rout_proportion()"
		],
	},
	"docgen:generated_army:ga:get_rout_proportion": {
		"scope": "lua",
		"prefix": "ga:get_rout_proportion",
		"description": "generated_army:get_rout_proportion()\n-  -\n\nReturns the unary proportion (0 - 1) of the units in this generated army that are routing e.\n",
		"body": [
			"ga:get_rout_proportion()"
		],
	},
	"docgen:generated_army:get_shattered_proportion": {
		"scope": "lua",
		"prefix": "get_shattered_proportion",
		"description": "generated_army:get_shattered_proportion()\n-  -\n\nReturns the unary proportion (0 - 1) of the units in this generated army that are shattered e.\n",
		"body": [
			"get_shattered_proportion()"
		],
	},
	"docgen:generated_army:generated_army:get_shattered_proportion": {
		"scope": "lua",
		"prefix": "generated_army:get_shattered_proportion",
		"description": "generated_army:get_shattered_proportion()\n-  -\n\nReturns the unary proportion (0 - 1) of the units in this generated army that are shattered e.\n",
		"body": [
			"generated_army:get_shattered_proportion()"
		],
	},
	"docgen:generated_army:ga:get_shattered_proportion": {
		"scope": "lua",
		"prefix": "ga:get_shattered_proportion",
		"description": "generated_army:get_shattered_proportion()\n-  -\n\nReturns the unary proportion (0 - 1) of the units in this generated army that are shattered e.\n",
		"body": [
			"ga:get_shattered_proportion()"
		],
	},
	"docgen:generated_army:are_unit_types_in_army": {
		"scope": "lua",
		"prefix": "are_unit_types_in_army",
		"description": "generated_army:are_unit_types_in_army()\n-  -\n\nReturns true if any of the supplied unit types are present in the army, false otherwise.\n",
		"body": [
			"are_unit_types_in_army()"
		],
	},
	"docgen:generated_army:generated_army:are_unit_types_in_army": {
		"scope": "lua",
		"prefix": "generated_army:are_unit_types_in_army",
		"description": "generated_army:are_unit_types_in_army()\n-  -\n\nReturns true if any of the supplied unit types are present in the army, false otherwise.\n",
		"body": [
			"generated_army:are_unit_types_in_army()"
		],
	},
	"docgen:generated_army:ga:are_unit_types_in_army": {
		"scope": "lua",
		"prefix": "ga:are_unit_types_in_army",
		"description": "generated_army:are_unit_types_in_army()\n-  -\n\nReturns true if any of the supplied unit types are present in the army, false otherwise.\n",
		"body": [
			"ga:are_unit_types_in_army()"
		],
	},
	"docgen:generated_army:set_visible_to_all": {
		"scope": "lua",
		"prefix": "set_visible_to_all",
		"description": "generated_army:set_visible_to_all()\n-  -\n\nSets the visibility on a generated_army, so that they are visible in an intro cutscene.\n",
		"body": [
			"set_visible_to_all(${1:[opt=true] boolean visible})"
		],
	},
	"docgen:generated_army:generated_army:set_visible_to_all": {
		"scope": "lua",
		"prefix": "generated_army:set_visible_to_all",
		"description": "generated_army:set_visible_to_all()\n-  -\n\nSets the visibility on a generated_army, so that they are visible in an intro cutscene.\n",
		"body": [
			"generated_army:set_visible_to_all(${1:[opt=true] boolean visible})"
		],
	},
	"docgen:generated_army:ga:set_visible_to_all": {
		"scope": "lua",
		"prefix": "ga:set_visible_to_all",
		"description": "generated_army:set_visible_to_all()\n-  -\n\nSets the visibility on a generated_army, so that they are visible in an intro cutscene.\n",
		"body": [
			"ga:set_visible_to_all(${1:[opt=true] boolean visible})"
		],
	},
	"docgen:generated_army:set_enabled": {
		"scope": "lua",
		"prefix": "set_enabled",
		"description": "generated_army:set_enabled()\n-  -\n\nSets whether a generated_army is enabled - when disabled, they will be invisible and effectively not exist.\n",
		"body": [
			"set_enabled(${1:[opt=true] boolean enabled})"
		],
	},
	"docgen:generated_army:generated_army:set_enabled": {
		"scope": "lua",
		"prefix": "generated_army:set_enabled",
		"description": "generated_army:set_enabled()\n-  -\n\nSets whether a generated_army is enabled - when disabled, they will be invisible and effectively not exist.\n",
		"body": [
			"generated_army:set_enabled(${1:[opt=true] boolean enabled})"
		],
	},
	"docgen:generated_army:ga:set_enabled": {
		"scope": "lua",
		"prefix": "ga:set_enabled",
		"description": "generated_army:set_enabled()\n-  -\n\nSets whether a generated_army is enabled - when disabled, they will be invisible and effectively not exist.\n",
		"body": [
			"ga:set_enabled(${1:[opt=true] boolean enabled})"
		],
	},
	"docgen:generated_army:halt": {
		"scope": "lua",
		"prefix": "halt",
		"description": "generated_army:halt()\n-  -\n\nHalts the generated_army.\n",
		"body": [
			"halt()"
		],
	},
	"docgen:generated_army:generated_army:halt": {
		"scope": "lua",
		"prefix": "generated_army:halt",
		"description": "generated_army:halt()\n-  -\n\nHalts the generated_army.\n",
		"body": [
			"generated_army:halt()"
		],
	},
	"docgen:generated_army:ga:halt": {
		"scope": "lua",
		"prefix": "ga:halt",
		"description": "generated_army:halt()\n-  -\n\nHalts the generated_army.\n",
		"body": [
			"ga:halt()"
		],
	},
	"docgen:generated_army:celebrate": {
		"scope": "lua",
		"prefix": "celebrate",
		"description": "generated_army:celebrate()\n-  -\n\nOrders the generated_army to celebrate.\n",
		"body": [
			"celebrate()"
		],
	},
	"docgen:generated_army:generated_army:celebrate": {
		"scope": "lua",
		"prefix": "generated_army:celebrate",
		"description": "generated_army:celebrate()\n-  -\n\nOrders the generated_army to celebrate.\n",
		"body": [
			"generated_army:celebrate()"
		],
	},
	"docgen:generated_army:ga:celebrate": {
		"scope": "lua",
		"prefix": "ga:celebrate",
		"description": "generated_army:celebrate()\n-  -\n\nOrders the generated_army to celebrate.\n",
		"body": [
			"ga:celebrate()"
		],
	},
	"docgen:generated_army:taunt": {
		"scope": "lua",
		"prefix": "taunt",
		"description": "generated_army:taunt()\n-  -\n\nOrders the generated_army to taunt.\n",
		"body": [
			"taunt()"
		],
	},
	"docgen:generated_army:generated_army:taunt": {
		"scope": "lua",
		"prefix": "generated_army:taunt",
		"description": "generated_army:taunt()\n-  -\n\nOrders the generated_army to taunt.\n",
		"body": [
			"generated_army:taunt()"
		],
	},
	"docgen:generated_army:ga:taunt": {
		"scope": "lua",
		"prefix": "ga:taunt",
		"description": "generated_army:taunt()\n-  -\n\nOrders the generated_army to taunt.\n",
		"body": [
			"ga:taunt()"
		],
	},
	"docgen:generated_army:play_sound_charge": {
		"scope": "lua",
		"prefix": "play_sound_charge",
		"description": "generated_army:play_sound_charge()\n-  -\n\nOrders the generated_army to trigger the charge sound.\n",
		"body": [
			"play_sound_charge()"
		],
	},
	"docgen:generated_army:generated_army:play_sound_charge": {
		"scope": "lua",
		"prefix": "generated_army:play_sound_charge",
		"description": "generated_army:play_sound_charge()\n-  -\n\nOrders the generated_army to trigger the charge sound.\n",
		"body": [
			"generated_army:play_sound_charge()"
		],
	},
	"docgen:generated_army:ga:play_sound_charge": {
		"scope": "lua",
		"prefix": "ga:play_sound_charge",
		"description": "generated_army:play_sound_charge()\n-  -\n\nOrders the generated_army to trigger the charge sound.\n",
		"body": [
			"ga:play_sound_charge()"
		],
	},
	"docgen:generated_army:play_sound_taunt": {
		"scope": "lua",
		"prefix": "play_sound_taunt",
		"description": "generated_army:play_sound_taunt()\n-  -\n\nOrders the generated_army to trigger the taunt sound.\n",
		"body": [
			"play_sound_taunt()"
		],
	},
	"docgen:generated_army:generated_army:play_sound_taunt": {
		"scope": "lua",
		"prefix": "generated_army:play_sound_taunt",
		"description": "generated_army:play_sound_taunt()\n-  -\n\nOrders the generated_army to trigger the taunt sound.\n",
		"body": [
			"generated_army:play_sound_taunt()"
		],
	},
	"docgen:generated_army:ga:play_sound_taunt": {
		"scope": "lua",
		"prefix": "ga:play_sound_taunt",
		"description": "generated_army:play_sound_taunt()\n-  -\n\nOrders the generated_army to trigger the taunt sound.\n",
		"body": [
			"ga:play_sound_taunt()"
		],
	},
	"docgen:generated_army:add_ping_icon": {
		"scope": "lua",
		"prefix": "add_ping_icon",
		"description": "generated_army:add_ping_icon()\n-  -\n\nAdds a ping icon to a unit within the generated army.\n",
		"body": [
			"add_ping_icon(${1:[opt=8] number icon type}, ${2:[opt=1] number unit index}, ${3:[opt=nil] number duration})"
		],
	},
	"docgen:generated_army:generated_army:add_ping_icon": {
		"scope": "lua",
		"prefix": "generated_army:add_ping_icon",
		"description": "generated_army:add_ping_icon()\n-  -\n\nAdds a ping icon to a unit within the generated army.\n",
		"body": [
			"generated_army:add_ping_icon(${1:[opt=8] number icon type}, ${2:[opt=1] number unit index}, ${3:[opt=nil] number duration})"
		],
	},
	"docgen:generated_army:ga:add_ping_icon": {
		"scope": "lua",
		"prefix": "ga:add_ping_icon",
		"description": "generated_army:add_ping_icon()\n-  -\n\nAdds a ping icon to a unit within the generated army.\n",
		"body": [
			"ga:add_ping_icon(${1:[opt=8] number icon type}, ${2:[opt=1] number unit index}, ${3:[opt=nil] number duration})"
		],
	},
	"docgen:generated_army:remove_ping_icon": {
		"scope": "lua",
		"prefix": "remove_ping_icon",
		"description": "generated_army:remove_ping_icon()\n-  -\n\nRemoves a ping icon from a unit within the generated army.\n",
		"body": [
			"remove_ping_icon(${1:[opt=1] number unit index})"
		],
	},
	"docgen:generated_army:generated_army:remove_ping_icon": {
		"scope": "lua",
		"prefix": "generated_army:remove_ping_icon",
		"description": "generated_army:remove_ping_icon()\n-  -\n\nRemoves a ping icon from a unit within the generated army.\n",
		"body": [
			"generated_army:remove_ping_icon(${1:[opt=1] number unit index})"
		],
	},
	"docgen:generated_army:ga:remove_ping_icon": {
		"scope": "lua",
		"prefix": "ga:remove_ping_icon",
		"description": "generated_army:remove_ping_icon()\n-  -\n\nRemoves a ping icon from a unit within the generated army.\n",
		"body": [
			"ga:remove_ping_icon(${1:[opt=1] number unit index})"
		],
	},
	"docgen:generated_army:teleport_to_start_location_offset": {
		"scope": "lua",
		"prefix": "teleport_to_start_location_offset",
		"description": "generated_army:teleport_to_start_location_offset()\n-  -\n\nTeleports the generated army to a position offset from its start location.\n",
		"body": [
			"teleport_to_start_location_offset(${1:[opt=0] number x offset}, ${2:[opt=0] number z offset})"
		],
	},
	"docgen:generated_army:generated_army:teleport_to_start_location_offset": {
		"scope": "lua",
		"prefix": "generated_army:teleport_to_start_location_offset",
		"description": "generated_army:teleport_to_start_location_offset()\n-  -\n\nTeleports the generated army to a position offset from its start location.\n",
		"body": [
			"generated_army:teleport_to_start_location_offset(${1:[opt=0] number x offset}, ${2:[opt=0] number z offset})"
		],
	},
	"docgen:generated_army:ga:teleport_to_start_location_offset": {
		"scope": "lua",
		"prefix": "ga:teleport_to_start_location_offset",
		"description": "generated_army:teleport_to_start_location_offset()\n-  -\n\nTeleports the generated army to a position offset from its start location.\n",
		"body": [
			"ga:teleport_to_start_location_offset(${1:[opt=0] number x offset}, ${2:[opt=0] number z offset})"
		],
	},
	"docgen:generated_army:goto_start_location": {
		"scope": "lua",
		"prefix": "goto_start_location",
		"description": "generated_army:goto_start_location()\n-  -\n\nInstructs all the units in a generated army to move to the position/angle/width at which they started the battle.\n",
		"body": [
			"goto_start_location(${1:[opt=false] boolean move fast})"
		],
	},
	"docgen:generated_army:generated_army:goto_start_location": {
		"scope": "lua",
		"prefix": "generated_army:goto_start_location",
		"description": "generated_army:goto_start_location()\n-  -\n\nInstructs all the units in a generated army to move to the position/angle/width at which they started the battle.\n",
		"body": [
			"generated_army:goto_start_location(${1:[opt=false] boolean move fast})"
		],
	},
	"docgen:generated_army:ga:goto_start_location": {
		"scope": "lua",
		"prefix": "ga:goto_start_location",
		"description": "generated_army:goto_start_location()\n-  -\n\nInstructs all the units in a generated army to move to the position/angle/width at which they started the battle.\n",
		"body": [
			"ga:goto_start_location(${1:[opt=false] boolean move fast})"
		],
	},
	"docgen:generated_army:goto_location_offset": {
		"scope": "lua",
		"prefix": "goto_location_offset",
		"description": "generated_army:goto_location_offset()\n-  -\n\nInstructs all units in a generated army to go to a location offset from their current position.\n",
		"body": [
			"goto_location_offset(${1:number x offset}, ${2:number x offset}, ${3:[opt=false] boolean move fast})"
		],
	},
	"docgen:generated_army:generated_army:goto_location_offset": {
		"scope": "lua",
		"prefix": "generated_army:goto_location_offset",
		"description": "generated_army:goto_location_offset()\n-  -\n\nInstructs all units in a generated army to go to a location offset from their current position.\n",
		"body": [
			"generated_army:goto_location_offset(${1:number x offset}, ${2:number x offset}, ${3:[opt=false] boolean move fast})"
		],
	},
	"docgen:generated_army:ga:goto_location_offset": {
		"scope": "lua",
		"prefix": "ga:goto_location_offset",
		"description": "generated_army:goto_location_offset()\n-  -\n\nInstructs all units in a generated army to go to a location offset from their current position.\n",
		"body": [
			"ga:goto_location_offset(${1:number x offset}, ${2:number x offset}, ${3:[opt=false] boolean move fast})"
		],
	},
	"docgen:generated_army:move_to_position": {
		"scope": "lua",
		"prefix": "move_to_position",
		"description": "generated_army:move_to_position()\n-  -\n\nInstructs all units in a generated army to move to a position under control of a script_ai_planner.\n",
		"body": [
			"move_to_position(${1:vector position})"
		],
	},
	"docgen:generated_army:generated_army:move_to_position": {
		"scope": "lua",
		"prefix": "generated_army:move_to_position",
		"description": "generated_army:move_to_position()\n-  -\n\nInstructs all units in a generated army to move to a position under control of a script_ai_planner.\n",
		"body": [
			"generated_army:move_to_position(${1:vector position})"
		],
	},
	"docgen:generated_army:ga:move_to_position": {
		"scope": "lua",
		"prefix": "ga:move_to_position",
		"description": "generated_army:move_to_position()\n-  -\n\nInstructs all units in a generated army to move to a position under control of a script_ai_planner.\n",
		"body": [
			"ga:move_to_position(${1:vector position})"
		],
	},
	"docgen:generated_army:advance": {
		"scope": "lua",
		"prefix": "advance",
		"description": "generated_army:advance()\n-  -\n\nInstructs all units in a generated army to advance upon the enemy.\n",
		"body": [
			"advance()"
		],
	},
	"docgen:generated_army:generated_army:advance": {
		"scope": "lua",
		"prefix": "generated_army:advance",
		"description": "generated_army:advance()\n-  -\n\nInstructs all units in a generated army to advance upon the enemy.\n",
		"body": [
			"generated_army:advance()"
		],
	},
	"docgen:generated_army:ga:advance": {
		"scope": "lua",
		"prefix": "ga:advance",
		"description": "generated_army:advance()\n-  -\n\nInstructs all units in a generated army to advance upon the enemy.\n",
		"body": [
			"ga:advance()"
		],
	},
	"docgen:generated_army:attack": {
		"scope": "lua",
		"prefix": "attack",
		"description": "generated_army:attack()\n-  -\n\nInstructs all units in a generated army to attack the enemy.\n",
		"body": [
			"attack()"
		],
	},
	"docgen:generated_army:generated_army:attack": {
		"scope": "lua",
		"prefix": "generated_army:attack",
		"description": "generated_army:attack()\n-  -\n\nInstructs all units in a generated army to attack the enemy.\n",
		"body": [
			"generated_army:attack()"
		],
	},
	"docgen:generated_army:ga:attack": {
		"scope": "lua",
		"prefix": "ga:attack",
		"description": "generated_army:attack()\n-  -\n\nInstructs all units in a generated army to attack the enemy.\n",
		"body": [
			"ga:attack()"
		],
	},
	"docgen:generated_army:attack_force": {
		"scope": "lua",
		"prefix": "attack_force",
		"description": "generated_army:attack_force()\n-  -\n\nInstructs all units in a generated army to attack a specific enemy force.\n",
		"body": [
			"attack_force(${1:script_units enemy force})"
		],
	},
	"docgen:generated_army:generated_army:attack_force": {
		"scope": "lua",
		"prefix": "generated_army:attack_force",
		"description": "generated_army:attack_force()\n-  -\n\nInstructs all units in a generated army to attack a specific enemy force.\n",
		"body": [
			"generated_army:attack_force(${1:script_units enemy force})"
		],
	},
	"docgen:generated_army:ga:attack_force": {
		"scope": "lua",
		"prefix": "ga:attack_force",
		"description": "generated_army:attack_force()\n-  -\n\nInstructs all units in a generated army to attack a specific enemy force.\n",
		"body": [
			"ga:attack_force(${1:script_units enemy force})"
		],
	},
	"docgen:generated_army:defend": {
		"scope": "lua",
		"prefix": "defend",
		"description": "generated_army:defend()\n-  -\n\nInstructs all units in a generated army to defend a position.\n",
		"body": [
			"defend(${1:number x co-ordinate}, ${2:number y co-ordinate}, ${3:number radius})"
		],
	},
	"docgen:generated_army:generated_army:defend": {
		"scope": "lua",
		"prefix": "generated_army:defend",
		"description": "generated_army:defend()\n-  -\n\nInstructs all units in a generated army to defend a position.\n",
		"body": [
			"generated_army:defend(${1:number x co-ordinate}, ${2:number y co-ordinate}, ${3:number radius})"
		],
	},
	"docgen:generated_army:ga:defend": {
		"scope": "lua",
		"prefix": "ga:defend",
		"description": "generated_army:defend()\n-  -\n\nInstructs all units in a generated army to defend a position.\n",
		"body": [
			"ga:defend(${1:number x co-ordinate}, ${2:number y co-ordinate}, ${3:number radius})"
		],
	},
	"docgen:generated_army:release": {
		"scope": "lua",
		"prefix": "release",
		"description": "generated_army:release()\n-  -\n\nInstructs the generated army to release control of all its units to the player/general ai.\n",
		"body": [
			"release()"
		],
	},
	"docgen:generated_army:generated_army:release": {
		"scope": "lua",
		"prefix": "generated_army:release",
		"description": "generated_army:release()\n-  -\n\nInstructs the generated army to release control of all its units to the player/general ai.\n",
		"body": [
			"generated_army:release()"
		],
	},
	"docgen:generated_army:ga:release": {
		"scope": "lua",
		"prefix": "ga:release",
		"description": "generated_army:release()\n-  -\n\nInstructs the generated army to release control of all its units to the player/general ai.\n",
		"body": [
			"ga:release()"
		],
	},
	"docgen:generated_army:teleport_to_start_location_offset_on_message": {
		"scope": "lua",
		"prefix": "teleport_to_start_location_offset_on_message",
		"description": "generated_army:teleport_to_start_location_offset_on_message()\n-  -\n\nTeleports the units in the army to their start position with the supplied offset when the supplied message is received.\n",
		"body": [
			"teleport_to_start_location_offset_on_message(${1:string message}, ${2:number x offset}, ${3:number y offset y offset in m})"
		],
	},
	"docgen:generated_army:generated_army:teleport_to_start_location_offset_on_message": {
		"scope": "lua",
		"prefix": "generated_army:teleport_to_start_location_offset_on_message",
		"description": "generated_army:teleport_to_start_location_offset_on_message()\n-  -\n\nTeleports the units in the army to their start position with the supplied offset when the supplied message is received.\n",
		"body": [
			"generated_army:teleport_to_start_location_offset_on_message(${1:string message}, ${2:number x offset}, ${3:number y offset y offset in m})"
		],
	},
	"docgen:generated_army:ga:teleport_to_start_location_offset_on_message": {
		"scope": "lua",
		"prefix": "ga:teleport_to_start_location_offset_on_message",
		"description": "generated_army:teleport_to_start_location_offset_on_message()\n-  -\n\nTeleports the units in the army to their start position with the supplied offset when the supplied message is received.\n",
		"body": [
			"ga:teleport_to_start_location_offset_on_message(${1:string message}, ${2:number x offset}, ${3:number y offset y offset in m})"
		],
	},
	"docgen:generated_army:goto_start_location_on_message": {
		"scope": "lua",
		"prefix": "goto_start_location_on_message",
		"description": "generated_army:goto_start_location_on_message()\n-  -\n\nInstructs the units in the army to move to the locations they started the battle at when the supplied message is received.\n",
		"body": [
			"goto_start_location_on_message(${1:string message}, ${2:[opt=false] boolean move fast})"
		],
	},
	"docgen:generated_army:generated_army:goto_start_location_on_message": {
		"scope": "lua",
		"prefix": "generated_army:goto_start_location_on_message",
		"description": "generated_army:goto_start_location_on_message()\n-  -\n\nInstructs the units in the army to move to the locations they started the battle at when the supplied message is received.\n",
		"body": [
			"generated_army:goto_start_location_on_message(${1:string message}, ${2:[opt=false] boolean move fast})"
		],
	},
	"docgen:generated_army:ga:goto_start_location_on_message": {
		"scope": "lua",
		"prefix": "ga:goto_start_location_on_message",
		"description": "generated_army:goto_start_location_on_message()\n-  -\n\nInstructs the units in the army to move to the locations they started the battle at when the supplied message is received.\n",
		"body": [
			"ga:goto_start_location_on_message(${1:string message}, ${2:[opt=false] boolean move fast})"
		],
	},
	"docgen:generated_army:goto_location_offset_on_message": {
		"scope": "lua",
		"prefix": "goto_location_offset_on_message",
		"description": "generated_army:goto_location_offset_on_message()\n-  -\n\nInstructs the units in the army to move relative to their current locations when the supplied message is received.\n",
		"body": [
			"goto_location_offset_on_message(${1:string message}, ${2:number x offset}, ${3:number z offset}, ${4:boolean move fast})"
		],
	},
	"docgen:generated_army:generated_army:goto_location_offset_on_message": {
		"scope": "lua",
		"prefix": "generated_army:goto_location_offset_on_message",
		"description": "generated_army:goto_location_offset_on_message()\n-  -\n\nInstructs the units in the army to move relative to their current locations when the supplied message is received.\n",
		"body": [
			"generated_army:goto_location_offset_on_message(${1:string message}, ${2:number x offset}, ${3:number z offset}, ${4:boolean move fast})"
		],
	},
	"docgen:generated_army:ga:goto_location_offset_on_message": {
		"scope": "lua",
		"prefix": "ga:goto_location_offset_on_message",
		"description": "generated_army:goto_location_offset_on_message()\n-  -\n\nInstructs the units in the army to move relative to their current locations when the supplied message is received.\n",
		"body": [
			"ga:goto_location_offset_on_message(${1:string message}, ${2:number x offset}, ${3:number z offset}, ${4:boolean move fast})"
		],
	},
	"docgen:generated_army:set_enabled_on_message": {
		"scope": "lua",
		"prefix": "set_enabled_on_message",
		"description": "generated_army:set_enabled_on_message()\n-  -\n\nSets the enabled status of a generated army on receipt of a message.\n",
		"body": [
			"set_enabled_on_message(${1:string message}, ${2:boolean enabled})"
		],
	},
	"docgen:generated_army:generated_army:set_enabled_on_message": {
		"scope": "lua",
		"prefix": "generated_army:set_enabled_on_message",
		"description": "generated_army:set_enabled_on_message()\n-  -\n\nSets the enabled status of a generated army on receipt of a message.\n",
		"body": [
			"generated_army:set_enabled_on_message(${1:string message}, ${2:boolean enabled})"
		],
	},
	"docgen:generated_army:ga:set_enabled_on_message": {
		"scope": "lua",
		"prefix": "ga:set_enabled_on_message",
		"description": "generated_army:set_enabled_on_message()\n-  -\n\nSets the enabled status of a generated army on receipt of a message.\n",
		"body": [
			"ga:set_enabled_on_message(${1:string message}, ${2:boolean enabled})"
		],
	},
	"docgen:generated_army:set_formation_on_message": {
		"scope": "lua",
		"prefix": "set_formation_on_message",
		"description": "generated_army:set_formation_on_message()\n-  -\n\nSets the formation of the units in the generated army to the supplied formation on receipt of a message.\n",
		"body": [
			"set_formation_on_message(${1:string message}, ${2:string formation}, ${3:boolean release})"
		],
	},
	"docgen:generated_army:generated_army:set_formation_on_message": {
		"scope": "lua",
		"prefix": "generated_army:set_formation_on_message",
		"description": "generated_army:set_formation_on_message()\n-  -\n\nSets the formation of the units in the generated army to the supplied formation on receipt of a message.\n",
		"body": [
			"generated_army:set_formation_on_message(${1:string message}, ${2:string formation}, ${3:boolean release})"
		],
	},
	"docgen:generated_army:ga:set_formation_on_message": {
		"scope": "lua",
		"prefix": "ga:set_formation_on_message",
		"description": "generated_army:set_formation_on_message()\n-  -\n\nSets the formation of the units in the generated army to the supplied formation on receipt of a message.\n",
		"body": [
			"ga:set_formation_on_message(${1:string message}, ${2:string formation}, ${3:boolean release})"
		],
	},
	"docgen:generated_army:move_to_position_on_message": {
		"scope": "lua",
		"prefix": "move_to_position_on_message",
		"description": "generated_army:move_to_position_on_message()\n-  -\n\nInstructs all units in a generated army to move to a position under control of a script_ai_planner on receipt of a message.\n",
		"body": [
			"move_to_position_on_message(${1:string message}, ${2:vector position})"
		],
	},
	"docgen:generated_army:generated_army:move_to_position_on_message": {
		"scope": "lua",
		"prefix": "generated_army:move_to_position_on_message",
		"description": "generated_army:move_to_position_on_message()\n-  -\n\nInstructs all units in a generated army to move to a position under control of a script_ai_planner on receipt of a message.\n",
		"body": [
			"generated_army:move_to_position_on_message(${1:string message}, ${2:vector position})"
		],
	},
	"docgen:generated_army:ga:move_to_position_on_message": {
		"scope": "lua",
		"prefix": "ga:move_to_position_on_message",
		"description": "generated_army:move_to_position_on_message()\n-  -\n\nInstructs all units in a generated army to move to a position under control of a script_ai_planner on receipt of a message.\n",
		"body": [
			"ga:move_to_position_on_message(${1:string message}, ${2:vector position})"
		],
	},
	"docgen:generated_army:advance_on_message": {
		"scope": "lua",
		"prefix": "advance_on_message",
		"description": "generated_army:advance_on_message()\n-  -\n\nOrders the units in the generated army to advance on the enemy upon receipt of a supplied message.\n",
		"body": [
			"advance_on_message(${1:string message}, ${2:[opt=0] number wait offset})"
		],
	},
	"docgen:generated_army:generated_army:advance_on_message": {
		"scope": "lua",
		"prefix": "generated_army:advance_on_message",
		"description": "generated_army:advance_on_message()\n-  -\n\nOrders the units in the generated army to advance on the enemy upon receipt of a supplied message.\n",
		"body": [
			"generated_army:advance_on_message(${1:string message}, ${2:[opt=0] number wait offset})"
		],
	},
	"docgen:generated_army:ga:advance_on_message": {
		"scope": "lua",
		"prefix": "ga:advance_on_message",
		"description": "generated_army:advance_on_message()\n-  -\n\nOrders the units in the generated army to advance on the enemy upon receipt of a supplied message.\n",
		"body": [
			"ga:advance_on_message(${1:string message}, ${2:[opt=0] number wait offset})"
		],
	},
	"docgen:generated_army:attack_on_message": {
		"scope": "lua",
		"prefix": "attack_on_message",
		"description": "generated_army:attack_on_message()\n-  -\n\nOrders the units in the generated army to attack the enemy upon receipt of a supplied message.\n",
		"body": [
			"attack_on_message(${1:string message}, ${2:[opt=0] number wait offset})"
		],
	},
	"docgen:generated_army:generated_army:attack_on_message": {
		"scope": "lua",
		"prefix": "generated_army:attack_on_message",
		"description": "generated_army:attack_on_message()\n-  -\n\nOrders the units in the generated army to attack the enemy upon receipt of a supplied message.\n",
		"body": [
			"generated_army:attack_on_message(${1:string message}, ${2:[opt=0] number wait offset})"
		],
	},
	"docgen:generated_army:ga:attack_on_message": {
		"scope": "lua",
		"prefix": "ga:attack_on_message",
		"description": "generated_army:attack_on_message()\n-  -\n\nOrders the units in the generated army to attack the enemy upon receipt of a supplied message.\n",
		"body": [
			"ga:attack_on_message(${1:string message}, ${2:[opt=0] number wait offset})"
		],
	},
	"docgen:generated_army:attack_force_on_message": {
		"scope": "lua",
		"prefix": "attack_force_on_message",
		"description": "generated_army:attack_force_on_message()\n-  -\n\nOrders the units in the generated army to attack a specified enemy force upon receipt of a supplied message.\n",
		"body": [
			"attack_force_on_message(${1:string message}, ${2:generated_army target}, ${3:[opt=0] number wait offset})"
		],
	},
	"docgen:generated_army:generated_army:attack_force_on_message": {
		"scope": "lua",
		"prefix": "generated_army:attack_force_on_message",
		"description": "generated_army:attack_force_on_message()\n-  -\n\nOrders the units in the generated army to attack a specified enemy force upon receipt of a supplied message.\n",
		"body": [
			"generated_army:attack_force_on_message(${1:string message}, ${2:generated_army target}, ${3:[opt=0] number wait offset})"
		],
	},
	"docgen:generated_army:ga:attack_force_on_message": {
		"scope": "lua",
		"prefix": "ga:attack_force_on_message",
		"description": "generated_army:attack_force_on_message()\n-  -\n\nOrders the units in the generated army to attack a specified enemy force upon receipt of a supplied message.\n",
		"body": [
			"ga:attack_force_on_message(${1:string message}, ${2:generated_army target}, ${3:[opt=0] number wait offset})"
		],
	},
	"docgen:generated_army:defend_on_message": {
		"scope": "lua",
		"prefix": "defend_on_message",
		"description": "generated_army:defend_on_message()\n-  -\n\nOrders the units in the generated army to defend a specified position upon receipt of a supplied message.\n",
		"body": [
			"defend_on_message(${1:string message}, ${2:number x co-ordinate}, ${3:number x co-ordinate}, ${4:number radius}, ${5:[opt=0] number wait offset})"
		],
	},
	"docgen:generated_army:generated_army:defend_on_message": {
		"scope": "lua",
		"prefix": "generated_army:defend_on_message",
		"description": "generated_army:defend_on_message()\n-  -\n\nOrders the units in the generated army to defend a specified position upon receipt of a supplied message.\n",
		"body": [
			"generated_army:defend_on_message(${1:string message}, ${2:number x co-ordinate}, ${3:number x co-ordinate}, ${4:number radius}, ${5:[opt=0] number wait offset})"
		],
	},
	"docgen:generated_army:ga:defend_on_message": {
		"scope": "lua",
		"prefix": "ga:defend_on_message",
		"description": "generated_army:defend_on_message()\n-  -\n\nOrders the units in the generated army to defend a specified position upon receipt of a supplied message.\n",
		"body": [
			"ga:defend_on_message(${1:string message}, ${2:number x co-ordinate}, ${3:number x co-ordinate}, ${4:number radius}, ${5:[opt=0] number wait offset})"
		],
	},
	"docgen:generated_army:release_on_message": {
		"scope": "lua",
		"prefix": "release_on_message",
		"description": "generated_army:release_on_message()\n-  -\n\nReleases script control of the units in the generated army to the player/general AI upon receipt of a supplied message.\n",
		"body": [
			"release_on_message(${1:string message}, ${2:[opt=0] number wait offset})"
		],
	},
	"docgen:generated_army:generated_army:release_on_message": {
		"scope": "lua",
		"prefix": "generated_army:release_on_message",
		"description": "generated_army:release_on_message()\n-  -\n\nReleases script control of the units in the generated army to the player/general AI upon receipt of a supplied message.\n",
		"body": [
			"generated_army:release_on_message(${1:string message}, ${2:[opt=0] number wait offset})"
		],
	},
	"docgen:generated_army:ga:release_on_message": {
		"scope": "lua",
		"prefix": "ga:release_on_message",
		"description": "generated_army:release_on_message()\n-  -\n\nReleases script control of the units in the generated army to the player/general AI upon receipt of a supplied message.\n",
		"body": [
			"ga:release_on_message(${1:string message}, ${2:[opt=0] number wait offset})"
		],
	},
	"docgen:generated_army:reinforce_on_message": {
		"scope": "lua",
		"prefix": "reinforce_on_message",
		"description": "generated_army:reinforce_on_message()\n-  -\n\nPrevents the units in the generated army from entering the battlefield as reinforcements until the specified message is received, at which point they are deployed.\n",
		"body": [
			"reinforce_on_message(${1:string message}, ${2:[opt=0] number wait offset})"
		],
	},
	"docgen:generated_army:generated_army:reinforce_on_message": {
		"scope": "lua",
		"prefix": "generated_army:reinforce_on_message",
		"description": "generated_army:reinforce_on_message()\n-  -\n\nPrevents the units in the generated army from entering the battlefield as reinforcements until the specified message is received, at which point they are deployed.\n",
		"body": [
			"generated_army:reinforce_on_message(${1:string message}, ${2:[opt=0] number wait offset})"
		],
	},
	"docgen:generated_army:ga:reinforce_on_message": {
		"scope": "lua",
		"prefix": "ga:reinforce_on_message",
		"description": "generated_army:reinforce_on_message()\n-  -\n\nPrevents the units in the generated army from entering the battlefield as reinforcements until the specified message is received, at which point they are deployed.\n",
		"body": [
			"ga:reinforce_on_message(${1:string message}, ${2:[opt=0] number wait offset})"
		],
	},
	"docgen:generated_army:rout_over_time_on_message": {
		"scope": "lua",
		"prefix": "rout_over_time_on_message",
		"description": "generated_army:rout_over_time_on_message()\n-  -\n\nRouts the units in the generated army over the specified time period upon receipt of a supplied message.\n",
		"body": [
			"rout_over_time_on_message(${1:string message}, ${2:number period in ms})"
		],
	},
	"docgen:generated_army:generated_army:rout_over_time_on_message": {
		"scope": "lua",
		"prefix": "generated_army:rout_over_time_on_message",
		"description": "generated_army:rout_over_time_on_message()\n-  -\n\nRouts the units in the generated army over the specified time period upon receipt of a supplied message.\n",
		"body": [
			"generated_army:rout_over_time_on_message(${1:string message}, ${2:number period in ms})"
		],
	},
	"docgen:generated_army:ga:rout_over_time_on_message": {
		"scope": "lua",
		"prefix": "ga:rout_over_time_on_message",
		"description": "generated_army:rout_over_time_on_message()\n-  -\n\nRouts the units in the generated army over the specified time period upon receipt of a supplied message.\n",
		"body": [
			"ga:rout_over_time_on_message(${1:string message}, ${2:number period in ms})"
		],
	},
	"docgen:generated_army:withdraw_on_message": {
		"scope": "lua",
		"prefix": "withdraw_on_message",
		"description": "generated_army:withdraw_on_message()\n-  -\n\nWithdraw the units in the generated army upon receipt of a supplied message.\n",
		"body": [
			"withdraw_on_message(${1:string message})"
		],
	},
	"docgen:generated_army:generated_army:withdraw_on_message": {
		"scope": "lua",
		"prefix": "generated_army:withdraw_on_message",
		"description": "generated_army:withdraw_on_message()\n-  -\n\nWithdraw the units in the generated army upon receipt of a supplied message.\n",
		"body": [
			"generated_army:withdraw_on_message(${1:string message})"
		],
	},
	"docgen:generated_army:ga:withdraw_on_message": {
		"scope": "lua",
		"prefix": "ga:withdraw_on_message",
		"description": "generated_army:withdraw_on_message()\n-  -\n\nWithdraw the units in the generated army upon receipt of a supplied message.\n",
		"body": [
			"ga:withdraw_on_message(${1:string message})"
		],
	},
	"docgen:generated_army:set_melee_mode_on_message": {
		"scope": "lua",
		"prefix": "set_melee_mode_on_message",
		"description": "generated_army:set_melee_mode_on_message()\n-  -\n\nActivates or deactivates melee mode on units within the generated army on receipt of a supplied message.\n",
		"body": [
			"set_melee_mode_on_message(${1:string message}, ${2:[opt=true] boolean activate}, ${3:[opt=false] boolean release})"
		],
	},
	"docgen:generated_army:generated_army:set_melee_mode_on_message": {
		"scope": "lua",
		"prefix": "generated_army:set_melee_mode_on_message",
		"description": "generated_army:set_melee_mode_on_message()\n-  -\n\nActivates or deactivates melee mode on units within the generated army on receipt of a supplied message.\n",
		"body": [
			"generated_army:set_melee_mode_on_message(${1:string message}, ${2:[opt=true] boolean activate}, ${3:[opt=false] boolean release})"
		],
	},
	"docgen:generated_army:ga:set_melee_mode_on_message": {
		"scope": "lua",
		"prefix": "ga:set_melee_mode_on_message",
		"description": "generated_army:set_melee_mode_on_message()\n-  -\n\nActivates or deactivates melee mode on units within the generated army on receipt of a supplied message.\n",
		"body": [
			"ga:set_melee_mode_on_message(${1:string message}, ${2:[opt=true] boolean activate}, ${3:[opt=false] boolean release})"
		],
	},
	"docgen:generated_army:use_army_special_ability_on_message": {
		"scope": "lua",
		"prefix": "use_army_special_ability_on_message",
		"description": "generated_army:use_army_special_ability_on_message()\n-  -\n\nInstructs the logical battle_army associated with the first unit in this <code>generated_army</code> to use the supplied special ability, upon receipt of the supplied message.\n",
		"body": [
			"use_army_special_ability_on_message(${1:string message}, ${2:string special ability key}, ${3:[opt=nil] battle_vector position}, ${4:[opt=nil] number orientation}, ${5:[opt=nil] number width}, ${6:[opt=0] number delay})"
		],
	},
	"docgen:generated_army:generated_army:use_army_special_ability_on_message": {
		"scope": "lua",
		"prefix": "generated_army:use_army_special_ability_on_message",
		"description": "generated_army:use_army_special_ability_on_message()\n-  -\n\nInstructs the logical battle_army associated with the first unit in this <code>generated_army</code> to use the supplied special ability, upon receipt of the supplied message.\n",
		"body": [
			"generated_army:use_army_special_ability_on_message(${1:string message}, ${2:string special ability key}, ${3:[opt=nil] battle_vector position}, ${4:[opt=nil] number orientation}, ${5:[opt=nil] number width}, ${6:[opt=0] number delay})"
		],
	},
	"docgen:generated_army:ga:use_army_special_ability_on_message": {
		"scope": "lua",
		"prefix": "ga:use_army_special_ability_on_message",
		"description": "generated_army:use_army_special_ability_on_message()\n-  -\n\nInstructs the logical battle_army associated with the first unit in this <code>generated_army</code> to use the supplied special ability, upon receipt of the supplied message.\n",
		"body": [
			"ga:use_army_special_ability_on_message(${1:string message}, ${2:string special ability key}, ${3:[opt=nil] battle_vector position}, ${4:[opt=nil] number orientation}, ${5:[opt=nil] number width}, ${6:[opt=0] number delay})"
		],
	},
	"docgen:generated_army:change_behaviour_active_on_message": {
		"scope": "lua",
		"prefix": "change_behaviour_active_on_message",
		"description": "generated_army:change_behaviour_active_on_message()\n-  -\n\nActivates or deactivates a supplied behaviour on units within the generated army on receipt of a supplied message.\n",
		"body": [
			"change_behaviour_active_on_message(${1:string message}, ${2:string behaviour}, ${3:[opt=true] boolean activate}, ${4:[opt=false] boolean release})"
		],
	},
	"docgen:generated_army:generated_army:change_behaviour_active_on_message": {
		"scope": "lua",
		"prefix": "generated_army:change_behaviour_active_on_message",
		"description": "generated_army:change_behaviour_active_on_message()\n-  -\n\nActivates or deactivates a supplied behaviour on units within the generated army on receipt of a supplied message.\n",
		"body": [
			"generated_army:change_behaviour_active_on_message(${1:string message}, ${2:string behaviour}, ${3:[opt=true] boolean activate}, ${4:[opt=false] boolean release})"
		],
	},
	"docgen:generated_army:ga:change_behaviour_active_on_message": {
		"scope": "lua",
		"prefix": "ga:change_behaviour_active_on_message",
		"description": "generated_army:change_behaviour_active_on_message()\n-  -\n\nActivates or deactivates a supplied behaviour on units within the generated army on receipt of a supplied message.\n",
		"body": [
			"ga:change_behaviour_active_on_message(${1:string message}, ${2:string behaviour}, ${3:[opt=true] boolean activate}, ${4:[opt=false] boolean release})"
		],
	},
	"docgen:generated_army:set_invincible_on_message": {
		"scope": "lua",
		"prefix": "set_invincible_on_message",
		"description": "generated_army:set_invincible_on_message()\n-  -\n\nSets the units in the generated army to be invincible and fearless upon receipt of a supplied message.\n",
		"body": [
			"set_invincible_on_message(${1:string message})"
		],
	},
	"docgen:generated_army:generated_army:set_invincible_on_message": {
		"scope": "lua",
		"prefix": "generated_army:set_invincible_on_message",
		"description": "generated_army:set_invincible_on_message()\n-  -\n\nSets the units in the generated army to be invincible and fearless upon receipt of a supplied message.\n",
		"body": [
			"generated_army:set_invincible_on_message(${1:string message})"
		],
	},
	"docgen:generated_army:ga:set_invincible_on_message": {
		"scope": "lua",
		"prefix": "ga:set_invincible_on_message",
		"description": "generated_army:set_invincible_on_message()\n-  -\n\nSets the units in the generated army to be invincible and fearless upon receipt of a supplied message.\n",
		"body": [
			"ga:set_invincible_on_message(${1:string message})"
		],
	},
	"docgen:generated_army:refresh_on_message": {
		"scope": "lua",
		"prefix": "refresh_on_message",
		"description": "generated_army:refresh_on_message()\n-  -\n\nRefreshes the ammunition and fatigue of units in the generated army upon receipt of a supplied message.\n",
		"body": [
			"refresh_on_message(${1:string message})"
		],
	},
	"docgen:generated_army:generated_army:refresh_on_message": {
		"scope": "lua",
		"prefix": "generated_army:refresh_on_message",
		"description": "generated_army:refresh_on_message()\n-  -\n\nRefreshes the ammunition and fatigue of units in the generated army upon receipt of a supplied message.\n",
		"body": [
			"generated_army:refresh_on_message(${1:string message})"
		],
	},
	"docgen:generated_army:ga:refresh_on_message": {
		"scope": "lua",
		"prefix": "ga:refresh_on_message",
		"description": "generated_army:refresh_on_message()\n-  -\n\nRefreshes the ammunition and fatigue of units in the generated army upon receipt of a supplied message.\n",
		"body": [
			"ga:refresh_on_message(${1:string message})"
		],
	},
	"docgen:generated_army:deploy_at_random_intervals_on_message": {
		"scope": "lua",
		"prefix": "deploy_at_random_intervals_on_message",
		"description": "generated_army:deploy_at_random_intervals_on_message()\n-  -\n\nPrevents the units in the generated army from deploying as reinforcements when called, and instructs them to enter the battlefield in random chunks upon receipt of a supplied message.\n",
		"body": [
			"deploy_at_random_intervals_on_message(${1:string message}, ${2:number min units}, ${3:number max units}, ${4:string min period}, ${5:string max period}, ${6:[opt=nil] string cancel message}, ${7:[opt=false] boolean spawn immediately})"
		],
	},
	"docgen:generated_army:generated_army:deploy_at_random_intervals_on_message": {
		"scope": "lua",
		"prefix": "generated_army:deploy_at_random_intervals_on_message",
		"description": "generated_army:deploy_at_random_intervals_on_message()\n-  -\n\nPrevents the units in the generated army from deploying as reinforcements when called, and instructs them to enter the battlefield in random chunks upon receipt of a supplied message.\n",
		"body": [
			"generated_army:deploy_at_random_intervals_on_message(${1:string message}, ${2:number min units}, ${3:number max units}, ${4:string min period}, ${5:string max period}, ${6:[opt=nil] string cancel message}, ${7:[opt=false] boolean spawn immediately})"
		],
	},
	"docgen:generated_army:ga:deploy_at_random_intervals_on_message": {
		"scope": "lua",
		"prefix": "ga:deploy_at_random_intervals_on_message",
		"description": "generated_army:deploy_at_random_intervals_on_message()\n-  -\n\nPrevents the units in the generated army from deploying as reinforcements when called, and instructs them to enter the battlefield in random chunks upon receipt of a supplied message.\n",
		"body": [
			"ga:deploy_at_random_intervals_on_message(${1:string message}, ${2:number min units}, ${3:number max units}, ${4:string min period}, ${5:string max period}, ${6:[opt=nil] string cancel message}, ${7:[opt=false] boolean spawn immediately})"
		],
	},
	"docgen:generated_army:grant_infinite_ammo_on_message": {
		"scope": "lua",
		"prefix": "grant_infinite_ammo_on_message",
		"description": "generated_army:grant_infinite_ammo_on_message()\n-  -\n\nContinually refills the ammunition of all units in the generated army upon receipt of the supplied message.\n",
		"body": [
			"grant_infinite_ammo_on_message(${1:string message})"
		],
	},
	"docgen:generated_army:generated_army:grant_infinite_ammo_on_message": {
		"scope": "lua",
		"prefix": "generated_army:grant_infinite_ammo_on_message",
		"description": "generated_army:grant_infinite_ammo_on_message()\n-  -\n\nContinually refills the ammunition of all units in the generated army upon receipt of the supplied message.\n",
		"body": [
			"generated_army:grant_infinite_ammo_on_message(${1:string message})"
		],
	},
	"docgen:generated_army:ga:grant_infinite_ammo_on_message": {
		"scope": "lua",
		"prefix": "ga:grant_infinite_ammo_on_message",
		"description": "generated_army:grant_infinite_ammo_on_message()\n-  -\n\nContinually refills the ammunition of all units in the generated army upon receipt of the supplied message.\n",
		"body": [
			"ga:grant_infinite_ammo_on_message(${1:string message})"
		],
	},
	"docgen:generated_army:add_ping_icon_on_message": {
		"scope": "lua",
		"prefix": "add_ping_icon_on_message",
		"description": "generated_army:add_ping_icon_on_message()\n-  -\n\nAdds a ping marker to a specified unit within the generated army upon receipt of a supplied message.\n",
		"body": [
			"add_ping_icon_on_message(${1:string message}, ${2:[opt=8] number icon type}, ${3:[opt=1] number unit index}, ${4:[opt=nil] number duration})"
		],
	},
	"docgen:generated_army:generated_army:add_ping_icon_on_message": {
		"scope": "lua",
		"prefix": "generated_army:add_ping_icon_on_message",
		"description": "generated_army:add_ping_icon_on_message()\n-  -\n\nAdds a ping marker to a specified unit within the generated army upon receipt of a supplied message.\n",
		"body": [
			"generated_army:add_ping_icon_on_message(${1:string message}, ${2:[opt=8] number icon type}, ${3:[opt=1] number unit index}, ${4:[opt=nil] number duration})"
		],
	},
	"docgen:generated_army:ga:add_ping_icon_on_message": {
		"scope": "lua",
		"prefix": "ga:add_ping_icon_on_message",
		"description": "generated_army:add_ping_icon_on_message()\n-  -\n\nAdds a ping marker to a specified unit within the generated army upon receipt of a supplied message.\n",
		"body": [
			"ga:add_ping_icon_on_message(${1:string message}, ${2:[opt=8] number icon type}, ${3:[opt=1] number unit index}, ${4:[opt=nil] number duration})"
		],
	},
	"docgen:generated_army:remove_ping_icon_on_message": {
		"scope": "lua",
		"prefix": "remove_ping_icon_on_message",
		"description": "generated_army:remove_ping_icon_on_message()\n-  -\n\nRemoves a ping marker from a specified unit within the generated army upon receipt of a supplied message.\n",
		"body": [
			"remove_ping_icon_on_message(${1:string message}, ${2:[opt=1] number unit index})"
		],
	},
	"docgen:generated_army:generated_army:remove_ping_icon_on_message": {
		"scope": "lua",
		"prefix": "generated_army:remove_ping_icon_on_message",
		"description": "generated_army:remove_ping_icon_on_message()\n-  -\n\nRemoves a ping marker from a specified unit within the generated army upon receipt of a supplied message.\n",
		"body": [
			"generated_army:remove_ping_icon_on_message(${1:string message}, ${2:[opt=1] number unit index})"
		],
	},
	"docgen:generated_army:ga:remove_ping_icon_on_message": {
		"scope": "lua",
		"prefix": "ga:remove_ping_icon_on_message",
		"description": "generated_army:remove_ping_icon_on_message()\n-  -\n\nRemoves a ping marker from a specified unit within the generated army upon receipt of a supplied message.\n",
		"body": [
			"ga:remove_ping_icon_on_message(${1:string message}, ${2:[opt=1] number unit index})"
		],
	},
	"docgen:generated_army:add_winds_of_magic_on_message": {
		"scope": "lua",
		"prefix": "add_winds_of_magic_on_message",
		"description": "generated_army:add_winds_of_magic_on_message()\n-  -\n\nAdds an amount to the winds of magic reserve for the generated army upon receipt of a supplied message.\n",
		"body": [
			"add_winds_of_magic_on_message(${1:string message}, ${2:number modification value})"
		],
	},
	"docgen:generated_army:generated_army:add_winds_of_magic_on_message": {
		"scope": "lua",
		"prefix": "generated_army:add_winds_of_magic_on_message",
		"description": "generated_army:add_winds_of_magic_on_message()\n-  -\n\nAdds an amount to the winds of magic reserve for the generated army upon receipt of a supplied message.\n",
		"body": [
			"generated_army:add_winds_of_magic_on_message(${1:string message}, ${2:number modification value})"
		],
	},
	"docgen:generated_army:ga:add_winds_of_magic_on_message": {
		"scope": "lua",
		"prefix": "ga:add_winds_of_magic_on_message",
		"description": "generated_army:add_winds_of_magic_on_message()\n-  -\n\nAdds an amount to the winds of magic reserve for the generated army upon receipt of a supplied message.\n",
		"body": [
			"ga:add_winds_of_magic_on_message(${1:string message}, ${2:number modification value})"
		],
	},
	"docgen:generated_army:set_always_visible_on_message": {
		"scope": "lua",
		"prefix": "set_always_visible_on_message",
		"description": "generated_army:set_always_visible_on_message()\n-  -\n\nOn receipt of the supplied message, sets the army's visibility status to the supplied true or false value.\n",
		"body": [
			"set_always_visible_on_message(${1:string message}, ${2:[opt=false] boolean always visible}, ${3:[opt=false] boolean release control})"
		],
	},
	"docgen:generated_army:generated_army:set_always_visible_on_message": {
		"scope": "lua",
		"prefix": "generated_army:set_always_visible_on_message",
		"description": "generated_army:set_always_visible_on_message()\n-  -\n\nOn receipt of the supplied message, sets the army's visibility status to the supplied true or false value.\n",
		"body": [
			"generated_army:set_always_visible_on_message(${1:string message}, ${2:[opt=false] boolean always visible}, ${3:[opt=false] boolean release control})"
		],
	},
	"docgen:generated_army:ga:set_always_visible_on_message": {
		"scope": "lua",
		"prefix": "ga:set_always_visible_on_message",
		"description": "generated_army:set_always_visible_on_message()\n-  -\n\nOn receipt of the supplied message, sets the army's visibility status to the supplied true or false value.\n",
		"body": [
			"ga:set_always_visible_on_message(${1:string message}, ${2:[opt=false] boolean always visible}, ${3:[opt=false] boolean release control})"
		],
	},
	"docgen:generated_army:force_victory_on_message": {
		"scope": "lua",
		"prefix": "force_victory_on_message",
		"description": "generated_army:force_victory_on_message()\n-  -\n\nForces the enemies of the generated army to rout over time upon receipt of the supplied message.\n",
		"body": [
			"force_victory_on_message(${1:string message}, ${2:[opt=10000] number duration})"
		],
	},
	"docgen:generated_army:generated_army:force_victory_on_message": {
		"scope": "lua",
		"prefix": "generated_army:force_victory_on_message",
		"description": "generated_army:force_victory_on_message()\n-  -\n\nForces the enemies of the generated army to rout over time upon receipt of the supplied message.\n",
		"body": [
			"generated_army:force_victory_on_message(${1:string message}, ${2:[opt=10000] number duration})"
		],
	},
	"docgen:generated_army:ga:force_victory_on_message": {
		"scope": "lua",
		"prefix": "ga:force_victory_on_message",
		"description": "generated_army:force_victory_on_message()\n-  -\n\nForces the enemies of the generated army to rout over time upon receipt of the supplied message.\n",
		"body": [
			"ga:force_victory_on_message(${1:string message}, ${2:[opt=10000] number duration})"
		],
	},
	"docgen:generated_army:remove_on_message": {
		"scope": "lua",
		"prefix": "remove_on_message",
		"description": "generated_army:remove_on_message()\n-  -\n\nImmediately kills and removes the units in the generated army upon receipt of the supplied message.\n",
		"body": [
			"remove_on_message(${1:string message})"
		],
	},
	"docgen:generated_army:generated_army:remove_on_message": {
		"scope": "lua",
		"prefix": "generated_army:remove_on_message",
		"description": "generated_army:remove_on_message()\n-  -\n\nImmediately kills and removes the units in the generated army upon receipt of the supplied message.\n",
		"body": [
			"generated_army:remove_on_message(${1:string message})"
		],
	},
	"docgen:generated_army:ga:remove_on_message": {
		"scope": "lua",
		"prefix": "ga:remove_on_message",
		"description": "generated_army:remove_on_message()\n-  -\n\nImmediately kills and removes the units in the generated army upon receipt of the supplied message.\n",
		"body": [
			"ga:remove_on_message(${1:string message})"
		],
	},
	"docgen:generated_army:message_on_casualties": {
		"scope": "lua",
		"prefix": "message_on_casualties",
		"description": "generated_army:message_on_casualties()\n-  -\n\nFires the supplied message when the casualty rate of this generated army equals or exceeds the supplied threshold.\n",
		"body": [
			"message_on_casualties(${1:string message}, ${2:number unary threshold})"
		],
	},
	"docgen:generated_army:generated_army:message_on_casualties": {
		"scope": "lua",
		"prefix": "generated_army:message_on_casualties",
		"description": "generated_army:message_on_casualties()\n-  -\n\nFires the supplied message when the casualty rate of this generated army equals or exceeds the supplied threshold.\n",
		"body": [
			"generated_army:message_on_casualties(${1:string message}, ${2:number unary threshold})"
		],
	},
	"docgen:generated_army:ga:message_on_casualties": {
		"scope": "lua",
		"prefix": "ga:message_on_casualties",
		"description": "generated_army:message_on_casualties()\n-  -\n\nFires the supplied message when the casualty rate of this generated army equals or exceeds the supplied threshold.\n",
		"body": [
			"ga:message_on_casualties(${1:string message}, ${2:number unary threshold})"
		],
	},
	"docgen:generated_army:message_on_proximity_to_enemy": {
		"scope": "lua",
		"prefix": "message_on_proximity_to_enemy",
		"description": "generated_army:message_on_proximity_to_enemy()\n-  -\n\nTriggers the supplied message when this generated army finds itself with the supplied distance of its enemy.\n",
		"body": [
			"message_on_proximity_to_enemy(${1:string message}, ${2:number threshold distance})"
		],
	},
	"docgen:generated_army:generated_army:message_on_proximity_to_enemy": {
		"scope": "lua",
		"prefix": "generated_army:message_on_proximity_to_enemy",
		"description": "generated_army:message_on_proximity_to_enemy()\n-  -\n\nTriggers the supplied message when this generated army finds itself with the supplied distance of its enemy.\n",
		"body": [
			"generated_army:message_on_proximity_to_enemy(${1:string message}, ${2:number threshold distance})"
		],
	},
	"docgen:generated_army:ga:message_on_proximity_to_enemy": {
		"scope": "lua",
		"prefix": "ga:message_on_proximity_to_enemy",
		"description": "generated_army:message_on_proximity_to_enemy()\n-  -\n\nTriggers the supplied message when this generated army finds itself with the supplied distance of its enemy.\n",
		"body": [
			"ga:message_on_proximity_to_enemy(${1:string message}, ${2:number threshold distance})"
		],
	},
	"docgen:generated_army:message_on_proximity_to_ally": {
		"scope": "lua",
		"prefix": "message_on_proximity_to_ally",
		"description": "generated_army:message_on_proximity_to_ally()\n-  -\n\nTriggers the supplied message when this generated army finds itself with the supplied distance of any allied generated armies.\n",
		"body": [
			"message_on_proximity_to_ally(${1:string message}, ${2:number threshold distance})"
		],
	},
	"docgen:generated_army:generated_army:message_on_proximity_to_ally": {
		"scope": "lua",
		"prefix": "generated_army:message_on_proximity_to_ally",
		"description": "generated_army:message_on_proximity_to_ally()\n-  -\n\nTriggers the supplied message when this generated army finds itself with the supplied distance of any allied generated armies.\n",
		"body": [
			"generated_army:message_on_proximity_to_ally(${1:string message}, ${2:number threshold distance})"
		],
	},
	"docgen:generated_army:ga:message_on_proximity_to_ally": {
		"scope": "lua",
		"prefix": "ga:message_on_proximity_to_ally",
		"description": "generated_army:message_on_proximity_to_ally()\n-  -\n\nTriggers the supplied message when this generated army finds itself with the supplied distance of any allied generated armies.\n",
		"body": [
			"ga:message_on_proximity_to_ally(${1:string message}, ${2:number threshold distance})"
		],
	},
	"docgen:generated_army:message_on_proximity_to_position": {
		"scope": "lua",
		"prefix": "message_on_proximity_to_position",
		"description": "generated_army:message_on_proximity_to_position()\n-  -\n\nTriggers the supplied message when this generated army finds itself with the supplied distance of the supplied position.\n",
		"body": [
			"message_on_proximity_to_position(${1:string message}, ${2:vector position}, ${3:number threshold distance})"
		],
	},
	"docgen:generated_army:generated_army:message_on_proximity_to_position": {
		"scope": "lua",
		"prefix": "generated_army:message_on_proximity_to_position",
		"description": "generated_army:message_on_proximity_to_position()\n-  -\n\nTriggers the supplied message when this generated army finds itself with the supplied distance of the supplied position.\n",
		"body": [
			"generated_army:message_on_proximity_to_position(${1:string message}, ${2:vector position}, ${3:number threshold distance})"
		],
	},
	"docgen:generated_army:ga:message_on_proximity_to_position": {
		"scope": "lua",
		"prefix": "ga:message_on_proximity_to_position",
		"description": "generated_army:message_on_proximity_to_position()\n-  -\n\nTriggers the supplied message when this generated army finds itself with the supplied distance of the supplied position.\n",
		"body": [
			"ga:message_on_proximity_to_position(${1:string message}, ${2:vector position}, ${3:number threshold distance})"
		],
	},
	"docgen:generated_army:message_on_rout_proportion": {
		"scope": "lua",
		"prefix": "message_on_rout_proportion",
		"description": "generated_army:message_on_rout_proportion()\n-  -\n\nTriggers the supplied message when the proportion of units routing or dead in this generated army exceeds the supplied unary threshold.\n",
		"body": [
			"message_on_rout_proportion(${1:string message}, ${2:number threshold})"
		],
	},
	"docgen:generated_army:generated_army:message_on_rout_proportion": {
		"scope": "lua",
		"prefix": "generated_army:message_on_rout_proportion",
		"description": "generated_army:message_on_rout_proportion()\n-  -\n\nTriggers the supplied message when the proportion of units routing or dead in this generated army exceeds the supplied unary threshold.\n",
		"body": [
			"generated_army:message_on_rout_proportion(${1:string message}, ${2:number threshold})"
		],
	},
	"docgen:generated_army:ga:message_on_rout_proportion": {
		"scope": "lua",
		"prefix": "ga:message_on_rout_proportion",
		"description": "generated_army:message_on_rout_proportion()\n-  -\n\nTriggers the supplied message when the proportion of units routing or dead in this generated army exceeds the supplied unary threshold.\n",
		"body": [
			"ga:message_on_rout_proportion(${1:string message}, ${2:number threshold})"
		],
	},
	"docgen:generated_army:message_on_shattered_proportion": {
		"scope": "lua",
		"prefix": "message_on_shattered_proportion",
		"description": "generated_army:message_on_shattered_proportion()\n-  -\n\nTriggers the supplied message when the proportion of units that are shattered in this generated army exceeds the supplied unary threshold.\n",
		"body": [
			"message_on_shattered_proportion(${1:string message}, ${2:number threshold})"
		],
	},
	"docgen:generated_army:generated_army:message_on_shattered_proportion": {
		"scope": "lua",
		"prefix": "generated_army:message_on_shattered_proportion",
		"description": "generated_army:message_on_shattered_proportion()\n-  -\n\nTriggers the supplied message when the proportion of units that are shattered in this generated army exceeds the supplied unary threshold.\n",
		"body": [
			"generated_army:message_on_shattered_proportion(${1:string message}, ${2:number threshold})"
		],
	},
	"docgen:generated_army:ga:message_on_shattered_proportion": {
		"scope": "lua",
		"prefix": "ga:message_on_shattered_proportion",
		"description": "generated_army:message_on_shattered_proportion()\n-  -\n\nTriggers the supplied message when the proportion of units that are shattered in this generated army exceeds the supplied unary threshold.\n",
		"body": [
			"ga:message_on_shattered_proportion(${1:string message}, ${2:number threshold})"
		],
	},
	"docgen:generated_army:message_on_deployed": {
		"scope": "lua",
		"prefix": "message_on_deployed",
		"description": "generated_army:message_on_deployed()\n-  -\n\nTriggers the supplied message when the units in the generated army are all fully deployed.\n",
		"body": [
			"message_on_deployed(${1:string message})"
		],
	},
	"docgen:generated_army:generated_army:message_on_deployed": {
		"scope": "lua",
		"prefix": "generated_army:message_on_deployed",
		"description": "generated_army:message_on_deployed()\n-  -\n\nTriggers the supplied message when the units in the generated army are all fully deployed.\n",
		"body": [
			"generated_army:message_on_deployed(${1:string message})"
		],
	},
	"docgen:generated_army:ga:message_on_deployed": {
		"scope": "lua",
		"prefix": "ga:message_on_deployed",
		"description": "generated_army:message_on_deployed()\n-  -\n\nTriggers the supplied message when the units in the generated army are all fully deployed.\n",
		"body": [
			"ga:message_on_deployed(${1:string message})"
		],
	},
	"docgen:generated_army:message_on_any_deployed": {
		"scope": "lua",
		"prefix": "message_on_any_deployed",
		"description": "generated_army:message_on_any_deployed()\n-  -\n\nTriggers the supplied message when any of the units in the generated army have deployed.\n",
		"body": [
			"message_on_any_deployed(${1:string message})"
		],
	},
	"docgen:generated_army:generated_army:message_on_any_deployed": {
		"scope": "lua",
		"prefix": "generated_army:message_on_any_deployed",
		"description": "generated_army:message_on_any_deployed()\n-  -\n\nTriggers the supplied message when any of the units in the generated army have deployed.\n",
		"body": [
			"generated_army:message_on_any_deployed(${1:string message})"
		],
	},
	"docgen:generated_army:ga:message_on_any_deployed": {
		"scope": "lua",
		"prefix": "ga:message_on_any_deployed",
		"description": "generated_army:message_on_any_deployed()\n-  -\n\nTriggers the supplied message when any of the units in the generated army have deployed.\n",
		"body": [
			"ga:message_on_any_deployed(${1:string message})"
		],
	},
	"docgen:generated_army:message_on_seen_by_enemy": {
		"scope": "lua",
		"prefix": "message_on_seen_by_enemy",
		"description": "generated_army:message_on_seen_by_enemy()\n-  -\n\nTriggers the supplied message when any of the units in the generated army have become visible to the enemy.\n",
		"body": [
			"message_on_seen_by_enemy(${1:string message})"
		],
	},
	"docgen:generated_army:generated_army:message_on_seen_by_enemy": {
		"scope": "lua",
		"prefix": "generated_army:message_on_seen_by_enemy",
		"description": "generated_army:message_on_seen_by_enemy()\n-  -\n\nTriggers the supplied message when any of the units in the generated army have become visible to the enemy.\n",
		"body": [
			"generated_army:message_on_seen_by_enemy(${1:string message})"
		],
	},
	"docgen:generated_army:ga:message_on_seen_by_enemy": {
		"scope": "lua",
		"prefix": "ga:message_on_seen_by_enemy",
		"description": "generated_army:message_on_seen_by_enemy()\n-  -\n\nTriggers the supplied message when any of the units in the generated army have become visible to the enemy.\n",
		"body": [
			"ga:message_on_seen_by_enemy(${1:string message})"
		],
	},
	"docgen:generated_army:message_on_commander_death": {
		"scope": "lua",
		"prefix": "message_on_commander_death",
		"description": "generated_army:message_on_commander_death()\n-  -\n\nTriggers the supplied message when the commander of the army corresponding to this generated army has died.\n",
		"body": [
			"message_on_commander_death(${1:string message})"
		],
	},
	"docgen:generated_army:generated_army:message_on_commander_death": {
		"scope": "lua",
		"prefix": "generated_army:message_on_commander_death",
		"description": "generated_army:message_on_commander_death()\n-  -\n\nTriggers the supplied message when the commander of the army corresponding to this generated army has died.\n",
		"body": [
			"generated_army:message_on_commander_death(${1:string message})"
		],
	},
	"docgen:generated_army:ga:message_on_commander_death": {
		"scope": "lua",
		"prefix": "ga:message_on_commander_death",
		"description": "generated_army:message_on_commander_death()\n-  -\n\nTriggers the supplied message when the commander of the army corresponding to this generated army has died.\n",
		"body": [
			"ga:message_on_commander_death(${1:string message})"
		],
	},
	"docgen:generated_army:message_on_commander_dead_or_routing": {
		"scope": "lua",
		"prefix": "message_on_commander_dead_or_routing",
		"description": "generated_army:message_on_commander_dead_or_routing()\n-  -\n\nTriggers the supplied message when the commanding unit within this generated army is either dead or routing.\n",
		"body": [
			"message_on_commander_dead_or_routing(${1:string message})"
		],
	},
	"docgen:generated_army:generated_army:message_on_commander_dead_or_routing": {
		"scope": "lua",
		"prefix": "generated_army:message_on_commander_dead_or_routing",
		"description": "generated_army:message_on_commander_dead_or_routing()\n-  -\n\nTriggers the supplied message when the commanding unit within this generated army is either dead or routing.\n",
		"body": [
			"generated_army:message_on_commander_dead_or_routing(${1:string message})"
		],
	},
	"docgen:generated_army:ga:message_on_commander_dead_or_routing": {
		"scope": "lua",
		"prefix": "ga:message_on_commander_dead_or_routing",
		"description": "generated_army:message_on_commander_dead_or_routing()\n-  -\n\nTriggers the supplied message when the commanding unit within this generated army is either dead or routing.\n",
		"body": [
			"ga:message_on_commander_dead_or_routing(${1:string message})"
		],
	},
	"docgen:generated_army:message_on_commander_dead_or_shattered": {
		"scope": "lua",
		"prefix": "message_on_commander_dead_or_shattered",
		"description": "generated_army:message_on_commander_dead_or_shattered()\n-  -\n\nTriggers the supplied message when the commanding unit within this generated army is either dead or shattered.\n",
		"body": [
			"message_on_commander_dead_or_shattered(${1:string message})"
		],
	},
	"docgen:generated_army:generated_army:message_on_commander_dead_or_shattered": {
		"scope": "lua",
		"prefix": "generated_army:message_on_commander_dead_or_shattered",
		"description": "generated_army:message_on_commander_dead_or_shattered()\n-  -\n\nTriggers the supplied message when the commanding unit within this generated army is either dead or shattered.\n",
		"body": [
			"generated_army:message_on_commander_dead_or_shattered(${1:string message})"
		],
	},
	"docgen:generated_army:ga:message_on_commander_dead_or_shattered": {
		"scope": "lua",
		"prefix": "ga:message_on_commander_dead_or_shattered",
		"description": "generated_army:message_on_commander_dead_or_shattered()\n-  -\n\nTriggers the supplied message when the commanding unit within this generated army is either dead or shattered.\n",
		"body": [
			"ga:message_on_commander_dead_or_shattered(${1:string message})"
		],
	},
	"docgen:generated_army:message_on_under_attack": {
		"scope": "lua",
		"prefix": "message_on_under_attack",
		"description": "generated_army:message_on_under_attack()\n-  -\n\nTriggers the supplied message when any of the units in this generated army come under attack.\n",
		"body": [
			"message_on_under_attack(${1:string message})"
		],
	},
	"docgen:generated_army:generated_army:message_on_under_attack": {
		"scope": "lua",
		"prefix": "generated_army:message_on_under_attack",
		"description": "generated_army:message_on_under_attack()\n-  -\n\nTriggers the supplied message when any of the units in this generated army come under attack.\n",
		"body": [
			"generated_army:message_on_under_attack(${1:string message})"
		],
	},
	"docgen:generated_army:ga:message_on_under_attack": {
		"scope": "lua",
		"prefix": "ga:message_on_under_attack",
		"description": "generated_army:message_on_under_attack()\n-  -\n\nTriggers the supplied message when any of the units in this generated army come under attack.\n",
		"body": [
			"ga:message_on_under_attack(${1:string message})"
		],
	},
	"docgen:generated_army:message_on_alliance_not_active_on_battlefield": {
		"scope": "lua",
		"prefix": "message_on_alliance_not_active_on_battlefield",
		"description": "generated_army:message_on_alliance_not_active_on_battlefield()\n-  -\n\nTriggers the supplied message if none of the units in the alliance to which this generated army belongs are a) deployed and b) not routing, shattered or dead\n",
		"body": [
			"message_on_alliance_not_active_on_battlefield(${1:string message})"
		],
	},
	"docgen:generated_army:generated_army:message_on_alliance_not_active_on_battlefield": {
		"scope": "lua",
		"prefix": "generated_army:message_on_alliance_not_active_on_battlefield",
		"description": "generated_army:message_on_alliance_not_active_on_battlefield()\n-  -\n\nTriggers the supplied message if none of the units in the alliance to which this generated army belongs are a) deployed and b) not routing, shattered or dead\n",
		"body": [
			"generated_army:message_on_alliance_not_active_on_battlefield(${1:string message})"
		],
	},
	"docgen:generated_army:ga:message_on_alliance_not_active_on_battlefield": {
		"scope": "lua",
		"prefix": "ga:message_on_alliance_not_active_on_battlefield",
		"description": "generated_army:message_on_alliance_not_active_on_battlefield()\n-  -\n\nTriggers the supplied message if none of the units in the alliance to which this generated army belongs are a) deployed and b) not routing, shattered or dead\n",
		"body": [
			"ga:message_on_alliance_not_active_on_battlefield(${1:string message})"
		],
	},
	"docgen:generated_army:message_on_victory": {
		"scope": "lua",
		"prefix": "message_on_victory",
		"description": "generated_army:message_on_victory()\n-  -\n\nTriggers the supplied message if this generated army wins the battle.\n",
		"body": [
			"message_on_victory(${1:string message})"
		],
	},
	"docgen:generated_army:generated_army:message_on_victory": {
		"scope": "lua",
		"prefix": "generated_army:message_on_victory",
		"description": "generated_army:message_on_victory()\n-  -\n\nTriggers the supplied message if this generated army wins the battle.\n",
		"body": [
			"generated_army:message_on_victory(${1:string message})"
		],
	},
	"docgen:generated_army:ga:message_on_victory": {
		"scope": "lua",
		"prefix": "ga:message_on_victory",
		"description": "generated_army:message_on_victory()\n-  -\n\nTriggers the supplied message if this generated army wins the battle.\n",
		"body": [
			"ga:message_on_victory(${1:string message})"
		],
	},
	"docgen:generated_army:message_on_defeat": {
		"scope": "lua",
		"prefix": "message_on_defeat",
		"description": "generated_army:message_on_defeat()\n-  -\n\nTriggers the supplied message if this generated army loses the battle.\n",
		"body": [
			"message_on_defeat(${1:string message})"
		],
	},
	"docgen:generated_army:generated_army:message_on_defeat": {
		"scope": "lua",
		"prefix": "generated_army:message_on_defeat",
		"description": "generated_army:message_on_defeat()\n-  -\n\nTriggers the supplied message if this generated army loses the battle.\n",
		"body": [
			"generated_army:message_on_defeat(${1:string message})"
		],
	},
	"docgen:generated_army:ga:message_on_defeat": {
		"scope": "lua",
		"prefix": "ga:message_on_defeat",
		"description": "generated_army:message_on_defeat()\n-  -\n\nTriggers the supplied message if this generated army loses the battle.\n",
		"body": [
			"ga:message_on_defeat(${1:string message})"
		],
	},
	"docgen:infotext_manager:new": {
		"scope": "lua",
		"prefix": "new",
		"description": "infotext_manager:new()\n-  -\n\nCreates an infotext manager.\n",
		"body": [
			"new()"
		],
	},
	"docgen:infotext_manager:infotext_manager:new": {
		"scope": "lua",
		"prefix": "infotext_manager:new",
		"description": "infotext_manager:new()\n-  -\n\nCreates an infotext manager.\n",
		"body": [
			"infotext_manager:new()"
		],
	},
	"docgen:infotext_manager:get_uicomponent": {
		"scope": "lua",
		"prefix": "get_uicomponent",
		"description": "infotext_manager:get_uicomponent()\n-  -\n\nGets a uicomponent handle to the infotext panel\n",
		"body": [
			"get_uicomponent()"
		],
	},
	"docgen:infotext_manager:infotext_manager:get_uicomponent": {
		"scope": "lua",
		"prefix": "infotext_manager:get_uicomponent",
		"description": "infotext_manager:get_uicomponent()\n-  -\n\nGets a uicomponent handle to the infotext panel\n",
		"body": [
			"infotext_manager:get_uicomponent()"
		],
	},
	"docgen:infotext_manager:set_time_speed": {
		"scope": "lua",
		"prefix": "set_time_speed",
		"description": "infotext_manager:set_time_speed()\n-  -\n\nSets the speed of time.\n",
		"body": [
			"set_time_speed(${1:number time speed})"
		],
	},
	"docgen:infotext_manager:infotext_manager:set_time_speed": {
		"scope": "lua",
		"prefix": "infotext_manager:set_time_speed",
		"description": "infotext_manager:set_time_speed()\n-  -\n\nSets the speed of time.\n",
		"body": [
			"infotext_manager:set_time_speed(${1:number time speed})"
		],
	},
	"docgen:infotext_manager:set_state_override": {
		"scope": "lua",
		"prefix": "set_state_override",
		"description": "infotext_manager:set_state_override()\n-  -\n\nMaps a state override to a infotext key.\n",
		"body": [
			"set_state_override(${1:string infotext key}, ${2:string component state override})"
		],
	},
	"docgen:infotext_manager:infotext_manager:set_state_override": {
		"scope": "lua",
		"prefix": "infotext_manager:set_state_override",
		"description": "infotext_manager:set_state_override()\n-  -\n\nMaps a state override to a infotext key.\n",
		"body": [
			"infotext_manager:set_state_override(${1:string infotext key}, ${2:string component state override})"
		],
	},
	"docgen:infotext_manager:add_infotext": {
		"scope": "lua",
		"prefix": "add_infotext",
		"description": "infotext_manager:add_infotext()\n-  -\n\nAdds one or more lines of infotext to the infotext panel.\n",
		"body": [
			"add_infotext(${1:object first param}, ${2:... additional infotext strings})"
		],
	},
	"docgen:infotext_manager:infotext_manager:add_infotext": {
		"scope": "lua",
		"prefix": "infotext_manager:add_infotext",
		"description": "infotext_manager:add_infotext()\n-  -\n\nAdds one or more lines of infotext to the infotext panel.\n",
		"body": [
			"infotext_manager:add_infotext(${1:object first param}, ${2:... additional infotext strings})"
		],
	},
	"docgen:infotext_manager:remove_infotext": {
		"scope": "lua",
		"prefix": "remove_infotext",
		"description": "infotext_manager:remove_infotext()\n-  -\n\nRemoves a line of infotext from the infotext panel, by key.\n",
		"body": [
			"remove_infotext(${1:string infotext key})"
		],
	},
	"docgen:infotext_manager:infotext_manager:remove_infotext": {
		"scope": "lua",
		"prefix": "infotext_manager:remove_infotext",
		"description": "infotext_manager:remove_infotext()\n-  -\n\nRemoves a line of infotext from the infotext panel, by key.\n",
		"body": [
			"infotext_manager:remove_infotext(${1:string infotext key})"
		],
	},
	"docgen:infotext_manager:clear_infotext": {
		"scope": "lua",
		"prefix": "clear_infotext",
		"description": "infotext_manager:clear_infotext()\n-  -\n\nClears all infotext from the infotext panel.\n",
		"body": [
			"clear_infotext()"
		],
	},
	"docgen:infotext_manager:infotext_manager:clear_infotext": {
		"scope": "lua",
		"prefix": "infotext_manager:clear_infotext",
		"description": "infotext_manager:clear_infotext()\n-  -\n\nClears all infotext from the infotext panel.\n",
		"body": [
			"infotext_manager:clear_infotext()"
		],
	},
	"docgen:lua:print": {
		"scope": "lua",
		"prefix": "print",
		"description": "print()\n-  -\n\nPrints one or more supplied values to the standard output.\n",
		"body": [
			"print(${1:... values to print})"
		],
	},
	"docgen:lua:lua:print": {
		"scope": "lua",
		"prefix": "lua:print",
		"description": "print()\n-  -\n\nPrints one or more supplied values to the standard output.\n",
		"body": [
			"lua:print(${1:... values to print})"
		],
	},
	"docgen:lua:type": {
		"scope": "lua",
		"prefix": "type",
		"description": "type()\n-  -\n\nReturns the type of a specified value as a string.\n",
		"body": [
			"type(${1:variable variable})"
		],
	},
	"docgen:lua:lua:type": {
		"scope": "lua",
		"prefix": "lua:type",
		"description": "type()\n-  -\n\nReturns the type of a specified value as a string.\n",
		"body": [
			"lua:type(${1:variable variable})"
		],
	},
	"docgen:lua:tostring": {
		"scope": "lua",
		"prefix": "tostring",
		"description": "tostring()\n-  -\n\nReturns the specified value cast to a string.\n",
		"body": [
			"tostring(${1:variable variable})"
		],
	},
	"docgen:lua:lua:tostring": {
		"scope": "lua",
		"prefix": "lua:tostring",
		"description": "tostring()\n-  -\n\nReturns the specified value cast to a string.\n",
		"body": [
			"lua:tostring(${1:variable variable})"
		],
	},
	"docgen:lua:tonumber": {
		"scope": "lua",
		"prefix": "tonumber",
		"description": "tonumber()\n-  -\n\nReturns the specified string value cast to a number.\n",
		"body": [
			"tonumber(${1:variable variable})"
		],
	},
	"docgen:lua:lua:tonumber": {
		"scope": "lua",
		"prefix": "lua:tonumber",
		"description": "tonumber()\n-  -\n\nReturns the specified string value cast to a number.\n",
		"body": [
			"lua:tonumber(${1:variable variable})"
		],
	},
	"docgen:lua:loadstring": {
		"scope": "lua",
		"prefix": "loadstring",
		"description": "loadstring()\n-  -\n\nReturns an executable function created from a string.\n",
		"body": [
			"loadstring(${1:string lua string})"
		],
	},
	"docgen:lua:lua:loadstring": {
		"scope": "lua",
		"prefix": "lua:loadstring",
		"description": "loadstring()\n-  -\n\nReturns an executable function created from a string.\n",
		"body": [
			"lua:loadstring(${1:string lua string})"
		],
	},
	"docgen:string:byte": {
		"scope": "lua",
		"prefix": "byte",
		"description": "string.byte()\n-  -\n\nReturns the numerical code corresponding to the characters of a specified portion of the string.\n",
		"body": [
			"byte(${1:[opt=1] number first char}, ${2:[opt=1] number last char})"
		],
	},
	"docgen:string:string:byte": {
		"scope": "lua",
		"prefix": "string.byte",
		"description": "string.byte()\n-  -\n\nReturns the numerical code corresponding to the characters of a specified portion of the string.\n",
		"body": [
			"string.byte(${1:[opt=1] number first char}, ${2:[opt=1] number last char})"
		],
	},
	"docgen:string:char": {
		"scope": "lua",
		"prefix": "char",
		"description": "string.char()\n-  -\n\nReturns a string constructed from the specified numeric character values.\n",
		"body": [
			"char(${1:... character values})"
		],
	},
	"docgen:string:string:char": {
		"scope": "lua",
		"prefix": "string.char",
		"description": "string.char()\n-  -\n\nReturns a string constructed from the specified numeric character values.\n",
		"body": [
			"string.char(${1:... character values})"
		],
	},
	"docgen:string:dump": {
		"scope": "lua",
		"prefix": "dump",
		"description": "string.dump()\n-  -\n\nReturns a string representation of a supplied function, which can later be passed to the lua:loadstring function to be reconstituted as an executable function.\n",
		"body": [
			"dump(${1:function function})"
		],
	},
	"docgen:string:string:dump": {
		"scope": "lua",
		"prefix": "string.dump",
		"description": "string.dump()\n-  -\n\nReturns a string representation of a supplied function, which can later be passed to the lua:loadstring function to be reconstituted as an executable function.\n",
		"body": [
			"string.dump(${1:function function})"
		],
	},
	"docgen:string:find": {
		"scope": "lua",
		"prefix": "find",
		"description": "string.find()\n-  -\n\nReturns the position of the first occurrence of a supplied substring in the subject string.\n",
		"body": [
			"find(${1:string string}, ${2:string substring}, ${3:[opt=1] start index})"
		],
	},
	"docgen:string:string:find": {
		"scope": "lua",
		"prefix": "string.find",
		"description": "string.find()\n-  -\n\nReturns the position of the first occurrence of a supplied substring in the subject string.\n",
		"body": [
			"string.find(${1:string string}, ${2:string substring}, ${3:[opt=1] start index})"
		],
	},
	"docgen:string:format": {
		"scope": "lua",
		"prefix": "format",
		"description": "string.format()\n-  -\n\nReturns a formatted string from the formatting string and then arguments provided, in a similar style to the C function <code>printf</code>.\n",
		"body": [
			"format(${1:string container string}, ${2:... values to insert})"
		],
	},
	"docgen:string:string:format": {
		"scope": "lua",
		"prefix": "string.format",
		"description": "string.format()\n-  -\n\nReturns a formatted string from the formatting string and then arguments provided, in a similar style to the C function <code>printf</code>.\n",
		"body": [
			"string.format(${1:string container string}, ${2:... values to insert})"
		],
	},
	"docgen:string:gmatch": {
		"scope": "lua",
		"prefix": "gmatch",
		"description": "string.gmatch()\n-  -\n\nReturns a pattern-finding iterator.\n",
		"body": [
			"gmatch(${1:string subject string}, ${2:string pattern})"
		],
	},
	"docgen:string:string:gmatch": {
		"scope": "lua",
		"prefix": "string.gmatch",
		"description": "string.gmatch()\n-  -\n\nReturns a pattern-finding iterator.\n",
		"body": [
			"string.gmatch(${1:string subject string}, ${2:string pattern})"
		],
	},
	"docgen:string:gsub": {
		"scope": "lua",
		"prefix": "gsub",
		"description": "string.gsub()\n-  -\n\nThis function takes a subject string, a pattern string and a replacement string, and performs a search based on the pattern string within the subject string.\n",
		"body": [
			"gsub(${1:string subject}, ${2:string pattern}, ${3:string replacement}, ${4:[opt=nil] number count})"
		],
	},
	"docgen:string:string:gsub": {
		"scope": "lua",
		"prefix": "string.gsub",
		"description": "string.gsub()\n-  -\n\nThis function takes a subject string, a pattern string and a replacement string, and performs a search based on the pattern string within the subject string.\n",
		"body": [
			"string.gsub(${1:string subject}, ${2:string pattern}, ${3:string replacement}, ${4:[opt=nil] number count})"
		],
	},
	"docgen:string:len": {
		"scope": "lua",
		"prefix": "len",
		"description": "string.len()\n-  -\n\nReturns the number of characters in the supplied string.\n",
		"body": [
			"len(${1:string input})"
		],
	},
	"docgen:string:string:len": {
		"scope": "lua",
		"prefix": "string.len",
		"description": "string.len()\n-  -\n\nReturns the number of characters in the supplied string.\n",
		"body": [
			"string.len(${1:string input})"
		],
	},
	"docgen:string:lower": {
		"scope": "lua",
		"prefix": "lower",
		"description": "string.lower()\n-  -\n\nReturns the supplied string, converted to lowercase.\n",
		"body": [
			"lower(${1:string input})"
		],
	},
	"docgen:string:string:lower": {
		"scope": "lua",
		"prefix": "string.lower",
		"description": "string.lower()\n-  -\n\nReturns the supplied string, converted to lowercase.\n",
		"body": [
			"string.lower(${1:string input})"
		],
	},
	"docgen:string:match": {
		"scope": "lua",
		"prefix": "match",
		"description": "string.match()\n-  -\n\nReturns a substring of the supplied string, by a supplied pattern.\n",
		"body": [
			"match(${1:string subject}, ${2:string pattern}, ${3:[opt=1] number start character})"
		],
	},
	"docgen:string:string:match": {
		"scope": "lua",
		"prefix": "string.match",
		"description": "string.match()\n-  -\n\nReturns a substring of the supplied string, by a supplied pattern.\n",
		"body": [
			"string.match(${1:string subject}, ${2:string pattern}, ${3:[opt=1] number start character})"
		],
	},
	"docgen:string:rep": {
		"scope": "lua",
		"prefix": "rep",
		"description": "string.rep()\n-  -\n\nGenerates and returns a string which is a supplied number of copies of the supplied string, all concatenated together.\n",
		"body": [
			"rep(${1:string source}, ${2:number count})"
		],
	},
	"docgen:string:string:rep": {
		"scope": "lua",
		"prefix": "string.rep",
		"description": "string.rep()\n-  -\n\nGenerates and returns a string which is a supplied number of copies of the supplied string, all concatenated together.\n",
		"body": [
			"string.rep(${1:string source}, ${2:number count})"
		],
	},
	"docgen:string:reverse": {
		"scope": "lua",
		"prefix": "reverse",
		"description": "string.reverse()\n-  -\n\nReturns the supplied string with the character order reversed.\n",
		"body": [
			"reverse(${1:string input})"
		],
	},
	"docgen:string:string:reverse": {
		"scope": "lua",
		"prefix": "string.reverse",
		"description": "string.reverse()\n-  -\n\nReturns the supplied string with the character order reversed.\n",
		"body": [
			"string.reverse(${1:string input})"
		],
	},
	"docgen:string:sub": {
		"scope": "lua",
		"prefix": "sub",
		"description": "string.sub()\n-  -\n\nReturns a section of the supplied string, specified by start and (optionally) end character positions.\n",
		"body": [
			"sub(${1:string input}, ${2:number start index}, ${3:[opt=nil] number end index})"
		],
	},
	"docgen:string:string:sub": {
		"scope": "lua",
		"prefix": "string.sub",
		"description": "string.sub()\n-  -\n\nReturns a section of the supplied string, specified by start and (optionally) end character positions.\n",
		"body": [
			"string.sub(${1:string input}, ${2:number start index}, ${3:[opt=nil] number end index})"
		],
	},
	"docgen:string:upper": {
		"scope": "lua",
		"prefix": "upper",
		"description": "string.upper()\n-  -\n\nReturns the supplied string, converted to uppercase.\n",
		"body": [
			"upper(${1:string input})"
		],
	},
	"docgen:string:string:upper": {
		"scope": "lua",
		"prefix": "string.upper",
		"description": "string.upper()\n-  -\n\nReturns the supplied string, converted to uppercase.\n",
		"body": [
			"string.upper(${1:string input})"
		],
	},
	"docgen:table:concat": {
		"scope": "lua",
		"prefix": "concat",
		"description": "table.concat()\n-  -\n\nConcatenates the values in the supplied table into a string, with optional separator characters, and returns that string.\n",
		"body": [
			"concat(${1:table table}, ${2:[opt=\"\"] string separator}, ${3:[opt=1] number start element}, ${4:[opt=&lt;table_size&gt;] number end element})"
		],
	},
	"docgen:table:table:concat": {
		"scope": "lua",
		"prefix": "table.concat",
		"description": "table.concat()\n-  -\n\nConcatenates the values in the supplied table into a string, with optional separator characters, and returns that string.\n",
		"body": [
			"table.concat(${1:table table}, ${2:[opt=\"\"] string separator}, ${3:[opt=1] number start element}, ${4:[opt=&lt;table_size&gt;] number end element})"
		],
	},
	"docgen:table:insert": {
		"scope": "lua",
		"prefix": "insert",
		"description": "table.insert()\n-  -\n\nInserts a value into the supplied table.\n",
		"body": [
			"insert(${1:table table}, ${2:[opt=&lt;table_size&gt;] number position}, ${3:obj value})"
		],
	},
	"docgen:table:table:insert": {
		"scope": "lua",
		"prefix": "table.insert",
		"description": "table.insert()\n-  -\n\nInserts a value into the supplied table.\n",
		"body": [
			"table.insert(${1:table table}, ${2:[opt=&lt;table_size&gt;] number position}, ${3:obj value})"
		],
	},
	"docgen:table:maxn": {
		"scope": "lua",
		"prefix": "maxn",
		"description": "table.maxn()\n-  -\n\nReturns the largest positive numeric index within the supplied table at which a value is assigned.\n",
		"body": [
			"maxn(${1:table table})"
		],
	},
	"docgen:table:table:maxn": {
		"scope": "lua",
		"prefix": "table.maxn",
		"description": "table.maxn()\n-  -\n\nReturns the largest positive numeric index within the supplied table at which a value is assigned.\n",
		"body": [
			"table.maxn(${1:table table})"
		],
	},
	"docgen:table:remove": {
		"scope": "lua",
		"prefix": "remove",
		"description": "table.remove()\n-  -\n\nRemoves the element from the supplied table at the supplied numeric index.\n",
		"body": [
			"remove(${1:table table}, ${2:[opt=&lt;table_size&gt;] number position})"
		],
	},
	"docgen:table:table:remove": {
		"scope": "lua",
		"prefix": "table.remove",
		"description": "table.remove()\n-  -\n\nRemoves the element from the supplied table at the supplied numeric index.\n",
		"body": [
			"table.remove(${1:table table}, ${2:[opt=&lt;table_size&gt;] number position})"
		],
	},
	"docgen:table:sort": {
		"scope": "lua",
		"prefix": "sort",
		"description": "table.sort()\n-  -\n\nSorts the elements in the supplied table into a new order.\n",
		"body": [
			"sort(${1:table table}, ${2:[opt=&lt;ascending_sort_order&gt;] function comparison})"
		],
	},
	"docgen:table:table:sort": {
		"scope": "lua",
		"prefix": "table.sort",
		"description": "table.sort()\n-  -\n\nSorts the elements in the supplied table into a new order.\n",
		"body": [
			"table.sort(${1:table table}, ${2:[opt=&lt;ascending_sort_order&gt;] function comparison})"
		],
	},
	"docgen:table:tostring": {
		"scope": "lua",
		"prefix": "tostring",
		"description": "table.tostring()\n-  -\n\nConverts a table into a string representation of that table for debug output.\n",
		"body": [
			"tostring(${1:table table}, ${2:boolean for campaign savegame})"
		],
	},
	"docgen:table:table:tostring": {
		"scope": "lua",
		"prefix": "table.tostring",
		"description": "table.tostring()\n-  -\n\nConverts a table into a string representation of that table for debug output.\n",
		"body": [
			"table.tostring(${1:table table}, ${2:boolean for campaign savegame})"
		],
	},
	"docgen:math:abs": {
		"scope": "lua",
		"prefix": "abs",
		"description": "math.abs()\n-  -\n\nReturns the absolute of the supplied value, converting it to a positive value if negative.\n",
		"body": [
			"abs(${1:number value})"
		],
	},
	"docgen:math:math:abs": {
		"scope": "lua",
		"prefix": "math.abs",
		"description": "math.abs()\n-  -\n\nReturns the absolute of the supplied value, converting it to a positive value if negative.\n",
		"body": [
			"math.abs(${1:number value})"
		],
	},
	"docgen:math:acos": {
		"scope": "lua",
		"prefix": "acos",
		"description": "math.acos()\n-  -\n\nReturns the arc cosine of the supplied value, in radians.\n",
		"body": [
			"acos(${1:number value})"
		],
	},
	"docgen:math:math:acos": {
		"scope": "lua",
		"prefix": "math.acos",
		"description": "math.acos()\n-  -\n\nReturns the arc cosine of the supplied value, in radians.\n",
		"body": [
			"math.acos(${1:number value})"
		],
	},
	"docgen:math:asin": {
		"scope": "lua",
		"prefix": "asin",
		"description": "math.asin()\n-  -\n\nReturns the arc sine of the supplied value, in radians.\n",
		"body": [
			"asin(${1:number value})"
		],
	},
	"docgen:math:math:asin": {
		"scope": "lua",
		"prefix": "math.asin",
		"description": "math.asin()\n-  -\n\nReturns the arc sine of the supplied value, in radians.\n",
		"body": [
			"math.asin(${1:number value})"
		],
	},
	"docgen:math:atan": {
		"scope": "lua",
		"prefix": "atan",
		"description": "math.atan()\n-  -\n\nReturns the arc tangent of the supplied value, in radians.\n",
		"body": [
			"atan(${1:number value})"
		],
	},
	"docgen:math:math:atan": {
		"scope": "lua",
		"prefix": "math.atan",
		"description": "math.atan()\n-  -\n\nReturns the arc tangent of the supplied value, in radians.\n",
		"body": [
			"math.atan(${1:number value})"
		],
	},
	"docgen:math:atan2": {
		"scope": "lua",
		"prefix": "atan2",
		"description": "math.atan2()\n-  -\n\nReturns the arc tangent of the supplied opposite value divided by the supplied adjacent value, in radians.\n",
		"body": [
			"atan2(${1:number opposite}, ${2:number adjacent})"
		],
	},
	"docgen:math:math:atan2": {
		"scope": "lua",
		"prefix": "math.atan2",
		"description": "math.atan2()\n-  -\n\nReturns the arc tangent of the supplied opposite value divided by the supplied adjacent value, in radians.\n",
		"body": [
			"math.atan2(${1:number opposite}, ${2:number adjacent})"
		],
	},
	"docgen:math:ceil": {
		"scope": "lua",
		"prefix": "ceil",
		"description": "math.ceil()\n-  -\n\nReturns the smallest integer that is larger than or equal to the supplied value.\n",
		"body": [
			"ceil(${1:number value})"
		],
	},
	"docgen:math:math:ceil": {
		"scope": "lua",
		"prefix": "math.ceil",
		"description": "math.ceil()\n-  -\n\nReturns the smallest integer that is larger than or equal to the supplied value.\n",
		"body": [
			"math.ceil(${1:number value})"
		],
	},
	"docgen:math:cos": {
		"scope": "lua",
		"prefix": "cos",
		"description": "math.cos()\n-  -\n\nReturns the cosine of the supplied radian value.\n",
		"body": [
			"cos(${1:number value})"
		],
	},
	"docgen:math:math:cos": {
		"scope": "lua",
		"prefix": "math.cos",
		"description": "math.cos()\n-  -\n\nReturns the cosine of the supplied radian value.\n",
		"body": [
			"math.cos(${1:number value})"
		],
	},
	"docgen:math:cosh": {
		"scope": "lua",
		"prefix": "cosh",
		"description": "math.cosh()\n-  -\n\nReturns the hyperbolic cosine of the supplied value.\n",
		"body": [
			"cosh(${1:number value})"
		],
	},
	"docgen:math:math:cosh": {
		"scope": "lua",
		"prefix": "math.cosh",
		"description": "math.cosh()\n-  -\n\nReturns the hyperbolic cosine of the supplied value.\n",
		"body": [
			"math.cosh(${1:number value})"
		],
	},
	"docgen:math:deg": {
		"scope": "lua",
		"prefix": "deg",
		"description": "math.deg()\n-  -\n\nConverts the supplied radian value into an angle in degrees.\n",
		"body": [
			"deg(${1:number radian value})"
		],
	},
	"docgen:math:math:deg": {
		"scope": "lua",
		"prefix": "math.deg",
		"description": "math.deg()\n-  -\n\nConverts the supplied radian value into an angle in degrees.\n",
		"body": [
			"math.deg(${1:number radian value})"
		],
	},
	"docgen:math:exp": {
		"scope": "lua",
		"prefix": "exp",
		"description": "math.exp()\n-  -\n\nReturns the numerical constant <code>e</code> to the power of the supplied value.\n",
		"body": [
			"exp(${1:number exponent})"
		],
	},
	"docgen:math:math:exp": {
		"scope": "lua",
		"prefix": "math.exp",
		"description": "math.exp()\n-  -\n\nReturns the numerical constant <code>e</code> to the power of the supplied value.\n",
		"body": [
			"math.exp(${1:number exponent})"
		],
	},
	"docgen:math:floor": {
		"scope": "lua",
		"prefix": "floor",
		"description": "math.floor()\n-  -\n\nReturns the largest integer that is smaller than or equal to the supplied value.\n",
		"body": [
			"floor(${1:number value})"
		],
	},
	"docgen:math:math:floor": {
		"scope": "lua",
		"prefix": "math.floor",
		"description": "math.floor()\n-  -\n\nReturns the largest integer that is smaller than or equal to the supplied value.\n",
		"body": [
			"math.floor(${1:number value})"
		],
	},
	"docgen:math:fmod": {
		"scope": "lua",
		"prefix": "fmod",
		"description": "math.fmod()\n-  -\n\nReturns remainder of the division of the first supplied value by the second supplied value.\n",
		"body": [
			"fmod(${1:number dividend}, ${2:number divisor})"
		],
	},
	"docgen:math:math:fmod": {
		"scope": "lua",
		"prefix": "math.fmod",
		"description": "math.fmod()\n-  -\n\nReturns remainder of the division of the first supplied value by the second supplied value.\n",
		"body": [
			"math.fmod(${1:number dividend}, ${2:number divisor})"
		],
	},
	"docgen:math:frexp": {
		"scope": "lua",
		"prefix": "frexp",
		"description": "math.frexp()\n-  -\n\nReturns the values of <code>m</code> and <code>exp</code> in the expression <code>x = m * 2 ^ exp</code>, where <code>x</code> is the value supplied to the function.\n",
		"body": [
			"frexp(${1:number x value})"
		],
	},
	"docgen:math:math:frexp": {
		"scope": "lua",
		"prefix": "math.frexp",
		"description": "math.frexp()\n-  -\n\nReturns the values of <code>m</code> and <code>exp</code> in the expression <code>x = m * 2 ^ exp</code>, where <code>x</code> is the value supplied to the function.\n",
		"body": [
			"math.frexp(${1:number x value})"
		],
	},
	"docgen:math:ldexp": {
		"scope": "lua",
		"prefix": "ldexp",
		"description": "math.ldexp()\n-  -\n\nReturns <code>m * 2 ^ exp</code>, where the mantissa <code>m</code> and exponent <code>exp</code> are values supplied to the function.\n",
		"body": [
			"ldexp(${1:number m}, ${2:number exp})"
		],
	},
	"docgen:math:math:ldexp": {
		"scope": "lua",
		"prefix": "math.ldexp",
		"description": "math.ldexp()\n-  -\n\nReturns <code>m * 2 ^ exp</code>, where the mantissa <code>m</code> and exponent <code>exp</code> are values supplied to the function.\n",
		"body": [
			"math.ldexp(${1:number m}, ${2:number exp})"
		],
	},
	"docgen:math:log": {
		"scope": "lua",
		"prefix": "log",
		"description": "math.log()\n-  -\n\nReturns the natural logarithm of the supplied value.\n",
		"body": [
			"log(${1:number value})"
		],
	},
	"docgen:math:math:log": {
		"scope": "lua",
		"prefix": "math.log",
		"description": "math.log()\n-  -\n\nReturns the natural logarithm of the supplied value.\n",
		"body": [
			"math.log(${1:number value})"
		],
	},
	"docgen:math:log10": {
		"scope": "lua",
		"prefix": "log10",
		"description": "math.log10()\n-  -\n\nReturns the base-10 logarithm of the supplied value.\n",
		"body": [
			"log10(${1:number value})"
		],
	},
	"docgen:math:math:log10": {
		"scope": "lua",
		"prefix": "math.log10",
		"description": "math.log10()\n-  -\n\nReturns the base-10 logarithm of the supplied value.\n",
		"body": [
			"math.log10(${1:number value})"
		],
	},
	"docgen:math:max": {
		"scope": "lua",
		"prefix": "max",
		"description": "math.max()\n-  -\n\nReturns the maximum numeric value amongst the arguments given.\n",
		"body": [
			"max(${1:... values})"
		],
	},
	"docgen:math:math:max": {
		"scope": "lua",
		"prefix": "math.max",
		"description": "math.max()\n-  -\n\nReturns the maximum numeric value amongst the arguments given.\n",
		"body": [
			"math.max(${1:... values})"
		],
	},
	"docgen:math:min": {
		"scope": "lua",
		"prefix": "min",
		"description": "math.min()\n-  -\n\nReturns the minimum numeric value amongst the arguments given.\n",
		"body": [
			"min(${1:... values})"
		],
	},
	"docgen:math:math:min": {
		"scope": "lua",
		"prefix": "math.min",
		"description": "math.min()\n-  -\n\nReturns the minimum numeric value amongst the arguments given.\n",
		"body": [
			"math.min(${1:... values})"
		],
	},
	"docgen:math:modf": {
		"scope": "lua",
		"prefix": "modf",
		"description": "math.modf()\n-  -\n\nReturns the integral part of the supplied value and the fractional part of the supplied value.\n",
		"body": [
			"modf(${1:number input value})"
		],
	},
	"docgen:math:math:modf": {
		"scope": "lua",
		"prefix": "math.modf",
		"description": "math.modf()\n-  -\n\nReturns the integral part of the supplied value and the fractional part of the supplied value.\n",
		"body": [
			"math.modf(${1:number input value})"
		],
	},
	"docgen:math:pow": {
		"scope": "lua",
		"prefix": "pow",
		"description": "math.pow()\n-  -\n\nReturns the first supplied number value to the power of the second supplied number value.\n",
		"body": [
			"pow(${1:number x}, ${2:number y})"
		],
	},
	"docgen:math:math:pow": {
		"scope": "lua",
		"prefix": "math.pow",
		"description": "math.pow()\n-  -\n\nReturns the first supplied number value to the power of the second supplied number value.\n",
		"body": [
			"math.pow(${1:number x}, ${2:number y})"
		],
	},
	"docgen:math:rad": {
		"scope": "lua",
		"prefix": "rad",
		"description": "math.rad()\n-  -\n\nConverts the supplied angle in degrees into an angle in radians.\n",
		"body": [
			"rad(${1:number degree value})"
		],
	},
	"docgen:math:math:rad": {
		"scope": "lua",
		"prefix": "math.rad",
		"description": "math.rad()\n-  -\n\nConverts the supplied angle in degrees into an angle in radians.\n",
		"body": [
			"math.rad(${1:number degree value})"
		],
	},
	"docgen:math:random": {
		"scope": "lua",
		"prefix": "random",
		"description": "math.random()\n-  -\n\nProvides an interface to the pseudo-random number generator provided by ANSI C.\n",
		"body": [
			"random(${1:[opt=nil] number first limit}, ${2:[opt=nil] number second limit})"
		],
	},
	"docgen:math:math:random": {
		"scope": "lua",
		"prefix": "math.random",
		"description": "math.random()\n-  -\n\nProvides an interface to the pseudo-random number generator provided by ANSI C.\n",
		"body": [
			"math.random(${1:[opt=nil] number first limit}, ${2:[opt=nil] number second limit})"
		],
	},
	"docgen:math:randomseed": {
		"scope": "lua",
		"prefix": "randomseed",
		"description": "math.randomseed()\n-  -\n\nSets the supplied value as the seed for the random number system.\n",
		"body": [
			"randomseed(${1:number seed})"
		],
	},
	"docgen:math:math:randomseed": {
		"scope": "lua",
		"prefix": "math.randomseed",
		"description": "math.randomseed()\n-  -\n\nSets the supplied value as the seed for the random number system.\n",
		"body": [
			"math.randomseed(${1:number seed})"
		],
	},
	"docgen:math:sin": {
		"scope": "lua",
		"prefix": "sin",
		"description": "math.sin()\n-  -\n\nReturns the sine of the supplied radian value.\n",
		"body": [
			"sin(${1:number value})"
		],
	},
	"docgen:math:math:sin": {
		"scope": "lua",
		"prefix": "math.sin",
		"description": "math.sin()\n-  -\n\nReturns the sine of the supplied radian value.\n",
		"body": [
			"math.sin(${1:number value})"
		],
	},
	"docgen:math:sinh": {
		"scope": "lua",
		"prefix": "sinh",
		"description": "math.sinh()\n-  -\n\nReturns the hyperbolic sine of the supplied value.\n",
		"body": [
			"sinh(${1:number value})"
		],
	},
	"docgen:math:math:sinh": {
		"scope": "lua",
		"prefix": "math.sinh",
		"description": "math.sinh()\n-  -\n\nReturns the hyperbolic sine of the supplied value.\n",
		"body": [
			"math.sinh(${1:number value})"
		],
	},
	"docgen:math:sqrt": {
		"scope": "lua",
		"prefix": "sqrt",
		"description": "math.sqrt()\n-  -\n\nReturns the square root of the supplied value.\n",
		"body": [
			"sqrt(${1:number value})"
		],
	},
	"docgen:math:math:sqrt": {
		"scope": "lua",
		"prefix": "math.sqrt",
		"description": "math.sqrt()\n-  -\n\nReturns the square root of the supplied value.\n",
		"body": [
			"math.sqrt(${1:number value})"
		],
	},
	"docgen:math:tan": {
		"scope": "lua",
		"prefix": "tan",
		"description": "math.tan()\n-  -\n\nReturns the tangent of the supplied radian value.\n",
		"body": [
			"tan(${1:number value})"
		],
	},
	"docgen:math:math:tan": {
		"scope": "lua",
		"prefix": "math.tan",
		"description": "math.tan()\n-  -\n\nReturns the tangent of the supplied radian value.\n",
		"body": [
			"math.tan(${1:number value})"
		],
	},
	"docgen:math:tanh": {
		"scope": "lua",
		"prefix": "tanh",
		"description": "math.tanh()\n-  -\n\nReturns the hyperbolic tangent of the supplied value.\n",
		"body": [
			"tanh(${1:number value})"
		],
	},
	"docgen:math:math:tanh": {
		"scope": "lua",
		"prefix": "math.tanh",
		"description": "math.tanh()\n-  -\n\nReturns the hyperbolic tangent of the supplied value.\n",
		"body": [
			"math.tanh(${1:number value})"
		],
	},
	"docgen:objectives_manager:new": {
		"scope": "lua",
		"prefix": "new",
		"description": "objectives_manager:new()\n-  -\n\nCreates an objective manager.\n",
		"body": [
			"new()"
		],
	},
	"docgen:objectives_manager:objectives_manager:new": {
		"scope": "lua",
		"prefix": "objectives_manager:new",
		"description": "objectives_manager:new()\n-  -\n\nCreates an objective manager.\n",
		"body": [
			"objectives_manager:new()"
		],
	},
	"docgen:objectives_manager:set_debug": {
		"scope": "lua",
		"prefix": "set_debug",
		"description": "objectives_manager:set_debug()\n-  -\n\nSets the objectives manager into debug mode for more verbose output\n",
		"body": [
			"set_debug(${1:[opt=true] boolean debug mode})"
		],
	},
	"docgen:objectives_manager:objectives_manager:set_debug": {
		"scope": "lua",
		"prefix": "objectives_manager:set_debug",
		"description": "objectives_manager:set_debug()\n-  -\n\nSets the objectives manager into debug mode for more verbose output\n",
		"body": [
			"objectives_manager:set_debug(${1:[opt=true] boolean debug mode})"
		],
	},
	"docgen:objectives_manager:get_uicomponent": {
		"scope": "lua",
		"prefix": "get_uicomponent",
		"description": "objectives_manager:get_uicomponent()\n-  -\n\nGets a uicomponent handle to the scripted objectives panel\n",
		"body": [
			"get_uicomponent()"
		],
	},
	"docgen:objectives_manager:objectives_manager:get_uicomponent": {
		"scope": "lua",
		"prefix": "objectives_manager:get_uicomponent",
		"description": "objectives_manager:get_uicomponent()\n-  -\n\nGets a uicomponent handle to the scripted objectives panel\n",
		"body": [
			"objectives_manager:get_uicomponent()"
		],
	},
	"docgen:objectives_manager:set_objective": {
		"scope": "lua",
		"prefix": "set_objective",
		"description": "objectives_manager:set_objective()\n-  -\n\nSets up a scripted objective for the player, which appears in the scripted objectives panel.\n",
		"body": [
			"set_objective(${1:string objective key}, ${2:[opt=nil] number param a, First numeric objective parameter. If set, the objective will be presented to the player in the form [objective text]: [param a] number param a}, ${3:[opt=nil] number param b, Second numeric objective parameter. A value for the first must be set if this is used. If set, the objective will be presented to the player in the form [objective text]: [param a] / [param b] number param b})"
		],
	},
	"docgen:objectives_manager:objectives_manager:set_objective": {
		"scope": "lua",
		"prefix": "objectives_manager:set_objective",
		"description": "objectives_manager:set_objective()\n-  -\n\nSets up a scripted objective for the player, which appears in the scripted objectives panel.\n",
		"body": [
			"objectives_manager:set_objective(${1:string objective key}, ${2:[opt=nil] number param a, First numeric objective parameter. If set, the objective will be presented to the player in the form [objective text]: [param a] number param a}, ${3:[opt=nil] number param b, Second numeric objective parameter. A value for the first must be set if this is used. If set, the objective will be presented to the player in the form [objective text]: [param a] / [param b] number param b})"
		],
	},
	"docgen:objectives_manager:complete_objective": {
		"scope": "lua",
		"prefix": "complete_objective",
		"description": "objectives_manager:complete_objective()\n-  -\n\nMarks a scripted objective as completed for the player to see.\n",
		"body": [
			"complete_objective(${1:string objective key})"
		],
	},
	"docgen:objectives_manager:objectives_manager:complete_objective": {
		"scope": "lua",
		"prefix": "objectives_manager:complete_objective",
		"description": "objectives_manager:complete_objective()\n-  -\n\nMarks a scripted objective as completed for the player to see.\n",
		"body": [
			"objectives_manager:complete_objective(${1:string objective key})"
		],
	},
	"docgen:objectives_manager:fail_objective": {
		"scope": "lua",
		"prefix": "fail_objective",
		"description": "objectives_manager:fail_objective()\n-  -\n\nMarks a scripted objective as failed for the player to see.\n",
		"body": [
			"fail_objective(${1:string objective key})"
		],
	},
	"docgen:objectives_manager:objectives_manager:fail_objective": {
		"scope": "lua",
		"prefix": "objectives_manager:fail_objective",
		"description": "objectives_manager:fail_objective()\n-  -\n\nMarks a scripted objective as failed for the player to see.\n",
		"body": [
			"objectives_manager:fail_objective(${1:string objective key})"
		],
	},
	"docgen:objectives_manager:remove_objective": {
		"scope": "lua",
		"prefix": "remove_objective",
		"description": "objectives_manager:remove_objective()\n-  -\n\nRemoves a scripted objective from the scripted objectives panel.\n",
		"body": [
			"remove_objective(${1:string objective key})"
		],
	},
	"docgen:objectives_manager:objectives_manager:remove_objective": {
		"scope": "lua",
		"prefix": "objectives_manager:remove_objective",
		"description": "objectives_manager:remove_objective()\n-  -\n\nRemoves a scripted objective from the scripted objectives panel.\n",
		"body": [
			"objectives_manager:remove_objective(${1:string objective key})"
		],
	},
	"docgen:objectives_manager:activate_objective_chain": {
		"scope": "lua",
		"prefix": "activate_objective_chain",
		"description": "objectives_manager:activate_objective_chain()\n-  -\n\nStarts a new objective chain.\n",
		"body": [
			"activate_objective_chain(${1:string chain name}, ${2:string objective key}, ${3:[opt=nil] number number param a}, ${4:[opt=nil] number number param b})"
		],
	},
	"docgen:objectives_manager:objectives_manager:activate_objective_chain": {
		"scope": "lua",
		"prefix": "objectives_manager:activate_objective_chain",
		"description": "objectives_manager:activate_objective_chain()\n-  -\n\nStarts a new objective chain.\n",
		"body": [
			"objectives_manager:activate_objective_chain(${1:string chain name}, ${2:string objective key}, ${3:[opt=nil] number number param a}, ${4:[opt=nil] number number param b})"
		],
	},
	"docgen:objectives_manager:update_objective_chain": {
		"scope": "lua",
		"prefix": "update_objective_chain",
		"description": "objectives_manager:update_objective_chain()\n-  -\n\nUpdates an objective chain, either with new parameters for the existing objective or a new objective (in which case the existing objective will be removed).\n",
		"body": [
			"update_objective_chain(${1:string chain name}, ${2:string objective key}, ${3:[opt=nil] number number param a}, ${4:[opt=nil] number number param b})"
		],
	},
	"docgen:objectives_manager:objectives_manager:update_objective_chain": {
		"scope": "lua",
		"prefix": "objectives_manager:update_objective_chain",
		"description": "objectives_manager:update_objective_chain()\n-  -\n\nUpdates an objective chain, either with new parameters for the existing objective or a new objective (in which case the existing objective will be removed).\n",
		"body": [
			"objectives_manager:update_objective_chain(${1:string chain name}, ${2:string objective key}, ${3:[opt=nil] number number param a}, ${4:[opt=nil] number number param b})"
		],
	},
	"docgen:objectives_manager:end_objective_chain": {
		"scope": "lua",
		"prefix": "end_objective_chain",
		"description": "objectives_manager:end_objective_chain()\n-  -\n\nEnds an objective chain.\n",
		"body": [
			"end_objective_chain(${1:string chain name}, ${2:string objective key}, ${3:[opt=nil] number number param a}, ${4:[opt=nil] number number param b})"
		],
	},
	"docgen:objectives_manager:objectives_manager:end_objective_chain": {
		"scope": "lua",
		"prefix": "objectives_manager:end_objective_chain",
		"description": "objectives_manager:end_objective_chain()\n-  -\n\nEnds an objective chain.\n",
		"body": [
			"objectives_manager:end_objective_chain(${1:string chain name}, ${2:string objective key}, ${3:[opt=nil] number number param a}, ${4:[opt=nil] number number param b})"
		],
	},
	"docgen:objectives_manager:reset_objective_chain": {
		"scope": "lua",
		"prefix": "reset_objective_chain",
		"description": "objectives_manager:reset_objective_chain()\n-  -\n\nRemoves this objective chain from the previous objective chains list, which allows it to be triggered again.\n",
		"body": [
			"reset_objective_chain(${1:string chain name})"
		],
	},
	"docgen:objectives_manager:objectives_manager:reset_objective_chain": {
		"scope": "lua",
		"prefix": "objectives_manager:reset_objective_chain",
		"description": "objectives_manager:reset_objective_chain()\n-  -\n\nRemoves this objective chain from the previous objective chains list, which allows it to be triggered again.\n",
		"body": [
			"objectives_manager:reset_objective_chain(${1:string chain name})"
		],
	},
	"docgen:script_messager:new": {
		"scope": "lua",
		"prefix": "new",
		"description": "script_messager:new()\n-  -\n\nGets or creates a script_messager object.\n",
		"body": [
			"new()"
		],
	},
	"docgen:script_messager:script_messager:new": {
		"scope": "lua",
		"prefix": "script_messager:new",
		"description": "script_messager:new()\n-  -\n\nGets or creates a script_messager object.\n",
		"body": [
			"script_messager:new()"
		],
	},
	"docgen:script_messager:output": {
		"scope": "lua",
		"prefix": "output",
		"description": "script_messager:output()\n-  -\n\nOutputs the script_messager internal data for debug purposes.\n",
		"body": [
			"output()"
		],
	},
	"docgen:script_messager:script_messager:output": {
		"scope": "lua",
		"prefix": "script_messager:output",
		"description": "script_messager:output()\n-  -\n\nOutputs the script_messager internal data for debug purposes.\n",
		"body": [
			"script_messager:output()"
		],
	},
	"docgen:script_messager:set_debug": {
		"scope": "lua",
		"prefix": "set_debug",
		"description": "script_messager:set_debug()\n-  -\n\nSets the script_messager into debug mode for added output.\n",
		"body": [
			"set_debug()"
		],
	},
	"docgen:script_messager:script_messager:set_debug": {
		"scope": "lua",
		"prefix": "script_messager:set_debug",
		"description": "script_messager:set_debug()\n-  -\n\nSets the script_messager into debug mode for added output.\n",
		"body": [
			"script_messager:set_debug()"
		],
	},
	"docgen:script_messager:add_listener": {
		"scope": "lua",
		"prefix": "add_listener",
		"description": "script_messager:add_listener()\n-  -\n\nAdds a listener for a message.\n",
		"body": [
			"add_listener(${1:string message name}, ${2:function callback to call}, ${3:[opt=false] boolean persistent})"
		],
	},
	"docgen:script_messager:script_messager:add_listener": {
		"scope": "lua",
		"prefix": "script_messager:add_listener",
		"description": "script_messager:add_listener()\n-  -\n\nAdds a listener for a message.\n",
		"body": [
			"script_messager:add_listener(${1:string message name}, ${2:function callback to call}, ${3:[opt=false] boolean persistent})"
		],
	},
	"docgen:script_messager:trigger_message": {
		"scope": "lua",
		"prefix": "trigger_message",
		"description": "script_messager:trigger_message()\n-  -\n\nTriggers a string message.\n",
		"body": [
			"trigger_message(${1:string message name})"
		],
	},
	"docgen:script_messager:script_messager:trigger_message": {
		"scope": "lua",
		"prefix": "script_messager:trigger_message",
		"description": "script_messager:trigger_message()\n-  -\n\nTriggers a string message.\n",
		"body": [
			"script_messager:trigger_message(${1:string message name})"
		],
	},
	"docgen:script_messager:remove_listener": {
		"scope": "lua",
		"prefix": "remove_listener",
		"description": "script_messager:remove_listener()\n-  -\n\nRemoves any listener listening for a particular message.\n",
		"body": [
			"remove_listener(${1:string message name})"
		],
	},
	"docgen:script_messager:script_messager:remove_listener": {
		"scope": "lua",
		"prefix": "script_messager:remove_listener",
		"description": "script_messager:remove_listener()\n-  -\n\nRemoves any listener listening for a particular message.\n",
		"body": [
			"script_messager:remove_listener(${1:string message name})"
		],
	},
	"docgen:script_messager:block_message": {
		"scope": "lua",
		"prefix": "block_message",
		"description": "script_messager:block_message()\n-  -\n\nBlocks or unblocks a message from being transmitted in the future.\n",
		"body": [
			"block_message(${1:string message name}, ${2:[opt=true] boolean should block})"
		],
	},
	"docgen:script_messager:script_messager:block_message": {
		"scope": "lua",
		"prefix": "script_messager:block_message",
		"description": "script_messager:block_message()\n-  -\n\nBlocks or unblocks a message from being transmitted in the future.\n",
		"body": [
			"script_messager:block_message(${1:string message name}, ${2:[opt=true] boolean should block})"
		],
	},
	"docgen:timer_manager:new": {
		"scope": "lua",
		"prefix": "new",
		"description": "timer_manager:new()\n-  -\n\nCreates a timer_manager object.\n",
		"body": [
			"new(${1:[opt=100] number tick time})"
		],
	},
	"docgen:timer_manager:timer_manager:new": {
		"scope": "lua",
		"prefix": "timer_manager:new",
		"description": "timer_manager:new()\n-  -\n\nCreates a timer_manager object.\n",
		"body": [
			"timer_manager:new(${1:[opt=100] number tick time})"
		],
	},
	"docgen:timer_manager:callback": {
		"scope": "lua",
		"prefix": "callback",
		"description": "timer_manager:callback()\n-  -\n\nInstructs the timer manager to call a supplied function after a supplied delay.\n",
		"body": [
			"callback(${1:function callback to call}, ${2:number delay in ms}, ${3:[opt=nil] string callback name})"
		],
	},
	"docgen:timer_manager:timer_manager:callback": {
		"scope": "lua",
		"prefix": "timer_manager:callback",
		"description": "timer_manager:callback()\n-  -\n\nInstructs the timer manager to call a supplied function after a supplied delay.\n",
		"body": [
			"timer_manager:callback(${1:function callback to call}, ${2:number delay in ms}, ${3:[opt=nil] string callback name})"
		],
	},
	"docgen:timer_manager:repeat_callback": {
		"scope": "lua",
		"prefix": "repeat_callback",
		"description": "timer_manager:repeat_callback()\n-  -\n\nInstructs the timer manager to call a supplied function after a supplied delay, and then repeatedly after the same delay.\n",
		"body": [
			"repeat_callback(${1:function callback to call}, ${2:number delay in ms}, ${3:[opt=nil] string callback name})"
		],
	},
	"docgen:timer_manager:timer_manager:repeat_callback": {
		"scope": "lua",
		"prefix": "timer_manager:repeat_callback",
		"description": "timer_manager:repeat_callback()\n-  -\n\nInstructs the timer manager to call a supplied function after a supplied delay, and then repeatedly after the same delay.\n",
		"body": [
			"timer_manager:repeat_callback(${1:function callback to call}, ${2:number delay in ms}, ${3:[opt=nil] string callback name})"
		],
	},
	"docgen:timer_manager:remove_callback": {
		"scope": "lua",
		"prefix": "remove_callback",
		"description": "timer_manager:remove_callback()\n-  -\n\nInstructs the timer manager to remove any active callback with the supplied name.\n",
		"body": [
			"remove_callback(${1:string name name to remove})"
		],
	},
	"docgen:timer_manager:timer_manager:remove_callback": {
		"scope": "lua",
		"prefix": "timer_manager:remove_callback",
		"description": "timer_manager:remove_callback()\n-  -\n\nInstructs the timer manager to remove any active callback with the supplied name.\n",
		"body": [
			"timer_manager:remove_callback(${1:string name name to remove})"
		],
	},
	"docgen:timer_manager:register_singleshot_timer": {
		"scope": "lua",
		"prefix": "register_singleshot_timer",
		"description": "timer_manager:register_singleshot_timer()\n-  -\n\nRegisters a handler name (function name) to be called and a period in ms after which to call it.\n",
		"body": [
			"register_singleshot_timer(${1:string function name}, ${2:number time in ms})"
		],
	},
	"docgen:timer_manager:timer_manager:register_singleshot_timer": {
		"scope": "lua",
		"prefix": "timer_manager:register_singleshot_timer",
		"description": "timer_manager:register_singleshot_timer()\n-  -\n\nRegisters a handler name (function name) to be called and a period in ms after which to call it.\n",
		"body": [
			"timer_manager:register_singleshot_timer(${1:string function name}, ${2:number time in ms})"
		],
	},
	"docgen:timer_manager:register_repeating_timer": {
		"scope": "lua",
		"prefix": "register_repeating_timer",
		"description": "timer_manager:register_repeating_timer()\n-  -\n\nRegisters a handler name (function name) to be called and a period in ms after which to repeatedly call it.\n",
		"body": [
			"register_repeating_timer(${1:string function name}, ${2:number time in ms})"
		],
	},
	"docgen:timer_manager:timer_manager:register_repeating_timer": {
		"scope": "lua",
		"prefix": "timer_manager:register_repeating_timer",
		"description": "timer_manager:register_repeating_timer()\n-  -\n\nRegisters a handler name (function name) to be called and a period in ms after which to repeatedly call it.\n",
		"body": [
			"timer_manager:register_repeating_timer(${1:string function name}, ${2:number time in ms})"
		],
	},
	"docgen:timer_manager:unregister_timer": {
		"scope": "lua",
		"prefix": "unregister_timer",
		"description": "timer_manager:unregister_timer()\n-  -\n\nCancels a timer registered with timer_manager:register_singleshot_timer or timer_manager:register_repeating_timer.\n",
		"body": [
			"unregister_timer(${1:string function name})"
		],
	},
	"docgen:timer_manager:timer_manager:unregister_timer": {
		"scope": "lua",
		"prefix": "timer_manager:unregister_timer",
		"description": "timer_manager:unregister_timer()\n-  -\n\nCancels a timer registered with timer_manager:register_singleshot_timer or timer_manager:register_repeating_timer.\n",
		"body": [
			"timer_manager:unregister_timer(${1:string function name})"
		],
	},
	"docgen:timer_manager:print_timer_list": {
		"scope": "lua",
		"prefix": "print_timer_list",
		"description": "timer_manager:print_timer_list()\n-  -\n\nWrites the current timer list to the console, for debugging purposes.\n",
		"body": [
			"print_timer_list()"
		],
	},
	"docgen:timer_manager:timer_manager:print_timer_list": {
		"scope": "lua",
		"prefix": "timer_manager:print_timer_list",
		"description": "timer_manager:print_timer_list()\n-  -\n\nWrites the current timer list to the console, for debugging purposes.\n",
		"body": [
			"timer_manager:print_timer_list()"
		],
	},
	"docgen:timer_manager:print_callback_list": {
		"scope": "lua",
		"prefix": "print_callback_list",
		"description": "timer_manager:print_callback_list()\n-  -\n\nWrites the current callback list to the console, for debugging purposes.\n",
		"body": [
			"print_callback_list()"
		],
	},
	"docgen:timer_manager:timer_manager:print_callback_list": {
		"scope": "lua",
		"prefix": "timer_manager:print_callback_list",
		"description": "timer_manager:print_callback_list()\n-  -\n\nWrites the current callback list to the console, for debugging purposes.\n",
		"body": [
			"timer_manager:print_callback_list()"
		],
	},
	"docgen:timer_manager:clear_callback_list": {
		"scope": "lua",
		"prefix": "clear_callback_list",
		"description": "timer_manager:clear_callback_list()\n-  -\n\nClears all callbacks.\n",
		"body": [
			"clear_callback_list()"
		],
	},
	"docgen:timer_manager:timer_manager:clear_callback_list": {
		"scope": "lua",
		"prefix": "timer_manager:clear_callback_list",
		"description": "timer_manager:clear_callback_list()\n-  -\n\nClears all callbacks.\n",
		"body": [
			"timer_manager:clear_callback_list()"
		],
	},
	"docgen:battle_camera:is_ambush_controller_executing": {
		"scope": "lua",
		"prefix": "is_ambush_controller_executing",
		"description": "camera:is_ambush_controller_executing()\n-  -\n\nReturns whether an ambush controller is currently executing.\n",
		"body": [
			"is_ambush_controller_executing()"
		],
	},
	"docgen:battle_camera:camera:is_ambush_controller_executing": {
		"scope": "lua",
		"prefix": "camera:is_ambush_controller_executing",
		"description": "camera:is_ambush_controller_executing()\n-  -\n\nReturns whether an ambush controller is currently executing.\n",
		"body": [
			"camera:is_ambush_controller_executing()"
		],
	},
	"docgen:battle_camera:allow_user_to_skip_ambush_intro": {
		"scope": "lua",
		"prefix": "allow_user_to_skip_ambush_intro",
		"description": "camera:allow_user_to_skip_ambush_intro()\n-  -\n\nSets whether the player can skip the ambush intro with the ESC key.\n",
		"body": [
			"allow_user_to_skip_ambush_intro(${1:boolean user can skip})"
		],
	},
	"docgen:battle_camera:camera:allow_user_to_skip_ambush_intro": {
		"scope": "lua",
		"prefix": "camera:allow_user_to_skip_ambush_intro",
		"description": "camera:allow_user_to_skip_ambush_intro()\n-  -\n\nSets whether the player can skip the ambush intro with the ESC key.\n",
		"body": [
			"camera:allow_user_to_skip_ambush_intro(${1:boolean user can skip})"
		],
	},
	"docgen:battle_camera:teleport_defender_when_ambush_intro_skipped": {
		"scope": "lua",
		"prefix": "teleport_defender_when_ambush_intro_skipped",
		"description": "camera:teleport_defender_when_ambush_intro_skipped()\n-  -\n\nSets whether the ambush defender is teleported to the end of their movement path when the ambush intro is skipped.\n",
		"body": [
			"teleport_defender_when_ambush_intro_skipped(${1:boolean teleport defender})"
		],
	},
	"docgen:battle_camera:camera:teleport_defender_when_ambush_intro_skipped": {
		"scope": "lua",
		"prefix": "camera:teleport_defender_when_ambush_intro_skipped",
		"description": "camera:teleport_defender_when_ambush_intro_skipped()\n-  -\n\nSets whether the ambush defender is teleported to the end of their movement path when the ambush intro is skipped.\n",
		"body": [
			"camera:teleport_defender_when_ambush_intro_skipped(${1:boolean teleport defender})"
		],
	},
	"docgen:battle_camera:play": {
		"scope": "lua",
		"prefix": "play",
		"description": "camera:play()\n-  -\n\nPlays a specified camera file.\n",
		"body": [
			"play(${1:string file path}, ${2:boolean loop})"
		],
	},
	"docgen:battle_camera:camera:play": {
		"scope": "lua",
		"prefix": "camera:play",
		"description": "camera:play()\n-  -\n\nPlays a specified camera file.\n",
		"body": [
			"camera:play(${1:string file path}, ${2:boolean loop})"
		],
	},
	"docgen:battle_camera:stop": {
		"scope": "lua",
		"prefix": "stop",
		"description": "camera:stop()\n-  -\n\nStops a playing camera file that was started with battle_camera:play.\n",
		"body": [
			"stop(${1:[opt=false] boolean stop instantly})"
		],
	},
	"docgen:battle_camera:camera:stop": {
		"scope": "lua",
		"prefix": "camera:stop",
		"description": "camera:stop()\n-  -\n\nStops a playing camera file that was started with battle_camera:play.\n",
		"body": [
			"camera:stop(${1:[opt=false] boolean stop instantly})"
		],
	},
	"docgen:battle_camera:is_playing": {
		"scope": "lua",
		"prefix": "is_playing",
		"description": "camera:is_playing()\n-  -\n\nReturns whether a scripted camera started with battle_camera:play is currently playing.\n",
		"body": [
			"is_playing()"
		],
	},
	"docgen:battle_camera:camera:is_playing": {
		"scope": "lua",
		"prefix": "camera:is_playing",
		"description": "camera:is_playing()\n-  -\n\nReturns whether a scripted camera started with battle_camera:play is currently playing.\n",
		"body": [
			"camera:is_playing()"
		],
	},
	"docgen:battle_camera:look_at": {
		"scope": "lua",
		"prefix": "look_at",
		"description": "camera:look_at()\n-  -\n\nTurns the camera to face a specified battle_vector position over a specified time.\n",
		"body": [
			"look_at(${1:battle_vector target}, ${2:number transition time}, ${3:[opt=nil] number starting angle}, ${4:[opt=false] boolean linear movement}, ${5:[opt=0] number target fov})"
		],
	},
	"docgen:battle_camera:camera:look_at": {
		"scope": "lua",
		"prefix": "camera:look_at",
		"description": "camera:look_at()\n-  -\n\nTurns the camera to face a specified battle_vector position over a specified time.\n",
		"body": [
			"camera:look_at(${1:battle_vector target}, ${2:number transition time}, ${3:[opt=nil] number starting angle}, ${4:[opt=false] boolean linear movement}, ${5:[opt=0] number target fov})"
		],
	},
	"docgen:battle_camera:move_to": {
		"scope": "lua",
		"prefix": "move_to",
		"description": "camera:move_to()\n-  -\n\nMoves the camera to a specified position, facing a specified target, over a specified time.\n",
		"body": [
			"move_to(${1:battle_vector position}, ${2:battle_vector target}, ${3:number transition time}, ${4:[opt=false] boolean linear movement}, ${5:[opt=0] number target fov}, ${6:[opt=true] boolean use command queue})"
		],
	},
	"docgen:battle_camera:camera:move_to": {
		"scope": "lua",
		"prefix": "camera:move_to",
		"description": "camera:move_to()\n-  -\n\nMoves the camera to a specified position, facing a specified target, over a specified time.\n",
		"body": [
			"camera:move_to(${1:battle_vector position}, ${2:battle_vector target}, ${3:number transition time}, ${4:[opt=false] boolean linear movement}, ${5:[opt=0] number target fov}, ${6:[opt=true] boolean use command queue})"
		],
	},
	"docgen:battle_camera:position": {
		"scope": "lua",
		"prefix": "position",
		"description": "camera:position()\n-  -\n\nReturns the current position of the camera.\n",
		"body": [
			"position()"
		],
	},
	"docgen:battle_camera:camera:position": {
		"scope": "lua",
		"prefix": "camera:position",
		"description": "camera:position()\n-  -\n\nReturns the current position of the camera.\n",
		"body": [
			"camera:position()"
		],
	},
	"docgen:battle_camera:target": {
		"scope": "lua",
		"prefix": "target",
		"description": "camera:target()\n-  -\n\nReturns the current look-at target of the camera.\n",
		"body": [
			"target()"
		],
	},
	"docgen:battle_camera:camera:target": {
		"scope": "lua",
		"prefix": "camera:target",
		"description": "camera:target()\n-  -\n\nReturns the current look-at target of the camera.\n",
		"body": [
			"camera:target()"
		],
	},
	"docgen:battle_camera:enable_functionality": {
		"scope": "lua",
		"prefix": "enable_functionality",
		"description": "camera:enable_functionality()\n-  -\n\nEnables some functionality of the camera after it has been disabled with battle_camera:disable_functionality.\n",
		"body": [
			"enable_functionality(${1:string functionality})"
		],
	},
	"docgen:battle_camera:camera:enable_functionality": {
		"scope": "lua",
		"prefix": "camera:enable_functionality",
		"description": "camera:enable_functionality()\n-  -\n\nEnables some functionality of the camera after it has been disabled with battle_camera:disable_functionality.\n",
		"body": [
			"camera:enable_functionality(${1:string functionality})"
		],
	},
	"docgen:battle_camera:disable_functionality": {
		"scope": "lua",
		"prefix": "disable_functionality",
		"description": "camera:disable_functionality()\n-  -\n\nDisables some camera functionality.\n",
		"body": [
			"disable_functionality(${1:string functionality})"
		],
	},
	"docgen:battle_camera:camera:disable_functionality": {
		"scope": "lua",
		"prefix": "camera:disable_functionality",
		"description": "camera:disable_functionality()\n-  -\n\nDisables some camera functionality.\n",
		"body": [
			"camera:disable_functionality(${1:string functionality})"
		],
	},
	"docgen:battle_camera:change_depth_of_field": {
		"scope": "lua",
		"prefix": "change_depth_of_field",
		"description": "camera:change_depth_of_field()\n-  -\n\nChanges the depth of field of the camera.\n",
		"body": [
			"change_depth_of_field(${1:number transition duration}, ${2:[opt=nil] number focus distance}, ${3:[opt=nil] number focal length}, ${4:[opt=nil] number blur size})"
		],
	},
	"docgen:battle_camera:camera:change_depth_of_field": {
		"scope": "lua",
		"prefix": "camera:change_depth_of_field",
		"description": "camera:change_depth_of_field()\n-  -\n\nChanges the depth of field of the camera.\n",
		"body": [
			"camera:change_depth_of_field(${1:number transition duration}, ${2:[opt=nil] number focus distance}, ${3:[opt=nil] number focal length}, ${4:[opt=nil] number blur size})"
		],
	},
	"docgen:battle_camera:fade": {
		"scope": "lua",
		"prefix": "fade",
		"description": "camera:fade()\n-  -\n\nFades the camera over a supplied duration from picture to black, or from black to picture.\n",
		"body": [
			"fade(${1:boolean to black}, ${2:number transition duration})"
		],
	},
	"docgen:battle_camera:camera:fade": {
		"scope": "lua",
		"prefix": "camera:fade",
		"description": "camera:fade()\n-  -\n\nFades the camera over a supplied duration from picture to black, or from black to picture.\n",
		"body": [
			"camera:fade(${1:boolean to black}, ${2:number transition duration})"
		],
	},
	"docgen:battle_camera:change_height_range": {
		"scope": "lua",
		"prefix": "change_height_range",
		"description": "camera:change_height_range()\n-  -\n\nChanges the minimum/maximum permitted altitude of the camera above the ground.\n",
		"body": [
			"change_height_range(${1:number min height}, ${2:number max height})"
		],
	},
	"docgen:battle_camera:camera:change_height_range": {
		"scope": "lua",
		"prefix": "camera:change_height_range",
		"description": "camera:change_height_range()\n-  -\n\nChanges the minimum/maximum permitted altitude of the camera above the ground.\n",
		"body": [
			"camera:change_height_range(${1:number min height}, ${2:number max height})"
		],
	},
	"docgen:battle_camera:enable_shake": {
		"scope": "lua",
		"prefix": "enable_shake",
		"description": "camera:enable_shake()\n-  -\n\nEnables camera shaking.\n",
		"body": [
			"enable_shake()"
		],
	},
	"docgen:battle_camera:camera:enable_shake": {
		"scope": "lua",
		"prefix": "camera:enable_shake",
		"description": "camera:enable_shake()\n-  -\n\nEnables camera shaking.\n",
		"body": [
			"camera:enable_shake()"
		],
	},
	"docgen:battle_camera:disable_shake": {
		"scope": "lua",
		"prefix": "disable_shake",
		"description": "camera:disable_shake()\n-  -\n\nDisables camera shaking.\n",
		"body": [
			"disable_shake()"
		],
	},
	"docgen:battle_camera:camera:disable_shake": {
		"scope": "lua",
		"prefix": "camera:disable_shake",
		"description": "camera:disable_shake()\n-  -\n\nDisables camera shaking.\n",
		"body": [
			"camera:disable_shake()"
		],
	},
	"docgen:battle_camera:enable_anchor_to_army": {
		"scope": "lua",
		"prefix": "enable_anchor_to_army",
		"description": "camera:enable_anchor_to_army()\n-  -\n\nEnables the anchor which prevents the camera from being moved too far away from the players forces.\n",
		"body": [
			"enable_anchor_to_army()"
		],
	},
	"docgen:battle_camera:camera:enable_anchor_to_army": {
		"scope": "lua",
		"prefix": "camera:enable_anchor_to_army",
		"description": "camera:enable_anchor_to_army()\n-  -\n\nEnables the anchor which prevents the camera from being moved too far away from the players forces.\n",
		"body": [
			"camera:enable_anchor_to_army()"
		],
	},
	"docgen:battle_camera:disable_anchor_to_army": {
		"scope": "lua",
		"prefix": "disable_anchor_to_army",
		"description": "camera:disable_anchor_to_army()\n-  -\n\nDisables the anchor which prevents the camera from being moved too far away from the players forces.\n",
		"body": [
			"disable_anchor_to_army()"
		],
	},
	"docgen:battle_camera:camera:disable_anchor_to_army": {
		"scope": "lua",
		"prefix": "camera:disable_anchor_to_army",
		"description": "camera:disable_anchor_to_army()\n-  -\n\nDisables the anchor which prevents the camera from being moved too far away from the players forces.\n",
		"body": [
			"camera:disable_anchor_to_army()"
		],
	},
	"docgen:battle_building:position": {
		"scope": "lua",
		"prefix": "position",
		"description": "building:position()\n-  -\n\nReturns a battle_vector representing the position of the building.\n",
		"body": [
			"position()"
		],
	},
	"docgen:battle_building:building:position": {
		"scope": "lua",
		"prefix": "building:position",
		"description": "building:position()\n-  -\n\nReturns a battle_vector representing the position of the building.\n",
		"body": [
			"building:position()"
		],
	},
	"docgen:battle_building:central_position": {
		"scope": "lua",
		"prefix": "central_position",
		"description": "building:central_position()\n-  -\n\nReturns a battle_vector representing the centre position of the building.\n",
		"body": [
			"central_position()"
		],
	},
	"docgen:battle_building:building:central_position": {
		"scope": "lua",
		"prefix": "building:central_position",
		"description": "building:central_position()\n-  -\n\nReturns a battle_vector representing the centre position of the building.\n",
		"body": [
			"building:central_position()"
		],
	},
	"docgen:battle_building:alliance_owner_id": {
		"scope": "lua",
		"prefix": "alliance_owner_id",
		"description": "building:alliance_owner_id()\n-  -\n\nReturns the number of the battle_alliance that owns the building.\n",
		"body": [
			"alliance_owner_id()"
		],
	},
	"docgen:battle_building:building:alliance_owner_id": {
		"scope": "lua",
		"prefix": "building:alliance_owner_id",
		"description": "building:alliance_owner_id()\n-  -\n\nReturns the number of the battle_alliance that owns the building.\n",
		"body": [
			"building:alliance_owner_id()"
		],
	},
	"docgen:battle_building:name": {
		"scope": "lua",
		"prefix": "name",
		"description": "building:name()\n-  -\n\nReturns the name of the building.\n",
		"body": [
			"name()"
		],
	},
	"docgen:battle_building:building:name": {
		"scope": "lua",
		"prefix": "building:name",
		"description": "building:name()\n-  -\n\nReturns the name of the building.\n",
		"body": [
			"building:name()"
		],
	},
	"docgen:battle_building:health": {
		"scope": "lua",
		"prefix": "health",
		"description": "building:health()\n-  -\n\nReturns the health of the building as a unary value (between 0 and 1).\n",
		"body": [
			"health()"
		],
	},
	"docgen:battle_building:building:health": {
		"scope": "lua",
		"prefix": "building:health",
		"description": "building:health()\n-  -\n\nReturns the health of the building as a unary value (between 0 and 1).\n",
		"body": [
			"building:health()"
		],
	},
	"docgen:battle_building:hide": {
		"scope": "lua",
		"prefix": "hide",
		"description": "building:hide()\n-  -\n\nHides the building, making it invisible.\n",
		"body": [
			"hide()"
		],
	},
	"docgen:battle_building:building:hide": {
		"scope": "lua",
		"prefix": "building:hide",
		"description": "building:hide()\n-  -\n\nHides the building, making it invisible.\n",
		"body": [
			"building:hide()"
		],
	},
	"docgen:battle_building:show": {
		"scope": "lua",
		"prefix": "show",
		"description": "building:show()\n-  -\n\nShows the building after it has been hidden with battle_building:hide.\n",
		"body": [
			"show()"
		],
	},
	"docgen:battle_building:building:show": {
		"scope": "lua",
		"prefix": "building:show",
		"description": "building:show()\n-  -\n\nShows the building after it has been hidden with battle_building:hide.\n",
		"body": [
			"building:show()"
		],
	},
	"docgen:battle_building:change_on_fire": {
		"scope": "lua",
		"prefix": "change_on_fire",
		"description": "building:change_on_fire()\n-  -\n\nSets the building on fire or not (if it is able to burn).\n",
		"body": [
			"change_on_fire(${1:boolean set on fire})"
		],
	},
	"docgen:battle_building:building:change_on_fire": {
		"scope": "lua",
		"prefix": "building:change_on_fire",
		"description": "building:change_on_fire()\n-  -\n\nSets the building on fire or not (if it is able to burn).\n",
		"body": [
			"building:change_on_fire(${1:boolean set on fire})"
		],
	},
	"docgen:battle_building:change_immune_to_catching_fire": {
		"scope": "lua",
		"prefix": "change_immune_to_catching_fire",
		"description": "building:change_immune_to_catching_fire()\n-  -\n\nSets whether the building can burn or not.\n",
		"body": [
			"change_immune_to_catching_fire(${1:boolean is flammable})"
		],
	},
	"docgen:battle_building:building:change_immune_to_catching_fire": {
		"scope": "lua",
		"prefix": "building:change_immune_to_catching_fire",
		"description": "building:change_immune_to_catching_fire()\n-  -\n\nSets whether the building can burn or not.\n",
		"body": [
			"building:change_immune_to_catching_fire(${1:boolean is flammable})"
		],
	},
	"docgen:battle_building:change_immune_to_fire_damage": {
		"scope": "lua",
		"prefix": "change_immune_to_fire_damage",
		"description": "building:change_immune_to_fire_damage()\n-  -\n\nSets whether the building takes damage from burning or not.\n",
		"body": [
			"change_immune_to_fire_damage(${1:boolean takes damage})"
		],
	},
	"docgen:battle_building:building:change_immune_to_fire_damage": {
		"scope": "lua",
		"prefix": "building:change_immune_to_fire_damage",
		"description": "building:change_immune_to_fire_damage()\n-  -\n\nSets whether the building takes damage from burning or not.\n",
		"body": [
			"building:change_immune_to_fire_damage(${1:boolean takes damage})"
		],
	},
	"docgen:battle_building:change_is_destructible": {
		"scope": "lua",
		"prefix": "change_is_destructible",
		"description": "building:change_is_destructible()\n-  -\n\nSets whether the building takes damage at all.\n",
		"body": [
			"change_is_destructible(${1:boolean takes damage})"
		],
	},
	"docgen:battle_building:building:change_is_destructible": {
		"scope": "lua",
		"prefix": "building:change_is_destructible",
		"description": "building:change_is_destructible()\n-  -\n\nSets whether the building takes damage at all.\n",
		"body": [
			"building:change_is_destructible(${1:boolean takes damage})"
		],
	},
	"docgen:battle_building:destroy": {
		"scope": "lua",
		"prefix": "destroy",
		"description": "building:destroy()\n-  -\n\nDestroys the building.\n",
		"body": [
			"destroy()"
		],
	},
	"docgen:battle_building:building:destroy": {
		"scope": "lua",
		"prefix": "building:destroy",
		"description": "building:destroy()\n-  -\n\nDestroys the building.\n",
		"body": [
			"building:destroy()"
		],
	},
	"docgen:battle_sound_effect:new": {
		"scope": "lua",
		"prefix": "new",
		"description": "battle_sound_effect:new()\n-  -\n\nCreates a new <code>battle_sound_effect</code> object.\n",
		"body": [
			"new()"
		],
	},
	"docgen:battle_sound_effect:battle_sound_effect:new": {
		"scope": "lua",
		"prefix": "battle_sound_effect:new",
		"description": "battle_sound_effect:new()\n-  -\n\nCreates a new <code>battle_sound_effect</code> object.\n",
		"body": [
			"battle_sound_effect:new()"
		],
	},
	"docgen:battle_sound_effect:load": {
		"scope": "lua",
		"prefix": "load",
		"description": "battle_sound_effect:load()\n-  -\n\nAssociates a specified sound event with this <code>battle_sound_effect</code> object.\n",
		"body": [
			"load(${1:string sound event name})"
		],
	},
	"docgen:battle_sound_effect:battle_sound_effect:load": {
		"scope": "lua",
		"prefix": "battle_sound_effect:load",
		"description": "battle_sound_effect:load()\n-  -\n\nAssociates a specified sound event with this <code>battle_sound_effect</code> object.\n",
		"body": [
			"battle_sound_effect:load(${1:string sound event name})"
		],
	},
	"docgen:battle_sound_effect:play3D": {
		"scope": "lua",
		"prefix": "play3D",
		"description": "battle_sound_effect:play3D()\n-  -\n\nInstructs the sound effect to play.\n",
		"body": [
			"play3D(${1:[opt=nil] battle_vector position})"
		],
	},
	"docgen:battle_sound_effect:battle_sound_effect:play3D": {
		"scope": "lua",
		"prefix": "battle_sound_effect:play3D",
		"description": "battle_sound_effect:play3D()\n-  -\n\nInstructs the sound effect to play.\n",
		"body": [
			"battle_sound_effect:play3D(${1:[opt=nil] battle_vector position})"
		],
	},
	"docgen:battle_sound_effect:playVO": {
		"scope": "lua",
		"prefix": "playVO",
		"description": "battle_sound_effect:playVO()\n-  -\n\nInstructs the sound effect to play as unit voiceover, coming from the position of the unit.\n",
		"body": [
			"playVO(${1:battle_unit unit})"
		],
	},
	"docgen:battle_sound_effect:battle_sound_effect:playVO": {
		"scope": "lua",
		"prefix": "battle_sound_effect:playVO",
		"description": "battle_sound_effect:playVO()\n-  -\n\nInstructs the sound effect to play as unit voiceover, coming from the position of the unit.\n",
		"body": [
			"battle_sound_effect:playVO(${1:battle_unit unit})"
		],
	},
	"docgen:battle_sound_effect:stop": {
		"scope": "lua",
		"prefix": "stop",
		"description": "battle_sound_effect:stop()\n-  -\n\nStops the sound effect if it's currently playing.\n",
		"body": [
			"stop()"
		],
	},
	"docgen:battle_sound_effect:battle_sound_effect:stop": {
		"scope": "lua",
		"prefix": "battle_sound_effect:stop",
		"description": "battle_sound_effect:stop()\n-  -\n\nStops the sound effect if it's currently playing.\n",
		"body": [
			"battle_sound_effect:stop()"
		],
	},
	"docgen:battle_sound_effect:is_playing": {
		"scope": "lua",
		"prefix": "is_playing",
		"description": "battle_sound_effect:is_playing()\n-  -\n\nReturns whether the sound effect is currently playing or not.\n",
		"body": [
			"is_playing()"
		],
	},
	"docgen:battle_sound_effect:battle_sound_effect:is_playing": {
		"scope": "lua",
		"prefix": "battle_sound_effect:is_playing",
		"description": "battle_sound_effect:is_playing()\n-  -\n\nReturns whether the sound effect is currently playing or not.\n",
		"body": [
			"battle_sound_effect:is_playing()"
		],
	},
	"docgen:battle_sound_effect:is_valid": {
		"scope": "lua",
		"prefix": "is_valid",
		"description": "battle_sound_effect:is_valid()\n-  -\n\nReturns whether the sound effect is currently valid.\n",
		"body": [
			"is_valid()"
		],
	},
	"docgen:battle_sound_effect:battle_sound_effect:is_valid": {
		"scope": "lua",
		"prefix": "battle_sound_effect:is_valid",
		"description": "battle_sound_effect:is_valid()\n-  -\n\nReturns whether the sound effect is currently valid.\n",
		"body": [
			"battle_sound_effect:is_valid()"
		],
	},
	"docgen:battle_buildings:count": {
		"scope": "lua",
		"prefix": "count",
		"description": "buildings:count()\n-  -\n\nReturns the number of buildings in the list.\n",
		"body": [
			"count()"
		],
	},
	"docgen:battle_buildings:buildings:count": {
		"scope": "lua",
		"prefix": "buildings:count",
		"description": "buildings:count()\n-  -\n\nReturns the number of buildings in the list.\n",
		"body": [
			"buildings:count()"
		],
	},
	"docgen:battle_buildings:item": {
		"scope": "lua",
		"prefix": "item",
		"description": "buildings:item()\n-  -\n\nReturns a building from the list by its numeric index.\n",
		"body": [
			"item(${1:number index})"
		],
	},
	"docgen:battle_buildings:buildings:item": {
		"scope": "lua",
		"prefix": "buildings:item",
		"description": "buildings:item()\n-  -\n\nReturns a building from the list by its numeric index.\n",
		"body": [
			"buildings:item(${1:number index})"
		],
	},
	"docgen:battle_buildings:garrisonable_count": {
		"scope": "lua",
		"prefix": "garrisonable_count",
		"description": "buildings:garrisonable_count()\n-  -\n\nReturns the number of buildings in the list that are garrisonable.\n",
		"body": [
			"garrisonable_count()"
		],
	},
	"docgen:battle_buildings:buildings:garrisonable_count": {
		"scope": "lua",
		"prefix": "buildings:garrisonable_count",
		"description": "buildings:garrisonable_count()\n-  -\n\nReturns the number of buildings in the list that are garrisonable.\n",
		"body": [
			"buildings:garrisonable_count()"
		],
	},
	"docgen:battle_buildings:garrisonable_item": {
		"scope": "lua",
		"prefix": "garrisonable_item",
		"description": "buildings:garrisonable_item()\n-  -\n\nReturns a garrisonable building from the list by its numeric index.\n",
		"body": [
			"garrisonable_item(${1:number index})"
		],
	},
	"docgen:battle_buildings:buildings:garrisonable_item": {
		"scope": "lua",
		"prefix": "buildings:garrisonable_item",
		"description": "buildings:garrisonable_item()\n-  -\n\nReturns a garrisonable building from the list by its numeric index.\n",
		"body": [
			"buildings:garrisonable_item(${1:number index})"
		],
	},
	"docgen:battle_unit:name": {
		"scope": "lua",
		"prefix": "name",
		"description": "unit:name()\n-  -\n\nReturns the script name for the unit, if any has been set.\n",
		"body": [
			"name()"
		],
	},
	"docgen:battle_unit:unit:name": {
		"scope": "lua",
		"prefix": "unit:name",
		"description": "unit:name()\n-  -\n\nReturns the script name for the unit, if any has been set.\n",
		"body": [
			"unit:name()"
		],
	},
	"docgen:battle_unit:unique_ui_id": {
		"scope": "lua",
		"prefix": "unique_ui_id",
		"description": "unit:unique_ui_id()\n-  -\n\nReturns the unique ui id for the unit, which should match the name of the corresponding unit card.\n",
		"body": [
			"unique_ui_id()"
		],
	},
	"docgen:battle_unit:unit:unique_ui_id": {
		"scope": "lua",
		"prefix": "unit:unique_ui_id",
		"description": "unit:unique_ui_id()\n-  -\n\nReturns the unique ui id for the unit, which should match the name of the corresponding unit card.\n",
		"body": [
			"unit:unique_ui_id()"
		],
	},
	"docgen:battle_unit:type": {
		"scope": "lua",
		"prefix": "type",
		"description": "unit:type()\n-  -\n\nReturns the unit type of the unit, from the <code>land_units</code> table.\n",
		"body": [
			"type()"
		],
	},
	"docgen:battle_unit:unit:type": {
		"scope": "lua",
		"prefix": "unit:type",
		"description": "unit:type()\n-  -\n\nReturns the unit type of the unit, from the <code>land_units</code> table.\n",
		"body": [
			"unit:type()"
		],
	},
	"docgen:battle_unit:alliance_index": {
		"scope": "lua",
		"prefix": "alliance_index",
		"description": "unit:alliance_index()\n-  -\n\nReturns the index number of the alliance the unit belongs to, allowing its battle_alliance to be determined or looked up from a battle_alliances object.\n",
		"body": [
			"alliance_index()"
		],
	},
	"docgen:battle_unit:unit:alliance_index": {
		"scope": "lua",
		"prefix": "unit:alliance_index",
		"description": "unit:alliance_index()\n-  -\n\nReturns the index number of the alliance the unit belongs to, allowing its battle_alliance to be determined or looked up from a battle_alliances object.\n",
		"body": [
			"unit:alliance_index()"
		],
	},
	"docgen:battle_unit:army_index": {
		"scope": "lua",
		"prefix": "army_index",
		"description": "unit:army_index()\n-  -\n\nReturns the index number of the army the unit belongs to, allowing its battle_army to be determined or looked up from a battle_armies object (which itself can be determined from the value returned by battle_unit:alliance_index).\n",
		"body": [
			"army_index()"
		],
	},
	"docgen:battle_unit:unit:army_index": {
		"scope": "lua",
		"prefix": "unit:army_index",
		"description": "unit:army_index()\n-  -\n\nReturns the index number of the army the unit belongs to, allowing its battle_army to be determined or looked up from a battle_armies object (which itself can be determined from the value returned by battle_unit:alliance_index).\n",
		"body": [
			"unit:army_index()"
		],
	},
	"docgen:battle_unit:unit_class": {
		"scope": "lua",
		"prefix": "unit_class",
		"description": "unit:unit_class()\n-  -\n\nReturns the class of the unit, from the <code>land_units</code> table.\n",
		"body": [
			"unit_class()"
		],
	},
	"docgen:battle_unit:unit:unit_class": {
		"scope": "lua",
		"prefix": "unit:unit_class",
		"description": "unit:unit_class()\n-  -\n\nReturns the class of the unit, from the <code>land_units</code> table.\n",
		"body": [
			"unit:unit_class()"
		],
	},
	"docgen:battle_unit:is_cavalry": {
		"scope": "lua",
		"prefix": "is_cavalry",
		"description": "unit:is_cavalry()\n-  -\n\nReturns whether the unit is cavalry.\n",
		"body": [
			"is_cavalry()"
		],
	},
	"docgen:battle_unit:unit:is_cavalry": {
		"scope": "lua",
		"prefix": "unit:is_cavalry",
		"description": "unit:is_cavalry()\n-  -\n\nReturns whether the unit is cavalry.\n",
		"body": [
			"unit:is_cavalry()"
		],
	},
	"docgen:battle_unit:is_infantry": {
		"scope": "lua",
		"prefix": "is_infantry",
		"description": "unit:is_infantry()\n-  -\n\nReturns whether the unit is infantry.\n",
		"body": [
			"is_infantry()"
		],
	},
	"docgen:battle_unit:unit:is_infantry": {
		"scope": "lua",
		"prefix": "unit:is_infantry",
		"description": "unit:is_infantry()\n-  -\n\nReturns whether the unit is infantry.\n",
		"body": [
			"unit:is_infantry()"
		],
	},
	"docgen:battle_unit:is_artillery": {
		"scope": "lua",
		"prefix": "is_artillery",
		"description": "unit:is_artillery()\n-  -\n\nReturns whether the unit is artillery.\n",
		"body": [
			"is_artillery()"
		],
	},
	"docgen:battle_unit:unit:is_artillery": {
		"scope": "lua",
		"prefix": "unit:is_artillery",
		"description": "unit:is_artillery()\n-  -\n\nReturns whether the unit is artillery.\n",
		"body": [
			"unit:is_artillery()"
		],
	},
	"docgen:battle_unit:is_limbered_artillery": {
		"scope": "lua",
		"prefix": "is_limbered_artillery",
		"description": "unit:is_limbered_artillery()\n-  -\n\nReturns whether the unit is artillery in a limbered state (i.\n",
		"body": [
			"is_limbered_artillery()"
		],
	},
	"docgen:battle_unit:unit:is_limbered_artillery": {
		"scope": "lua",
		"prefix": "unit:is_limbered_artillery",
		"description": "unit:is_limbered_artillery()\n-  -\n\nReturns whether the unit is artillery in a limbered state (i.\n",
		"body": [
			"unit:is_limbered_artillery()"
		],
	},
	"docgen:battle_unit:is_commanding_unit": {
		"scope": "lua",
		"prefix": "is_commanding_unit",
		"description": "unit:is_commanding_unit()\n-  -\n\nReturns whether this is the commanding unit of the army.\n",
		"body": [
			"is_commanding_unit()"
		],
	},
	"docgen:battle_unit:unit:is_commanding_unit": {
		"scope": "lua",
		"prefix": "unit:is_commanding_unit",
		"description": "unit:is_commanding_unit()\n-  -\n\nReturns whether this is the commanding unit of the army.\n",
		"body": [
			"unit:is_commanding_unit()"
		],
	},
	"docgen:battle_unit:position": {
		"scope": "lua",
		"prefix": "position",
		"description": "unit:position()\n-  -\n\nReturns the centre position of the main squad of the unit.\n",
		"body": [
			"position()"
		],
	},
	"docgen:battle_unit:unit:position": {
		"scope": "lua",
		"prefix": "unit:position",
		"description": "unit:position()\n-  -\n\nReturns the centre position of the main squad of the unit.\n",
		"body": [
			"unit:position()"
		],
	},
	"docgen:battle_unit:ordered_position": {
		"scope": "lua",
		"prefix": "ordered_position",
		"description": "unit:ordered_position()\n-  -\n\nReturns the position to which the unit has been ordered to move to.\n",
		"body": [
			"ordered_position()"
		],
	},
	"docgen:battle_unit:unit:ordered_position": {
		"scope": "lua",
		"prefix": "unit:ordered_position",
		"description": "unit:ordered_position()\n-  -\n\nReturns the position to which the unit has been ordered to move to.\n",
		"body": [
			"unit:ordered_position()"
		],
	},
	"docgen:battle_unit:can_reach_position": {
		"scope": "lua",
		"prefix": "can_reach_position",
		"description": "unit:can_reach_position()\n-  -\n\nReturns whether the unit can reach the supplied position.\n",
		"body": [
			"can_reach_position(${1:battle_vector position})"
		],
	},
	"docgen:battle_unit:unit:can_reach_position": {
		"scope": "lua",
		"prefix": "unit:can_reach_position",
		"description": "unit:can_reach_position()\n-  -\n\nReturns whether the unit can reach the supplied position.\n",
		"body": [
			"unit:can_reach_position(${1:battle_vector position})"
		],
	},
	"docgen:battle_unit:bearing": {
		"scope": "lua",
		"prefix": "bearing",
		"description": "unit:bearing()\n-  -\n\nReturns the current orientation of the main squad of the unit in degrees.\n",
		"body": [
			"bearing()"
		],
	},
	"docgen:battle_unit:unit:bearing": {
		"scope": "lua",
		"prefix": "unit:bearing",
		"description": "unit:bearing()\n-  -\n\nReturns the current orientation of the main squad of the unit in degrees.\n",
		"body": [
			"unit:bearing()"
		],
	},
	"docgen:battle_unit:ordered_bearing": {
		"scope": "lua",
		"prefix": "ordered_bearing",
		"description": "unit:ordered_bearing()\n-  -\n\nReturns the orientation of the position to which the unit has been ordered in degrees.\n",
		"body": [
			"ordered_bearing()"
		],
	},
	"docgen:battle_unit:unit:ordered_bearing": {
		"scope": "lua",
		"prefix": "unit:ordered_bearing",
		"description": "unit:ordered_bearing()\n-  -\n\nReturns the orientation of the position to which the unit has been ordered in degrees.\n",
		"body": [
			"unit:ordered_bearing()"
		],
	},
	"docgen:battle_unit:ordered_width": {
		"scope": "lua",
		"prefix": "ordered_width",
		"description": "unit:ordered_width()\n-  -\n\nReturns the width of the position to which the unit has been ordered in metres.\n",
		"body": [
			"ordered_width()"
		],
	},
	"docgen:battle_unit:unit:ordered_width": {
		"scope": "lua",
		"prefix": "unit:ordered_width",
		"description": "unit:ordered_width()\n-  -\n\nReturns the width of the position to which the unit has been ordered in metres.\n",
		"body": [
			"unit:ordered_width()"
		],
	},
	"docgen:battle_unit:position_of_officer": {
		"scope": "lua",
		"prefix": "position_of_officer",
		"description": "unit:position_of_officer()\n-  -\n\nReturns the position of the commanding officer of the unit.\n",
		"body": [
			"position_of_officer()"
		],
	},
	"docgen:battle_unit:unit:position_of_officer": {
		"scope": "lua",
		"prefix": "unit:position_of_officer",
		"description": "unit:position_of_officer()\n-  -\n\nReturns the position of the commanding officer of the unit.\n",
		"body": [
			"unit:position_of_officer()"
		],
	},
	"docgen:battle_unit:unit_in_range": {
		"scope": "lua",
		"prefix": "unit_in_range",
		"description": "unit:unit_in_range()\n-  -\n\nReturns whether the supplied unit is in missile range of this unit.\n",
		"body": [
			"unit_in_range(${1:battle_unit target unit})"
		],
	},
	"docgen:battle_unit:unit:unit_in_range": {
		"scope": "lua",
		"prefix": "unit:unit_in_range",
		"description": "unit:unit_in_range()\n-  -\n\nReturns whether the supplied unit is in missile range of this unit.\n",
		"body": [
			"unit:unit_in_range(${1:battle_unit target unit})"
		],
	},
	"docgen:battle_unit:unit_distance": {
		"scope": "lua",
		"prefix": "unit_distance",
		"description": "unit:unit_distance()\n-  -\n\nReturns the shortest distance in metres between this unit and a supplied unit, taking into account their bounding box rather than just working out the centre-to-centre distance.\n",
		"body": [
			"unit_distance(${1:battle_unit target unit})"
		],
	},
	"docgen:battle_unit:unit:unit_distance": {
		"scope": "lua",
		"prefix": "unit:unit_distance",
		"description": "unit:unit_distance()\n-  -\n\nReturns the shortest distance in metres between this unit and a supplied unit, taking into account their bounding box rather than just working out the centre-to-centre distance.\n",
		"body": [
			"unit:unit_distance(${1:battle_unit target unit})"
		],
	},
	"docgen:battle_unit:is_moving": {
		"scope": "lua",
		"prefix": "is_moving",
		"description": "unit:is_moving()\n-  -\n\nReturns whether the unit is moving.\n",
		"body": [
			"is_moving()"
		],
	},
	"docgen:battle_unit:unit:is_moving": {
		"scope": "lua",
		"prefix": "unit:is_moving",
		"description": "unit:is_moving()\n-  -\n\nReturns whether the unit is moving.\n",
		"body": [
			"unit:is_moving()"
		],
	},
	"docgen:battle_unit:is_moving_fast": {
		"scope": "lua",
		"prefix": "is_moving_fast",
		"description": "unit:is_moving_fast()\n-  -\n\nReturns whether the unit is moving fast (running/charging).\n",
		"body": [
			"is_moving_fast()"
		],
	},
	"docgen:battle_unit:unit:is_moving_fast": {
		"scope": "lua",
		"prefix": "unit:is_moving_fast",
		"description": "unit:is_moving_fast()\n-  -\n\nReturns whether the unit is moving fast (running/charging).\n",
		"body": [
			"unit:is_moving_fast()"
		],
	},
	"docgen:battle_unit:is_idle": {
		"scope": "lua",
		"prefix": "is_idle",
		"description": "unit:is_idle()\n-  -\n\nReturns whether the unit is currently idle.\n",
		"body": [
			"is_idle()"
		],
	},
	"docgen:battle_unit:unit:is_idle": {
		"scope": "lua",
		"prefix": "unit:is_idle",
		"description": "unit:is_idle()\n-  -\n\nReturns whether the unit is currently idle.\n",
		"body": [
			"unit:is_idle()"
		],
	},
	"docgen:battle_unit:is_leaving_battle": {
		"scope": "lua",
		"prefix": "is_leaving_battle",
		"description": "unit:is_leaving_battle()\n-  -\n\nReturns whether the unit is currently leaving the battlefield.\n",
		"body": [
			"is_leaving_battle()"
		],
	},
	"docgen:battle_unit:unit:is_leaving_battle": {
		"scope": "lua",
		"prefix": "unit:is_leaving_battle",
		"description": "unit:is_leaving_battle()\n-  -\n\nReturns whether the unit is currently leaving the battlefield.\n",
		"body": [
			"unit:is_leaving_battle()"
		],
	},
	"docgen:battle_unit:is_valid_target": {
		"scope": "lua",
		"prefix": "is_valid_target",
		"description": "unit:is_valid_target()\n-  -\n\nReturns whether this unit is currently a valid target for enemies to attack.\n",
		"body": [
			"is_valid_target()"
		],
	},
	"docgen:battle_unit:unit:is_valid_target": {
		"scope": "lua",
		"prefix": "unit:is_valid_target",
		"description": "unit:is_valid_target()\n-  -\n\nReturns whether this unit is currently a valid target for enemies to attack.\n",
		"body": [
			"unit:is_valid_target()"
		],
	},
	"docgen:battle_unit:is_currently_garrisoned": {
		"scope": "lua",
		"prefix": "is_currently_garrisoned",
		"description": "unit:is_currently_garrisoned()\n-  -\n\nReturns whether the unit is currently garrisoned in a building.\n",
		"body": [
			"is_currently_garrisoned()"
		],
	},
	"docgen:battle_unit:unit:is_currently_garrisoned": {
		"scope": "lua",
		"prefix": "unit:is_currently_garrisoned",
		"description": "unit:is_currently_garrisoned()\n-  -\n\nReturns whether the unit is currently garrisoned in a building.\n",
		"body": [
			"unit:is_currently_garrisoned()"
		],
	},
	"docgen:battle_unit:is_currently_flying": {
		"scope": "lua",
		"prefix": "is_currently_flying",
		"description": "unit:is_currently_flying()\n-  -\n\nReturns whether the unit can fly and is currently flying.\n",
		"body": [
			"is_currently_flying()"
		],
	},
	"docgen:battle_unit:unit:is_currently_flying": {
		"scope": "lua",
		"prefix": "unit:is_currently_flying",
		"description": "unit:is_currently_flying()\n-  -\n\nReturns whether the unit can fly and is currently flying.\n",
		"body": [
			"unit:is_currently_flying()"
		],
	},
	"docgen:battle_unit:can_fly": {
		"scope": "lua",
		"prefix": "can_fly",
		"description": "unit:can_fly()\n-  -\n\nReturns whether the unit can fly.\n",
		"body": [
			"can_fly()"
		],
	},
	"docgen:battle_unit:unit:can_fly": {
		"scope": "lua",
		"prefix": "unit:can_fly",
		"description": "unit:can_fly()\n-  -\n\nReturns whether the unit can fly.\n",
		"body": [
			"unit:can_fly()"
		],
	},
	"docgen:battle_unit:has_ships": {
		"scope": "lua",
		"prefix": "has_ships",
		"description": "unit:has_ships()\n-  -\n\nReturns whether the unit is currently on a ship.\n",
		"body": [
			"has_ships()"
		],
	},
	"docgen:battle_unit:unit:has_ships": {
		"scope": "lua",
		"prefix": "unit:has_ships",
		"description": "unit:has_ships()\n-  -\n\nReturns whether the unit is currently on a ship.\n",
		"body": [
			"unit:has_ships()"
		],
	},
	"docgen:battle_unit:is_dismounted_ships": {
		"scope": "lua",
		"prefix": "is_dismounted_ships",
		"description": "unit:is_dismounted_ships()\n-  -\n\nReturns whether the unit has a ship but is not currently on it.\n",
		"body": [
			"is_dismounted_ships()"
		],
	},
	"docgen:battle_unit:unit:is_dismounted_ships": {
		"scope": "lua",
		"prefix": "unit:is_dismounted_ships",
		"description": "unit:is_dismounted_ships()\n-  -\n\nReturns whether the unit has a ship but is not currently on it.\n",
		"body": [
			"unit:is_dismounted_ships()"
		],
	},
	"docgen:battle_unit:is_hidden": {
		"scope": "lua",
		"prefix": "is_hidden",
		"description": "unit:is_hidden()\n-  -\n\nReturns whether the unit is currently hidden in tall grass/trees.\n",
		"body": [
			"is_hidden()"
		],
	},
	"docgen:battle_unit:unit:is_hidden": {
		"scope": "lua",
		"prefix": "unit:is_hidden",
		"description": "unit:is_hidden()\n-  -\n\nReturns whether the unit is currently hidden in tall grass/trees.\n",
		"body": [
			"unit:is_hidden()"
		],
	},
	"docgen:battle_unit:is_visible_to_alliance": {
		"scope": "lua",
		"prefix": "is_visible_to_alliance",
		"description": "unit:is_visible_to_alliance()\n-  -\n\nReturns whether the unit is visible to a supplied alliance.\n",
		"body": [
			"is_visible_to_alliance(${1:battle_alliance alliance})"
		],
	},
	"docgen:battle_unit:unit:is_visible_to_alliance": {
		"scope": "lua",
		"prefix": "unit:is_visible_to_alliance",
		"description": "unit:is_visible_to_alliance()\n-  -\n\nReturns whether the unit is visible to a supplied alliance.\n",
		"body": [
			"unit:is_visible_to_alliance(${1:battle_alliance alliance})"
		],
	},
	"docgen:battle_unit:is_under_missile_attack": {
		"scope": "lua",
		"prefix": "is_under_missile_attack",
		"description": "unit:is_under_missile_attack()\n-  -\n\nReturns whether the unit is currently taking fire.\n",
		"body": [
			"is_under_missile_attack()"
		],
	},
	"docgen:battle_unit:unit:is_under_missile_attack": {
		"scope": "lua",
		"prefix": "unit:is_under_missile_attack",
		"description": "unit:is_under_missile_attack()\n-  -\n\nReturns whether the unit is currently taking fire.\n",
		"body": [
			"unit:is_under_missile_attack()"
		],
	},
	"docgen:battle_unit:is_in_melee": {
		"scope": "lua",
		"prefix": "is_in_melee",
		"description": "unit:is_in_melee()\n-  -\n\nReturns whether the unit is currently in melee combat.\n",
		"body": [
			"is_in_melee()"
		],
	},
	"docgen:battle_unit:unit:is_in_melee": {
		"scope": "lua",
		"prefix": "unit:is_in_melee",
		"description": "unit:is_in_melee()\n-  -\n\nReturns whether the unit is currently in melee combat.\n",
		"body": [
			"unit:is_in_melee()"
		],
	},
	"docgen:battle_unit:number_of_enemies_killed": {
		"scope": "lua",
		"prefix": "number_of_enemies_killed",
		"description": "unit:number_of_enemies_killed()\n-  -\n\nReturns the number of enemy combatants this unit has killed in this battle.\n",
		"body": [
			"number_of_enemies_killed()"
		],
	},
	"docgen:battle_unit:unit:number_of_enemies_killed": {
		"scope": "lua",
		"prefix": "unit:number_of_enemies_killed",
		"description": "unit:number_of_enemies_killed()\n-  -\n\nReturns the number of enemy combatants this unit has killed in this battle.\n",
		"body": [
			"unit:number_of_enemies_killed()"
		],
	},
	"docgen:battle_unit:initial_number_of_men": {
		"scope": "lua",
		"prefix": "initial_number_of_men",
		"description": "unit:initial_number_of_men()\n-  -\n\nReturns the number of soldiers the unit started the battle with.\n",
		"body": [
			"initial_number_of_men()"
		],
	},
	"docgen:battle_unit:unit:initial_number_of_men": {
		"scope": "lua",
		"prefix": "unit:initial_number_of_men",
		"description": "unit:initial_number_of_men()\n-  -\n\nReturns the number of soldiers the unit started the battle with.\n",
		"body": [
			"unit:initial_number_of_men()"
		],
	},
	"docgen:battle_unit:number_of_men_alive": {
		"scope": "lua",
		"prefix": "number_of_men_alive",
		"description": "unit:number_of_men_alive()\n-  -\n\nReturns the number of soldiers currently alive in the unit.\n",
		"body": [
			"number_of_men_alive()"
		],
	},
	"docgen:battle_unit:unit:number_of_men_alive": {
		"scope": "lua",
		"prefix": "unit:number_of_men_alive",
		"description": "unit:number_of_men_alive()\n-  -\n\nReturns the number of soldiers currently alive in the unit.\n",
		"body": [
			"unit:number_of_men_alive()"
		],
	},
	"docgen:battle_unit:unary_of_men_alive": {
		"scope": "lua",
		"prefix": "unary_of_men_alive",
		"description": "unit:unary_of_men_alive()\n-  -\n\nReturns the number of soldiers currently alive in the unit, expressed as a unary fraction of the the initial size of the unit.\n",
		"body": [
			"unary_of_men_alive()"
		],
	},
	"docgen:battle_unit:unit:unary_of_men_alive": {
		"scope": "lua",
		"prefix": "unit:unary_of_men_alive",
		"description": "unit:unary_of_men_alive()\n-  -\n\nReturns the number of soldiers currently alive in the unit, expressed as a unary fraction of the the initial size of the unit.\n",
		"body": [
			"unit:unary_of_men_alive()"
		],
	},
	"docgen:battle_unit:kill_number_of_men": {
		"scope": "lua",
		"prefix": "kill_number_of_men",
		"description": "unit:kill_number_of_men()\n-  -\n\nKills a specified number of soldiers in the unit.\n",
		"body": [
			"kill_number_of_men(${1:number soldiers to kill}, ${2:[opt=false] boolean hide bodies})"
		],
	},
	"docgen:battle_unit:unit:kill_number_of_men": {
		"scope": "lua",
		"prefix": "unit:kill_number_of_men",
		"description": "unit:kill_number_of_men()\n-  -\n\nKills a specified number of soldiers in the unit.\n",
		"body": [
			"unit:kill_number_of_men(${1:number soldiers to kill}, ${2:[opt=false] boolean hide bodies})"
		],
	},
	"docgen:battle_unit:unary_hitpoints": {
		"scope": "lua",
		"prefix": "unary_hitpoints",
		"description": "unit:unary_hitpoints()\n-  -\n\nReturns the hitpoint strength of all soldiers in the unit, expressed as a unary fraction of the the initial hitpoint strength of the unit.\n",
		"body": [
			"unary_hitpoints()"
		],
	},
	"docgen:battle_unit:unit:unary_hitpoints": {
		"scope": "lua",
		"prefix": "unit:unary_hitpoints",
		"description": "unit:unary_hitpoints()\n-  -\n\nReturns the hitpoint strength of all soldiers in the unit, expressed as a unary fraction of the the initial hitpoint strength of the unit.\n",
		"body": [
			"unit:unary_hitpoints()"
		],
	},
	"docgen:battle_unit:is_wavering": {
		"scope": "lua",
		"prefix": "is_wavering",
		"description": "unit:is_wavering()\n-  -\n\nReturns whether the morale of the unit is currently wavering.\n",
		"body": [
			"is_wavering()"
		],
	},
	"docgen:battle_unit:unit:is_wavering": {
		"scope": "lua",
		"prefix": "unit:is_wavering",
		"description": "unit:is_wavering()\n-  -\n\nReturns whether the morale of the unit is currently wavering.\n",
		"body": [
			"unit:is_wavering()"
		],
	},
	"docgen:battle_unit:is_routing": {
		"scope": "lua",
		"prefix": "is_routing",
		"description": "unit:is_routing()\n-  -\n\nReturns whether the unit is currently routing.\n",
		"body": [
			"is_routing()"
		],
	},
	"docgen:battle_unit:unit:is_routing": {
		"scope": "lua",
		"prefix": "unit:is_routing",
		"description": "unit:is_routing()\n-  -\n\nReturns whether the unit is currently routing.\n",
		"body": [
			"unit:is_routing()"
		],
	},
	"docgen:battle_unit:is_rampaging": {
		"scope": "lua",
		"prefix": "is_rampaging",
		"description": "unit:is_rampaging()\n-  -\n\nReturns whether the unit is currently rampaging.\n",
		"body": [
			"is_rampaging()"
		],
	},
	"docgen:battle_unit:unit:is_rampaging": {
		"scope": "lua",
		"prefix": "unit:is_rampaging",
		"description": "unit:is_rampaging()\n-  -\n\nReturns whether the unit is currently rampaging.\n",
		"body": [
			"unit:is_rampaging()"
		],
	},
	"docgen:battle_unit:is_shattered": {
		"scope": "lua",
		"prefix": "is_shattered",
		"description": "unit:is_shattered()\n-  -\n\nReturns whether the unit is currently shattered (routing without possibility of return).\n",
		"body": [
			"is_shattered()"
		],
	},
	"docgen:battle_unit:unit:is_shattered": {
		"scope": "lua",
		"prefix": "unit:is_shattered",
		"description": "unit:is_shattered()\n-  -\n\nReturns whether the unit is currently shattered (routing without possibility of return).\n",
		"body": [
			"unit:is_shattered()"
		],
	},
	"docgen:battle_unit:is_left_flank_threatened": {
		"scope": "lua",
		"prefix": "is_left_flank_threatened",
		"description": "unit:is_left_flank_threatened()\n-  -\n\nReturns whether the left flank of the unit is currently threatened by the enemy.\n",
		"body": [
			"is_left_flank_threatened()"
		],
	},
	"docgen:battle_unit:unit:is_left_flank_threatened": {
		"scope": "lua",
		"prefix": "unit:is_left_flank_threatened",
		"description": "unit:is_left_flank_threatened()\n-  -\n\nReturns whether the left flank of the unit is currently threatened by the enemy.\n",
		"body": [
			"unit:is_left_flank_threatened()"
		],
	},
	"docgen:battle_unit:is_right_flank_threatened": {
		"scope": "lua",
		"prefix": "is_right_flank_threatened",
		"description": "unit:is_right_flank_threatened()\n-  -\n\nReturns whether the right flank of the unit is currently threatened by the enemy.\n",
		"body": [
			"is_right_flank_threatened()"
		],
	},
	"docgen:battle_unit:unit:is_right_flank_threatened": {
		"scope": "lua",
		"prefix": "unit:is_right_flank_threatened",
		"description": "unit:is_right_flank_threatened()\n-  -\n\nReturns whether the right flank of the unit is currently threatened by the enemy.\n",
		"body": [
			"unit:is_right_flank_threatened()"
		],
	},
	"docgen:battle_unit:is_rear_flank_threatened": {
		"scope": "lua",
		"prefix": "is_rear_flank_threatened",
		"description": "unit:is_rear_flank_threatened()\n-  -\n\nReturns whether the rear of the unit is currently threatened by the enemy.\n",
		"body": [
			"is_rear_flank_threatened()"
		],
	},
	"docgen:battle_unit:unit:is_rear_flank_threatened": {
		"scope": "lua",
		"prefix": "unit:is_rear_flank_threatened",
		"description": "unit:is_rear_flank_threatened()\n-  -\n\nReturns whether the rear of the unit is currently threatened by the enemy.\n",
		"body": [
			"unit:is_rear_flank_threatened()"
		],
	},
	"docgen:battle_unit:fatigue_state": {
		"scope": "lua",
		"prefix": "fatigue_state",
		"description": "unit:fatigue_state()\n-  -\n\nReturns the fatigue state of the unit as a string.\n",
		"body": [
			"fatigue_state()"
		],
	},
	"docgen:battle_unit:unit:fatigue_state": {
		"scope": "lua",
		"prefix": "unit:fatigue_state",
		"description": "unit:fatigue_state()\n-  -\n\nReturns the fatigue state of the unit as a string.\n",
		"body": [
			"unit:fatigue_state()"
		],
	},
	"docgen:battle_unit:ammo_left": {
		"scope": "lua",
		"prefix": "ammo_left",
		"description": "unit:ammo_left()\n-  -\n\nReturns the remaining ammunition count of this unit.\n",
		"body": [
			"ammo_left()"
		],
	},
	"docgen:battle_unit:unit:ammo_left": {
		"scope": "lua",
		"prefix": "unit:ammo_left",
		"description": "unit:ammo_left()\n-  -\n\nReturns the remaining ammunition count of this unit.\n",
		"body": [
			"unit:ammo_left()"
		],
	},
	"docgen:battle_unit:starting_ammo": {
		"scope": "lua",
		"prefix": "starting_ammo",
		"description": "unit:starting_ammo()\n-  -\n\nReturns the amount of ammunition the unit started the battle with.\n",
		"body": [
			"starting_ammo()"
		],
	},
	"docgen:battle_unit:unit:starting_ammo": {
		"scope": "lua",
		"prefix": "unit:starting_ammo",
		"description": "unit:starting_ammo()\n-  -\n\nReturns the amount of ammunition the unit started the battle with.\n",
		"body": [
			"unit:starting_ammo()"
		],
	},
	"docgen:battle_unit:set_current_ammo_unary": {
		"scope": "lua",
		"prefix": "set_current_ammo_unary",
		"description": "unit:set_current_ammo_unary()\n-  -\n\nSets the current ammunition level of the unit to the supplied unary value.\n",
		"body": [
			"set_current_ammo_unary(${1:number unary ammunition level})"
		],
	},
	"docgen:battle_unit:unit:set_current_ammo_unary": {
		"scope": "lua",
		"prefix": "unit:set_current_ammo_unary",
		"description": "unit:set_current_ammo_unary()\n-  -\n\nSets the current ammunition level of the unit to the supplied unary value.\n",
		"body": [
			"unit:set_current_ammo_unary(${1:number unary ammunition level})"
		],
	},
	"docgen:battle_unit:missile_range": {
		"scope": "lua",
		"prefix": "missile_range",
		"description": "unit:missile_range()\n-  -\n\nReturns the missile range of this unit in metres.\n",
		"body": [
			"missile_range()"
		],
	},
	"docgen:battle_unit:unit:missile_range": {
		"scope": "lua",
		"prefix": "unit:missile_range",
		"description": "unit:missile_range()\n-  -\n\nReturns the missile range of this unit in metres.\n",
		"body": [
			"unit:missile_range()"
		],
	},
	"docgen:battle_unit:can_perform_special_ability": {
		"scope": "lua",
		"prefix": "can_perform_special_ability",
		"description": "unit:can_perform_special_ability()\n-  -\n\nReturns whether the unit can perform the specified special ability.\n",
		"body": [
			"can_perform_special_ability(${1:string special ability key })"
		],
	},
	"docgen:battle_unit:unit:can_perform_special_ability": {
		"scope": "lua",
		"prefix": "unit:can_perform_special_ability",
		"description": "unit:can_perform_special_ability()\n-  -\n\nReturns whether the unit can perform the specified special ability.\n",
		"body": [
			"unit:can_perform_special_ability(${1:string special ability key })"
		],
	},
	"docgen:battle_unit:can_use_magic": {
		"scope": "lua",
		"prefix": "can_use_magic",
		"description": "unit:can_use_magic()\n-  -\n\nReturns whether the unit can use any special abilities that cost magic.\n",
		"body": [
			"can_use_magic()"
		],
	},
	"docgen:battle_unit:unit:can_use_magic": {
		"scope": "lua",
		"prefix": "unit:can_use_magic",
		"description": "unit:can_use_magic()\n-  -\n\nReturns whether the unit can use any special abilities that cost magic.\n",
		"body": [
			"unit:can_use_magic()"
		],
	},
	"docgen:battle_unit:is_behaviour_active": {
		"scope": "lua",
		"prefix": "is_behaviour_active",
		"description": "unit:is_behaviour_active()\n-  -\n\nReturns whether a particular behaviour is currently active.\n",
		"body": [
			"is_behaviour_active(${1:string behaviour})"
		],
	},
	"docgen:battle_unit:unit:is_behaviour_active": {
		"scope": "lua",
		"prefix": "unit:is_behaviour_active",
		"description": "unit:is_behaviour_active()\n-  -\n\nReturns whether a particular behaviour is currently active.\n",
		"body": [
			"unit:is_behaviour_active(${1:string behaviour})"
		],
	},
	"docgen:battle_unit:trigger_sound_charge": {
		"scope": "lua",
		"prefix": "trigger_sound_charge",
		"description": "unit:trigger_sound_charge()\n-  -\n\nCompels the unit to make a charge sound effect.\n",
		"body": [
			"trigger_sound_charge()"
		],
	},
	"docgen:battle_unit:unit:trigger_sound_charge": {
		"scope": "lua",
		"prefix": "unit:trigger_sound_charge",
		"description": "unit:trigger_sound_charge()\n-  -\n\nCompels the unit to make a charge sound effect.\n",
		"body": [
			"unit:trigger_sound_charge()"
		],
	},
	"docgen:battle_unit:trigger_sound_taunt": {
		"scope": "lua",
		"prefix": "trigger_sound_taunt",
		"description": "unit:trigger_sound_taunt()\n-  -\n\nCompels the unit to make a taunt sound effect.\n",
		"body": [
			"trigger_sound_taunt()"
		],
	},
	"docgen:battle_unit:unit:trigger_sound_taunt": {
		"scope": "lua",
		"prefix": "unit:trigger_sound_taunt",
		"description": "unit:trigger_sound_taunt()\n-  -\n\nCompels the unit to make a taunt sound effect.\n",
		"body": [
			"unit:trigger_sound_taunt()"
		],
	},
	"docgen:battle_unit:play_anim_for_captain": {
		"scope": "lua",
		"prefix": "play_anim_for_captain",
		"description": "unit:play_anim_for_captain()\n-  -\n\nCompels the unit leader to play an animation.\n",
		"body": [
			"play_anim_for_captain(${1:string animation key}, ${2:boolean loop animation})"
		],
	},
	"docgen:battle_unit:unit:play_anim_for_captain": {
		"scope": "lua",
		"prefix": "unit:play_anim_for_captain",
		"description": "unit:play_anim_for_captain()\n-  -\n\nCompels the unit leader to play an animation.\n",
		"body": [
			"unit:play_anim_for_captain(${1:string animation key}, ${2:boolean loop animation})"
		],
	},
	"docgen:battle_unit:deploy_reinforcement": {
		"scope": "lua",
		"prefix": "deploy_reinforcement",
		"description": "unit:deploy_reinforcement()\n-  -\n\nPrevents or allows the unit to deploy as a reinforcement.\n",
		"body": [
			"deploy_reinforcement(${1:boolean can deploy})"
		],
	},
	"docgen:battle_unit:unit:deploy_reinforcement": {
		"scope": "lua",
		"prefix": "unit:deploy_reinforcement",
		"description": "unit:deploy_reinforcement()\n-  -\n\nPrevents or allows the unit to deploy as a reinforcement.\n",
		"body": [
			"unit:deploy_reinforcement(${1:boolean can deploy})"
		],
	},
	"docgen:battle_unit:select_in_ui": {
		"scope": "lua",
		"prefix": "select_in_ui",
		"description": "unit:select_in_ui()\n-  -\n\nSelects the unit in the user interface.\n",
		"body": [
			"select_in_ui()"
		],
	},
	"docgen:battle_unit:unit:select_in_ui": {
		"scope": "lua",
		"prefix": "unit:select_in_ui",
		"description": "unit:select_in_ui()\n-  -\n\nSelects the unit in the user interface.\n",
		"body": [
			"unit:select_in_ui()"
		],
	},
	"docgen:battle_unit:mark_as_ally": {
		"scope": "lua",
		"prefix": "mark_as_ally",
		"description": "unit:mark_as_ally()\n-  -\n\nMakes a player unit look like it is allied, rather than part of the controlled army.\n",
		"body": [
			"mark_as_ally(${1:boolean mark as ally})"
		],
	},
	"docgen:battle_unit:unit:mark_as_ally": {
		"scope": "lua",
		"prefix": "unit:mark_as_ally",
		"description": "unit:mark_as_ally()\n-  -\n\nMakes a player unit look like it is allied, rather than part of the controlled army.\n",
		"body": [
			"unit:mark_as_ally(${1:boolean mark as ally})"
		],
	},
	"docgen:battle_units:item": {
		"scope": "lua",
		"prefix": "item",
		"description": "units:item()\n-  -\n\nReturns the battle_unit at the specified index in the units list.\n",
		"body": [
			"item(${1:number index})"
		],
	},
	"docgen:battle_units:units:item": {
		"scope": "lua",
		"prefix": "units:item",
		"description": "units:item()\n-  -\n\nReturns the battle_unit at the specified index in the units list.\n",
		"body": [
			"units:item(${1:number index})"
		],
	},
	"docgen:battle_units:count": {
		"scope": "lua",
		"prefix": "count",
		"description": "units:count()\n-  -\n\nReturns the size of the units list.\n",
		"body": [
			"count()"
		],
	},
	"docgen:battle_units:units:count": {
		"scope": "lua",
		"prefix": "units:count",
		"description": "units:count()\n-  -\n\nReturns the size of the units list.\n",
		"body": [
			"units:count()"
		],
	},
	"docgen:battle_units:mountable_artillery_item": {
		"scope": "lua",
		"prefix": "mountable_artillery_item",
		"description": "units:mountable_artillery_item()\n-  -\n\nReturns the battle_unit at the specified index in the mountable artillery list.\n",
		"body": [
			"mountable_artillery_item(${1:number index})"
		],
	},
	"docgen:battle_units:units:mountable_artillery_item": {
		"scope": "lua",
		"prefix": "units:mountable_artillery_item",
		"description": "units:mountable_artillery_item()\n-  -\n\nReturns the battle_unit at the specified index in the mountable artillery list.\n",
		"body": [
			"units:mountable_artillery_item(${1:number index})"
		],
	},
	"docgen:battle_units:kill_commander": {
		"scope": "lua",
		"prefix": "kill_commander",
		"description": "units:kill_commander()\n-  -\n\nKills the commander of the army.\n",
		"body": [
			"kill_commander()"
		],
	},
	"docgen:battle_units:units:kill_commander": {
		"scope": "lua",
		"prefix": "units:kill_commander",
		"description": "units:kill_commander()\n-  -\n\nKills the commander of the army.\n",
		"body": [
			"units:kill_commander()"
		],
	},
	"docgen:battle_unitcontroller:clear_all": {
		"scope": "lua",
		"prefix": "clear_all",
		"description": "unitcontroller:clear_all()\n-  -\n\nRemoves all units from the unitcontroller.\n",
		"body": [
			"clear_all()"
		],
	},
	"docgen:battle_unitcontroller:unitcontroller:clear_all": {
		"scope": "lua",
		"prefix": "unitcontroller:clear_all",
		"description": "unitcontroller:clear_all()\n-  -\n\nRemoves all units from the unitcontroller.\n",
		"body": [
			"unitcontroller:clear_all()"
		],
	},
	"docgen:battle_unitcontroller:add_all_units": {
		"scope": "lua",
		"prefix": "add_all_units",
		"description": "unitcontroller:add_all_units()\n-  -\n\nAdds all units in the battle_army that this unitcontroller is assocated with, as a group.\n",
		"body": [
			"add_all_units()"
		],
	},
	"docgen:battle_unitcontroller:unitcontroller:add_all_units": {
		"scope": "lua",
		"prefix": "unitcontroller:add_all_units",
		"description": "unitcontroller:add_all_units()\n-  -\n\nAdds all units in the battle_army that this unitcontroller is assocated with, as a group.\n",
		"body": [
			"unitcontroller:add_all_units()"
		],
	},
	"docgen:battle_unitcontroller:add_units": {
		"scope": "lua",
		"prefix": "add_units",
		"description": "unitcontroller:add_units()\n-  -\n\nAdds one or more units to the unitcontroller.\n",
		"body": [
			"add_units(${1:... units})"
		],
	},
	"docgen:battle_unitcontroller:unitcontroller:add_units": {
		"scope": "lua",
		"prefix": "unitcontroller:add_units",
		"description": "unitcontroller:add_units()\n-  -\n\nAdds one or more units to the unitcontroller.\n",
		"body": [
			"unitcontroller:add_units(${1:... units})"
		],
	},
	"docgen:battle_unitcontroller:add_group": {
		"scope": "lua",
		"prefix": "add_group",
		"description": "unitcontroller:add_group()\n-  -\n\nAdds one or more units to the unitcontroller as a group.\n",
		"body": [
			"add_group(${1:... units})"
		],
	},
	"docgen:battle_unitcontroller:unitcontroller:add_group": {
		"scope": "lua",
		"prefix": "unitcontroller:add_group",
		"description": "unitcontroller:add_group()\n-  -\n\nAdds one or more units to the unitcontroller as a group.\n",
		"body": [
			"unitcontroller:add_group(${1:... units})"
		],
	},
	"docgen:battle_unitcontroller:take_control": {
		"scope": "lua",
		"prefix": "take_control",
		"description": "unitcontroller:take_control()\n-  -\n\nExplicitly takes control of the assigned units.\n",
		"body": [
			"take_control()"
		],
	},
	"docgen:battle_unitcontroller:unitcontroller:take_control": {
		"scope": "lua",
		"prefix": "unitcontroller:take_control",
		"description": "unitcontroller:take_control()\n-  -\n\nExplicitly takes control of the assigned units.\n",
		"body": [
			"unitcontroller:take_control()"
		],
	},
	"docgen:battle_unitcontroller:release_control": {
		"scope": "lua",
		"prefix": "release_control",
		"description": "unitcontroller:release_control()\n-  -\n\nReleases control of all units controlled by this unitcontroller to either the player or the AI.\n",
		"body": [
			"release_control()"
		],
	},
	"docgen:battle_unitcontroller:unitcontroller:release_control": {
		"scope": "lua",
		"prefix": "unitcontroller:release_control",
		"description": "unitcontroller:release_control()\n-  -\n\nReleases control of all units controlled by this unitcontroller to either the player or the AI.\n",
		"body": [
			"unitcontroller:release_control()"
		],
	},
	"docgen:battle_unitcontroller:morale_behavior_default": {
		"scope": "lua",
		"prefix": "morale_behavior_default",
		"description": "unitcontroller:morale_behavior_default()\n-  -\n\nReleases the morale value of the units associated with this unitcontroller to be set by the game.\n",
		"body": [
			"morale_behavior_default()"
		],
	},
	"docgen:battle_unitcontroller:unitcontroller:morale_behavior_default": {
		"scope": "lua",
		"prefix": "unitcontroller:morale_behavior_default",
		"description": "unitcontroller:morale_behavior_default()\n-  -\n\nReleases the morale value of the units associated with this unitcontroller to be set by the game.\n",
		"body": [
			"unitcontroller:morale_behavior_default()"
		],
	},
	"docgen:battle_unitcontroller:morale_behavior_fearless": {
		"scope": "lua",
		"prefix": "morale_behavior_fearless",
		"description": "unitcontroller:morale_behavior_fearless()\n-  -\n\nSets the units associated with this unitcontroller to be fearless, meaning they can never rout.\n",
		"body": [
			"morale_behavior_fearless()"
		],
	},
	"docgen:battle_unitcontroller:unitcontroller:morale_behavior_fearless": {
		"scope": "lua",
		"prefix": "unitcontroller:morale_behavior_fearless",
		"description": "unitcontroller:morale_behavior_fearless()\n-  -\n\nSets the units associated with this unitcontroller to be fearless, meaning they can never rout.\n",
		"body": [
			"unitcontroller:morale_behavior_fearless()"
		],
	},
	"docgen:battle_unitcontroller:morale_behavior_rout": {
		"scope": "lua",
		"prefix": "morale_behavior_rout",
		"description": "unitcontroller:morale_behavior_rout()\n-  -\n\nInstructs the units associated with this unitcontroller to immediately rout.\n",
		"body": [
			"morale_behavior_rout()"
		],
	},
	"docgen:battle_unitcontroller:unitcontroller:morale_behavior_rout": {
		"scope": "lua",
		"prefix": "unitcontroller:morale_behavior_rout",
		"description": "unitcontroller:morale_behavior_rout()\n-  -\n\nInstructs the units associated with this unitcontroller to immediately rout.\n",
		"body": [
			"unitcontroller:morale_behavior_rout()"
		],
	},
	"docgen:battle_unitcontroller:set_invincible": {
		"scope": "lua",
		"prefix": "set_invincible",
		"description": "unitcontroller:set_invincible()\n-  -\n\nSets the units associated with this unitcontroller to be invincible or not.\n",
		"body": [
			"set_invincible(${1:[opt=true] boolean is invincible})"
		],
	},
	"docgen:battle_unitcontroller:unitcontroller:set_invincible": {
		"scope": "lua",
		"prefix": "unitcontroller:set_invincible",
		"description": "unitcontroller:set_invincible()\n-  -\n\nSets the units associated with this unitcontroller to be invincible or not.\n",
		"body": [
			"unitcontroller:set_invincible(${1:[opt=true] boolean is invincible})"
		],
	},
	"docgen:battle_unitcontroller:set_invisible_to_all": {
		"scope": "lua",
		"prefix": "set_invisible_to_all",
		"description": "unitcontroller:set_invisible_to_all()\n-  -\n\nMakes all units associated with this unitcontroller invisible or not.\n",
		"body": [
			"set_invisible_to_all(${1:boolean set invisible}, ${2:[opt=true] boolean update ui})"
		],
	},
	"docgen:battle_unitcontroller:unitcontroller:set_invisible_to_all": {
		"scope": "lua",
		"prefix": "unitcontroller:set_invisible_to_all",
		"description": "unitcontroller:set_invisible_to_all()\n-  -\n\nMakes all units associated with this unitcontroller invisible or not.\n",
		"body": [
			"unitcontroller:set_invisible_to_all(${1:boolean set invisible}, ${2:[opt=true] boolean update ui})"
		],
	},
	"docgen:battle_unitcontroller:set_always_visible_to_all": {
		"scope": "lua",
		"prefix": "set_always_visible_to_all",
		"description": "unitcontroller:set_always_visible_to_all()\n-  -\n\nSets the units associated with this unitcontroller to be exempt or not from the terrain visibility test.\n",
		"body": [
			"set_always_visible_to_all(${1:boolean set always visible})"
		],
	},
	"docgen:battle_unitcontroller:unitcontroller:set_always_visible_to_all": {
		"scope": "lua",
		"prefix": "unitcontroller:set_always_visible_to_all",
		"description": "unitcontroller:set_always_visible_to_all()\n-  -\n\nSets the units associated with this unitcontroller to be exempt or not from the terrain visibility test.\n",
		"body": [
			"unitcontroller:set_always_visible_to_all(${1:boolean set always visible})"
		],
	},
	"docgen:battle_unitcontroller:change_enabled": {
		"scope": "lua",
		"prefix": "change_enabled",
		"description": "unitcontroller:change_enabled()\n-  -\n\nEnables or disables the units associated with this unitcontroller.\n",
		"body": [
			"change_enabled(${1:boolean enabled})"
		],
	},
	"docgen:battle_unitcontroller:unitcontroller:change_enabled": {
		"scope": "lua",
		"prefix": "unitcontroller:change_enabled",
		"description": "unitcontroller:change_enabled()\n-  -\n\nEnables or disables the units associated with this unitcontroller.\n",
		"body": [
			"unitcontroller:change_enabled(${1:boolean enabled})"
		],
	},
	"docgen:battle_unitcontroller:update_card_existance_on_HUD": {
		"scope": "lua",
		"prefix": "update_card_existance_on_HUD",
		"description": "unitcontroller:update_card_existance_on_HUD()\n-  -\n\nTells the UI to add or remove the units associated with this unitcontroller to or from the HUD based on the current invisibility flag.\n",
		"body": [
			"update_card_existance_on_HUD()"
		],
	},
	"docgen:battle_unitcontroller:unitcontroller:update_card_existance_on_HUD": {
		"scope": "lua",
		"prefix": "unitcontroller:update_card_existance_on_HUD",
		"description": "unitcontroller:update_card_existance_on_HUD()\n-  -\n\nTells the UI to add or remove the units associated with this unitcontroller to or from the HUD based on the current invisibility flag.\n",
		"body": [
			"unitcontroller:update_card_existance_on_HUD()"
		],
	},
	"docgen:battle_unitcontroller:hide_unit_card": {
		"scope": "lua",
		"prefix": "hide_unit_card",
		"description": "unitcontroller:hide_unit_card()\n-  -\n\nTells the UI to hide the units cards associated with this unitcontroller.\n",
		"body": [
			"hide_unit_card()"
		],
	},
	"docgen:battle_unitcontroller:unitcontroller:hide_unit_card": {
		"scope": "lua",
		"prefix": "unitcontroller:hide_unit_card",
		"description": "unitcontroller:hide_unit_card()\n-  -\n\nTells the UI to hide the units cards associated with this unitcontroller.\n",
		"body": [
			"unitcontroller:hide_unit_card()"
		],
	},
	"docgen:battle_unitcontroller:change_fatigue_amount": {
		"scope": "lua",
		"prefix": "change_fatigue_amount",
		"description": "unitcontroller:change_fatigue_amount()\n-  -\n\nChanges the fatigue level of the units associated with this unitcontroller to the supplied unary value, relative to their current level.\n",
		"body": [
			"change_fatigue_amount(${1:number fatigue level})"
		],
	},
	"docgen:battle_unitcontroller:unitcontroller:change_fatigue_amount": {
		"scope": "lua",
		"prefix": "unitcontroller:change_fatigue_amount",
		"description": "unitcontroller:change_fatigue_amount()\n-  -\n\nChanges the fatigue level of the units associated with this unitcontroller to the supplied unary value, relative to their current level.\n",
		"body": [
			"unitcontroller:change_fatigue_amount(${1:number fatigue level})"
		],
	},
	"docgen:battle_unitcontroller:perform_special_ability": {
		"scope": "lua",
		"prefix": "perform_special_ability",
		"description": "unitcontroller:perform_special_ability()\n-  -\n\nIssues an order to the units associated with this unitcontroller to perform the supplied special ability.\n",
		"body": [
			"perform_special_ability(${1:string ability key}, ${2:[opt=nil] battle_unit target unit})"
		],
	},
	"docgen:battle_unitcontroller:unitcontroller:perform_special_ability": {
		"scope": "lua",
		"prefix": "unitcontroller:perform_special_ability",
		"description": "unitcontroller:perform_special_ability()\n-  -\n\nIssues an order to the units associated with this unitcontroller to perform the supplied special ability.\n",
		"body": [
			"unitcontroller:perform_special_ability(${1:string ability key}, ${2:[opt=nil] battle_unit target unit})"
		],
	},
	"docgen:battle_unitcontroller:perform_special_ability_q": {
		"scope": "lua",
		"prefix": "perform_special_ability_q",
		"description": "unitcontroller:perform_special_ability_q()\n-  -\n\nIssues a queued order to the units associated with this unitcontroller to perform the supplied special ability.\n",
		"body": [
			"perform_special_ability_q(${1:string ability key}, ${2:[opt=nil] battle_unit target unit})"
		],
	},
	"docgen:battle_unitcontroller:unitcontroller:perform_special_ability_q": {
		"scope": "lua",
		"prefix": "unitcontroller:perform_special_ability_q",
		"description": "unitcontroller:perform_special_ability_q()\n-  -\n\nIssues a queued order to the units associated with this unitcontroller to perform the supplied special ability.\n",
		"body": [
			"unitcontroller:perform_special_ability_q(${1:string ability key}, ${2:[opt=nil] battle_unit target unit})"
		],
	},
	"docgen:battle_unitcontroller:perform_special_ability_ground": {
		"scope": "lua",
		"prefix": "perform_special_ability_ground",
		"description": "unitcontroller:perform_special_ability_ground()\n-  -\n\nIssues an order to the units associated with this unitcontroller to perform the supplied special ability on a specified position.\n",
		"body": [
			"perform_special_ability_ground(${1:string ability key}, ${2:battle_vector position})"
		],
	},
	"docgen:battle_unitcontroller:unitcontroller:perform_special_ability_ground": {
		"scope": "lua",
		"prefix": "unitcontroller:perform_special_ability_ground",
		"description": "unitcontroller:perform_special_ability_ground()\n-  -\n\nIssues an order to the units associated with this unitcontroller to perform the supplied special ability on a specified position.\n",
		"body": [
			"unitcontroller:perform_special_ability_ground(${1:string ability key}, ${2:battle_vector position})"
		],
	},
	"docgen:battle_unitcontroller:change_shot_type": {
		"scope": "lua",
		"prefix": "change_shot_type",
		"description": "unitcontroller:change_shot_type()\n-  -\n\nIssues an order to the units associated with this unitcontroller to change shot type to the supplied value.\n",
		"body": [
			"change_shot_type(${1:string shot type})"
		],
	},
	"docgen:battle_unitcontroller:unitcontroller:change_shot_type": {
		"scope": "lua",
		"prefix": "unitcontroller:change_shot_type",
		"description": "unitcontroller:change_shot_type()\n-  -\n\nIssues an order to the units associated with this unitcontroller to change shot type to the supplied value.\n",
		"body": [
			"unitcontroller:change_shot_type(${1:string shot type})"
		],
	},
	"docgen:battle_unitcontroller:change_shot_type_q": {
		"scope": "lua",
		"prefix": "change_shot_type_q",
		"description": "unitcontroller:change_shot_type_q()\n-  -\n\nIssues a queued order to the units associated with this unitcontroller to change shot type to the supplied value.\n",
		"body": [
			"change_shot_type_q(${1:string shot type})"
		],
	},
	"docgen:battle_unitcontroller:unitcontroller:change_shot_type_q": {
		"scope": "lua",
		"prefix": "unitcontroller:change_shot_type_q",
		"description": "unitcontroller:change_shot_type_q()\n-  -\n\nIssues a queued order to the units associated with this unitcontroller to change shot type to the supplied value.\n",
		"body": [
			"unitcontroller:change_shot_type_q(${1:string shot type})"
		],
	},
	"docgen:battle_unitcontroller:change_behaviour_active": {
		"scope": "lua",
		"prefix": "change_behaviour_active",
		"description": "unitcontroller:change_behaviour_active()\n-  -\n\nSets the supplied behaviour active or not for the units associated with this unitcontroller.\n",
		"body": [
			"change_behaviour_active(${1:string behaviour key}, ${2:boolean is active})"
		],
	},
	"docgen:battle_unitcontroller:unitcontroller:change_behaviour_active": {
		"scope": "lua",
		"prefix": "unitcontroller:change_behaviour_active",
		"description": "unitcontroller:change_behaviour_active()\n-  -\n\nSets the supplied behaviour active or not for the units associated with this unitcontroller.\n",
		"body": [
			"unitcontroller:change_behaviour_active(${1:string behaviour key}, ${2:boolean is active})"
		],
	},
	"docgen:battle_unitcontroller:melee": {
		"scope": "lua",
		"prefix": "melee",
		"description": "unitcontroller:melee()\n-  -\n\nEnables or disables melee mode for the units associated with this unitcontroller.\n",
		"body": [
			"melee(${1:boolean enable melee mode})"
		],
	},
	"docgen:battle_unitcontroller:unitcontroller:melee": {
		"scope": "lua",
		"prefix": "unitcontroller:melee",
		"description": "unitcontroller:melee()\n-  -\n\nEnables or disables melee mode for the units associated with this unitcontroller.\n",
		"body": [
			"unitcontroller:melee(${1:boolean enable melee mode})"
		],
	},
	"docgen:battle_unitcontroller:fire_at_will": {
		"scope": "lua",
		"prefix": "fire_at_will",
		"description": "unitcontroller:fire_at_will()\n-  -\n\nEnables or disables fire-at-will behaviour for the units associated with this unitcontroller.\n",
		"body": [
			"fire_at_will(${1:boolean enable})"
		],
	},
	"docgen:battle_unitcontroller:unitcontroller:fire_at_will": {
		"scope": "lua",
		"prefix": "unitcontroller:fire_at_will",
		"description": "unitcontroller:fire_at_will()\n-  -\n\nEnables or disables fire-at-will behaviour for the units associated with this unitcontroller.\n",
		"body": [
			"unitcontroller:fire_at_will(${1:boolean enable})"
		],
	},
	"docgen:battle_unitcontroller:halt": {
		"scope": "lua",
		"prefix": "halt",
		"description": "unitcontroller:halt()\n-  -\n\nInstructs the units associated with this unitcontroller to halt.\n",
		"body": [
			"halt()"
		],
	},
	"docgen:battle_unitcontroller:unitcontroller:halt": {
		"scope": "lua",
		"prefix": "unitcontroller:halt",
		"description": "unitcontroller:halt()\n-  -\n\nInstructs the units associated with this unitcontroller to halt.\n",
		"body": [
			"unitcontroller:halt()"
		],
	},
	"docgen:battle_unitcontroller:withdraw": {
		"scope": "lua",
		"prefix": "withdraw",
		"description": "unitcontroller:withdraw()\n-  -\n\nIssues a withdraw order to the units associated with this unitcontroller, instructing them to leave the battlefield.\n",
		"body": [
			"withdraw()"
		],
	},
	"docgen:battle_unitcontroller:unitcontroller:withdraw": {
		"scope": "lua",
		"prefix": "unitcontroller:withdraw",
		"description": "unitcontroller:withdraw()\n-  -\n\nIssues a withdraw order to the units associated with this unitcontroller, instructing them to leave the battlefield.\n",
		"body": [
			"unitcontroller:withdraw()"
		],
	},
	"docgen:battle_unitcontroller:withdraw_q": {
		"scope": "lua",
		"prefix": "withdraw_q",
		"description": "unitcontroller:withdraw_q()\n-  -\n\nIssues a queued withdraw order to the units associated with this unitcontroller, instructing them to leave the battlefield.\n",
		"body": [
			"withdraw_q()"
		],
	},
	"docgen:battle_unitcontroller:unitcontroller:withdraw_q": {
		"scope": "lua",
		"prefix": "unitcontroller:withdraw_q",
		"description": "unitcontroller:withdraw_q()\n-  -\n\nIssues a queued withdraw order to the units associated with this unitcontroller, instructing them to leave the battlefield.\n",
		"body": [
			"unitcontroller:withdraw_q()"
		],
	},
	"docgen:battle_unitcontroller:step_forward": {
		"scope": "lua",
		"prefix": "step_forward",
		"description": "unitcontroller:step_forward()\n-  -\n\nInstructs the units associated with this unitcontroller to take a step forwards.\n",
		"body": [
			"step_forward()"
		],
	},
	"docgen:battle_unitcontroller:unitcontroller:step_forward": {
		"scope": "lua",
		"prefix": "unitcontroller:step_forward",
		"description": "unitcontroller:step_forward()\n-  -\n\nInstructs the units associated with this unitcontroller to take a step forwards.\n",
		"body": [
			"unitcontroller:step_forward()"
		],
	},
	"docgen:battle_unitcontroller:step_backwards": {
		"scope": "lua",
		"prefix": "step_backwards",
		"description": "unitcontroller:step_backwards()\n-  -\n\nInstructs the units associated with this unitcontroller to take a step backwards.\n",
		"body": [
			"step_backwards()"
		],
	},
	"docgen:battle_unitcontroller:unitcontroller:step_backwards": {
		"scope": "lua",
		"prefix": "unitcontroller:step_backwards",
		"description": "unitcontroller:step_backwards()\n-  -\n\nInstructs the units associated with this unitcontroller to take a step backwards.\n",
		"body": [
			"unitcontroller:step_backwards()"
		],
	},
	"docgen:battle_unitcontroller:increment_formation_width": {
		"scope": "lua",
		"prefix": "increment_formation_width",
		"description": "unitcontroller:increment_formation_width()\n-  -\n\nInstructs the units associated with this unitcontroller to increase their formation width.\n",
		"body": [
			"increment_formation_width()"
		],
	},
	"docgen:battle_unitcontroller:unitcontroller:increment_formation_width": {
		"scope": "lua",
		"prefix": "unitcontroller:increment_formation_width",
		"description": "unitcontroller:increment_formation_width()\n-  -\n\nInstructs the units associated with this unitcontroller to increase their formation width.\n",
		"body": [
			"unitcontroller:increment_formation_width()"
		],
	},
	"docgen:battle_unitcontroller:decrement_formation_width": {
		"scope": "lua",
		"prefix": "decrement_formation_width",
		"description": "unitcontroller:decrement_formation_width()\n-  -\n\nInstructs the units associated with this unitcontroller to decrease their formation width.\n",
		"body": [
			"decrement_formation_width()"
		],
	},
	"docgen:battle_unitcontroller:unitcontroller:decrement_formation_width": {
		"scope": "lua",
		"prefix": "unitcontroller:decrement_formation_width",
		"description": "unitcontroller:decrement_formation_width()\n-  -\n\nInstructs the units associated with this unitcontroller to decrease their formation width.\n",
		"body": [
			"unitcontroller:decrement_formation_width()"
		],
	},
	"docgen:battle_unitcontroller:change_move_speed": {
		"scope": "lua",
		"prefix": "change_move_speed",
		"description": "unitcontroller:change_move_speed()\n-  -\n\nInstructs the units associated with this unitcontroller to move fast or slow.\n",
		"body": [
			"change_move_speed(${1:boolean move fast})"
		],
	},
	"docgen:battle_unitcontroller:unitcontroller:change_move_speed": {
		"scope": "lua",
		"prefix": "unitcontroller:change_move_speed",
		"description": "unitcontroller:change_move_speed()\n-  -\n\nInstructs the units associated with this unitcontroller to move fast or slow.\n",
		"body": [
			"unitcontroller:change_move_speed(${1:boolean move fast})"
		],
	},
	"docgen:battle_unitcontroller:change_group_formation": {
		"scope": "lua",
		"prefix": "change_group_formation",
		"description": "unitcontroller:change_group_formation()\n-  -\n\nIssues an order to the units associated with this unitcontroller to adopt a new formation.\n",
		"body": [
			"change_group_formation(${1:string formation name})"
		],
	},
	"docgen:battle_unitcontroller:unitcontroller:change_group_formation": {
		"scope": "lua",
		"prefix": "unitcontroller:change_group_formation",
		"description": "unitcontroller:change_group_formation()\n-  -\n\nIssues an order to the units associated with this unitcontroller to adopt a new formation.\n",
		"body": [
			"unitcontroller:change_group_formation(${1:string formation name})"
		],
	},
	"docgen:battle_unitcontroller:change_group_formation_q": {
		"scope": "lua",
		"prefix": "change_group_formation_q",
		"description": "unitcontroller:change_group_formation_q()\n-  -\n\nIssues a queued order to the units associated with this unitcontroller to adopt a new formation.\n",
		"body": [
			"change_group_formation_q(${1:string formation name})"
		],
	},
	"docgen:battle_unitcontroller:unitcontroller:change_group_formation_q": {
		"scope": "lua",
		"prefix": "unitcontroller:change_group_formation_q",
		"description": "unitcontroller:change_group_formation_q()\n-  -\n\nIssues a queued order to the units associated with this unitcontroller to adopt a new formation.\n",
		"body": [
			"unitcontroller:change_group_formation_q(${1:string formation name})"
		],
	},
	"docgen:battle_unitcontroller:goto_location": {
		"scope": "lua",
		"prefix": "goto_location",
		"description": "unitcontroller:goto_location()\n-  -\n\nIssues an order to the units associated with this unitcontroller to move to a supplied location.\n",
		"body": [
			"goto_location(${1:battle_vector position}, ${2:[opt=false] boolean move fast})"
		],
	},
	"docgen:battle_unitcontroller:unitcontroller:goto_location": {
		"scope": "lua",
		"prefix": "unitcontroller:goto_location",
		"description": "unitcontroller:goto_location()\n-  -\n\nIssues an order to the units associated with this unitcontroller to move to a supplied location.\n",
		"body": [
			"unitcontroller:goto_location(${1:battle_vector position}, ${2:[opt=false] boolean move fast})"
		],
	},
	"docgen:battle_unitcontroller:goto_location_q": {
		"scope": "lua",
		"prefix": "goto_location_q",
		"description": "unitcontroller:goto_location_q()\n-  -\n\nIssues a queued order to the units associated with this unitcontroller to move to a supplied location.\n",
		"body": [
			"goto_location_q(${1:battle_vector position}, ${2:[opt=false] boolean move fast})"
		],
	},
	"docgen:battle_unitcontroller:unitcontroller:goto_location_q": {
		"scope": "lua",
		"prefix": "unitcontroller:goto_location_q",
		"description": "unitcontroller:goto_location_q()\n-  -\n\nIssues a queued order to the units associated with this unitcontroller to move to a supplied location.\n",
		"body": [
			"unitcontroller:goto_location_q(${1:battle_vector position}, ${2:[opt=false] boolean move fast})"
		],
	},
	"docgen:battle_unitcontroller:goto_location_angle_width": {
		"scope": "lua",
		"prefix": "goto_location_angle_width",
		"description": "unitcontroller:goto_location_angle_width()\n-  -\n\nIssues an order to the units associated with this unitcontroller to move to a supplied location and assume a position there facing a specified angle with a specified width.\n",
		"body": [
			"goto_location_angle_width(${1:battle_vector position}, ${2:number facing in degrees}, ${3:number width in m}, ${4:[opt=false] boolean move fast})"
		],
	},
	"docgen:battle_unitcontroller:unitcontroller:goto_location_angle_width": {
		"scope": "lua",
		"prefix": "unitcontroller:goto_location_angle_width",
		"description": "unitcontroller:goto_location_angle_width()\n-  -\n\nIssues an order to the units associated with this unitcontroller to move to a supplied location and assume a position there facing a specified angle with a specified width.\n",
		"body": [
			"unitcontroller:goto_location_angle_width(${1:battle_vector position}, ${2:number facing in degrees}, ${3:number width in m}, ${4:[opt=false] boolean move fast})"
		],
	},
	"docgen:battle_unitcontroller:goto_location_angle_width_q": {
		"scope": "lua",
		"prefix": "goto_location_angle_width_q",
		"description": "unitcontroller:goto_location_angle_width_q()\n-  -\n\nIssues a queued order to the units associated with this unitcontroller to move to a supplied location and assume a position there facing a specified angle with a specified width.\n",
		"body": [
			"goto_location_angle_width_q(${1:battle_vector position}, ${2:number facing in degrees}, ${3:number width in m}, ${4:[opt=false] boolean move fast})"
		],
	},
	"docgen:battle_unitcontroller:unitcontroller:goto_location_angle_width_q": {
		"scope": "lua",
		"prefix": "unitcontroller:goto_location_angle_width_q",
		"description": "unitcontroller:goto_location_angle_width_q()\n-  -\n\nIssues a queued order to the units associated with this unitcontroller to move to a supplied location and assume a position there facing a specified angle with a specified width.\n",
		"body": [
			"unitcontroller:goto_location_angle_width_q(${1:battle_vector position}, ${2:number facing in degrees}, ${3:number width in m}, ${4:[opt=false] boolean move fast})"
		],
	},
	"docgen:battle_unitcontroller:teleport_to_location": {
		"scope": "lua",
		"prefix": "teleport_to_location",
		"description": "unitcontroller:teleport_to_location()\n-  -\n\nImmediately teleports units associated with this unitcontroller to a supplied location/angle/width.\n",
		"body": [
			"teleport_to_location(${1:battle_vector position}, ${2:number facing in degrees}, ${3:number width in m})"
		],
	},
	"docgen:battle_unitcontroller:unitcontroller:teleport_to_location": {
		"scope": "lua",
		"prefix": "unitcontroller:teleport_to_location",
		"description": "unitcontroller:teleport_to_location()\n-  -\n\nImmediately teleports units associated with this unitcontroller to a supplied location/angle/width.\n",
		"body": [
			"unitcontroller:teleport_to_location(${1:battle_vector position}, ${2:number facing in degrees}, ${3:number width in m})"
		],
	},
	"docgen:battle_unitcontroller:occupy_vehicle": {
		"scope": "lua",
		"prefix": "occupy_vehicle",
		"description": "unitcontroller:occupy_vehicle()\n-  -\n\nIssues an order to the units associated with this unitcontroller to occupy a vehicle.\n",
		"body": [
			"occupy_vehicle(${1:battle_vehicle target}, ${2:[opt=false] boolean move fast})"
		],
	},
	"docgen:battle_unitcontroller:unitcontroller:occupy_vehicle": {
		"scope": "lua",
		"prefix": "unitcontroller:occupy_vehicle",
		"description": "unitcontroller:occupy_vehicle()\n-  -\n\nIssues an order to the units associated with this unitcontroller to occupy a vehicle.\n",
		"body": [
			"unitcontroller:occupy_vehicle(${1:battle_vehicle target}, ${2:[opt=false] boolean move fast})"
		],
	},
	"docgen:battle_unitcontroller:occupy_vehicle_q": {
		"scope": "lua",
		"prefix": "occupy_vehicle_q",
		"description": "unitcontroller:occupy_vehicle_q()\n-  -\n\nIssues a queued order to the units associated with this unitcontroller to occupy a vehicle.\n",
		"body": [
			"occupy_vehicle_q(${1:battle_vehicle target}, ${2:[opt=false] boolean move fast})"
		],
	},
	"docgen:battle_unitcontroller:unitcontroller:occupy_vehicle_q": {
		"scope": "lua",
		"prefix": "unitcontroller:occupy_vehicle_q",
		"description": "unitcontroller:occupy_vehicle_q()\n-  -\n\nIssues a queued order to the units associated with this unitcontroller to occupy a vehicle.\n",
		"body": [
			"unitcontroller:occupy_vehicle_q(${1:battle_vehicle target}, ${2:[opt=false] boolean move fast})"
		],
	},
	"docgen:battle_unitcontroller:occupy_zone": {
		"scope": "lua",
		"prefix": "occupy_zone",
		"description": "unitcontroller:occupy_zone()\n-  -\n\nIssues an order to the units associated with this unitcontroller to occupy a battlefield zone.\n",
		"body": [
			"occupy_zone(${1:battle_vector target}, ${2:[opt=false] boolean move fast})"
		],
	},
	"docgen:battle_unitcontroller:unitcontroller:occupy_zone": {
		"scope": "lua",
		"prefix": "unitcontroller:occupy_zone",
		"description": "unitcontroller:occupy_zone()\n-  -\n\nIssues an order to the units associated with this unitcontroller to occupy a battlefield zone.\n",
		"body": [
			"unitcontroller:occupy_zone(${1:battle_vector target}, ${2:[opt=false] boolean move fast})"
		],
	},
	"docgen:battle_unitcontroller:occupy_zone_q": {
		"scope": "lua",
		"prefix": "occupy_zone_q",
		"description": "unitcontroller:occupy_zone_q()\n-  -\n\nIssues a queued order to the units associated with this unitcontroller to occupy a battlefield zone.\n",
		"body": [
			"occupy_zone_q(${1:battle_vector target}, ${2:[opt=false] boolean move fast})"
		],
	},
	"docgen:battle_unitcontroller:unitcontroller:occupy_zone_q": {
		"scope": "lua",
		"prefix": "unitcontroller:occupy_zone_q",
		"description": "unitcontroller:occupy_zone_q()\n-  -\n\nIssues a queued order to the units associated with this unitcontroller to occupy a battlefield zone.\n",
		"body": [
			"unitcontroller:occupy_zone_q(${1:battle_vector target}, ${2:[opt=false] boolean move fast})"
		],
	},
	"docgen:battle_unitcontroller:rotate": {
		"scope": "lua",
		"prefix": "rotate",
		"description": "unitcontroller:rotate()\n-  -\n\nIssues an order to the units associated with this unitcontroller to rotate about their current heading by the supplied number of degrees.\n",
		"body": [
			"rotate(${1:number heading change}, ${2:boolean move fast})"
		],
	},
	"docgen:battle_unitcontroller:unitcontroller:rotate": {
		"scope": "lua",
		"prefix": "unitcontroller:rotate",
		"description": "unitcontroller:rotate()\n-  -\n\nIssues an order to the units associated with this unitcontroller to rotate about their current heading by the supplied number of degrees.\n",
		"body": [
			"unitcontroller:rotate(${1:number heading change}, ${2:boolean move fast})"
		],
	},
	"docgen:battle_unitcontroller:rotate_q": {
		"scope": "lua",
		"prefix": "rotate_q",
		"description": "unitcontroller:rotate_q()\n-  -\n\nIssues a queued order to the units associated with this unitcontroller to rotate about their current heading by the supplied number of degrees.\n",
		"body": [
			"rotate_q(${1:number heading change}, ${2:boolean move fast})"
		],
	},
	"docgen:battle_unitcontroller:unitcontroller:rotate_q": {
		"scope": "lua",
		"prefix": "unitcontroller:rotate_q",
		"description": "unitcontroller:rotate_q()\n-  -\n\nIssues a queued order to the units associated with this unitcontroller to rotate about their current heading by the supplied number of degrees.\n",
		"body": [
			"unitcontroller:rotate_q(${1:number heading change}, ${2:boolean move fast})"
		],
	},
	"docgen:battle_unitcontroller:attack_unit": {
		"scope": "lua",
		"prefix": "attack_unit",
		"description": "unitcontroller:attack_unit()\n-  -\n\nIssues an order to the units associated with this unitcontroller to attack an enemy unit.\n",
		"body": [
			"attack_unit(${1:battle_unit target unit}, ${2:[opt=true] boolean use primary attack}, ${3:[opt=false] boolean move fast})"
		],
	},
	"docgen:battle_unitcontroller:unitcontroller:attack_unit": {
		"scope": "lua",
		"prefix": "unitcontroller:attack_unit",
		"description": "unitcontroller:attack_unit()\n-  -\n\nIssues an order to the units associated with this unitcontroller to attack an enemy unit.\n",
		"body": [
			"unitcontroller:attack_unit(${1:battle_unit target unit}, ${2:[opt=true] boolean use primary attack}, ${3:[opt=false] boolean move fast})"
		],
	},
	"docgen:battle_unitcontroller:attack_unit_q": {
		"scope": "lua",
		"prefix": "attack_unit_q",
		"description": "unitcontroller:attack_unit_q()\n-  -\n\nIssues a queued order to the units associated with this unitcontroller to attack an enemy unit.\n",
		"body": [
			"attack_unit_q(${1:battle_unit target unit}, ${2:[opt=true] boolean use primary attack}, ${3:[opt=false] boolean move fast})"
		],
	},
	"docgen:battle_unitcontroller:unitcontroller:attack_unit_q": {
		"scope": "lua",
		"prefix": "unitcontroller:attack_unit_q",
		"description": "unitcontroller:attack_unit_q()\n-  -\n\nIssues a queued order to the units associated with this unitcontroller to attack an enemy unit.\n",
		"body": [
			"unitcontroller:attack_unit_q(${1:battle_unit target unit}, ${2:[opt=true] boolean use primary attack}, ${3:[opt=false] boolean move fast})"
		],
	},
	"docgen:battle_unitcontroller:attack_building": {
		"scope": "lua",
		"prefix": "attack_building",
		"description": "unitcontroller:attack_building()\n-  -\n\nIssues an order to the units associated with this unitcontroller to attack a specified building.\n",
		"body": [
			"attack_building(${1:battle_building target}, ${2:[opt=1] number piece index}, ${3:[opt=false] boolean move fast})"
		],
	},
	"docgen:battle_unitcontroller:unitcontroller:attack_building": {
		"scope": "lua",
		"prefix": "unitcontroller:attack_building",
		"description": "unitcontroller:attack_building()\n-  -\n\nIssues an order to the units associated with this unitcontroller to attack a specified building.\n",
		"body": [
			"unitcontroller:attack_building(${1:battle_building target}, ${2:[opt=1] number piece index}, ${3:[opt=false] boolean move fast})"
		],
	},
	"docgen:battle_unitcontroller:attack_building_q": {
		"scope": "lua",
		"prefix": "attack_building_q",
		"description": "unitcontroller:attack_building_q()\n-  -\n\nIssues a queued order to the units associated with this unitcontroller to attack a specified building.\n",
		"body": [
			"attack_building_q(${1:battle_building target}, ${2:[opt=1] number piece index}, ${3:[opt=false] boolean move fast})"
		],
	},
	"docgen:battle_unitcontroller:unitcontroller:attack_building_q": {
		"scope": "lua",
		"prefix": "unitcontroller:attack_building_q",
		"description": "unitcontroller:attack_building_q()\n-  -\n\nIssues a queued order to the units associated with this unitcontroller to attack a specified building.\n",
		"body": [
			"unitcontroller:attack_building_q(${1:battle_building target}, ${2:[opt=1] number piece index}, ${3:[opt=false] boolean move fast})"
		],
	},
	"docgen:battle_unitcontroller:interact_with_deployable": {
		"scope": "lua",
		"prefix": "interact_with_deployable",
		"description": "unitcontroller:interact_with_deployable()\n-  -\n\nIssues an order to the units associated with this unitcontroller to interact with a deployable object on the battlefield.\n",
		"body": [
			"interact_with_deployable(${1:battle_vector deployable position}, ${2:[opt=false] boolean move fast}, ${3:[opt=false] boolean melee attack})"
		],
	},
	"docgen:battle_unitcontroller:unitcontroller:interact_with_deployable": {
		"scope": "lua",
		"prefix": "unitcontroller:interact_with_deployable",
		"description": "unitcontroller:interact_with_deployable()\n-  -\n\nIssues an order to the units associated with this unitcontroller to interact with a deployable object on the battlefield.\n",
		"body": [
			"unitcontroller:interact_with_deployable(${1:battle_vector deployable position}, ${2:[opt=false] boolean move fast}, ${3:[opt=false] boolean melee attack})"
		],
	},
	"docgen:battle_unitcontroller:interact_with_deployable_q": {
		"scope": "lua",
		"prefix": "interact_with_deployable_q",
		"description": "unitcontroller:interact_with_deployable_q()\n-  -\n\nIssues an order to the units associated with this unitcontroller to interact with a deployable object on the battlefield.\n",
		"body": [
			"interact_with_deployable_q(${1:battle_vector deployable position}, ${2:[opt=false] boolean move fast}, ${3:[opt=false] boolean melee attack})"
		],
	},
	"docgen:battle_unitcontroller:unitcontroller:interact_with_deployable_q": {
		"scope": "lua",
		"prefix": "unitcontroller:interact_with_deployable_q",
		"description": "unitcontroller:interact_with_deployable_q()\n-  -\n\nIssues an order to the units associated with this unitcontroller to interact with a deployable object on the battlefield.\n",
		"body": [
			"unitcontroller:interact_with_deployable_q(${1:battle_vector deployable position}, ${2:[opt=false] boolean move fast}, ${3:[opt=false] boolean melee attack})"
		],
	},
	"docgen:battle_unitcontroller:besiege_building": {
		"scope": "lua",
		"prefix": "besiege_building",
		"description": "unitcontroller:besiege_building()\n-  -\n\nIssues an order to the units associated with this unitcontroller to besiege a building.\n",
		"body": [
			"besiege_building(${1:battle_building target}, ${2:[opt=1] number piece index}, ${3:[opt=false] boolean move fast})"
		],
	},
	"docgen:battle_unitcontroller:unitcontroller:besiege_building": {
		"scope": "lua",
		"prefix": "unitcontroller:besiege_building",
		"description": "unitcontroller:besiege_building()\n-  -\n\nIssues an order to the units associated with this unitcontroller to besiege a building.\n",
		"body": [
			"unitcontroller:besiege_building(${1:battle_building target}, ${2:[opt=1] number piece index}, ${3:[opt=false] boolean move fast})"
		],
	},
	"docgen:battle_unitcontroller:besiege_building_q": {
		"scope": "lua",
		"prefix": "besiege_building_q",
		"description": "unitcontroller:besiege_building_q()\n-  -\n\nIssues a queued order to the units associated with this unitcontroller to besiege a building.\n",
		"body": [
			"besiege_building_q(${1:battle_building target}, ${2:[opt=1] number piece index}, ${3:[opt=false] boolean move fast})"
		],
	},
	"docgen:battle_unitcontroller:unitcontroller:besiege_building_q": {
		"scope": "lua",
		"prefix": "unitcontroller:besiege_building_q",
		"description": "unitcontroller:besiege_building_q()\n-  -\n\nIssues a queued order to the units associated with this unitcontroller to besiege a building.\n",
		"body": [
			"unitcontroller:besiege_building_q(${1:battle_building target}, ${2:[opt=1] number piece index}, ${3:[opt=false] boolean move fast})"
		],
	},
	"docgen:battle_unitcontroller:defend_building": {
		"scope": "lua",
		"prefix": "defend_building",
		"description": "unitcontroller:defend_building()\n-  -\n\nIssues an order to the units associated with this unitcontroller to defend a building.\n",
		"body": [
			"defend_building(${1:battle_building target}, ${2:[opt=false] boolean move fast})"
		],
	},
	"docgen:battle_unitcontroller:unitcontroller:defend_building": {
		"scope": "lua",
		"prefix": "unitcontroller:defend_building",
		"description": "unitcontroller:defend_building()\n-  -\n\nIssues an order to the units associated with this unitcontroller to defend a building.\n",
		"body": [
			"unitcontroller:defend_building(${1:battle_building target}, ${2:[opt=false] boolean move fast})"
		],
	},
	"docgen:battle_unitcontroller:defend_building_q": {
		"scope": "lua",
		"prefix": "defend_building_q",
		"description": "unitcontroller:defend_building_q()\n-  -\n\nIssues an order to the units associated with this unitcontroller to defend a building.\n",
		"body": [
			"defend_building_q(${1:battle_building target}, ${2:[opt=false] boolean move fast})"
		],
	},
	"docgen:battle_unitcontroller:unitcontroller:defend_building_q": {
		"scope": "lua",
		"prefix": "unitcontroller:defend_building_q",
		"description": "unitcontroller:defend_building_q()\n-  -\n\nIssues an order to the units associated with this unitcontroller to defend a building.\n",
		"body": [
			"unitcontroller:defend_building_q(${1:battle_building target}, ${2:[opt=false] boolean move fast})"
		],
	},
	"docgen:battle_unitcontroller:leave_building": {
		"scope": "lua",
		"prefix": "leave_building",
		"description": "unitcontroller:leave_building()\n-  -\n\nIssues an order to the units associated with this unitcontroller to leave the building they're in.\n",
		"body": [
			"leave_building()"
		],
	},
	"docgen:battle_unitcontroller:unitcontroller:leave_building": {
		"scope": "lua",
		"prefix": "unitcontroller:leave_building",
		"description": "unitcontroller:leave_building()\n-  -\n\nIssues an order to the units associated with this unitcontroller to leave the building they're in.\n",
		"body": [
			"unitcontroller:leave_building()"
		],
	},
	"docgen:battle_unitcontroller:attack_location": {
		"scope": "lua",
		"prefix": "attack_location",
		"description": "unitcontroller:attack_location()\n-  -\n\nIssues an order to the units associated with this unitcontroller to attack a location.\n",
		"body": [
			"attack_location(${1:battle_vector position}, ${2:boolean move fast})"
		],
	},
	"docgen:battle_unitcontroller:unitcontroller:attack_location": {
		"scope": "lua",
		"prefix": "unitcontroller:attack_location",
		"description": "unitcontroller:attack_location()\n-  -\n\nIssues an order to the units associated with this unitcontroller to attack a location.\n",
		"body": [
			"unitcontroller:attack_location(${1:battle_vector position}, ${2:boolean move fast})"
		],
	},
	"docgen:battle_unitcontroller:attack_location_q": {
		"scope": "lua",
		"prefix": "attack_location_q",
		"description": "unitcontroller:attack_location_q()\n-  -\n\nIssues a queued order to the units associated with this unitcontroller to attack a location.\n",
		"body": [
			"attack_location_q(${1:battle_vector position}, ${2:boolean move fast})"
		],
	},
	"docgen:battle_unitcontroller:unitcontroller:attack_location_q": {
		"scope": "lua",
		"prefix": "unitcontroller:attack_location_q",
		"description": "unitcontroller:attack_location_q()\n-  -\n\nIssues a queued order to the units associated with this unitcontroller to attack a location.\n",
		"body": [
			"unitcontroller:attack_location_q(${1:battle_vector position}, ${2:boolean move fast})"
		],
	},
	"docgen:battle_unitcontroller:attack_line": {
		"scope": "lua",
		"prefix": "attack_line",
		"description": "unitcontroller:attack_line()\n-  -\n\nIssues an order to the units associated with this unitcontroller to attack a line across the battlefield.\n",
		"body": [
			"attack_line(${1:battle_vector position a}, ${2:battle_vector position b}, ${3:boolean move fast})"
		],
	},
	"docgen:battle_unitcontroller:unitcontroller:attack_line": {
		"scope": "lua",
		"prefix": "unitcontroller:attack_line",
		"description": "unitcontroller:attack_line()\n-  -\n\nIssues an order to the units associated with this unitcontroller to attack a line across the battlefield.\n",
		"body": [
			"unitcontroller:attack_line(${1:battle_vector position a}, ${2:battle_vector position b}, ${3:boolean move fast})"
		],
	},
	"docgen:battle_unitcontroller:attack_line_q": {
		"scope": "lua",
		"prefix": "attack_line_q",
		"description": "unitcontroller:attack_line_q()\n-  -\n\nIssues a queued order to the units associated with this unitcontroller to attack a line across the battlefield.\n",
		"body": [
			"attack_line_q(${1:battle_vector position a}, ${2:battle_vector position b}, ${3:boolean move fast})"
		],
	},
	"docgen:battle_unitcontroller:unitcontroller:attack_line_q": {
		"scope": "lua",
		"prefix": "unitcontroller:attack_line_q",
		"description": "unitcontroller:attack_line_q()\n-  -\n\nIssues a queued order to the units associated with this unitcontroller to attack a line across the battlefield.\n",
		"body": [
			"unitcontroller:attack_line_q(${1:battle_vector position a}, ${2:battle_vector position b}, ${3:boolean move fast})"
		],
	},
	"docgen:battle_unitcontroller:set_matched_combat_chance": {
		"scope": "lua",
		"prefix": "set_matched_combat_chance",
		"description": "unitcontroller:set_matched_combat_chance()\n-  -\n\nSets the chance of units associated with this unitcontroller performing matched combat when attacking.\n",
		"body": [
			"set_matched_combat_chance(${1:number chance})"
		],
	},
	"docgen:battle_unitcontroller:unitcontroller:set_matched_combat_chance": {
		"scope": "lua",
		"prefix": "unitcontroller:set_matched_combat_chance",
		"description": "unitcontroller:set_matched_combat_chance()\n-  -\n\nSets the chance of units associated with this unitcontroller performing matched combat when attacking.\n",
		"body": [
			"unitcontroller:set_matched_combat_chance(${1:number chance})"
		],
	},
	"docgen:battle_unitcontroller:start_celebrating": {
		"scope": "lua",
		"prefix": "start_celebrating",
		"description": "unitcontroller:start_celebrating()\n-  -\n\nInstructs the units associated with this unitcontroller to start celebrating.\n",
		"body": [
			"start_celebrating()"
		],
	},
	"docgen:battle_unitcontroller:unitcontroller:start_celebrating": {
		"scope": "lua",
		"prefix": "unitcontroller:start_celebrating",
		"description": "unitcontroller:start_celebrating()\n-  -\n\nInstructs the units associated with this unitcontroller to start celebrating.\n",
		"body": [
			"unitcontroller:start_celebrating()"
		],
	},
	"docgen:battle_unitcontroller:start_taunting": {
		"scope": "lua",
		"prefix": "start_taunting",
		"description": "unitcontroller:start_taunting()\n-  -\n\nInstructs the units associated with this unitcontroller to start taunting.\n",
		"body": [
			"start_taunting()"
		],
	},
	"docgen:battle_unitcontroller:unitcontroller:start_taunting": {
		"scope": "lua",
		"prefix": "unitcontroller:start_taunting",
		"description": "unitcontroller:start_taunting()\n-  -\n\nInstructs the units associated with this unitcontroller to start taunting.\n",
		"body": [
			"unitcontroller:start_taunting()"
		],
	},
	"docgen:battle_unitcontroller:trigger_sound_vo": {
		"scope": "lua",
		"prefix": "trigger_sound_vo",
		"description": "unitcontroller:trigger_sound_vo()\n-  -\n\nTriggers a VO sound for units associated with this unitcontroller.\n",
		"body": [
			"trigger_sound_vo()"
		],
	},
	"docgen:battle_unitcontroller:unitcontroller:trigger_sound_vo": {
		"scope": "lua",
		"prefix": "unitcontroller:trigger_sound_vo",
		"description": "unitcontroller:trigger_sound_vo()\n-  -\n\nTriggers a VO sound for units associated with this unitcontroller.\n",
		"body": [
			"unitcontroller:trigger_sound_vo()"
		],
	},
	"docgen:battle_unitcontroller:kill": {
		"scope": "lua",
		"prefix": "kill",
		"description": "unitcontroller:kill()\n-  -\n\nKills all the units associated with this unitcontroller.\n",
		"body": [
			"kill()"
		],
	},
	"docgen:battle_unitcontroller:unitcontroller:kill": {
		"scope": "lua",
		"prefix": "unitcontroller:kill",
		"description": "unitcontroller:kill()\n-  -\n\nKills all the units associated with this unitcontroller.\n",
		"body": [
			"unitcontroller:kill()"
		],
	},
	"docgen:battle_unitcontroller:highlight": {
		"scope": "lua",
		"prefix": "highlight",
		"description": "unitcontroller:highlight()\n-  -\n\nHighlights units associated with this unitcontroller by showing tracker chevrons under their feet.\n",
		"body": [
			"highlight(${1:[opt=true] boolean highlight})"
		],
	},
	"docgen:battle_unitcontroller:unitcontroller:highlight": {
		"scope": "lua",
		"prefix": "unitcontroller:highlight",
		"description": "unitcontroller:highlight()\n-  -\n\nHighlights units associated with this unitcontroller by showing tracker chevrons under their feet.\n",
		"body": [
			"unitcontroller:highlight(${1:[opt=true] boolean highlight})"
		],
	},
	"docgen:battle_unitcontroller:change_current_walk_speed": {
		"scope": "lua",
		"prefix": "change_current_walk_speed",
		"description": "unitcontroller:change_current_walk_speed()\n-  -\n\nChanges the walk speed for the units associated with this unitcontroller.\n",
		"body": [
			"change_current_walk_speed(${1:number speed scalar})"
		],
	},
	"docgen:battle_unitcontroller:unitcontroller:change_current_walk_speed": {
		"scope": "lua",
		"prefix": "unitcontroller:change_current_walk_speed",
		"description": "unitcontroller:change_current_walk_speed()\n-  -\n\nChanges the walk speed for the units associated with this unitcontroller.\n",
		"body": [
			"unitcontroller:change_current_walk_speed(${1:number speed scalar})"
		],
	},
	"docgen:battle_army:units": {
		"scope": "lua",
		"prefix": "units",
		"description": "army:units()\n-  -\n\nCreates and returns a battle_units object listing all units in the army.\n",
		"body": [
			"units()"
		],
	},
	"docgen:battle_army:army:units": {
		"scope": "lua",
		"prefix": "army:units",
		"description": "army:units()\n-  -\n\nCreates and returns a battle_units object listing all units in the army.\n",
		"body": [
			"army:units()"
		],
	},
	"docgen:battle_army:create_unit_controller": {
		"scope": "lua",
		"prefix": "create_unit_controller",
		"description": "army:create_unit_controller()\n-  -\n\nCreates and returns a battle_unitcontroller object associated with this army.\n",
		"body": [
			"create_unit_controller()"
		],
	},
	"docgen:battle_army:army:create_unit_controller": {
		"scope": "lua",
		"prefix": "army:create_unit_controller",
		"description": "army:create_unit_controller()\n-  -\n\nCreates and returns a battle_unitcontroller object associated with this army.\n",
		"body": [
			"army:create_unit_controller()"
		],
	},
	"docgen:battle_army:is_commander_alive": {
		"scope": "lua",
		"prefix": "is_commander_alive",
		"description": "army:is_commander_alive()\n-  -\n\nReturns whether the army commander is alive or not.\n",
		"body": [
			"is_commander_alive()"
		],
	},
	"docgen:battle_army:army:is_commander_alive": {
		"scope": "lua",
		"prefix": "army:is_commander_alive",
		"description": "army:is_commander_alive()\n-  -\n\nReturns whether the army commander is alive or not.\n",
		"body": [
			"army:is_commander_alive()"
		],
	},
	"docgen:battle_army:is_commander_invincible": {
		"scope": "lua",
		"prefix": "is_commander_invincible",
		"description": "army:is_commander_invincible()\n-  -\n\nReturns whether the army commander is invicible or not.\n",
		"body": [
			"is_commander_invincible()"
		],
	},
	"docgen:battle_army:army:is_commander_invincible": {
		"scope": "lua",
		"prefix": "army:is_commander_invincible",
		"description": "army:is_commander_invincible()\n-  -\n\nReturns whether the army commander is invicible or not.\n",
		"body": [
			"army:is_commander_invincible()"
		],
	},
	"docgen:battle_army:army_handicap": {
		"scope": "lua",
		"prefix": "army_handicap",
		"description": "army:army_handicap()\n-  -\n\nReturns the army handicap, which indicates the difficulty level the battle is being played at.\n",
		"body": [
			"army_handicap()"
		],
	},
	"docgen:battle_army:army:army_handicap": {
		"scope": "lua",
		"prefix": "army:army_handicap",
		"description": "army:army_handicap()\n-  -\n\nReturns the army handicap, which indicates the difficulty level the battle is being played at.\n",
		"body": [
			"army:army_handicap()"
		],
	},
	"docgen:battle_army:wind_of_magic_remaining_recharge_rate": {
		"scope": "lua",
		"prefix": "wind_of_magic_remaining_recharge_rate",
		"description": "army:wind_of_magic_remaining_recharge_rate()\n-  -\n\nReturns the remaining recharge left for an armies magic pool.\n",
		"body": [
			"wind_of_magic_remaining_recharge_rate()"
		],
	},
	"docgen:battle_army:army:wind_of_magic_remaining_recharge_rate": {
		"scope": "lua",
		"prefix": "army:wind_of_magic_remaining_recharge_rate",
		"description": "army:wind_of_magic_remaining_recharge_rate()\n-  -\n\nReturns the remaining recharge left for an armies magic pool.\n",
		"body": [
			"army:wind_of_magic_remaining_recharge_rate()"
		],
	},
	"docgen:battle_army:modify_winds_of_magic_max_depletion": {
		"scope": "lua",
		"prefix": "modify_winds_of_magic_max_depletion",
		"description": "army:modify_winds_of_magic_max_depletion()\n-  -\n\nAdds the supplied amount to the winds of magic reserve for the army.\n",
		"body": [
			"modify_winds_of_magic_max_depletion(${1:number magic to add})"
		],
	},
	"docgen:battle_army:army:modify_winds_of_magic_max_depletion": {
		"scope": "lua",
		"prefix": "army:modify_winds_of_magic_max_depletion",
		"description": "army:modify_winds_of_magic_max_depletion()\n-  -\n\nAdds the supplied amount to the winds of magic reserve for the army.\n",
		"body": [
			"army:modify_winds_of_magic_max_depletion(${1:number magic to add})"
		],
	},
	"docgen:battle_army:get_reinforcement_units": {
		"scope": "lua",
		"prefix": "get_reinforcement_units",
		"description": "army:get_reinforcement_units()\n-  -\n\nReturns a battle_units collection containing reinforcements waiting to deploy.\n",
		"body": [
			"get_reinforcement_units(${1:[opt=1] number reinforcement collection})"
		],
	},
	"docgen:battle_army:army:get_reinforcement_units": {
		"scope": "lua",
		"prefix": "army:get_reinforcement_units",
		"description": "army:get_reinforcement_units()\n-  -\n\nReturns a battle_units collection containing reinforcements waiting to deploy.\n",
		"body": [
			"army:get_reinforcement_units(${1:[opt=1] number reinforcement collection})"
		],
	},
	"docgen:battle_army:num_reinforcement_units": {
		"scope": "lua",
		"prefix": "num_reinforcement_units",
		"description": "army:num_reinforcement_units()\n-  -\n\nReturn the number of battle_units collections that are reinforcements waiting to deploy for this army.\n",
		"body": [
			"num_reinforcement_units()"
		],
	},
	"docgen:battle_army:army:num_reinforcement_units": {
		"scope": "lua",
		"prefix": "army:num_reinforcement_units",
		"description": "army:num_reinforcement_units()\n-  -\n\nReturn the number of battle_units collections that are reinforcements waiting to deploy for this army.\n",
		"body": [
			"army:num_reinforcement_units()"
		],
	},
	"docgen:battle_army:suppress_reinforcement_adc": {
		"scope": "lua",
		"prefix": "suppress_reinforcement_adc",
		"description": "army:suppress_reinforcement_adc()\n-  -\n\nPrevents reinforcement aide-de-camp messages being generated for this army.\n",
		"body": [
			"suppress_reinforcement_adc()"
		],
	},
	"docgen:battle_army:army:suppress_reinforcement_adc": {
		"scope": "lua",
		"prefix": "army:suppress_reinforcement_adc",
		"description": "army:suppress_reinforcement_adc()\n-  -\n\nPrevents reinforcement aide-de-camp messages being generated for this army.\n",
		"body": [
			"army:suppress_reinforcement_adc()"
		],
	},
	"docgen:battle_army:change_faction": {
		"scope": "lua",
		"prefix": "change_faction",
		"description": "army:change_faction()\n-  -\n\nChanges the army's faction mid-battle.\n",
		"body": [
			"change_faction(${1:string faction key})"
		],
	},
	"docgen:battle_army:army:change_faction": {
		"scope": "lua",
		"prefix": "army:change_faction",
		"description": "army:change_faction()\n-  -\n\nChanges the army's faction mid-battle.\n",
		"body": [
			"army:change_faction(${1:string faction key})"
		],
	},
	"docgen:battle_army:enable_army_destruction_morale_effect": {
		"scope": "lua",
		"prefix": "enable_army_destruction_morale_effect",
		"description": "army:enable_army_destruction_morale_effect()\n-  -\n\nSets whether the army destruction morale effect can apply to this army or not.\n",
		"body": [
			"enable_army_destruction_morale_effect(${1:boolean enable effect})"
		],
	},
	"docgen:battle_army:army:enable_army_destruction_morale_effect": {
		"scope": "lua",
		"prefix": "army:enable_army_destruction_morale_effect",
		"description": "army:enable_army_destruction_morale_effect()\n-  -\n\nSets whether the army destruction morale effect can apply to this army or not.\n",
		"body": [
			"army:enable_army_destruction_morale_effect(${1:boolean enable effect})"
		],
	},
	"docgen:battle_army:quit_battle": {
		"scope": "lua",
		"prefix": "quit_battle",
		"description": "army:quit_battle()\n-  -\n\nInstructs the army to quit the battle.\n",
		"body": [
			"quit_battle()"
		],
	},
	"docgen:battle_army:army:quit_battle": {
		"scope": "lua",
		"prefix": "army:quit_battle",
		"description": "army:quit_battle()\n-  -\n\nInstructs the army to quit the battle.\n",
		"body": [
			"army:quit_battle()"
		],
	},
	"docgen:battle_army:highlight_deployment_areas": {
		"scope": "lua",
		"prefix": "highlight_deployment_areas",
		"description": "army:highlight_deployment_areas()\n-  -\n\nHighlights/flashes the deployment area related to this army.\n",
		"body": [
			"highlight_deployment_areas(${1:[opt=true] boolean should highlight})"
		],
	},
	"docgen:battle_army:army:highlight_deployment_areas": {
		"scope": "lua",
		"prefix": "army:highlight_deployment_areas",
		"description": "army:highlight_deployment_areas()\n-  -\n\nHighlights/flashes the deployment area related to this army.\n",
		"body": [
			"army:highlight_deployment_areas(${1:[opt=true] boolean should highlight})"
		],
	},
	"docgen:battle_army:use_special_ability": {
		"scope": "lua",
		"prefix": "use_special_ability",
		"description": "army:use_special_ability()\n-  -\n\nInstructs the army to use the specified army special ability.\n",
		"body": [
			"use_special_ability(${1:string special ability key}, ${2:[opt=nil] battle_vector position}, ${3:[opt=0] number bearing}, ${4:[opt=0] number width})"
		],
	},
	"docgen:battle_army:army:use_special_ability": {
		"scope": "lua",
		"prefix": "army:use_special_ability",
		"description": "army:use_special_ability()\n-  -\n\nInstructs the army to use the specified army special ability.\n",
		"body": [
			"army:use_special_ability(${1:string special ability key}, ${2:[opt=nil] battle_vector position}, ${3:[opt=0] number bearing}, ${4:[opt=0] number width})"
		],
	},
	"docgen:battle_armies:item": {
		"scope": "lua",
		"prefix": "item",
		"description": "armies:item()\n-  -\n\nReturns the battle_army at the specified index in the armies list.\n",
		"body": [
			"item(${1:number index})"
		],
	},
	"docgen:battle_armies:armies:item": {
		"scope": "lua",
		"prefix": "armies:item",
		"description": "armies:item()\n-  -\n\nReturns the battle_army at the specified index in the armies list.\n",
		"body": [
			"armies:item(${1:number index})"
		],
	},
	"docgen:battle_armies:count": {
		"scope": "lua",
		"prefix": "count",
		"description": "armies:count()\n-  -\n\nReturns the size of the armies list.\n",
		"body": [
			"count()"
		],
	},
	"docgen:battle_armies:armies:count": {
		"scope": "lua",
		"prefix": "armies:count",
		"description": "armies:count()\n-  -\n\nReturns the size of the armies list.\n",
		"body": [
			"armies:count()"
		],
	},
	"docgen:battle_alliance:armies": {
		"scope": "lua",
		"prefix": "armies",
		"description": "alliance:armies()\n-  -\n\nCreates and returns a battle_armies object listing all armies in the alliance.\n",
		"body": [
			"armies()"
		],
	},
	"docgen:battle_alliance:alliance:armies": {
		"scope": "lua",
		"prefix": "alliance:armies",
		"description": "alliance:armies()\n-  -\n\nCreates and returns a battle_armies object listing all armies in the alliance.\n",
		"body": [
			"alliance:armies()"
		],
	},
	"docgen:battle_alliance:force_ai_plan_type_attack": {
		"scope": "lua",
		"prefix": "force_ai_plan_type_attack",
		"description": "alliance:force_ai_plan_type_attack()\n-  -\n\nForces any AI in this alliance to prioritise attacking behaviour.\n",
		"body": [
			"force_ai_plan_type_attack()"
		],
	},
	"docgen:battle_alliance:alliance:force_ai_plan_type_attack": {
		"scope": "lua",
		"prefix": "alliance:force_ai_plan_type_attack",
		"description": "alliance:force_ai_plan_type_attack()\n-  -\n\nForces any AI in this alliance to prioritise attacking behaviour.\n",
		"body": [
			"alliance:force_ai_plan_type_attack()"
		],
	},
	"docgen:battle_alliance:force_ai_plan_type_defend": {
		"scope": "lua",
		"prefix": "force_ai_plan_type_defend",
		"description": "alliance:force_ai_plan_type_defend()\n-  -\n\nForces any AI in this alliance to prioritise defensive behaviour.\n",
		"body": [
			"force_ai_plan_type_defend()"
		],
	},
	"docgen:battle_alliance:alliance:force_ai_plan_type_defend": {
		"scope": "lua",
		"prefix": "alliance:force_ai_plan_type_defend",
		"description": "alliance:force_ai_plan_type_defend()\n-  -\n\nForces any AI in this alliance to prioritise defensive behaviour.\n",
		"body": [
			"alliance:force_ai_plan_type_defend()"
		],
	},
	"docgen:battle_alliance:create_ai_unit_planner": {
		"scope": "lua",
		"prefix": "create_ai_unit_planner",
		"description": "alliance:create_ai_unit_planner()\n-  -\n\nCreates and returns an ai_planner object attached to this alliance.\n",
		"body": [
			"create_ai_unit_planner()"
		],
	},
	"docgen:battle_alliance:alliance:create_ai_unit_planner": {
		"scope": "lua",
		"prefix": "alliance:create_ai_unit_planner",
		"description": "alliance:create_ai_unit_planner()\n-  -\n\nCreates and returns an ai_planner object attached to this alliance.\n",
		"body": [
			"alliance:create_ai_unit_planner()"
		],
	},
	"docgen:battle_alliances:item": {
		"scope": "lua",
		"prefix": "item",
		"description": "alliances:item()\n-  -\n\nReturns the battle_alliance at the specified index in the alliances list.\n",
		"body": [
			"item(${1:number index})"
		],
	},
	"docgen:battle_alliances:alliances:item": {
		"scope": "lua",
		"prefix": "alliances:item",
		"description": "alliances:item()\n-  -\n\nReturns the battle_alliance at the specified index in the alliances list.\n",
		"body": [
			"alliances:item(${1:number index})"
		],
	},
	"docgen:battle_alliances:count": {
		"scope": "lua",
		"prefix": "count",
		"description": "alliances:count()\n-  -\n\nReturns the size of the alliances list.\n",
		"body": [
			"count()"
		],
	},
	"docgen:battle_alliances:alliances:count": {
		"scope": "lua",
		"prefix": "alliances:count",
		"description": "alliances:count()\n-  -\n\nReturns the size of the alliances list.\n",
		"body": [
			"alliances:count()"
		],
	},
	"docgen:battle:out": {
		"scope": "lua",
		"prefix": "out",
		"description": "battle:out()\n-  -\n\nPrints some output to the console.\n",
		"body": [
			"out(${1:string output})"
		],
	},
	"docgen:battle:battle:out": {
		"scope": "lua",
		"prefix": "battle:out",
		"description": "battle:out()\n-  -\n\nPrints some output to the console.\n",
		"body": [
			"battle:out(${1:string output})"
		],
	},
	"docgen:battle:error": {
		"scope": "lua",
		"prefix": "error",
		"description": "battle:error()\n-  -\n\nShows an assert dialog with the supplied message.\n",
		"body": [
			"error(${1:string message})"
		],
	},
	"docgen:battle:battle:error": {
		"scope": "lua",
		"prefix": "battle:error",
		"description": "battle:error()\n-  -\n\nShows an assert dialog with the supplied message.\n",
		"body": [
			"battle:error(${1:string message})"
		],
	},
	"docgen:battle:alliances": {
		"scope": "lua",
		"prefix": "alliances",
		"description": "battle:alliances()\n-  -\n\nCreates and returns a battle_alliances object listing all alliances on the battlefield.\n",
		"body": [
			"alliances()"
		],
	},
	"docgen:battle:battle:alliances": {
		"scope": "lua",
		"prefix": "battle:alliances",
		"description": "battle:alliances()\n-  -\n\nCreates and returns a battle_alliances object listing all alliances on the battlefield.\n",
		"body": [
			"battle:alliances()"
		],
	},
	"docgen:battle:local_alliance": {
		"scope": "lua",
		"prefix": "local_alliance",
		"description": "battle:local_alliance()\n-  -\n\nReturns the index number of the battle_alliance that corresponds to the player on the local machine.\n",
		"body": [
			"local_alliance()"
		],
	},
	"docgen:battle:battle:local_alliance": {
		"scope": "lua",
		"prefix": "battle:local_alliance",
		"description": "battle:local_alliance()\n-  -\n\nReturns the index number of the battle_alliance that corresponds to the player on the local machine.\n",
		"body": [
			"battle:local_alliance()"
		],
	},
	"docgen:battle:local_army": {
		"scope": "lua",
		"prefix": "local_army",
		"description": "battle:local_army()\n-  -\n\nReturns the index number of the battle_army (within the relevant battle_armies collection object) that corresponds to the player on the local machine.\n",
		"body": [
			"local_army()"
		],
	},
	"docgen:battle:battle:local_army": {
		"scope": "lua",
		"prefix": "battle:local_army",
		"description": "battle:local_army()\n-  -\n\nReturns the index number of the battle_army (within the relevant battle_armies collection object) that corresponds to the player on the local machine.\n",
		"body": [
			"battle:local_army()"
		],
	},
	"docgen:battle:buildings": {
		"scope": "lua",
		"prefix": "buildings",
		"description": "battle:buildings()\n-  -\n\nCreates and returns a battle_buildings object listing all buildings on the battlefield.\n",
		"body": [
			"buildings()"
		],
	},
	"docgen:battle:battle:buildings": {
		"scope": "lua",
		"prefix": "battle:buildings",
		"description": "battle:buildings()\n-  -\n\nCreates and returns a battle_buildings object listing all buildings on the battlefield.\n",
		"body": [
			"battle:buildings()"
		],
	},
	"docgen:battle:assault_equipment": {
		"scope": "lua",
		"prefix": "assault_equipment",
		"description": "battle:assault_equipment()\n-  -\n\nCreates and returns a battle_assault_equipment object listing all vehicles (such as siege towers and battering rams) on the battlefield.\n",
		"body": [
			"assault_equipment()"
		],
	},
	"docgen:battle:battle:assault_equipment": {
		"scope": "lua",
		"prefix": "battle:assault_equipment",
		"description": "battle:assault_equipment()\n-  -\n\nCreates and returns a battle_assault_equipment object listing all vehicles (such as siege towers and battering rams) on the battlefield.\n",
		"body": [
			"battle:assault_equipment()"
		],
	},
	"docgen:battle:debug_drawing": {
		"scope": "lua",
		"prefix": "debug_drawing",
		"description": "battle:debug_drawing()\n-  -\n\nCreates and returns a battle_debug_drawing object, allowing the script to draw debug lines on the battlefield.\n",
		"body": [
			"debug_drawing()"
		],
	},
	"docgen:battle:battle:debug_drawing": {
		"scope": "lua",
		"prefix": "battle:debug_drawing",
		"description": "battle:debug_drawing()\n-  -\n\nCreates and returns a battle_debug_drawing object, allowing the script to draw debug lines on the battlefield.\n",
		"body": [
			"battle:debug_drawing()"
		],
	},
	"docgen:battle:camera": {
		"scope": "lua",
		"prefix": "camera",
		"description": "battle:camera()\n-  -\n\nCreates and returns a battle_camera object.\n",
		"body": [
			"camera()"
		],
	},
	"docgen:battle:battle:camera": {
		"scope": "lua",
		"prefix": "battle:camera",
		"description": "battle:camera()\n-  -\n\nCreates and returns a battle_camera object.\n",
		"body": [
			"battle:camera()"
		],
	},
	"docgen:battle:subtitles": {
		"scope": "lua",
		"prefix": "subtitles",
		"description": "battle:subtitles()\n-  -\n\nCreates and returns a battle_subtitles object.\n",
		"body": [
			"subtitles()"
		],
	},
	"docgen:battle:battle:subtitles": {
		"scope": "lua",
		"prefix": "battle:subtitles",
		"description": "battle:subtitles()\n-  -\n\nCreates and returns a battle_subtitles object.\n",
		"body": [
			"battle:subtitles()"
		],
	},
	"docgen:battle:register_input_handler": {
		"scope": "lua",
		"prefix": "register_input_handler",
		"description": "battle:register_input_handler()\n-  -\n\nRegisters a function (by string name) as a handler for input events.\n",
		"body": [
			"register_input_handler(${1:string input handler function})"
		],
	},
	"docgen:battle:battle:register_input_handler": {
		"scope": "lua",
		"prefix": "battle:register_input_handler",
		"description": "battle:register_input_handler()\n-  -\n\nRegisters a function (by string name) as a handler for input events.\n",
		"body": [
			"battle:register_input_handler(${1:string input handler function})"
		],
	},
	"docgen:battle:unregister_input_handler": {
		"scope": "lua",
		"prefix": "unregister_input_handler",
		"description": "battle:unregister_input_handler()\n-  -\n\nUnregisters the currently-registered input handler function.\n",
		"body": [
			"unregister_input_handler()"
		],
	},
	"docgen:battle:battle:unregister_input_handler": {
		"scope": "lua",
		"prefix": "battle:unregister_input_handler",
		"description": "battle:unregister_input_handler()\n-  -\n\nUnregisters the currently-registered input handler function.\n",
		"body": [
			"battle:unregister_input_handler()"
		],
	},
	"docgen:battle:register_unit_selection_handler": {
		"scope": "lua",
		"prefix": "register_unit_selection_handler",
		"description": "battle:register_unit_selection_handler()\n-  -\n\nRegisters a function (by string name) as a handler for user selection events.\n",
		"body": [
			"register_unit_selection_handler(${1:string input handler function})"
		],
	},
	"docgen:battle:battle:register_unit_selection_handler": {
		"scope": "lua",
		"prefix": "battle:register_unit_selection_handler",
		"description": "battle:register_unit_selection_handler()\n-  -\n\nRegisters a function (by string name) as a handler for user selection events.\n",
		"body": [
			"battle:register_unit_selection_handler(${1:string input handler function})"
		],
	},
	"docgen:battle:unregister_unit_selection_handler": {
		"scope": "lua",
		"prefix": "unregister_unit_selection_handler",
		"description": "battle:unregister_unit_selection_handler()\n-  -\n\nUnregisters the currently-registered unit selection handler function.\n",
		"body": [
			"unregister_unit_selection_handler()"
		],
	},
	"docgen:battle:battle:unregister_unit_selection_handler": {
		"scope": "lua",
		"prefix": "battle:unregister_unit_selection_handler",
		"description": "battle:unregister_unit_selection_handler()\n-  -\n\nUnregisters the currently-registered unit selection handler function.\n",
		"body": [
			"battle:unregister_unit_selection_handler()"
		],
	},
	"docgen:battle:register_command_handler": {
		"scope": "lua",
		"prefix": "register_command_handler",
		"description": "battle:register_command_handler()\n-  -\n\nRegisters a function (by string name) as a handler for command events.\n",
		"body": [
			"register_command_handler(${1:string command handler function})"
		],
	},
	"docgen:battle:battle:register_command_handler": {
		"scope": "lua",
		"prefix": "battle:register_command_handler",
		"description": "battle:register_command_handler()\n-  -\n\nRegisters a function (by string name) as a handler for command events.\n",
		"body": [
			"battle:register_command_handler(${1:string command handler function})"
		],
	},
	"docgen:battle:unregister_command_handler": {
		"scope": "lua",
		"prefix": "unregister_command_handler",
		"description": "battle:unregister_command_handler()\n-  -\n\nUnregisters the currently-registered command handler function.\n",
		"body": [
			"unregister_command_handler()"
		],
	},
	"docgen:battle:battle:unregister_command_handler": {
		"scope": "lua",
		"prefix": "battle:unregister_command_handler",
		"description": "battle:unregister_command_handler()\n-  -\n\nUnregisters the currently-registered command handler function.\n",
		"body": [
			"battle:unregister_command_handler()"
		],
	},
	"docgen:battle:register_battle_phase_handler": {
		"scope": "lua",
		"prefix": "register_battle_phase_handler",
		"description": "battle:register_battle_phase_handler()\n-  -\n\nRegisters a function (by string name) as a handler for battle phase changes.\n",
		"body": [
			"register_battle_phase_handler(${1:string function name})"
		],
	},
	"docgen:battle:battle:register_battle_phase_handler": {
		"scope": "lua",
		"prefix": "battle:register_battle_phase_handler",
		"description": "battle:register_battle_phase_handler()\n-  -\n\nRegisters a function (by string name) as a handler for battle phase changes.\n",
		"body": [
			"battle:register_battle_phase_handler(${1:string function name})"
		],
	},
	"docgen:battle:unregister_battle_phase_handler": {
		"scope": "lua",
		"prefix": "unregister_battle_phase_handler",
		"description": "battle:unregister_battle_phase_handler()\n-  -\n\nUnregisters the currently-registered phase change handler function.\n",
		"body": [
			"unregister_battle_phase_handler()"
		],
	},
	"docgen:battle:battle:unregister_battle_phase_handler": {
		"scope": "lua",
		"prefix": "battle:unregister_battle_phase_handler",
		"description": "battle:unregister_battle_phase_handler()\n-  -\n\nUnregisters the currently-registered phase change handler function.\n",
		"body": [
			"battle:unregister_battle_phase_handler()"
		],
	},
	"docgen:battle:end_current_battle_phase": {
		"scope": "lua",
		"prefix": "end_current_battle_phase",
		"description": "battle:end_current_battle_phase()\n-  -\n\nImmediately ends the current battle phase, moving on to the next phase.\n",
		"body": [
			"end_current_battle_phase()"
		],
	},
	"docgen:battle:battle:end_current_battle_phase": {
		"scope": "lua",
		"prefix": "battle:end_current_battle_phase",
		"description": "battle:end_current_battle_phase()\n-  -\n\nImmediately ends the current battle phase, moving on to the next phase.\n",
		"body": [
			"battle:end_current_battle_phase()"
		],
	},
	"docgen:battle:register_singleshot_timer": {
		"scope": "lua",
		"prefix": "register_singleshot_timer",
		"description": "battle:register_singleshot_timer()\n-  -\n\nRegisters a singleshot timer.\n",
		"body": [
			"register_singleshot_timer(${1:string function name}, ${2:number interval})"
		],
	},
	"docgen:battle:battle:register_singleshot_timer": {
		"scope": "lua",
		"prefix": "battle:register_singleshot_timer",
		"description": "battle:register_singleshot_timer()\n-  -\n\nRegisters a singleshot timer.\n",
		"body": [
			"battle:register_singleshot_timer(${1:string function name}, ${2:number interval})"
		],
	},
	"docgen:battle:register_repeating_timer": {
		"scope": "lua",
		"prefix": "register_repeating_timer",
		"description": "battle:register_repeating_timer()\n-  -\n\nRegisters a repeating timer.\n",
		"body": [
			"register_repeating_timer(${1:string function name}, ${2:number interval})"
		],
	},
	"docgen:battle:battle:register_repeating_timer": {
		"scope": "lua",
		"prefix": "battle:register_repeating_timer",
		"description": "battle:register_repeating_timer()\n-  -\n\nRegisters a repeating timer.\n",
		"body": [
			"battle:register_repeating_timer(${1:string function name}, ${2:number interval})"
		],
	},
	"docgen:battle:unregister_timer": {
		"scope": "lua",
		"prefix": "unregister_timer",
		"description": "battle:unregister_timer()\n-  -\n\nUnegisters a timer (whether registered with battle:register_singleshot_timer or battle:register_repeating_timer), by it's string function name.\n",
		"body": [
			"unregister_timer(${1:string function name})"
		],
	},
	"docgen:battle:battle:unregister_timer": {
		"scope": "lua",
		"prefix": "battle:unregister_timer",
		"description": "battle:unregister_timer()\n-  -\n\nUnegisters a timer (whether registered with battle:register_singleshot_timer or battle:register_repeating_timer), by it's string function name.\n",
		"body": [
			"battle:unregister_timer(${1:string function name})"
		],
	},
	"docgen:battle:model_tick_time_ms": {
		"scope": "lua",
		"prefix": "model_tick_time_ms",
		"description": "battle:model_tick_time_ms()\n-  -\n\nReturns the model tick time in milliseconds.\n",
		"body": [
			"model_tick_time_ms()"
		],
	},
	"docgen:battle:battle:model_tick_time_ms": {
		"scope": "lua",
		"prefix": "battle:model_tick_time_ms",
		"description": "battle:model_tick_time_ms()\n-  -\n\nReturns the model tick time in milliseconds.\n",
		"body": [
			"battle:model_tick_time_ms()"
		],
	},
	"docgen:battle:remaining_conflict_time": {
		"scope": "lua",
		"prefix": "remaining_conflict_time",
		"description": "battle:remaining_conflict_time()\n-  -\n\nReturns the duration remaining before the battle time limit expires, in seconds.\n",
		"body": [
			"remaining_conflict_time()"
		],
	},
	"docgen:battle:battle:remaining_conflict_time": {
		"scope": "lua",
		"prefix": "battle:remaining_conflict_time",
		"description": "battle:remaining_conflict_time()\n-  -\n\nReturns the duration remaining before the battle time limit expires, in seconds.\n",
		"body": [
			"battle:remaining_conflict_time()"
		],
	},
	"docgen:battle:modify_battle_speed": {
		"scope": "lua",
		"prefix": "modify_battle_speed",
		"description": "battle:modify_battle_speed()\n-  -\n\nAdjusts the game speed.\n",
		"body": [
			"modify_battle_speed(${1:number battle speed})"
		],
	},
	"docgen:battle:battle:modify_battle_speed": {
		"scope": "lua",
		"prefix": "battle:modify_battle_speed",
		"description": "battle:modify_battle_speed()\n-  -\n\nAdjusts the game speed.\n",
		"body": [
			"battle:modify_battle_speed(${1:number battle speed})"
		],
	},
	"docgen:battle:restore_battle_speed": {
		"scope": "lua",
		"prefix": "restore_battle_speed",
		"description": "battle:restore_battle_speed()\n-  -\n\nRestores the game speed to the value that was previously set when battle:modify_battle_speed was last called.\n",
		"body": [
			"restore_battle_speed()"
		],
	},
	"docgen:battle:battle:restore_battle_speed": {
		"scope": "lua",
		"prefix": "battle:restore_battle_speed",
		"description": "battle:restore_battle_speed()\n-  -\n\nRestores the game speed to the value that was previously set when battle:modify_battle_speed was last called.\n",
		"body": [
			"battle:restore_battle_speed()"
		],
	},
	"docgen:battle:change_conflict_time_update_overridden": {
		"scope": "lua",
		"prefix": "change_conflict_time_update_overridden",
		"description": "battle:change_conflict_time_update_overridden()\n-  -\n\nEnables or disables the countdown of the conflict timer.\n",
		"body": [
			"change_conflict_time_update_overridden()"
		],
	},
	"docgen:battle:battle:change_conflict_time_update_overridden": {
		"scope": "lua",
		"prefix": "battle:change_conflict_time_update_overridden",
		"description": "battle:change_conflict_time_update_overridden()\n-  -\n\nEnables or disables the countdown of the conflict timer.\n",
		"body": [
			"battle:change_conflict_time_update_overridden()"
		],
	},
	"docgen:battle:change_victory_countdown_limit": {
		"scope": "lua",
		"prefix": "change_victory_countdown_limit",
		"description": "battle:change_victory_countdown_limit()\n-  -\n\nChange the victory countdown limit.\n",
		"body": [
			"change_victory_countdown_limit(${1:number time limit})"
		],
	},
	"docgen:battle:battle:change_victory_countdown_limit": {
		"scope": "lua",
		"prefix": "battle:change_victory_countdown_limit",
		"description": "battle:change_victory_countdown_limit()\n-  -\n\nChange the victory countdown limit.\n",
		"body": [
			"battle:change_victory_countdown_limit(${1:number time limit})"
		],
	},
	"docgen:battle:cindy_preload": {
		"scope": "lua",
		"prefix": "cindy_preload",
		"description": "battle:cindy_preload()\n-  -\n\nPreloads a cindy scene.\n",
		"body": [
			"cindy_preload(${1:string scene path})"
		],
	},
	"docgen:battle:battle:cindy_preload": {
		"scope": "lua",
		"prefix": "battle:cindy_preload",
		"description": "battle:cindy_preload()\n-  -\n\nPreloads a cindy scene.\n",
		"body": [
			"battle:cindy_preload(${1:string scene path})"
		],
	},
	"docgen:battle:cindy_playback": {
		"scope": "lua",
		"prefix": "cindy_playback",
		"description": "battle:cindy_playback()\n-  -\n\nStarts a cindy scene.\n",
		"body": [
			"cindy_playback(${1:string scene path}, ${2:boolean clear scene}, ${3:[opt=false] boolean expire camera}, ${4:[opt=true] boolean save to replay})"
		],
	},
	"docgen:battle:battle:cindy_playback": {
		"scope": "lua",
		"prefix": "battle:cindy_playback",
		"description": "battle:cindy_playback()\n-  -\n\nStarts a cindy scene.\n",
		"body": [
			"battle:cindy_playback(${1:string scene path}, ${2:boolean clear scene}, ${3:[opt=false] boolean expire camera}, ${4:[opt=true] boolean save to replay})"
		],
	},
	"docgen:battle:cindy_playback_no_camera": {
		"scope": "lua",
		"prefix": "cindy_playback_no_camera",
		"description": "battle:cindy_playback_no_camera()\n-  -\n\nStarts a cindy scene without a camera track.\n",
		"body": [
			"cindy_playback_no_camera(${1:string scene path}, ${2:boolean clear scene}, ${3:[opt=true] boolean save to replay})"
		],
	},
	"docgen:battle:battle:cindy_playback_no_camera": {
		"scope": "lua",
		"prefix": "battle:cindy_playback_no_camera",
		"description": "battle:cindy_playback_no_camera()\n-  -\n\nStarts a cindy scene without a camera track.\n",
		"body": [
			"battle:cindy_playback_no_camera(${1:string scene path}, ${2:boolean clear scene}, ${3:[opt=true] boolean save to replay})"
		],
	},
	"docgen:battle:stop_cindy_playback": {
		"scope": "lua",
		"prefix": "stop_cindy_playback",
		"description": "battle:stop_cindy_playback()\n-  -\n\nStops a cindy scene that was started with battle:cindy_playback.\n",
		"body": [
			"stop_cindy_playback(${1:[opt=false] boolean clear animated scenes})"
		],
	},
	"docgen:battle:battle:stop_cindy_playback": {
		"scope": "lua",
		"prefix": "battle:stop_cindy_playback",
		"description": "battle:stop_cindy_playback()\n-  -\n\nStops a cindy scene that was started with battle:cindy_playback.\n",
		"body": [
			"battle:stop_cindy_playback(${1:[opt=false] boolean clear animated scenes})"
		],
	},
	"docgen:battle:stop_cindy_playback_no_camera": {
		"scope": "lua",
		"prefix": "stop_cindy_playback_no_camera",
		"description": "battle:stop_cindy_playback_no_camera()\n-  -\n\nStops a cindy scene that was started with battle:cindy_playback_no_camera.\n",
		"body": [
			"stop_cindy_playback_no_camera(${1:[opt=false] boolean clear animated scenes})"
		],
	},
	"docgen:battle:battle:stop_cindy_playback_no_camera": {
		"scope": "lua",
		"prefix": "battle:stop_cindy_playback_no_camera",
		"description": "battle:stop_cindy_playback_no_camera()\n-  -\n\nStops a cindy scene that was started with battle:cindy_playback_no_camera.\n",
		"body": [
			"battle:stop_cindy_playback_no_camera(${1:[opt=false] boolean clear animated scenes})"
		],
	},
	"docgen:battle:start_terrain_composite_scene": {
		"scope": "lua",
		"prefix": "start_terrain_composite_scene",
		"description": "battle:start_terrain_composite_scene()\n-  -\n\nStarts a composite scene.\n",
		"body": [
			"start_terrain_composite_scene(${1:string scene key})"
		],
	},
	"docgen:battle:battle:start_terrain_composite_scene": {
		"scope": "lua",
		"prefix": "battle:start_terrain_composite_scene",
		"description": "battle:start_terrain_composite_scene()\n-  -\n\nStarts a composite scene.\n",
		"body": [
			"battle:start_terrain_composite_scene(${1:string scene key})"
		],
	},
	"docgen:battle:stop_terrain_composite_scene": {
		"scope": "lua",
		"prefix": "stop_terrain_composite_scene",
		"description": "battle:stop_terrain_composite_scene()\n-  -\n\nStops a composite scene.\n",
		"body": [
			"stop_terrain_composite_scene(${1:string scene key})"
		],
	},
	"docgen:battle:battle:stop_terrain_composite_scene": {
		"scope": "lua",
		"prefix": "battle:stop_terrain_composite_scene",
		"description": "battle:stop_terrain_composite_scene()\n-  -\n\nStops a composite scene.\n",
		"body": [
			"battle:stop_terrain_composite_scene(${1:string scene key})"
		],
	},
	"docgen:battle:play_adc": {
		"scope": "lua",
		"prefix": "play_adc",
		"description": "battle:play_adc()\n-  -\n\nManually triggers an aide-de-camp message at a specified location on the battlefield.\n",
		"body": [
			"play_adc(${1:string adc key}, ${2:number x}, ${3:number y}, ${4:number z}, ${5:boolean for player})"
		],
	},
	"docgen:battle:battle:play_adc": {
		"scope": "lua",
		"prefix": "battle:play_adc",
		"description": "battle:play_adc()\n-  -\n\nManually triggers an aide-de-camp message at a specified location on the battlefield.\n",
		"body": [
			"battle:play_adc(${1:string adc key}, ${2:number x}, ${3:number y}, ${4:number z}, ${5:boolean for player})"
		],
	},
	"docgen:battle:suspend_contextual_advice": {
		"scope": "lua",
		"prefix": "suspend_contextual_advice",
		"description": "battle:suspend_contextual_advice()\n-  -\n\nPrevents advice from being triggered with effect:advance_contextual_advice_thread, which has the effect of suspending advice not triggered deliberately by battle scripts.\n",
		"body": [
			"suspend_contextual_advice(${1:boolean should suspend})"
		],
	},
	"docgen:battle:battle:suspend_contextual_advice": {
		"scope": "lua",
		"prefix": "battle:suspend_contextual_advice",
		"description": "battle:suspend_contextual_advice()\n-  -\n\nPrevents advice from being triggered with effect:advance_contextual_advice_thread, which has the effect of suspending advice not triggered deliberately by battle scripts.\n",
		"body": [
			"battle:suspend_contextual_advice(${1:boolean should suspend})"
		],
	},
	"docgen:battle:close_advisor": {
		"scope": "lua",
		"prefix": "close_advisor",
		"description": "battle:close_advisor()\n-  -\n\nDismisses the advisor, if currently shown.\n",
		"body": [
			"close_advisor()"
		],
	},
	"docgen:battle:battle:close_advisor": {
		"scope": "lua",
		"prefix": "battle:close_advisor",
		"description": "battle:close_advisor()\n-  -\n\nDismisses the advisor, if currently shown.\n",
		"body": [
			"battle:close_advisor()"
		],
	},
	"docgen:battle:advice_finished": {
		"scope": "lua",
		"prefix": "advice_finished",
		"description": "battle:advice_finished()\n-  -\n\nReturns whether or not any advice is currently playing.\n",
		"body": [
			"advice_finished()"
		],
	},
	"docgen:battle:battle:advice_finished": {
		"scope": "lua",
		"prefix": "battle:advice_finished",
		"description": "battle:advice_finished()\n-  -\n\nReturns whether or not any advice is currently playing.\n",
		"body": [
			"battle:advice_finished()"
		],
	},
	"docgen:battle:vo_finished": {
		"scope": "lua",
		"prefix": "vo_finished",
		"description": "battle:vo_finished()\n-  -\n\nReturns whether or not any voiceover sounds are currently playing.\n",
		"body": [
			"vo_finished()"
		],
	},
	"docgen:battle:battle:vo_finished": {
		"scope": "lua",
		"prefix": "battle:vo_finished",
		"description": "battle:vo_finished()\n-  -\n\nReturns whether or not any voiceover sounds are currently playing.\n",
		"body": [
			"battle:vo_finished()"
		],
	},
	"docgen:battle:suppress_unit_voices": {
		"scope": "lua",
		"prefix": "suppress_unit_voices",
		"description": "battle:suppress_unit_voices()\n-  -\n\nDisables or re-enables unit voices in battle.\n",
		"body": [
			"suppress_unit_voices(${1:boolean should suppress})"
		],
	},
	"docgen:battle:battle:suppress_unit_voices": {
		"scope": "lua",
		"prefix": "battle:suppress_unit_voices",
		"description": "battle:suppress_unit_voices()\n-  -\n\nDisables or re-enables unit voices in battle.\n",
		"body": [
			"battle:suppress_unit_voices(${1:boolean should suppress})"
		],
	},
	"docgen:battle:suppress_unit_musicians": {
		"scope": "lua",
		"prefix": "suppress_unit_musicians",
		"description": "battle:suppress_unit_musicians()\n-  -\n\nDisables or re-enables unit musicians in battle.\n",
		"body": [
			"suppress_unit_musicians(${1:boolean should suppress})"
		],
	},
	"docgen:battle:battle:suppress_unit_musicians": {
		"scope": "lua",
		"prefix": "battle:suppress_unit_musicians",
		"description": "battle:suppress_unit_musicians()\n-  -\n\nDisables or re-enables unit musicians in battle.\n",
		"body": [
			"battle:suppress_unit_musicians(${1:boolean should suppress})"
		],
	},
	"docgen:battle:set_music_auto_playback": {
		"scope": "lua",
		"prefix": "set_music_auto_playback",
		"description": "battle:set_music_auto_playback()\n-  -\n\nEnables or disables the automatic management of music by the game.\n",
		"body": [
			"set_music_auto_playback(${1:boolean auto playback})"
		],
	},
	"docgen:battle:battle:set_music_auto_playback": {
		"scope": "lua",
		"prefix": "battle:set_music_auto_playback",
		"description": "battle:set_music_auto_playback()\n-  -\n\nEnables or disables the automatic management of music by the game.\n",
		"body": [
			"battle:set_music_auto_playback(${1:boolean auto playback})"
		],
	},
	"docgen:battle:set_music_loop": {
		"scope": "lua",
		"prefix": "set_music_loop",
		"description": "battle:set_music_loop()\n-  -\n\nSets whether scripted music should loop.\n",
		"body": [
			"set_music_loop(${1:boolean should loop})"
		],
	},
	"docgen:battle:battle:set_music_loop": {
		"scope": "lua",
		"prefix": "battle:set_music_loop",
		"description": "battle:set_music_loop()\n-  -\n\nSets whether scripted music should loop.\n",
		"body": [
			"battle:set_music_loop(${1:boolean should loop})"
		],
	},
	"docgen:battle:play_music": {
		"scope": "lua",
		"prefix": "play_music",
		"description": "battle:play_music()\n-  -\n\nPlays a specified piece of music.\n",
		"body": [
			"play_music(${1:string music name})"
		],
	},
	"docgen:battle:battle:play_music": {
		"scope": "lua",
		"prefix": "battle:play_music",
		"description": "battle:play_music()\n-  -\n\nPlays a specified piece of music.\n",
		"body": [
			"battle:play_music(${1:string music name})"
		],
	},
	"docgen:battle:play_music_custom_fade": {
		"scope": "lua",
		"prefix": "play_music_custom_fade",
		"description": "battle:play_music_custom_fade()\n-  -\n\nPlays a specified piece of music with a custom fade-in duration.\n",
		"body": [
			"play_music_custom_fade(${1:string music name}, ${2:number fade time})"
		],
	},
	"docgen:battle:battle:play_music_custom_fade": {
		"scope": "lua",
		"prefix": "battle:play_music_custom_fade",
		"description": "battle:play_music_custom_fade()\n-  -\n\nPlays a specified piece of music with a custom fade-in duration.\n",
		"body": [
			"battle:play_music_custom_fade(${1:string music name}, ${2:number fade time})"
		],
	},
	"docgen:battle:stop_music": {
		"scope": "lua",
		"prefix": "stop_music",
		"description": "battle:stop_music()\n-  -\n\nStops the currently-playing music.\n",
		"body": [
			"stop_music()"
		],
	},
	"docgen:battle:battle:stop_music": {
		"scope": "lua",
		"prefix": "battle:stop_music",
		"description": "battle:stop_music()\n-  -\n\nStops the currently-playing music.\n",
		"body": [
			"battle:stop_music()"
		],
	},
	"docgen:battle:stop_music_custom_fade": {
		"scope": "lua",
		"prefix": "stop_music_custom_fade",
		"description": "battle:stop_music_custom_fade()\n-  -\n\nStops the currently-playing music with a custom fade time.\n",
		"body": [
			"stop_music_custom_fade(${1:number fade time})"
		],
	},
	"docgen:battle:battle:stop_music_custom_fade": {
		"scope": "lua",
		"prefix": "battle:stop_music_custom_fade",
		"description": "battle:stop_music_custom_fade()\n-  -\n\nStops the currently-playing music with a custom fade time.\n",
		"body": [
			"battle:stop_music_custom_fade(${1:number fade time})"
		],
	},
	"docgen:battle:get_volume": {
		"scope": "lua",
		"prefix": "get_volume",
		"description": "battle:get_volume()\n-  -\n\nGets the volume level of a specific volume type.\n",
		"body": [
			"get_volume(${1:number volume type})"
		],
	},
	"docgen:battle:battle:get_volume": {
		"scope": "lua",
		"prefix": "battle:get_volume",
		"description": "battle:get_volume()\n-  -\n\nGets the volume level of a specific volume type.\n",
		"body": [
			"battle:get_volume(${1:number volume type})"
		],
	},
	"docgen:battle:set_volume": {
		"scope": "lua",
		"prefix": "set_volume",
		"description": "battle:set_volume()\n-  -\n\nSets the volume level of a specific volume type.\n",
		"body": [
			"set_volume(${1:number volume type}, ${2:number volume level})"
		],
	},
	"docgen:battle:battle:set_volume": {
		"scope": "lua",
		"prefix": "battle:set_volume",
		"description": "battle:set_volume()\n-  -\n\nSets the volume level of a specific volume type.\n",
		"body": [
			"battle:set_volume(${1:number volume type}, ${2:number volume level})"
		],
	},
	"docgen:battle:fade_volume": {
		"scope": "lua",
		"prefix": "fade_volume",
		"description": "battle:fade_volume()\n-  -\n\nGradually fades the volume level of a specified volume type to a specified value over a specified interval.\n",
		"body": [
			"fade_volume(${1:number volume type}, ${2:number target level}, ${3:number fade time})"
		],
	},
	"docgen:battle:battle:fade_volume": {
		"scope": "lua",
		"prefix": "battle:fade_volume",
		"description": "battle:fade_volume()\n-  -\n\nGradually fades the volume level of a specified volume type to a specified value over a specified interval.\n",
		"body": [
			"battle:fade_volume(${1:number volume type}, ${2:number target level}, ${3:number fade time})"
		],
	},
	"docgen:battle:add_ping_icon": {
		"scope": "lua",
		"prefix": "add_ping_icon",
		"description": "battle:add_ping_icon()\n-  -\n\nAdds a 3d ping marker model at a specified [x/y/z] position.\n",
		"body": [
			"add_ping_icon(${1:number x}, ${2:number y}, ${3:number x}, ${4:[opt=0] number type}, ${5:[opt=false] boolean is waypoint}, ${6:[opt=nil] number rotation})"
		],
	},
	"docgen:battle:battle:add_ping_icon": {
		"scope": "lua",
		"prefix": "battle:add_ping_icon",
		"description": "battle:add_ping_icon()\n-  -\n\nAdds a 3d ping marker model at a specified [x/y/z] position.\n",
		"body": [
			"battle:add_ping_icon(${1:number x}, ${2:number y}, ${3:number x}, ${4:[opt=0] number type}, ${5:[opt=false] boolean is waypoint}, ${6:[opt=nil] number rotation})"
		],
	},
	"docgen:battle:remove_ping_icon": {
		"scope": "lua",
		"prefix": "remove_ping_icon",
		"description": "battle:remove_ping_icon()\n-  -\n\nRemoves the ping marker that was previously added with battle:add_ping_icon at a specified [x/y/z] position.\n",
		"body": [
			"remove_ping_icon(${1:number x}, ${2:number y}, ${3:number x})"
		],
	},
	"docgen:battle:battle:remove_ping_icon": {
		"scope": "lua",
		"prefix": "battle:remove_ping_icon",
		"description": "battle:remove_ping_icon()\n-  -\n\nRemoves the ping marker that was previously added with battle:add_ping_icon at a specified [x/y/z] position.\n",
		"body": [
			"battle:remove_ping_icon(${1:number x}, ${2:number y}, ${3:number x})"
		],
	},
	"docgen:battle:show_objective": {
		"scope": "lua",
		"prefix": "show_objective",
		"description": "battle:show_objective()\n-  -\n\nShows an objective message on-screen.\n",
		"body": [
			"show_objective(${1:string objective key}, ${2:number duration}, ${3:number fade duration})"
		],
	},
	"docgen:battle:battle:show_objective": {
		"scope": "lua",
		"prefix": "battle:show_objective",
		"description": "battle:show_objective()\n-  -\n\nShows an objective message on-screen.\n",
		"body": [
			"battle:show_objective(${1:string objective key}, ${2:number duration}, ${3:number fade duration})"
		],
	},
	"docgen:battle:play_movie": {
		"scope": "lua",
		"prefix": "play_movie",
		"description": "battle:play_movie()\n-  -\n\nPlays a fullscreen movie during a battle.\n",
		"body": [
			"play_movie(${1:string movie path}, ${2:boolean play movie audio})"
		],
	},
	"docgen:battle:battle:play_movie": {
		"scope": "lua",
		"prefix": "battle:play_movie",
		"description": "battle:play_movie()\n-  -\n\nPlays a fullscreen movie during a battle.\n",
		"body": [
			"battle:play_movie(${1:string movie path}, ${2:boolean play movie audio})"
		],
	},
	"docgen:battle:is_movie_playing": {
		"scope": "lua",
		"prefix": "is_movie_playing",
		"description": "battle:is_movie_playing()\n-  -\n\nReturns whether or not a fullscreen movie is currently playing.\n",
		"body": [
			"is_movie_playing()"
		],
	},
	"docgen:battle:battle:is_movie_playing": {
		"scope": "lua",
		"prefix": "battle:is_movie_playing",
		"description": "battle:is_movie_playing()\n-  -\n\nReturns whether or not a fullscreen movie is currently playing.\n",
		"body": [
			"battle:is_movie_playing()"
		],
	},
	"docgen:battle:ui_component": {
		"scope": "lua",
		"prefix": "ui_component",
		"description": "battle:ui_component()\n-  -\n\nSearches from the root uicomponent for a uicomponent with the specified name, returning the first that matches.\n",
		"body": [
			"ui_component(${1:string uicomponent name})"
		],
	},
	"docgen:battle:battle:ui_component": {
		"scope": "lua",
		"prefix": "battle:ui_component",
		"description": "battle:ui_component()\n-  -\n\nSearches from the root uicomponent for a uicomponent with the specified name, returning the first that matches.\n",
		"body": [
			"battle:ui_component(${1:string uicomponent name})"
		],
	},
	"docgen:battle:enable_cinematic_ui": {
		"scope": "lua",
		"prefix": "enable_cinematic_ui",
		"description": "battle:enable_cinematic_ui()\n-  -\n\nEnables or disables a script lock on the state of the cinematic UI.\n",
		"body": [
			"enable_cinematic_ui(${1:boolean enable cinematic ui}, ${2:[opt=nil] boolean show cursor}, ${3:[opt=nil] boolean enable cinematic bars})"
		],
	},
	"docgen:battle:battle:enable_cinematic_ui": {
		"scope": "lua",
		"prefix": "battle:enable_cinematic_ui",
		"description": "battle:enable_cinematic_ui()\n-  -\n\nEnables or disables a script lock on the state of the cinematic UI.\n",
		"body": [
			"battle:enable_cinematic_ui(${1:boolean enable cinematic ui}, ${2:[opt=nil] boolean show cursor}, ${3:[opt=nil] boolean enable cinematic bars})"
		],
	},
	"docgen:battle:enable_unit_ids": {
		"scope": "lua",
		"prefix": "enable_unit_ids",
		"description": "battle:enable_unit_ids()\n-  -\n\nEnables or disables the unit IDs - the flags or icons floating above each unit in battle.\n",
		"body": [
			"enable_unit_ids(${1:boolean show ids})"
		],
	},
	"docgen:battle:battle:enable_unit_ids": {
		"scope": "lua",
		"prefix": "battle:enable_unit_ids",
		"description": "battle:enable_unit_ids()\n-  -\n\nEnables or disables the unit IDs - the flags or icons floating above each unit in battle.\n",
		"body": [
			"battle:enable_unit_ids(${1:boolean show ids})"
		],
	},
	"docgen:battle:enable_cinematic_camera": {
		"scope": "lua",
		"prefix": "enable_cinematic_camera",
		"description": "battle:enable_cinematic_camera()\n-  -\n\nEnables or disables the cinematic camera.\n",
		"body": [
			"enable_cinematic_camera(${1:boolean enable cinematic camera})"
		],
	},
	"docgen:battle:battle:enable_cinematic_camera": {
		"scope": "lua",
		"prefix": "battle:enable_cinematic_camera",
		"description": "battle:enable_cinematic_camera()\n-  -\n\nEnables or disables the cinematic camera.\n",
		"body": [
			"battle:enable_cinematic_camera(${1:boolean enable cinematic camera})"
		],
	},
	"docgen:battle:enable_tooltips": {
		"scope": "lua",
		"prefix": "enable_tooltips",
		"description": "battle:enable_tooltips()\n-  -\n\nEnables or disables tooltips.\n",
		"body": [
			"enable_tooltips(${1:boolean enable tooltips})"
		],
	},
	"docgen:battle:battle:enable_tooltips": {
		"scope": "lua",
		"prefix": "battle:enable_tooltips",
		"description": "battle:enable_tooltips()\n-  -\n\nEnables or disables tooltips.\n",
		"body": [
			"battle:enable_tooltips(${1:boolean enable tooltips})"
		],
	},
	"docgen:battle:force_minimised_tooltips": {
		"scope": "lua",
		"prefix": "force_minimised_tooltips",
		"description": "battle:force_minimised_tooltips()\n-  -\n\nForces tooltips into minimised mode.\n",
		"body": [
			"force_minimised_tooltips(${1:boolean set minimised tooltips})"
		],
	},
	"docgen:battle:battle:force_minimised_tooltips": {
		"scope": "lua",
		"prefix": "battle:force_minimised_tooltips",
		"description": "battle:force_minimised_tooltips()\n-  -\n\nForces tooltips into minimised mode.\n",
		"body": [
			"battle:force_minimised_tooltips(${1:boolean set minimised tooltips})"
		],
	},
	"docgen:battle:disable_groups": {
		"scope": "lua",
		"prefix": "disable_groups",
		"description": "battle:disable_groups()\n-  -\n\nDisables or enables grouping functionality.\n",
		"body": [
			"disable_groups(${1:boolean disable grouping})"
		],
	},
	"docgen:battle:battle:disable_groups": {
		"scope": "lua",
		"prefix": "battle:disable_groups",
		"description": "battle:disable_groups()\n-  -\n\nDisables or enables grouping functionality.\n",
		"body": [
			"battle:disable_groups(${1:boolean disable grouping})"
		],
	},
	"docgen:battle:disable_formations": {
		"scope": "lua",
		"prefix": "disable_formations",
		"description": "battle:disable_formations()\n-  -\n\nDisables or enables formations functionality.\n",
		"body": [
			"disable_formations(${1:boolean disable formations})"
		],
	},
	"docgen:battle:battle:disable_formations": {
		"scope": "lua",
		"prefix": "battle:disable_formations",
		"description": "battle:disable_formations()\n-  -\n\nDisables or enables formations functionality.\n",
		"body": [
			"battle:disable_formations(${1:boolean disable formations})"
		],
	},
	"docgen:battle:disable_orders": {
		"scope": "lua",
		"prefix": "disable_orders",
		"description": "battle:disable_orders()\n-  -\n\nDisables or enables the giving of any orders at all.\n",
		"body": [
			"disable_orders(${1:boolean disable orders})"
		],
	},
	"docgen:battle:battle:disable_orders": {
		"scope": "lua",
		"prefix": "battle:disable_orders",
		"description": "battle:disable_orders()\n-  -\n\nDisables or enables the giving of any orders at all.\n",
		"body": [
			"battle:disable_orders(${1:boolean disable orders})"
		],
	},
	"docgen:battle:steal_escape_key": {
		"scope": "lua",
		"prefix": "steal_escape_key",
		"description": "battle:steal_escape_key()\n-  -\n\nSteals the escape key from the UI.\n",
		"body": [
			"steal_escape_key()"
		],
	},
	"docgen:battle:battle:steal_escape_key": {
		"scope": "lua",
		"prefix": "battle:steal_escape_key",
		"description": "battle:steal_escape_key()\n-  -\n\nSteals the escape key from the UI.\n",
		"body": [
			"battle:steal_escape_key()"
		],
	},
	"docgen:battle:release_escape_key": {
		"scope": "lua",
		"prefix": "release_escape_key",
		"description": "battle:release_escape_key()\n-  -\n\nReleases the stolen escape key from the script, allows the UI to intercepting ESC key presses again.\n",
		"body": [
			"release_escape_key()"
		],
	},
	"docgen:battle:battle:release_escape_key": {
		"scope": "lua",
		"prefix": "battle:release_escape_key",
		"description": "battle:release_escape_key()\n-  -\n\nReleases the stolen escape key from the script, allows the UI to intercepting ESC key presses again.\n",
		"body": [
			"battle:release_escape_key()"
		],
	},
	"docgen:battle:steal_input_focus": {
		"scope": "lua",
		"prefix": "steal_input_focus",
		"description": "battle:steal_input_focus()\n-  -\n\nSteals all keyboard input from the UI, effectively disabling the keyboard in the game.\n",
		"body": [
			"steal_input_focus()"
		],
	},
	"docgen:battle:battle:steal_input_focus": {
		"scope": "lua",
		"prefix": "battle:steal_input_focus",
		"description": "battle:steal_input_focus()\n-  -\n\nSteals all keyboard input from the UI, effectively disabling the keyboard in the game.\n",
		"body": [
			"battle:steal_input_focus()"
		],
	},
	"docgen:battle:release_input_focus": {
		"scope": "lua",
		"prefix": "release_input_focus",
		"description": "battle:release_input_focus()\n-  -\n\nReleases keyboard input back to the UI after its theft with battle:steal_input_focus.\n",
		"body": [
			"release_input_focus()"
		],
	},
	"docgen:battle:battle:release_input_focus": {
		"scope": "lua",
		"prefix": "battle:release_input_focus",
		"description": "battle:release_input_focus()\n-  -\n\nReleases keyboard input back to the UI after its theft with battle:steal_input_focus.\n",
		"body": [
			"battle:release_input_focus()"
		],
	},
	"docgen:battle:disable_shortcut": {
		"scope": "lua",
		"prefix": "disable_shortcut",
		"description": "battle:disable_shortcut()\n-  -\n\nDisables or re-enables a keyboard shortcut by name.\n",
		"body": [
			"disable_shortcut(${1:string shortcut name}, ${2:boolean should disable})"
		],
	},
	"docgen:battle:battle:disable_shortcut": {
		"scope": "lua",
		"prefix": "battle:disable_shortcut",
		"description": "battle:disable_shortcut()\n-  -\n\nDisables or re-enables a keyboard shortcut by name.\n",
		"body": [
			"battle:disable_shortcut(${1:string shortcut name}, ${2:boolean should disable})"
		],
	},
	"docgen:battle:set_banners_enabled": {
		"scope": "lua",
		"prefix": "set_banners_enabled",
		"description": "battle:set_banners_enabled()\n-  -\n\nEnables or disables the unit IDs - the flags or icons floating above each unit in battle.\n",
		"body": [
			"set_banners_enabled(${1:boolean show ids})"
		],
	},
	"docgen:battle:battle:set_banners_enabled": {
		"scope": "lua",
		"prefix": "battle:set_banners_enabled",
		"description": "battle:set_banners_enabled()\n-  -\n\nEnables or disables the unit IDs - the flags or icons floating above each unit in battle.\n",
		"body": [
			"battle:set_banners_enabled(${1:boolean show ids})"
		],
	},
	"docgen:battle:is_tutorial": {
		"scope": "lua",
		"prefix": "is_tutorial",
		"description": "battle:is_tutorial()\n-  -\n\nReturns the value of the <code>is_tutorial</code> flag.\n",
		"body": [
			"is_tutorial()"
		],
	},
	"docgen:battle:battle:is_tutorial": {
		"scope": "lua",
		"prefix": "battle:is_tutorial",
		"description": "battle:is_tutorial()\n-  -\n\nReturns the value of the <code>is_tutorial</code> flag.\n",
		"body": [
			"battle:is_tutorial()"
		],
	},
	"docgen:battle:prepare_for_fade_in": {
		"scope": "lua",
		"prefix": "prepare_for_fade_in",
		"description": "battle:prepare_for_fade_in()\n-  -\n\nReturns the value of the <code>prepare_for_fade_in</code> flag.\n",
		"body": [
			"prepare_for_fade_in()"
		],
	},
	"docgen:battle:battle:prepare_for_fade_in": {
		"scope": "lua",
		"prefix": "battle:prepare_for_fade_in",
		"description": "battle:prepare_for_fade_in()\n-  -\n\nReturns the value of the <code>prepare_for_fade_in</code> flag.\n",
		"body": [
			"battle:prepare_for_fade_in()"
		],
	},
	"docgen:battle:is_battle_over": {
		"scope": "lua",
		"prefix": "is_battle_over",
		"description": "battle:is_battle_over()\n-  -\n\nReturns whether the battle is completely finished.\n",
		"body": [
			"is_battle_over()"
		],
	},
	"docgen:battle:battle:is_battle_over": {
		"scope": "lua",
		"prefix": "battle:is_battle_over",
		"description": "battle:is_battle_over()\n-  -\n\nReturns whether the battle is completely finished.\n",
		"body": [
			"battle:is_battle_over()"
		],
	},
	"docgen:battle:is_siege_battle": {
		"scope": "lua",
		"prefix": "is_siege_battle",
		"description": "battle:is_siege_battle()\n-  -\n\nReturns whether or not the battle is a siege battle.\n",
		"body": [
			"is_siege_battle()"
		],
	},
	"docgen:battle:battle:is_siege_battle": {
		"scope": "lua",
		"prefix": "battle:is_siege_battle",
		"description": "battle:is_siege_battle()\n-  -\n\nReturns whether or not the battle is a siege battle.\n",
		"body": [
			"battle:is_siege_battle()"
		],
	},
	"docgen:battle:get_terrain_height": {
		"scope": "lua",
		"prefix": "get_terrain_height",
		"description": "battle:get_terrain_height()\n-  -\n\nReturns the height of the terrain at the specified x/y co-ordinates.\n",
		"body": [
			"get_terrain_height(${1:number x}, ${2:number y})"
		],
	},
	"docgen:battle:battle:get_terrain_height": {
		"scope": "lua",
		"prefix": "battle:get_terrain_height",
		"description": "battle:get_terrain_height()\n-  -\n\nReturns the height of the terrain at the specified x/y co-ordinates.\n",
		"body": [
			"battle:get_terrain_height(${1:number x}, ${2:number y})"
		],
	},
	"docgen:battle:random_number": {
		"scope": "lua",
		"prefix": "random_number",
		"description": "battle:random_number()\n-  -\n\nGenerate a battle-synchronised random number between 0 and 1.\n",
		"body": [
			"random_number()"
		],
	},
	"docgen:battle:battle:random_number": {
		"scope": "lua",
		"prefix": "battle:random_number",
		"description": "battle:random_number()\n-  -\n\nGenerate a battle-synchronised random number between 0 and 1.\n",
		"body": [
			"battle:random_number()"
		],
	},
	"docgen:battle:is_benchmarking_mode": {
		"scope": "lua",
		"prefix": "is_benchmarking_mode",
		"description": "battle:is_benchmarking_mode()\n-  -\n\nReturns whether this battle has been loaded in benchmarking mode or not.\n",
		"body": [
			"is_benchmarking_mode()"
		],
	},
	"docgen:battle:battle:is_benchmarking_mode": {
		"scope": "lua",
		"prefix": "battle:is_benchmarking_mode",
		"description": "battle:is_benchmarking_mode()\n-  -\n\nReturns whether this battle has been loaded in benchmarking mode or not.\n",
		"body": [
			"battle:is_benchmarking_mode()"
		],
	},
	"docgen:battle:end_benchmark": {
		"scope": "lua",
		"prefix": "end_benchmark",
		"description": "battle:end_benchmark()\n-  -\n\nEnds a currently-running benchmark, showing benchmarking statistics and ending the battle.\n",
		"body": [
			"end_benchmark()"
		],
	},
	"docgen:battle:battle:end_benchmark": {
		"scope": "lua",
		"prefix": "battle:end_benchmark",
		"description": "battle:end_benchmark()\n-  -\n\nEnds a currently-running benchmark, showing benchmarking statistics and ending the battle.\n",
		"body": [
			"battle:end_benchmark()"
		],
	},
	"docgen:battle:quit_to_windows_from_script": {
		"scope": "lua",
		"prefix": "quit_to_windows_from_script",
		"description": "battle:quit_to_windows_from_script()\n-  -\n\nCauses the game to completely shut down.\n",
		"body": [
			"quit_to_windows_from_script()"
		],
	},
	"docgen:battle:battle:quit_to_windows_from_script": {
		"scope": "lua",
		"prefix": "battle:quit_to_windows_from_script",
		"description": "battle:quit_to_windows_from_script()\n-  -\n\nCauses the game to completely shut down.\n",
		"body": [
			"battle:quit_to_windows_from_script()"
		],
	},
	"docgen:battle:take_screenshot": {
		"scope": "lua",
		"prefix": "take_screenshot",
		"description": "battle:take_screenshot()\n-  -\n\nTakes a screenshot of the battle.\n",
		"body": [
			"take_screenshot(${1:[opt=nil] string filepath})"
		],
	},
	"docgen:battle:battle:take_screenshot": {
		"scope": "lua",
		"prefix": "battle:take_screenshot",
		"description": "battle:take_screenshot()\n-  -\n\nTakes a screenshot of the battle.\n",
		"body": [
			"battle:take_screenshot(${1:[opt=nil] string filepath})"
		],
	},
	"docgen:battle:appdata_screenshots": {
		"scope": "lua",
		"prefix": "appdata_screenshots",
		"description": "battle:appdata_screenshots()\n-  -\n\nReturns a path to the screenshots directory.\n",
		"body": [
			"appdata_screenshots()"
		],
	},
	"docgen:battle:battle:appdata_screenshots": {
		"scope": "lua",
		"prefix": "battle:appdata_screenshots",
		"description": "battle:appdata_screenshots()\n-  -\n\nReturns a path to the screenshots directory.\n",
		"body": [
			"battle:appdata_screenshots()"
		],
	},
	"docgen:battle:trigger_projectile_launch": {
		"scope": "lua",
		"prefix": "trigger_projectile_launch",
		"description": "battle:trigger_projectile_launch()\n-  -\n\nTrigger a projectile launch from one position to another.\n",
		"body": [
			"trigger_projectile_launch(${1:string projectile key}, ${2:battle_vector launch position}, ${3:battle_vector target position})"
		],
	},
	"docgen:battle:battle:trigger_projectile_launch": {
		"scope": "lua",
		"prefix": "battle:trigger_projectile_launch",
		"description": "battle:trigger_projectile_launch()\n-  -\n\nTrigger a projectile launch from one position to another.\n",
		"body": [
			"battle:trigger_projectile_launch(${1:string projectile key}, ${2:battle_vector launch position}, ${3:battle_vector target position})"
		],
	},
	"docgen:battle:unlock_achievement": {
		"scope": "lua",
		"prefix": "unlock_achievement",
		"description": "battle:unlock_achievement()\n-  -\n\nUnlocks a steam achievement by string key.\n",
		"body": [
			"unlock_achievement(${1:string achievement key})"
		],
	},
	"docgen:battle:battle:unlock_achievement": {
		"scope": "lua",
		"prefix": "battle:unlock_achievement",
		"description": "battle:unlock_achievement()\n-  -\n\nUnlocks a steam achievement by string key.\n",
		"body": [
			"battle:unlock_achievement(${1:string achievement key})"
		],
	},
	"docgen:battle:output_battle_xml": {
		"scope": "lua",
		"prefix": "output_battle_xml",
		"description": "battle:output_battle_xml()\n-  -\n\nWrites out a battle xml file with the supplied filename containing the current battle setup.\n",
		"body": [
			"output_battle_xml(${1:string filename})"
		],
	},
	"docgen:battle:battle:output_battle_xml": {
		"scope": "lua",
		"prefix": "battle:output_battle_xml",
		"description": "battle:output_battle_xml()\n-  -\n\nWrites out a battle xml file with the supplied filename containing the current battle setup.\n",
		"body": [
			"battle:output_battle_xml(${1:string filename})"
		],
	},
	"docgen:battle_subtitles:begin": {
		"scope": "lua",
		"prefix": "begin",
		"description": "subtitles:begin()\n-  -\n\nStarts the subtitles object with an alignment - this must be called before any subtitles are set with battle_subtitles:set_text.\n",
		"body": [
			"begin(${1:string alignment})"
		],
	},
	"docgen:battle_subtitles:subtitles:begin": {
		"scope": "lua",
		"prefix": "subtitles:begin",
		"description": "subtitles:begin()\n-  -\n\nStarts the subtitles object with an alignment - this must be called before any subtitles are set with battle_subtitles:set_text.\n",
		"body": [
			"subtitles:begin(${1:string alignment})"
		],
	},
	"docgen:battle_subtitles:set_text": {
		"scope": "lua",
		"prefix": "set_text",
		"description": "subtitles:set_text()\n-  -\n\nInstructs the subtitle object to display some subtitle text on-screen, which can subsequently be hidden with battle_subtitles:clear.\n",
		"body": [
			"set_text(${1:string subtitle key})"
		],
	},
	"docgen:battle_subtitles:subtitles:set_text": {
		"scope": "lua",
		"prefix": "subtitles:set_text",
		"description": "subtitles:set_text()\n-  -\n\nInstructs the subtitle object to display some subtitle text on-screen, which can subsequently be hidden with battle_subtitles:clear.\n",
		"body": [
			"subtitles:set_text(${1:string subtitle key})"
		],
	},
	"docgen:battle_subtitles:end_subtitles": {
		"scope": "lua",
		"prefix": "end_subtitles",
		"description": "subtitles:end_subtitles()\n-  -\n\nStops the currently active sequence.\n",
		"body": [
			"end_subtitles()"
		],
	},
	"docgen:battle_subtitles:subtitles:end_subtitles": {
		"scope": "lua",
		"prefix": "subtitles:end_subtitles",
		"description": "subtitles:end_subtitles()\n-  -\n\nStops the currently active sequence.\n",
		"body": [
			"subtitles:end_subtitles()"
		],
	},
	"docgen:battle_subtitles:clear": {
		"scope": "lua",
		"prefix": "clear",
		"description": "subtitles:clear()\n-  -\n\nClears any subtitles currently being displayed or queued to be displayed.\n",
		"body": [
			"clear()"
		],
	},
	"docgen:battle_subtitles:subtitles:clear": {
		"scope": "lua",
		"prefix": "subtitles:clear",
		"description": "subtitles:clear()\n-  -\n\nClears any subtitles currently being displayed or queued to be displayed.\n",
		"body": [
			"subtitles:clear()"
		],
	},
	"docgen:battle_subtitles:set_alignment": {
		"scope": "lua",
		"prefix": "set_alignment",
		"description": "subtitles:set_alignment()\n-  -\n\nSets the on-screen alignment of displayed subtitles.\n",
		"body": [
			"set_alignment(${1:string alignment })"
		],
	},
	"docgen:battle_subtitles:subtitles:set_alignment": {
		"scope": "lua",
		"prefix": "subtitles:set_alignment",
		"description": "subtitles:set_alignment()\n-  -\n\nSets the on-screen alignment of displayed subtitles.\n",
		"body": [
			"subtitles:set_alignment(${1:string alignment })"
		],
	},
	"docgen:battle_subtitles:read_subtitles_file": {
		"scope": "lua",
		"prefix": "read_subtitles_file",
		"description": "subtitles:read_subtitles_file()\n-  -\n\nLoads a csv file containing subtitle information.\n",
		"body": [
			"read_subtitles_file(${1:string file path})"
		],
	},
	"docgen:battle_subtitles:subtitles:read_subtitles_file": {
		"scope": "lua",
		"prefix": "subtitles:read_subtitles_file",
		"description": "subtitles:read_subtitles_file()\n-  -\n\nLoads a csv file containing subtitle information.\n",
		"body": [
			"subtitles:read_subtitles_file(${1:string file path})"
		],
	},
	"docgen:battle_subtitles:push_back_subtitle_entry": {
		"scope": "lua",
		"prefix": "push_back_subtitle_entry",
		"description": "subtitles:push_back_subtitle_entry()\n-  -\n\nPushes a subtitle entry with timings to be displayed when battle_subtitles:begin is called.\n",
		"body": [
			"push_back_subtitle_entry(${1:number start time}, ${2:number end time}, ${3:string text})"
		],
	},
	"docgen:battle_subtitles:subtitles:push_back_subtitle_entry": {
		"scope": "lua",
		"prefix": "subtitles:push_back_subtitle_entry",
		"description": "subtitles:push_back_subtitle_entry()\n-  -\n\nPushes a subtitle entry with timings to be displayed when battle_subtitles:begin is called.\n",
		"body": [
			"subtitles:push_back_subtitle_entry(${1:number start time}, ${2:number end time}, ${3:string text})"
		],
	},
	"docgen:battle_subtitles:push_back_subtitle": {
		"scope": "lua",
		"prefix": "push_back_subtitle",
		"description": "subtitles:push_back_subtitle()\n-  -\n\nPushes a subtitle entry with timings to be displayed when battle_subtitles:begin is called.\n",
		"body": [
			"push_back_subtitle(${1:number start time}, ${2:number end time}, ${3:string subtitle key})"
		],
	},
	"docgen:battle_subtitles:subtitles:push_back_subtitle": {
		"scope": "lua",
		"prefix": "subtitles:push_back_subtitle",
		"description": "subtitles:push_back_subtitle()\n-  -\n\nPushes a subtitle entry with timings to be displayed when battle_subtitles:begin is called.\n",
		"body": [
			"subtitles:push_back_subtitle(${1:number start time}, ${2:number end time}, ${3:string subtitle key})"
		],
	},
	"docgen:battle_subtitles:change_if_borders_drawn": {
		"scope": "lua",
		"prefix": "change_if_borders_drawn",
		"description": "subtitles:change_if_borders_drawn()\n-  -\n\nBy default, a thin black horizontal border is drawn behind a subtitle when it is displayed.\n",
		"body": [
			"change_if_borders_drawn(${1:boolean draw borders})"
		],
	},
	"docgen:battle_subtitles:subtitles:change_if_borders_drawn": {
		"scope": "lua",
		"prefix": "subtitles:change_if_borders_drawn",
		"description": "subtitles:change_if_borders_drawn()\n-  -\n\nBy default, a thin black horizontal border is drawn behind a subtitle when it is displayed.\n",
		"body": [
			"subtitles:change_if_borders_drawn(${1:boolean draw borders})"
		],
	},
	"docgen:battle_subtitles:change_if_top_border_drawn": {
		"scope": "lua",
		"prefix": "change_if_top_border_drawn",
		"description": "subtitles:change_if_top_border_drawn()\n-  -\n\nEnables or disables the display of a second thin black border at the top of the screen when subtitles are displayed.\n",
		"body": [
			"change_if_top_border_drawn(${1:boolean draw top border})"
		],
	},
	"docgen:battle_subtitles:subtitles:change_if_top_border_drawn": {
		"scope": "lua",
		"prefix": "subtitles:change_if_top_border_drawn",
		"description": "subtitles:change_if_top_border_drawn()\n-  -\n\nEnables or disables the display of a second thin black border at the top of the screen when subtitles are displayed.\n",
		"body": [
			"subtitles:change_if_top_border_drawn(${1:boolean draw top border})"
		],
	},
	"docgen:battle_vector:new": {
		"scope": "lua",
		"prefix": "new",
		"description": "battle_vector:new()\n-  -\n\nCreates a new battle_vector object.\n",
		"body": [
			"new(${1:[opt=0] number x}, ${2:[opt=0] number y}, ${3:[opt=0] number z})"
		],
	},
	"docgen:battle_vector:battle_vector:new": {
		"scope": "lua",
		"prefix": "battle_vector:new",
		"description": "battle_vector:new()\n-  -\n\nCreates a new battle_vector object.\n",
		"body": [
			"battle_vector:new(${1:[opt=0] number x}, ${2:[opt=0] number y}, ${3:[opt=0] number z})"
		],
	},
	"docgen:battle_vector:get_x": {
		"scope": "lua",
		"prefix": "get_x",
		"description": "battle_vector:get_x()\n-  -\n\nReturns the x co-ordinate stored by the vector.\n",
		"body": [
			"get_x()"
		],
	},
	"docgen:battle_vector:battle_vector:get_x": {
		"scope": "lua",
		"prefix": "battle_vector:get_x",
		"description": "battle_vector:get_x()\n-  -\n\nReturns the x co-ordinate stored by the vector.\n",
		"body": [
			"battle_vector:get_x()"
		],
	},
	"docgen:battle_vector:get_y": {
		"scope": "lua",
		"prefix": "get_y",
		"description": "battle_vector:get_y()\n-  -\n\nReturns the y co-ordinate stored by the vector.\n",
		"body": [
			"get_y()"
		],
	},
	"docgen:battle_vector:battle_vector:get_y": {
		"scope": "lua",
		"prefix": "battle_vector:get_y",
		"description": "battle_vector:get_y()\n-  -\n\nReturns the y co-ordinate stored by the vector.\n",
		"body": [
			"battle_vector:get_y()"
		],
	},
	"docgen:battle_vector:get_z": {
		"scope": "lua",
		"prefix": "get_z",
		"description": "battle_vector:get_z()\n-  -\n\nReturns the z co-ordinate stored by the vector.\n",
		"body": [
			"get_z()"
		],
	},
	"docgen:battle_vector:battle_vector:get_z": {
		"scope": "lua",
		"prefix": "battle_vector:get_z",
		"description": "battle_vector:get_z()\n-  -\n\nReturns the z co-ordinate stored by the vector.\n",
		"body": [
			"battle_vector:get_z()"
		],
	},
	"docgen:battle_vector:length": {
		"scope": "lua",
		"prefix": "length",
		"description": "battle_vector:length()\n-  -\n\nReturns the distance from the origin [0, 0, 0] to the position of this vector in metres.\n",
		"body": [
			"length()"
		],
	},
	"docgen:battle_vector:battle_vector:length": {
		"scope": "lua",
		"prefix": "battle_vector:length",
		"description": "battle_vector:length()\n-  -\n\nReturns the distance from the origin [0, 0, 0] to the position of this vector in metres.\n",
		"body": [
			"battle_vector:length()"
		],
	},
	"docgen:battle_vector:length_xz": {
		"scope": "lua",
		"prefix": "length_xz",
		"description": "battle_vector:length_xz()\n-  -\n\nReturns the distance from the origin [0, 0] to the position of this vector in metres, disregarding any height differences.\n",
		"body": [
			"length_xz()"
		],
	},
	"docgen:battle_vector:battle_vector:length_xz": {
		"scope": "lua",
		"prefix": "battle_vector:length_xz",
		"description": "battle_vector:length_xz()\n-  -\n\nReturns the distance from the origin [0, 0] to the position of this vector in metres, disregarding any height differences.\n",
		"body": [
			"battle_vector:length_xz()"
		],
	},
	"docgen:battle_vector:set": {
		"scope": "lua",
		"prefix": "set",
		"description": "battle_vector:set()\n-  -\n\nSets a new position for the vector.\n",
		"body": [
			"set(${1:obj vector or x}, ${2:number y}, ${3:number z})"
		],
	},
	"docgen:battle_vector:battle_vector:set": {
		"scope": "lua",
		"prefix": "battle_vector:set",
		"description": "battle_vector:set()\n-  -\n\nSets a new position for the vector.\n",
		"body": [
			"battle_vector:set(${1:obj vector or x}, ${2:number y}, ${3:number z})"
		],
	},
	"docgen:battle_vector:set_x": {
		"scope": "lua",
		"prefix": "set_x",
		"description": "battle_vector:set_x()\n-  -\n\nSets a new x co-ordinate for the vector.\n",
		"body": [
			"set_x(${1:number x})"
		],
	},
	"docgen:battle_vector:battle_vector:set_x": {
		"scope": "lua",
		"prefix": "battle_vector:set_x",
		"description": "battle_vector:set_x()\n-  -\n\nSets a new x co-ordinate for the vector.\n",
		"body": [
			"battle_vector:set_x(${1:number x})"
		],
	},
	"docgen:battle_vector:set_y": {
		"scope": "lua",
		"prefix": "set_y",
		"description": "battle_vector:set_y()\n-  -\n\nSets a new y co-ordinate for the vector.\n",
		"body": [
			"set_y(${1:number y})"
		],
	},
	"docgen:battle_vector:battle_vector:set_y": {
		"scope": "lua",
		"prefix": "battle_vector:set_y",
		"description": "battle_vector:set_y()\n-  -\n\nSets a new y co-ordinate for the vector.\n",
		"body": [
			"battle_vector:set_y(${1:number y})"
		],
	},
	"docgen:battle_vector:set_z": {
		"scope": "lua",
		"prefix": "set_z",
		"description": "battle_vector:set_z()\n-  -\n\nSets a new z co-ordinate for the vector.\n",
		"body": [
			"set_z(${1:number z})"
		],
	},
	"docgen:battle_vector:battle_vector:set_z": {
		"scope": "lua",
		"prefix": "battle_vector:set_z",
		"description": "battle_vector:set_z()\n-  -\n\nSets a new z co-ordinate for the vector.\n",
		"body": [
			"battle_vector:set_z(${1:number z})"
		],
	},
	"docgen:battle_vector:distance": {
		"scope": "lua",
		"prefix": "distance",
		"description": "battle_vector:distance()\n-  -\n\nReturns the distance from a supplied vector to the subject vector in metres.\n",
		"body": [
			"distance(${1:battle_vector vector})"
		],
	},
	"docgen:battle_vector:battle_vector:distance": {
		"scope": "lua",
		"prefix": "battle_vector:distance",
		"description": "battle_vector:distance()\n-  -\n\nReturns the distance from a supplied vector to the subject vector in metres.\n",
		"body": [
			"battle_vector:distance(${1:battle_vector vector})"
		],
	},
	"docgen:battle_vector:distance_xz": {
		"scope": "lua",
		"prefix": "distance_xz",
		"description": "battle_vector:distance_xz()\n-  -\n\nReturns the distance from a supplied vector to the subject vector in metres, but disregarding any height difference.\n",
		"body": [
			"distance_xz(${1:battle_vector vector})"
		],
	},
	"docgen:battle_vector:battle_vector:distance_xz": {
		"scope": "lua",
		"prefix": "battle_vector:distance_xz",
		"description": "battle_vector:distance_xz()\n-  -\n\nReturns the distance from a supplied vector to the subject vector in metres, but disregarding any height difference.\n",
		"body": [
			"battle_vector:distance_xz(${1:battle_vector vector})"
		],
	},
	"docgen:battle_debug_drawing:draw_white_circle_on_terrain": {
		"scope": "lua",
		"prefix": "draw_white_circle_on_terrain",
		"description": "debug_drawing:draw_white_circle_on_terrain()\n-  -\n\nDraws a white circle on the terrain.\n",
		"body": [
			"draw_white_circle_on_terrain(${1:battle_vector position}, ${2:number radius}, ${3:number duration})"
		],
	},
	"docgen:battle_debug_drawing:debug_drawing:draw_white_circle_on_terrain": {
		"scope": "lua",
		"prefix": "debug_drawing:draw_white_circle_on_terrain",
		"description": "debug_drawing:draw_white_circle_on_terrain()\n-  -\n\nDraws a white circle on the terrain.\n",
		"body": [
			"debug_drawing:draw_white_circle_on_terrain(${1:battle_vector position}, ${2:number radius}, ${3:number duration})"
		],
	},
	"docgen:battle_debug_drawing:draw_white_line_on_terrain": {
		"scope": "lua",
		"prefix": "draw_white_line_on_terrain",
		"description": "debug_drawing:draw_white_line_on_terrain()\n-  -\n\nDraws a white line on the terrain.\n",
		"body": [
			"draw_white_line_on_terrain(${1:battle_vector position}, ${2:battle_vector position}, ${3:number duration})"
		],
	},
	"docgen:battle_debug_drawing:debug_drawing:draw_white_line_on_terrain": {
		"scope": "lua",
		"prefix": "debug_drawing:draw_white_line_on_terrain",
		"description": "debug_drawing:draw_white_line_on_terrain()\n-  -\n\nDraws a white line on the terrain.\n",
		"body": [
			"debug_drawing:draw_white_line_on_terrain(${1:battle_vector position}, ${2:battle_vector position}, ${3:number duration})"
		],
	},
	"docgen:battle_debug_drawing:draw_white_peg_on_terrain": {
		"scope": "lua",
		"prefix": "draw_white_peg_on_terrain",
		"description": "debug_drawing:draw_white_peg_on_terrain()\n-  -\n\nDraws a vertical white line on the terrain.\n",
		"body": [
			"draw_white_peg_on_terrain(${1:battle_vector position}, ${2:number duration})"
		],
	},
	"docgen:battle_debug_drawing:debug_drawing:draw_white_peg_on_terrain": {
		"scope": "lua",
		"prefix": "debug_drawing:draw_white_peg_on_terrain",
		"description": "debug_drawing:draw_white_peg_on_terrain()\n-  -\n\nDraws a vertical white line on the terrain.\n",
		"body": [
			"debug_drawing:draw_white_peg_on_terrain(${1:battle_vector position}, ${2:number duration})"
		],
	},
	"docgen:battle_debug_drawing:draw_circle_on_terrain": {
		"scope": "lua",
		"prefix": "draw_circle_on_terrain",
		"description": "debug_drawing:draw_circle_on_terrain()\n-  -\n\nDraws a circle on the terrain of a supplied colour.\n",
		"body": [
			"draw_circle_on_terrain(${1:battle_vector position}, ${2:number radius}, ${3:number duration}, ${4:battle_colour colour})"
		],
	},
	"docgen:battle_debug_drawing:debug_drawing:draw_circle_on_terrain": {
		"scope": "lua",
		"prefix": "debug_drawing:draw_circle_on_terrain",
		"description": "debug_drawing:draw_circle_on_terrain()\n-  -\n\nDraws a circle on the terrain of a supplied colour.\n",
		"body": [
			"debug_drawing:draw_circle_on_terrain(${1:battle_vector position}, ${2:number radius}, ${3:number duration}, ${4:battle_colour colour})"
		],
	},
	"docgen:battle_debug_drawing:draw_line_on_terrain": {
		"scope": "lua",
		"prefix": "draw_line_on_terrain",
		"description": "debug_drawing:draw_line_on_terrain()\n-  -\n\nDraws a line on the terrain of a supplied colour.\n",
		"body": [
			"draw_line_on_terrain(${1:battle_vector position}, ${2:battle_vector position}, ${3:number duration}, ${4:battle_colour colour})"
		],
	},
	"docgen:battle_debug_drawing:debug_drawing:draw_line_on_terrain": {
		"scope": "lua",
		"prefix": "debug_drawing:draw_line_on_terrain",
		"description": "debug_drawing:draw_line_on_terrain()\n-  -\n\nDraws a line on the terrain of a supplied colour.\n",
		"body": [
			"debug_drawing:draw_line_on_terrain(${1:battle_vector position}, ${2:battle_vector position}, ${3:number duration}, ${4:battle_colour colour})"
		],
	},
	"docgen:battle_debug_drawing:draw_peg_on_terrain": {
		"scope": "lua",
		"prefix": "draw_peg_on_terrain",
		"description": "debug_drawing:draw_peg_on_terrain()\n-  -\n\nDraws a vertical line on the terrain of a supplied colour.\n",
		"body": [
			"draw_peg_on_terrain(${1:battle_vector position}, ${2:number duration}, ${3:battle_colour colour})"
		],
	},
	"docgen:battle_debug_drawing:debug_drawing:draw_peg_on_terrain": {
		"scope": "lua",
		"prefix": "debug_drawing:draw_peg_on_terrain",
		"description": "debug_drawing:draw_peg_on_terrain()\n-  -\n\nDraws a vertical line on the terrain of a supplied colour.\n",
		"body": [
			"debug_drawing:draw_peg_on_terrain(${1:battle_vector position}, ${2:number duration}, ${3:battle_colour colour})"
		],
	},
	"docgen:battle_debug_drawing:draw_2d_text": {
		"scope": "lua",
		"prefix": "draw_2d_text",
		"description": "debug_drawing:draw_2d_text()\n-  -\n\nDraws some 2D debug text.\n",
		"body": [
			"draw_2d_text(${1:string text}, ${2:number duration}, ${3:number x}, ${4:number y})"
		],
	},
	"docgen:battle_debug_drawing:debug_drawing:draw_2d_text": {
		"scope": "lua",
		"prefix": "debug_drawing:draw_2d_text",
		"description": "debug_drawing:draw_2d_text()\n-  -\n\nDraws some 2D debug text.\n",
		"body": [
			"debug_drawing:draw_2d_text(${1:string text}, ${2:number duration}, ${3:number x}, ${4:number y})"
		],
	},
	"docgen:battle_debug_drawing:draw_3d_text": {
		"scope": "lua",
		"prefix": "draw_3d_text",
		"description": "debug_drawing:draw_3d_text()\n-  -\n\nDraws some 3D debug text.\n",
		"body": [
			"draw_3d_text(${1:string text}, ${2:number duration}, ${3:number x}, ${4:number y}, ${5:number z})"
		],
	},
	"docgen:battle_debug_drawing:debug_drawing:draw_3d_text": {
		"scope": "lua",
		"prefix": "debug_drawing:draw_3d_text",
		"description": "debug_drawing:draw_3d_text()\n-  -\n\nDraws some 3D debug text.\n",
		"body": [
			"debug_drawing:draw_3d_text(${1:string text}, ${2:number duration}, ${3:number x}, ${4:number y}, ${5:number z})"
		],
	},
	"docgen:battle_colour:new": {
		"scope": "lua",
		"prefix": "new",
		"description": "battle_colour:new()\n-  -\n\nCreates and returns a new <code>battle_colour</code> object.\n",
		"body": [
			"new(${1:number red}, ${2:number green}, ${3:number blue})"
		],
	},
	"docgen:battle_colour:battle_colour:new": {
		"scope": "lua",
		"prefix": "battle_colour:new",
		"description": "battle_colour:new()\n-  -\n\nCreates and returns a new <code>battle_colour</code> object.\n",
		"body": [
			"battle_colour:new(${1:number red}, ${2:number green}, ${3:number blue})"
		],
	},
	"docgen:battle_assault_equipment:vehicle_count": {
		"scope": "lua",
		"prefix": "vehicle_count",
		"description": "assault_equipment:vehicle_count()\n-  -\n\nReturns the number of vehicles in the collection.\n",
		"body": [
			"vehicle_count()"
		],
	},
	"docgen:battle_assault_equipment:assault_equipment:vehicle_count": {
		"scope": "lua",
		"prefix": "assault_equipment:vehicle_count",
		"description": "assault_equipment:vehicle_count()\n-  -\n\nReturns the number of vehicles in the collection.\n",
		"body": [
			"assault_equipment:vehicle_count()"
		],
	},
	"docgen:battle_assault_equipment:vehicle_item": {
		"scope": "lua",
		"prefix": "vehicle_item",
		"description": "assault_equipment:vehicle_item()\n-  -\n\nReturns the vehicles at the specified index value in the collection.\n",
		"body": [
			"vehicle_item(${1:number index})"
		],
	},
	"docgen:battle_assault_equipment:assault_equipment:vehicle_item": {
		"scope": "lua",
		"prefix": "assault_equipment:vehicle_item",
		"description": "assault_equipment:vehicle_item()\n-  -\n\nReturns the vehicles at the specified index value in the collection.\n",
		"body": [
			"assault_equipment:vehicle_item(${1:number index})"
		],
	},
	"docgen:battle_vehicle:position": {
		"scope": "lua",
		"prefix": "position",
		"description": "vehicle:position()\n-  -\n\nReturns the position of the vehicle.\n",
		"body": [
			"position()"
		],
	},
	"docgen:battle_vehicle:vehicle:position": {
		"scope": "lua",
		"prefix": "vehicle:position",
		"description": "vehicle:position()\n-  -\n\nReturns the position of the vehicle.\n",
		"body": [
			"vehicle:position()"
		],
	},
	"docgen:ai_planner:add_units": {
		"scope": "lua",
		"prefix": "add_units",
		"description": "ai_planner:add_units()\n-  -\n\nAdds units to the ai planner.\n",
		"body": [
			"add_units(${1:... units})"
		],
	},
	"docgen:ai_planner:ai_planner:add_units": {
		"scope": "lua",
		"prefix": "ai_planner:add_units",
		"description": "ai_planner:add_units()\n-  -\n\nAdds units to the ai planner.\n",
		"body": [
			"ai_planner:add_units(${1:... units})"
		],
	},
	"docgen:ai_planner:remove_units": {
		"scope": "lua",
		"prefix": "remove_units",
		"description": "ai_planner:remove_units()\n-  -\n\nRemoves units from the ai planner.\n",
		"body": [
			"remove_units(${1:... units})"
		],
	},
	"docgen:ai_planner:ai_planner:remove_units": {
		"scope": "lua",
		"prefix": "ai_planner:remove_units",
		"description": "ai_planner:remove_units()\n-  -\n\nRemoves units from the ai planner.\n",
		"body": [
			"ai_planner:remove_units(${1:... units})"
		],
	},
	"docgen:ai_planner:defend_position": {
		"scope": "lua",
		"prefix": "defend_position",
		"description": "ai_planner:defend_position()\n-  -\n\nInstructs units in the ai planner to adopt a defensive formation, then move to and defend a specified position from any enemies, staying within a specified radius.\n",
		"body": [
			"defend_position(${1:battle_vector position}, ${2:number radius})"
		],
	},
	"docgen:ai_planner:ai_planner:defend_position": {
		"scope": "lua",
		"prefix": "ai_planner:defend_position",
		"description": "ai_planner:defend_position()\n-  -\n\nInstructs units in the ai planner to adopt a defensive formation, then move to and defend a specified position from any enemies, staying within a specified radius.\n",
		"body": [
			"ai_planner:defend_position(${1:battle_vector position}, ${2:number radius})"
		],
	},
	"docgen:ai_planner:attack_unit": {
		"scope": "lua",
		"prefix": "attack_unit",
		"description": "ai_planner:attack_unit()\n-  -\n\nInstructs units in the ai planner to adopt an offensive formation and then attack a specified unit and any other nearby enemies.\n",
		"body": [
			"attack_unit(${1:battle_unit target})"
		],
	},
	"docgen:ai_planner:ai_planner:attack_unit": {
		"scope": "lua",
		"prefix": "ai_planner:attack_unit",
		"description": "ai_planner:attack_unit()\n-  -\n\nInstructs units in the ai planner to adopt an offensive formation and then attack a specified unit and any other nearby enemies.\n",
		"body": [
			"ai_planner:attack_unit(${1:battle_unit target})"
		],
	},
	"docgen:ai_planner:move_to_position": {
		"scope": "lua",
		"prefix": "move_to_position",
		"description": "ai_planner:move_to_position()\n-  -\n\nInstructs units in the ai planner to adopt an movement formation and then move to a specified position.\n",
		"body": [
			"move_to_position(${1:battle_vector position})"
		],
	},
	"docgen:ai_planner:ai_planner:move_to_position": {
		"scope": "lua",
		"prefix": "ai_planner:move_to_position",
		"description": "ai_planner:move_to_position()\n-  -\n\nInstructs units in the ai planner to adopt an movement formation and then move to a specified position.\n",
		"body": [
			"ai_planner:move_to_position(${1:battle_vector position})"
		],
	},
	"docgen:ai_planner:clear_objective": {
		"scope": "lua",
		"prefix": "clear_objective",
		"description": "ai_planner:clear_objective()\n-  -\n\nClears the current order of the ai planner.\n",
		"body": [
			"clear_objective()"
		],
	},
	"docgen:ai_planner:ai_planner:clear_objective": {
		"scope": "lua",
		"prefix": "ai_planner:clear_objective",
		"description": "ai_planner:clear_objective()\n-  -\n\nClears the current order of the ai planner.\n",
		"body": [
			"ai_planner:clear_objective()"
		],
	},
	"docgen:uicomponent:Id": {
		"scope": "lua",
		"prefix": "Id",
		"description": "uicomponent:Id()\n-  -\n\nReturns the string name of this uicomponent.\n",
		"body": [
			"Id()"
		],
	},
	"docgen:uicomponent:uicomponent:Id": {
		"scope": "lua",
		"prefix": "uicomponent:Id",
		"description": "uicomponent:Id()\n-  -\n\nReturns the string name of this uicomponent.\n",
		"body": [
			"uicomponent:Id()"
		],
	},
	"docgen:uicomponent:CallbackId": {
		"scope": "lua",
		"prefix": "CallbackId",
		"description": "uicomponent:CallbackId()\n-  -\n\nReturns the callback id of this uicomponent.\n",
		"body": [
			"CallbackId()"
		],
	},
	"docgen:uicomponent:uicomponent:CallbackId": {
		"scope": "lua",
		"prefix": "uicomponent:CallbackId",
		"description": "uicomponent:CallbackId()\n-  -\n\nReturns the callback id of this uicomponent.\n",
		"body": [
			"uicomponent:CallbackId()"
		],
	},
	"docgen:uicomponent:Address": {
		"scope": "lua",
		"prefix": "Address",
		"description": "uicomponent:Address()\n-  -\n\nReturns the address of this uicomponent, which is used for certain other functions on this interface such as uicomponent:Adopt.\n",
		"body": [
			"Address()"
		],
	},
	"docgen:uicomponent:uicomponent:Address": {
		"scope": "lua",
		"prefix": "uicomponent:Address",
		"description": "uicomponent:Address()\n-  -\n\nReturns the address of this uicomponent, which is used for certain other functions on this interface such as uicomponent:Adopt.\n",
		"body": [
			"uicomponent:Address()"
		],
	},
	"docgen:uicomponent:Layout": {
		"scope": "lua",
		"prefix": "Layout",
		"description": "uicomponent:Layout()\n-  -\n\nCalls the layout function for the uicomponent, forcing it to refresh its display.\n",
		"body": [
			"Layout()"
		],
	},
	"docgen:uicomponent:uicomponent:Layout": {
		"scope": "lua",
		"prefix": "uicomponent:Layout",
		"description": "uicomponent:Layout()\n-  -\n\nCalls the layout function for the uicomponent, forcing it to refresh its display.\n",
		"body": [
			"uicomponent:Layout()"
		],
	},
	"docgen:uicomponent:IsDragged": {
		"scope": "lua",
		"prefix": "IsDragged",
		"description": "uicomponent:IsDragged()\n-  -\n\nReturns whether this uicomponent is currently being dragged around the screen by the player left-clicking and dragging.\n",
		"body": [
			"IsDragged()"
		],
	},
	"docgen:uicomponent:uicomponent:IsDragged": {
		"scope": "lua",
		"prefix": "uicomponent:IsDragged",
		"description": "uicomponent:IsDragged()\n-  -\n\nReturns whether this uicomponent is currently being dragged around the screen by the player left-clicking and dragging.\n",
		"body": [
			"uicomponent:IsDragged()"
		],
	},
	"docgen:uicomponent:IsMouseOverChildren": {
		"scope": "lua",
		"prefix": "IsMouseOverChildren",
		"description": "uicomponent:IsMouseOverChildren()\n-  -\n\nReturns whether or not the mouse cursor is currently over this uicomponent or any of its children.\n",
		"body": [
			"IsMouseOverChildren()"
		],
	},
	"docgen:uicomponent:uicomponent:IsMouseOverChildren": {
		"scope": "lua",
		"prefix": "uicomponent:IsMouseOverChildren",
		"description": "uicomponent:IsMouseOverChildren()\n-  -\n\nReturns whether or not the mouse cursor is currently over this uicomponent or any of its children.\n",
		"body": [
			"uicomponent:IsMouseOverChildren()"
		],
	},
	"docgen:uicomponent:SetContextObject": {
		"scope": "lua",
		"prefix": "SetContextObject",
		"description": "uicomponent:SetContextObject()\n-  -\n\nSets the context object id of the uicomponent.\n",
		"body": [
			"SetContextObject(${1:string context object id})"
		],
	},
	"docgen:uicomponent:uicomponent:SetContextObject": {
		"scope": "lua",
		"prefix": "uicomponent:SetContextObject",
		"description": "uicomponent:SetContextObject()\n-  -\n\nSets the context object id of the uicomponent.\n",
		"body": [
			"uicomponent:SetContextObject(${1:string context object id})"
		],
	},
	"docgen:uicomponent:CurrentState": {
		"scope": "lua",
		"prefix": "CurrentState",
		"description": "uicomponent:CurrentState()\n-  -\n\nReturns the name of the current state of the uicomponent.\n",
		"body": [
			"CurrentState()"
		],
	},
	"docgen:uicomponent:uicomponent:CurrentState": {
		"scope": "lua",
		"prefix": "uicomponent:CurrentState",
		"description": "uicomponent:CurrentState()\n-  -\n\nReturns the name of the current state of the uicomponent.\n",
		"body": [
			"uicomponent:CurrentState()"
		],
	},
	"docgen:uicomponent:SetState": {
		"scope": "lua",
		"prefix": "SetState",
		"description": "uicomponent:SetState()\n-  -\n\nSets the state of the uicomponent to the specified state name.\n",
		"body": [
			"SetState(${1:string state name})"
		],
	},
	"docgen:uicomponent:uicomponent:SetState": {
		"scope": "lua",
		"prefix": "uicomponent:SetState",
		"description": "uicomponent:SetState()\n-  -\n\nSets the state of the uicomponent to the specified state name.\n",
		"body": [
			"uicomponent:SetState(${1:string state name})"
		],
	},
	"docgen:uicomponent:NumStates": {
		"scope": "lua",
		"prefix": "NumStates",
		"description": "uicomponent:NumStates()\n-  -\n\nReturns the number of states this uicomponent contains.\n",
		"body": [
			"NumStates()"
		],
	},
	"docgen:uicomponent:uicomponent:NumStates": {
		"scope": "lua",
		"prefix": "uicomponent:NumStates",
		"description": "uicomponent:NumStates()\n-  -\n\nReturns the number of states this uicomponent contains.\n",
		"body": [
			"uicomponent:NumStates()"
		],
	},
	"docgen:uicomponent:GetStateByIndex": {
		"scope": "lua",
		"prefix": "GetStateByIndex",
		"description": "uicomponent:GetStateByIndex()\n-  -\n\nReturns the name of the state at the specified index.\n",
		"body": [
			"GetStateByIndex(${1:[opt=0] number state index})"
		],
	},
	"docgen:uicomponent:uicomponent:GetStateByIndex": {
		"scope": "lua",
		"prefix": "uicomponent:GetStateByIndex",
		"description": "uicomponent:GetStateByIndex()\n-  -\n\nReturns the name of the state at the specified index.\n",
		"body": [
			"uicomponent:GetStateByIndex(${1:[opt=0] number state index})"
		],
	},
	"docgen:uicomponent:Width": {
		"scope": "lua",
		"prefix": "Width",
		"description": "uicomponent:Width()\n-  -\n\nReturns the current width of the uicomponent in pixels.\n",
		"body": [
			"Width()"
		],
	},
	"docgen:uicomponent:uicomponent:Width": {
		"scope": "lua",
		"prefix": "uicomponent:Width",
		"description": "uicomponent:Width()\n-  -\n\nReturns the current width of the uicomponent in pixels.\n",
		"body": [
			"uicomponent:Width()"
		],
	},
	"docgen:uicomponent:Height": {
		"scope": "lua",
		"prefix": "Height",
		"description": "uicomponent:Height()\n-  -\n\nReturns the current height of the uicomponent in pixels.\n",
		"body": [
			"Height()"
		],
	},
	"docgen:uicomponent:uicomponent:Height": {
		"scope": "lua",
		"prefix": "uicomponent:Height",
		"description": "uicomponent:Height()\n-  -\n\nReturns the current height of the uicomponent in pixels.\n",
		"body": [
			"uicomponent:Height()"
		],
	},
	"docgen:uicomponent:Dimensions": {
		"scope": "lua",
		"prefix": "Dimensions",
		"description": "uicomponent:Dimensions()\n-  -\n\nReturns the width and height of the uicomponent in pixels.\n",
		"body": [
			"Dimensions()"
		],
	},
	"docgen:uicomponent:uicomponent:Dimensions": {
		"scope": "lua",
		"prefix": "uicomponent:Dimensions",
		"description": "uicomponent:Dimensions()\n-  -\n\nReturns the width and height of the uicomponent in pixels.\n",
		"body": [
			"uicomponent:Dimensions()"
		],
	},
	"docgen:uicomponent:Bounds": {
		"scope": "lua",
		"prefix": "Bounds",
		"description": "uicomponent:Bounds()\n-  -\n\nReturns the maximum width and height of this uicomponent, including any of its children.\n",
		"body": [
			"Bounds()"
		],
	},
	"docgen:uicomponent:uicomponent:Bounds": {
		"scope": "lua",
		"prefix": "uicomponent:Bounds",
		"description": "uicomponent:Bounds()\n-  -\n\nReturns the maximum width and height of this uicomponent, including any of its children.\n",
		"body": [
			"uicomponent:Bounds()"
		],
	},
	"docgen:uicomponent:Position": {
		"scope": "lua",
		"prefix": "Position",
		"description": "uicomponent:Position()\n-  -\n\nReturns the position of the top-left corner of the uicomponent, from the top-left corner of the game window/screen.\n",
		"body": [
			"Position()"
		],
	},
	"docgen:uicomponent:uicomponent:Position": {
		"scope": "lua",
		"prefix": "uicomponent:Position",
		"description": "uicomponent:Position()\n-  -\n\nReturns the position of the top-left corner of the uicomponent, from the top-left corner of the game window/screen.\n",
		"body": [
			"uicomponent:Position()"
		],
	},
	"docgen:uicomponent:MoveTo": {
		"scope": "lua",
		"prefix": "MoveTo",
		"description": "uicomponent:MoveTo()\n-  -\n\nSets the uicomponent to a new screen position, measured from the top-left corner of the game window/screen.\n",
		"body": [
			"MoveTo(${1:number x}, ${2:number y})"
		],
	},
	"docgen:uicomponent:uicomponent:MoveTo": {
		"scope": "lua",
		"prefix": "uicomponent:MoveTo",
		"description": "uicomponent:MoveTo()\n-  -\n\nSets the uicomponent to a new screen position, measured from the top-left corner of the game window/screen.\n",
		"body": [
			"uicomponent:MoveTo(${1:number x}, ${2:number y})"
		],
	},
	"docgen:uicomponent:SetMoveable": {
		"scope": "lua",
		"prefix": "SetMoveable",
		"description": "uicomponent:SetMoveable()\n-  -\n\nSets this uicomponent to be moveable or not.\n",
		"body": [
			"SetMoveable(${1:boolean is moveable})"
		],
	},
	"docgen:uicomponent:uicomponent:SetMoveable": {
		"scope": "lua",
		"prefix": "uicomponent:SetMoveable",
		"description": "uicomponent:SetMoveable()\n-  -\n\nSets this uicomponent to be moveable or not.\n",
		"body": [
			"uicomponent:SetMoveable(${1:boolean is moveable})"
		],
	},
	"docgen:uicomponent:IsMoveable": {
		"scope": "lua",
		"prefix": "IsMoveable",
		"description": "uicomponent:IsMoveable()\n-  -\n\nReturns whether this uicomponent is moveable or not.\n",
		"body": [
			"IsMoveable()"
		],
	},
	"docgen:uicomponent:uicomponent:IsMoveable": {
		"scope": "lua",
		"prefix": "uicomponent:IsMoveable",
		"description": "uicomponent:IsMoveable()\n-  -\n\nReturns whether this uicomponent is moveable or not.\n",
		"body": [
			"uicomponent:IsMoveable()"
		],
	},
	"docgen:uicomponent:Resize": {
		"scope": "lua",
		"prefix": "Resize",
		"description": "uicomponent:Resize()\n-  -\n\nResizes the uicomponent.\n",
		"body": [
			"Resize(${1:number width}, ${2:number height}, ${3:[opt=true] boolean resize children})"
		],
	},
	"docgen:uicomponent:uicomponent:Resize": {
		"scope": "lua",
		"prefix": "uicomponent:Resize",
		"description": "uicomponent:Resize()\n-  -\n\nResizes the uicomponent.\n",
		"body": [
			"uicomponent:Resize(${1:number width}, ${2:number height}, ${3:[opt=true] boolean resize children})"
		],
	},
	"docgen:uicomponent:SetCanResizeHeight": {
		"scope": "lua",
		"prefix": "SetCanResizeHeight",
		"description": "uicomponent:SetCanResizeHeight()\n-  -\n\nAllows or disallows the height of this uicomponent to be changed by code or script.\n",
		"body": [
			"SetCanResizeHeight(${1:[opt=true] boolean can resize})"
		],
	},
	"docgen:uicomponent:uicomponent:SetCanResizeHeight": {
		"scope": "lua",
		"prefix": "uicomponent:SetCanResizeHeight",
		"description": "uicomponent:SetCanResizeHeight()\n-  -\n\nAllows or disallows the height of this uicomponent to be changed by code or script.\n",
		"body": [
			"uicomponent:SetCanResizeHeight(${1:[opt=true] boolean can resize})"
		],
	},
	"docgen:uicomponent:SetCanResizeWidth": {
		"scope": "lua",
		"prefix": "SetCanResizeWidth",
		"description": "uicomponent:SetCanResizeWidth()\n-  -\n\nAllows or disallows the width of this uicomponent to be changed by code or script.\n",
		"body": [
			"SetCanResizeWidth(${1:[opt=true] boolean can resize})"
		],
	},
	"docgen:uicomponent:uicomponent:SetCanResizeWidth": {
		"scope": "lua",
		"prefix": "uicomponent:SetCanResizeWidth",
		"description": "uicomponent:SetCanResizeWidth()\n-  -\n\nAllows or disallows the width of this uicomponent to be changed by code or script.\n",
		"body": [
			"uicomponent:SetCanResizeWidth(${1:[opt=true] boolean can resize})"
		],
	},
	"docgen:uicomponent:ResizeTextResizingComponentToInitialSize": {
		"scope": "lua",
		"prefix": "ResizeTextResizingComponentToInitialSize",
		"description": "uicomponent:ResizeTextResizingComponentToInitialSize()\n-  -\n\nMany uicomponents are set to resize based on the text they are displaying.\n",
		"body": [
			"ResizeTextResizingComponentToInitialSize(${1:number width}, ${2:number height})"
		],
	},
	"docgen:uicomponent:uicomponent:ResizeTextResizingComponentToInitialSize": {
		"scope": "lua",
		"prefix": "uicomponent:ResizeTextResizingComponentToInitialSize",
		"description": "uicomponent:ResizeTextResizingComponentToInitialSize()\n-  -\n\nMany uicomponents are set to resize based on the text they are displaying.\n",
		"body": [
			"uicomponent:ResizeTextResizingComponentToInitialSize(${1:number width}, ${2:number height})"
		],
	},
	"docgen:uicomponent:TextDimensions": {
		"scope": "lua",
		"prefix": "TextDimensions",
		"description": "uicomponent:TextDimensions()\n-  -\n\nReturns the dimensions of the text displayed on the uicomponent, if any.\n",
		"body": [
			"TextDimensions()"
		],
	},
	"docgen:uicomponent:uicomponent:TextDimensions": {
		"scope": "lua",
		"prefix": "uicomponent:TextDimensions",
		"description": "uicomponent:TextDimensions()\n-  -\n\nReturns the dimensions of the text displayed on the uicomponent, if any.\n",
		"body": [
			"uicomponent:TextDimensions()"
		],
	},
	"docgen:uicomponent:TextDimensionsForText": {
		"scope": "lua",
		"prefix": "TextDimensionsForText",
		"description": "uicomponent:TextDimensionsForText()\n-  -\n\nReturns the dimensions of the some supplied text, were it to be displayed on the uicomponent.\n",
		"body": [
			"TextDimensionsForText(${1:string text})"
		],
	},
	"docgen:uicomponent:uicomponent:TextDimensionsForText": {
		"scope": "lua",
		"prefix": "uicomponent:TextDimensionsForText",
		"description": "uicomponent:TextDimensionsForText()\n-  -\n\nReturns the dimensions of the some supplied text, were it to be displayed on the uicomponent.\n",
		"body": [
			"uicomponent:TextDimensionsForText(${1:string text})"
		],
	},
	"docgen:uicomponent:WidthOfTextLine": {
		"scope": "lua",
		"prefix": "WidthOfTextLine",
		"description": "uicomponent:WidthOfTextLine()\n-  -\n\nReturns the width of a text line on the current uicomponent.\n",
		"body": [
			"WidthOfTextLine(${1:string text line})"
		],
	},
	"docgen:uicomponent:uicomponent:WidthOfTextLine": {
		"scope": "lua",
		"prefix": "uicomponent:WidthOfTextLine",
		"description": "uicomponent:WidthOfTextLine()\n-  -\n\nReturns the width of a text line on the current uicomponent.\n",
		"body": [
			"uicomponent:WidthOfTextLine(${1:string text line})"
		],
	},
	"docgen:uicomponent:DockingPoint": {
		"scope": "lua",
		"prefix": "DockingPoint",
		"description": "uicomponent:DockingPoint()\n-  -\n\nReturns the docking point of this uicomponent.\n",
		"body": [
			"DockingPoint()"
		],
	},
	"docgen:uicomponent:uicomponent:DockingPoint": {
		"scope": "lua",
		"prefix": "uicomponent:DockingPoint",
		"description": "uicomponent:DockingPoint()\n-  -\n\nReturns the docking point of this uicomponent.\n",
		"body": [
			"uicomponent:DockingPoint()"
		],
	},
	"docgen:uicomponent:SetDockingPoint": {
		"scope": "lua",
		"prefix": "SetDockingPoint",
		"description": "uicomponent:SetDockingPoint()\n-  -\n\nSets the docking point of the uicomponent to the specified value.\n",
		"body": [
			"SetDockingPoint(${1:number dock point})"
		],
	},
	"docgen:uicomponent:uicomponent:SetDockingPoint": {
		"scope": "lua",
		"prefix": "uicomponent:SetDockingPoint",
		"description": "uicomponent:SetDockingPoint()\n-  -\n\nSets the docking point of the uicomponent to the specified value.\n",
		"body": [
			"uicomponent:SetDockingPoint(${1:number dock point})"
		],
	},
	"docgen:uicomponent:SetDockOffset": {
		"scope": "lua",
		"prefix": "SetDockOffset",
		"description": "uicomponent:SetDockOffset()\n-  -\n\nSets a docking offset for this component, which offsets where the component is drawn from the docking point set.\n",
		"body": [
			"SetDockOffset(${1:number x offset}, ${2:number y offset})"
		],
	},
	"docgen:uicomponent:uicomponent:SetDockOffset": {
		"scope": "lua",
		"prefix": "uicomponent:SetDockOffset",
		"description": "uicomponent:SetDockOffset()\n-  -\n\nSets a docking offset for this component, which offsets where the component is drawn from the docking point set.\n",
		"body": [
			"uicomponent:SetDockOffset(${1:number x offset}, ${2:number y offset})"
		],
	},
	"docgen:uicomponent:GetDockOffset": {
		"scope": "lua",
		"prefix": "GetDockOffset",
		"description": "uicomponent:GetDockOffset()\n-  -\n\nReturns the docking offset set for this component, which offsets where the component is drawn from the docking point set.\n",
		"body": [
			"GetDockOffset()"
		],
	},
	"docgen:uicomponent:uicomponent:GetDockOffset": {
		"scope": "lua",
		"prefix": "uicomponent:GetDockOffset",
		"description": "uicomponent:GetDockOffset()\n-  -\n\nReturns the docking offset set for this component, which offsets where the component is drawn from the docking point set.\n",
		"body": [
			"uicomponent:GetDockOffset()"
		],
	},
	"docgen:uicomponent:Find": {
		"scope": "lua",
		"prefix": "Find",
		"description": "uicomponent:Find()\n-  -\n\nFinds and returns a child of this uicomponent by string name or by numeric index.\n",
		"body": [
			"Find(${1:variable identifier}, ${2:[opt=true] boolean assert on fail})"
		],
	},
	"docgen:uicomponent:uicomponent:Find": {
		"scope": "lua",
		"prefix": "uicomponent:Find",
		"description": "uicomponent:Find()\n-  -\n\nFinds and returns a child of this uicomponent by string name or by numeric index.\n",
		"body": [
			"uicomponent:Find(${1:variable identifier}, ${2:[opt=true] boolean assert on fail})"
		],
	},
	"docgen:uicomponent:SequentialFind": {
		"scope": "lua",
		"prefix": "SequentialFind",
		"description": "uicomponent:SequentialFind()\n-  -\n\nFinds and returns a child of this uicomponent by a series of string names and numeric indexes.\n",
		"body": [
			"SequentialFind(${1:... identifiers})"
		],
	},
	"docgen:uicomponent:uicomponent:SequentialFind": {
		"scope": "lua",
		"prefix": "uicomponent:SequentialFind",
		"description": "uicomponent:SequentialFind()\n-  -\n\nFinds and returns a child of this uicomponent by a series of string names and numeric indexes.\n",
		"body": [
			"uicomponent:SequentialFind(${1:... identifiers})"
		],
	},
	"docgen:uicomponent:ChildCount": {
		"scope": "lua",
		"prefix": "ChildCount",
		"description": "uicomponent:ChildCount()\n-  -\n\nReturns the number of immediate children this uicomponent has.\n",
		"body": [
			"ChildCount()"
		],
	},
	"docgen:uicomponent:uicomponent:ChildCount": {
		"scope": "lua",
		"prefix": "uicomponent:ChildCount",
		"description": "uicomponent:ChildCount()\n-  -\n\nReturns the number of immediate children this uicomponent has.\n",
		"body": [
			"uicomponent:ChildCount()"
		],
	},
	"docgen:uicomponent:Parent": {
		"scope": "lua",
		"prefix": "Parent",
		"description": "uicomponent:Parent()\n-  -\n\nReturns a link to the parent of the uicomponent.\n",
		"body": [
			"Parent()"
		],
	},
	"docgen:uicomponent:uicomponent:Parent": {
		"scope": "lua",
		"prefix": "uicomponent:Parent",
		"description": "uicomponent:Parent()\n-  -\n\nReturns a link to the parent of the uicomponent.\n",
		"body": [
			"uicomponent:Parent()"
		],
	},
	"docgen:uicomponent:DestroyChildren": {
		"scope": "lua",
		"prefix": "DestroyChildren",
		"description": "uicomponent:DestroyChildren()\n-  -\n\nDestroys and unloads all children of this uicomponent.\n",
		"body": [
			"DestroyChildren()"
		],
	},
	"docgen:uicomponent:uicomponent:DestroyChildren": {
		"scope": "lua",
		"prefix": "uicomponent:DestroyChildren",
		"description": "uicomponent:DestroyChildren()\n-  -\n\nDestroys and unloads all children of this uicomponent.\n",
		"body": [
			"uicomponent:DestroyChildren()"
		],
	},
	"docgen:uicomponent:Adopt": {
		"scope": "lua",
		"prefix": "Adopt",
		"description": "uicomponent:Adopt()\n-  -\n\nCompels this uicomponent to adopt a supplied uicomponent, which will then become a child of this uicomponent.\n",
		"body": [
			"Adopt(${1:address child})"
		],
	},
	"docgen:uicomponent:uicomponent:Adopt": {
		"scope": "lua",
		"prefix": "uicomponent:Adopt",
		"description": "uicomponent:Adopt()\n-  -\n\nCompels this uicomponent to adopt a supplied uicomponent, which will then become a child of this uicomponent.\n",
		"body": [
			"uicomponent:Adopt(${1:address child})"
		],
	},
	"docgen:uicomponent:Divorce": {
		"scope": "lua",
		"prefix": "Divorce",
		"description": "uicomponent:Divorce()\n-  -\n\nDivorces the supplied child uicomponent from the subject uicomponent.\n",
		"body": [
			"Divorce(${1:address child})"
		],
	},
	"docgen:uicomponent:uicomponent:Divorce": {
		"scope": "lua",
		"prefix": "uicomponent:Divorce",
		"description": "uicomponent:Divorce()\n-  -\n\nDivorces the supplied child uicomponent from the subject uicomponent.\n",
		"body": [
			"uicomponent:Divorce(${1:address child})"
		],
	},
	"docgen:uicomponent:CreateComponent": {
		"scope": "lua",
		"prefix": "CreateComponent",
		"description": "uicomponent:CreateComponent()\n-  -\n\nCreates a new uicomponent as the child of this uicomponent.\n",
		"body": [
			"CreateComponent(${1:string uicomponent name}, ${2:string file path})"
		],
	},
	"docgen:uicomponent:uicomponent:CreateComponent": {
		"scope": "lua",
		"prefix": "uicomponent:CreateComponent",
		"description": "uicomponent:CreateComponent()\n-  -\n\nCreates a new uicomponent as the child of this uicomponent.\n",
		"body": [
			"uicomponent:CreateComponent(${1:string uicomponent name}, ${2:string file path})"
		],
	},
	"docgen:uicomponent:CopyComponent": {
		"scope": "lua",
		"prefix": "CopyComponent",
		"description": "uicomponent:CopyComponent()\n-  -\n\nCreates a copy of this uicomponent with the supplied name.\n",
		"body": [
			"CopyComponent(${1:string uicomponent name})"
		],
	},
	"docgen:uicomponent:uicomponent:CopyComponent": {
		"scope": "lua",
		"prefix": "uicomponent:CopyComponent",
		"description": "uicomponent:CopyComponent()\n-  -\n\nCreates a copy of this uicomponent with the supplied name.\n",
		"body": [
			"uicomponent:CopyComponent(${1:string uicomponent name})"
		],
	},
	"docgen:uicomponent:SetStateText": {
		"scope": "lua",
		"prefix": "SetStateText",
		"description": "uicomponent:SetStateText()\n-  -\n\nSets the text on the current state of the uicomponent to the supplied text.\n",
		"body": [
			"SetStateText(${1:string localised text}, ${2:[opt=false] boolean shrink}, ${3:[opt=0] number max lines})"
		],
	},
	"docgen:uicomponent:uicomponent:SetStateText": {
		"scope": "lua",
		"prefix": "uicomponent:SetStateText",
		"description": "uicomponent:SetStateText()\n-  -\n\nSets the text on the current state of the uicomponent to the supplied text.\n",
		"body": [
			"uicomponent:SetStateText(${1:string localised text}, ${2:[opt=false] boolean shrink}, ${3:[opt=0] number max lines})"
		],
	},
	"docgen:uicomponent:GetStateText": {
		"scope": "lua",
		"prefix": "GetStateText",
		"description": "uicomponent:GetStateText()\n-  -\n\nReturns the text on the current state of the uicomponent along with its dimensions.\n",
		"body": [
			"GetStateText()"
		],
	},
	"docgen:uicomponent:uicomponent:GetStateText": {
		"scope": "lua",
		"prefix": "uicomponent:GetStateText",
		"description": "uicomponent:GetStateText()\n-  -\n\nReturns the text on the current state of the uicomponent along with its dimensions.\n",
		"body": [
			"uicomponent:GetStateText()"
		],
	},
	"docgen:uicomponent:SetTooltipText": {
		"scope": "lua",
		"prefix": "SetTooltipText",
		"description": "uicomponent:SetTooltipText()\n-  -\n\nSets the tooltip text of the current state of this uicomponent.\n",
		"body": [
			"SetTooltipText(${1:string text}, ${2:[opt=false] boolean set all states})"
		],
	},
	"docgen:uicomponent:uicomponent:SetTooltipText": {
		"scope": "lua",
		"prefix": "uicomponent:SetTooltipText",
		"description": "uicomponent:SetTooltipText()\n-  -\n\nSets the tooltip text of the current state of this uicomponent.\n",
		"body": [
			"uicomponent:SetTooltipText(${1:string text}, ${2:[opt=false] boolean set all states})"
		],
	},
	"docgen:uicomponent:SetTooltipTextWithRLSKey": {
		"scope": "lua",
		"prefix": "SetTooltipTextWithRLSKey",
		"description": "uicomponent:SetTooltipTextWithRLSKey()\n-  -\n\nSets the tooltip text of the current state of this uicomponent.\n",
		"body": [
			"SetTooltipTextWithRLSKey(${1:string key}, ${2:[opt=false] boolean set all states})"
		],
	},
	"docgen:uicomponent:uicomponent:SetTooltipTextWithRLSKey": {
		"scope": "lua",
		"prefix": "uicomponent:SetTooltipTextWithRLSKey",
		"description": "uicomponent:SetTooltipTextWithRLSKey()\n-  -\n\nSets the tooltip text of the current state of this uicomponent.\n",
		"body": [
			"uicomponent:SetTooltipTextWithRLSKey(${1:string key}, ${2:[opt=false] boolean set all states})"
		],
	},
	"docgen:uicomponent:GetTooltipText": {
		"scope": "lua",
		"prefix": "GetTooltipText",
		"description": "uicomponent:GetTooltipText()\n-  -\n\nReturns the tooltip text of the current state of the uicomponent as a localised string.\n",
		"body": [
			"GetTooltipText()"
		],
	},
	"docgen:uicomponent:uicomponent:GetTooltipText": {
		"scope": "lua",
		"prefix": "uicomponent:GetTooltipText",
		"description": "uicomponent:GetTooltipText()\n-  -\n\nReturns the tooltip text of the current state of the uicomponent as a localised string.\n",
		"body": [
			"uicomponent:GetTooltipText()"
		],
	},
	"docgen:uicomponent:SetImageRotation": {
		"scope": "lua",
		"prefix": "SetImageRotation",
		"description": "uicomponent:SetImageRotation()\n-  -\n\nPerforms a rotation of an image associated with the uicomponent.\n",
		"body": [
			"SetImageRotation(${1:number image index}, ${2:number rotation}, ${3:[opt=nil] number pivot x}, ${4:[opt=nil] number pivot y})"
		],
	},
	"docgen:uicomponent:uicomponent:SetImageRotation": {
		"scope": "lua",
		"prefix": "uicomponent:SetImageRotation",
		"description": "uicomponent:SetImageRotation()\n-  -\n\nPerforms a rotation of an image associated with the uicomponent.\n",
		"body": [
			"uicomponent:SetImageRotation(${1:number image index}, ${2:number rotation}, ${3:[opt=nil] number pivot x}, ${4:[opt=nil] number pivot y})"
		],
	},
	"docgen:uicomponent:SetImagePath": {
		"scope": "lua",
		"prefix": "SetImagePath",
		"description": "uicomponent:SetImagePath()\n-  -\n\nSets a new image path for an image associated with the uicomponent, replacing the original image with something new.\n",
		"body": [
			"SetImagePath(${1:string image path}, ${2:[opt=0] image index})"
		],
	},
	"docgen:uicomponent:uicomponent:SetImagePath": {
		"scope": "lua",
		"prefix": "uicomponent:SetImagePath",
		"description": "uicomponent:SetImagePath()\n-  -\n\nSets a new image path for an image associated with the uicomponent, replacing the original image with something new.\n",
		"body": [
			"uicomponent:SetImagePath(${1:string image path}, ${2:[opt=0] image index})"
		],
	},
	"docgen:uicomponent:GetImagePath": {
		"scope": "lua",
		"prefix": "GetImagePath",
		"description": "uicomponent:GetImagePath()\n-  -\n\nReturns the path of an image associated with the subject uicomponent.\n",
		"body": [
			"GetImagePath(${1:[opt=0] image index})"
		],
	},
	"docgen:uicomponent:uicomponent:GetImagePath": {
		"scope": "lua",
		"prefix": "uicomponent:GetImagePath",
		"description": "uicomponent:GetImagePath()\n-  -\n\nReturns the path of an image associated with the subject uicomponent.\n",
		"body": [
			"uicomponent:GetImagePath(${1:[opt=0] image index})"
		],
	},
	"docgen:uicomponent:NumImages": {
		"scope": "lua",
		"prefix": "NumImages",
		"description": "uicomponent:NumImages()\n-  -\n\nReturns the number of images associated with the subject uicomponent.\n",
		"body": [
			"NumImages()"
		],
	},
	"docgen:uicomponent:uicomponent:NumImages": {
		"scope": "lua",
		"prefix": "uicomponent:NumImages",
		"description": "uicomponent:NumImages()\n-  -\n\nReturns the number of images associated with the subject uicomponent.\n",
		"body": [
			"uicomponent:NumImages()"
		],
	},
	"docgen:uicomponent:GetCurrentStateImageIndex": {
		"scope": "lua",
		"prefix": "GetCurrentStateImageIndex",
		"description": "uicomponent:GetCurrentStateImageIndex()\n-  -\n\nReturns the index of an image's association with this uicomponent, based on the index of that image's association with the current state.\n",
		"body": [
			"GetCurrentStateImageIndex(${1:number state image index})"
		],
	},
	"docgen:uicomponent:uicomponent:GetCurrentStateImageIndex": {
		"scope": "lua",
		"prefix": "uicomponent:GetCurrentStateImageIndex",
		"description": "uicomponent:GetCurrentStateImageIndex()\n-  -\n\nReturns the index of an image's association with this uicomponent, based on the index of that image's association with the current state.\n",
		"body": [
			"uicomponent:GetCurrentStateImageIndex(${1:number state image index})"
		],
	},
	"docgen:uicomponent:NumCurrentStateImages": {
		"scope": "lua",
		"prefix": "NumCurrentStateImages",
		"description": "uicomponent:NumCurrentStateImages()\n-  -\n\nReturns the number of images associated with the current state of this uicomponent.\n",
		"body": [
			"NumCurrentStateImages()"
		],
	},
	"docgen:uicomponent:uicomponent:NumCurrentStateImages": {
		"scope": "lua",
		"prefix": "uicomponent:NumCurrentStateImages",
		"description": "uicomponent:NumCurrentStateImages()\n-  -\n\nReturns the number of images associated with the current state of this uicomponent.\n",
		"body": [
			"uicomponent:NumCurrentStateImages()"
		],
	},
	"docgen:uicomponent:SetCurrentStateImageOpacity": {
		"scope": "lua",
		"prefix": "SetCurrentStateImageOpacity",
		"description": "uicomponent:SetCurrentStateImageOpacity()\n-  -\n\nSets the opacity of a specified image associated with the current state of the uicomponent.\n",
		"body": [
			"SetCurrentStateImageOpacity(${1:number state image index}, ${2:number opacity})"
		],
	},
	"docgen:uicomponent:uicomponent:SetCurrentStateImageOpacity": {
		"scope": "lua",
		"prefix": "uicomponent:SetCurrentStateImageOpacity",
		"description": "uicomponent:SetCurrentStateImageOpacity()\n-  -\n\nSets the opacity of a specified image associated with the current state of the uicomponent.\n",
		"body": [
			"uicomponent:SetCurrentStateImageOpacity(${1:number state image index}, ${2:number opacity})"
		],
	},
	"docgen:uicomponent:GetCurrentStateImageOpacity": {
		"scope": "lua",
		"prefix": "GetCurrentStateImageOpacity",
		"description": "uicomponent:GetCurrentStateImageOpacity()\n-  -\n\nReturns the opacity of a specified image associated with the current state of the uicomponent.\n",
		"body": [
			"GetCurrentStateImageOpacity(${1:number state image index})"
		],
	},
	"docgen:uicomponent:uicomponent:GetCurrentStateImageOpacity": {
		"scope": "lua",
		"prefix": "uicomponent:GetCurrentStateImageOpacity",
		"description": "uicomponent:GetCurrentStateImageOpacity()\n-  -\n\nReturns the opacity of a specified image associated with the current state of the uicomponent.\n",
		"body": [
			"uicomponent:GetCurrentStateImageOpacity(${1:number state image index})"
		],
	},
	"docgen:uicomponent:GetCurrentStateImageWidth": {
		"scope": "lua",
		"prefix": "GetCurrentStateImageWidth",
		"description": "uicomponent:GetCurrentStateImageWidth()\n-  -\n\nReturns the width of a specified image associated with the current state of the uicomponent.\n",
		"body": [
			"GetCurrentStateImageWidth(${1:number state image index})"
		],
	},
	"docgen:uicomponent:uicomponent:GetCurrentStateImageWidth": {
		"scope": "lua",
		"prefix": "uicomponent:GetCurrentStateImageWidth",
		"description": "uicomponent:GetCurrentStateImageWidth()\n-  -\n\nReturns the width of a specified image associated with the current state of the uicomponent.\n",
		"body": [
			"uicomponent:GetCurrentStateImageWidth(${1:number state image index})"
		],
	},
	"docgen:uicomponent:GetCurrentStateImageHeight": {
		"scope": "lua",
		"prefix": "GetCurrentStateImageHeight",
		"description": "uicomponent:GetCurrentStateImageHeight()\n-  -\n\nReturns the height of a specified image associated with the current state of the uicomponent.\n",
		"body": [
			"GetCurrentStateImageHeight(${1:number state image index})"
		],
	},
	"docgen:uicomponent:uicomponent:GetCurrentStateImageHeight": {
		"scope": "lua",
		"prefix": "uicomponent:GetCurrentStateImageHeight",
		"description": "uicomponent:GetCurrentStateImageHeight()\n-  -\n\nReturns the height of a specified image associated with the current state of the uicomponent.\n",
		"body": [
			"uicomponent:GetCurrentStateImageHeight(${1:number state image index})"
		],
	},
	"docgen:uicomponent:GetCurrentStateImageDimensions": {
		"scope": "lua",
		"prefix": "GetCurrentStateImageDimensions",
		"description": "uicomponent:GetCurrentStateImageDimensions()\n-  -\n\nReturns the width and height of a specified image associated with the current state of the uicomponent.\n",
		"body": [
			"GetCurrentStateImageDimensions(${1:number state image index})"
		],
	},
	"docgen:uicomponent:uicomponent:GetCurrentStateImageDimensions": {
		"scope": "lua",
		"prefix": "uicomponent:GetCurrentStateImageDimensions",
		"description": "uicomponent:GetCurrentStateImageDimensions()\n-  -\n\nReturns the width and height of a specified image associated with the current state of the uicomponent.\n",
		"body": [
			"uicomponent:GetCurrentStateImageDimensions(${1:number state image index})"
		],
	},
	"docgen:uicomponent:ResizeCurrentStateImage": {
		"scope": "lua",
		"prefix": "ResizeCurrentStateImage",
		"description": "uicomponent:ResizeCurrentStateImage()\n-  -\n\nSets the width and height of a specified image associated with the current state of the uicomponent.\n",
		"body": [
			"ResizeCurrentStateImage(${1:number state image index}, ${2:number width}, ${3:number height})"
		],
	},
	"docgen:uicomponent:uicomponent:ResizeCurrentStateImage": {
		"scope": "lua",
		"prefix": "uicomponent:ResizeCurrentStateImage",
		"description": "uicomponent:ResizeCurrentStateImage()\n-  -\n\nSets the width and height of a specified image associated with the current state of the uicomponent.\n",
		"body": [
			"uicomponent:ResizeCurrentStateImage(${1:number state image index}, ${2:number width}, ${3:number height})"
		],
	},
	"docgen:uicomponent:CanResizeCurrentStateImageWidth": {
		"scope": "lua",
		"prefix": "CanResizeCurrentStateImageWidth",
		"description": "uicomponent:CanResizeCurrentStateImageWidth()\n-  -\n\nReturns whether the width can be resized of the specified image associated with the current state of the uicomponent.\n",
		"body": [
			"CanResizeCurrentStateImageWidth(${1:number state image index})"
		],
	},
	"docgen:uicomponent:uicomponent:CanResizeCurrentStateImageWidth": {
		"scope": "lua",
		"prefix": "uicomponent:CanResizeCurrentStateImageWidth",
		"description": "uicomponent:CanResizeCurrentStateImageWidth()\n-  -\n\nReturns whether the width can be resized of the specified image associated with the current state of the uicomponent.\n",
		"body": [
			"uicomponent:CanResizeCurrentStateImageWidth(${1:number state image index})"
		],
	},
	"docgen:uicomponent:CanResizeCurrentStateImageHeight": {
		"scope": "lua",
		"prefix": "CanResizeCurrentStateImageHeight",
		"description": "uicomponent:CanResizeCurrentStateImageHeight()\n-  -\n\nReturns whether the height can be resized of the specified image associated with the current state of the uicomponent.\n",
		"body": [
			"CanResizeCurrentStateImageHeight(${1:number state image index})"
		],
	},
	"docgen:uicomponent:uicomponent:CanResizeCurrentStateImageHeight": {
		"scope": "lua",
		"prefix": "uicomponent:CanResizeCurrentStateImageHeight",
		"description": "uicomponent:CanResizeCurrentStateImageHeight()\n-  -\n\nReturns whether the height can be resized of the specified image associated with the current state of the uicomponent.\n",
		"body": [
			"uicomponent:CanResizeCurrentStateImageHeight(${1:number state image index})"
		],
	},
	"docgen:uicomponent:SetCanResizeCurrentStateImageWidth": {
		"scope": "lua",
		"prefix": "SetCanResizeCurrentStateImageWidth",
		"description": "uicomponent:SetCanResizeCurrentStateImageWidth()\n-  -\n\nSets whether the width can be resized of the specified image associated with the current state of the uicomponent.\n",
		"body": [
			"SetCanResizeCurrentStateImageWidth(${1:number state image index}, ${2:boolean can resize})"
		],
	},
	"docgen:uicomponent:uicomponent:SetCanResizeCurrentStateImageWidth": {
		"scope": "lua",
		"prefix": "uicomponent:SetCanResizeCurrentStateImageWidth",
		"description": "uicomponent:SetCanResizeCurrentStateImageWidth()\n-  -\n\nSets whether the width can be resized of the specified image associated with the current state of the uicomponent.\n",
		"body": [
			"uicomponent:SetCanResizeCurrentStateImageWidth(${1:number state image index}, ${2:boolean can resize})"
		],
	},
	"docgen:uicomponent:SetCanResizeCurrentStateImageHeight": {
		"scope": "lua",
		"prefix": "SetCanResizeCurrentStateImageHeight",
		"description": "uicomponent:SetCanResizeCurrentStateImageHeight()\n-  -\n\nSets whether the height can be resized of the specified image associated with the current state of the uicomponent.\n",
		"body": [
			"SetCanResizeCurrentStateImageHeight(${1:number state image index}, ${2:boolean can resize})"
		],
	},
	"docgen:uicomponent:uicomponent:SetCanResizeCurrentStateImageHeight": {
		"scope": "lua",
		"prefix": "uicomponent:SetCanResizeCurrentStateImageHeight",
		"description": "uicomponent:SetCanResizeCurrentStateImageHeight()\n-  -\n\nSets whether the height can be resized of the specified image associated with the current state of the uicomponent.\n",
		"body": [
			"uicomponent:SetCanResizeCurrentStateImageHeight(${1:number state image index}, ${2:boolean can resize})"
		],
	},
	"docgen:uicomponent:Visible": {
		"scope": "lua",
		"prefix": "Visible",
		"description": "uicomponent:Visible()\n-  -\n\nReturns the visibility flag of this uicomponent.\n",
		"body": [
			"Visible(${1:[opt=false] boolean recursive})"
		],
	},
	"docgen:uicomponent:uicomponent:Visible": {
		"scope": "lua",
		"prefix": "uicomponent:Visible",
		"description": "uicomponent:Visible()\n-  -\n\nReturns the visibility flag of this uicomponent.\n",
		"body": [
			"uicomponent:Visible(${1:[opt=false] boolean recursive})"
		],
	},
	"docgen:uicomponent:SetVisible": {
		"scope": "lua",
		"prefix": "SetVisible",
		"description": "uicomponent:SetVisible()\n-  -\n\nSets the visibility state of this uicomponent.\n",
		"body": [
			"SetVisible(${1:boolean is visible})"
		],
	},
	"docgen:uicomponent:uicomponent:SetVisible": {
		"scope": "lua",
		"prefix": "uicomponent:SetVisible",
		"description": "uicomponent:SetVisible()\n-  -\n\nSets the visibility state of this uicomponent.\n",
		"body": [
			"uicomponent:SetVisible(${1:boolean is visible})"
		],
	},
	"docgen:uicomponent:PropagateVisibility": {
		"scope": "lua",
		"prefix": "PropagateVisibility",
		"description": "uicomponent:PropagateVisibility()\n-  -\n\nSets the visibility state of this uicomponent and all its children.\n",
		"body": [
			"PropagateVisibility(${1:boolean is visible})"
		],
	},
	"docgen:uicomponent:uicomponent:PropagateVisibility": {
		"scope": "lua",
		"prefix": "uicomponent:PropagateVisibility",
		"description": "uicomponent:PropagateVisibility()\n-  -\n\nSets the visibility state of this uicomponent and all its children.\n",
		"body": [
			"uicomponent:PropagateVisibility(${1:boolean is visible})"
		],
	},
	"docgen:uicomponent:Opacity": {
		"scope": "lua",
		"prefix": "Opacity",
		"description": "uicomponent:Opacity()\n-  -\n\nReturns the current opacity of the uicomponent.\n",
		"body": [
			"Opacity()"
		],
	},
	"docgen:uicomponent:uicomponent:Opacity": {
		"scope": "lua",
		"prefix": "uicomponent:Opacity",
		"description": "uicomponent:Opacity()\n-  -\n\nReturns the current opacity of the uicomponent.\n",
		"body": [
			"uicomponent:Opacity()"
		],
	},
	"docgen:uicomponent:SetOpacity": {
		"scope": "lua",
		"prefix": "SetOpacity",
		"description": "uicomponent:SetOpacity()\n-  -\n\nSets the opacity of the uicomponent.\n",
		"body": [
			"SetOpacity(${1:number opacity value}, ${2:[opt=false] apply to all states})"
		],
	},
	"docgen:uicomponent:uicomponent:SetOpacity": {
		"scope": "lua",
		"prefix": "uicomponent:SetOpacity",
		"description": "uicomponent:SetOpacity()\n-  -\n\nSets the opacity of the uicomponent.\n",
		"body": [
			"uicomponent:SetOpacity(${1:number opacity value}, ${2:[opt=false] apply to all states})"
		],
	},
	"docgen:uicomponent:PropagateOpacity": {
		"scope": "lua",
		"prefix": "PropagateOpacity",
		"description": "uicomponent:PropagateOpacity()\n-  -\n\nSets the opacity of this uicomponent and propagates the change to all its children.\n",
		"body": [
			"PropagateOpacity(${1:number opacity value}, ${2:[opt=false] apply to all states})"
		],
	},
	"docgen:uicomponent:uicomponent:PropagateOpacity": {
		"scope": "lua",
		"prefix": "uicomponent:PropagateOpacity",
		"description": "uicomponent:PropagateOpacity()\n-  -\n\nSets the opacity of this uicomponent and propagates the change to all its children.\n",
		"body": [
			"uicomponent:PropagateOpacity(${1:number opacity value}, ${2:[opt=false] apply to all states})"
		],
	},
	"docgen:uicomponent:SetDisabled": {
		"scope": "lua",
		"prefix": "SetDisabled",
		"description": "uicomponent:SetDisabled()\n-  -\n\nSets this uicomponent to be disabled or not.\n",
		"body": [
			"SetDisabled(${1:boolean is disabled})"
		],
	},
	"docgen:uicomponent:uicomponent:SetDisabled": {
		"scope": "lua",
		"prefix": "uicomponent:SetDisabled",
		"description": "uicomponent:SetDisabled()\n-  -\n\nSets this uicomponent to be disabled or not.\n",
		"body": [
			"uicomponent:SetDisabled(${1:boolean is disabled})"
		],
	},
	"docgen:uicomponent:IsInteractive": {
		"scope": "lua",
		"prefix": "IsInteractive",
		"description": "uicomponent:IsInteractive()\n-  -\n\nReturns whether this uicomponent is interactive or not.\n",
		"body": [
			"IsInteractive()"
		],
	},
	"docgen:uicomponent:uicomponent:IsInteractive": {
		"scope": "lua",
		"prefix": "uicomponent:IsInteractive",
		"description": "uicomponent:IsInteractive()\n-  -\n\nReturns whether this uicomponent is interactive or not.\n",
		"body": [
			"uicomponent:IsInteractive()"
		],
	},
	"docgen:uicomponent:SetInteractive": {
		"scope": "lua",
		"prefix": "SetInteractive",
		"description": "uicomponent:SetInteractive()\n-  -\n\nSets this uicomponent to be interactive or not.\n",
		"body": [
			"SetInteractive(${1:boolean is interactive})"
		],
	},
	"docgen:uicomponent:uicomponent:SetInteractive": {
		"scope": "lua",
		"prefix": "uicomponent:SetInteractive",
		"description": "uicomponent:SetInteractive()\n-  -\n\nSets this uicomponent to be interactive or not.\n",
		"body": [
			"uicomponent:SetInteractive(${1:boolean is interactive})"
		],
	},
	"docgen:uicomponent:CurrentAnimationId": {
		"scope": "lua",
		"prefix": "CurrentAnimationId",
		"description": "uicomponent:CurrentAnimationId()\n-  -\n\nReturns the string name of the animation currently playing on this uicomponent.\n",
		"body": [
			"CurrentAnimationId()"
		],
	},
	"docgen:uicomponent:uicomponent:CurrentAnimationId": {
		"scope": "lua",
		"prefix": "uicomponent:CurrentAnimationId",
		"description": "uicomponent:CurrentAnimationId()\n-  -\n\nReturns the string name of the animation currently playing on this uicomponent.\n",
		"body": [
			"uicomponent:CurrentAnimationId()"
		],
	},
	"docgen:uicomponent:TriggerAnimation": {
		"scope": "lua",
		"prefix": "TriggerAnimation",
		"description": "uicomponent:TriggerAnimation()\n-  -\n\nStarts an animation on the uicomponent by name.\n",
		"body": [
			"TriggerAnimation(${1:string animation name})"
		],
	},
	"docgen:uicomponent:uicomponent:TriggerAnimation": {
		"scope": "lua",
		"prefix": "uicomponent:TriggerAnimation",
		"description": "uicomponent:TriggerAnimation()\n-  -\n\nStarts an animation on the uicomponent by name.\n",
		"body": [
			"uicomponent:TriggerAnimation(${1:string animation name})"
		],
	},
	"docgen:uicomponent:GetProperty": {
		"scope": "lua",
		"prefix": "GetProperty",
		"description": "uicomponent:GetProperty()\n-  -\n\nReturns the value of the specified uicomponent property.\n",
		"body": [
			"GetProperty(${1:string property name})"
		],
	},
	"docgen:uicomponent:uicomponent:GetProperty": {
		"scope": "lua",
		"prefix": "uicomponent:GetProperty",
		"description": "uicomponent:GetProperty()\n-  -\n\nReturns the value of the specified uicomponent property.\n",
		"body": [
			"uicomponent:GetProperty(${1:string property name})"
		],
	},
	"docgen:uicomponent:SetProperty": {
		"scope": "lua",
		"prefix": "SetProperty",
		"description": "uicomponent:SetProperty()\n-  -\n\nReturns the value of the specified uicomponent property.\n",
		"body": [
			"SetProperty(${1:string property name}, ${2:variable property value})"
		],
	},
	"docgen:uicomponent:uicomponent:SetProperty": {
		"scope": "lua",
		"prefix": "uicomponent:SetProperty",
		"description": "uicomponent:SetProperty()\n-  -\n\nReturns the value of the specified uicomponent property.\n",
		"body": [
			"uicomponent:SetProperty(${1:string property name}, ${2:variable property value})"
		],
	},
	"docgen:uicomponent:LockPriority": {
		"scope": "lua",
		"prefix": "LockPriority",
		"description": "uicomponent:LockPriority()\n-  -\n\nActivates a priority lock on the uicomponent.\n",
		"body": [
			"LockPriority(${1:[opt=nil] number priority})"
		],
	},
	"docgen:uicomponent:uicomponent:LockPriority": {
		"scope": "lua",
		"prefix": "uicomponent:LockPriority",
		"description": "uicomponent:LockPriority()\n-  -\n\nActivates a priority lock on the uicomponent.\n",
		"body": [
			"uicomponent:LockPriority(${1:[opt=nil] number priority})"
		],
	},
	"docgen:uicomponent:UnLockPriority": {
		"scope": "lua",
		"prefix": "UnLockPriority",
		"description": "uicomponent:UnLockPriority()\n-  -\n\nDeactivates a priority lock on the uicomponent.\n",
		"body": [
			"UnLockPriority()"
		],
	},
	"docgen:uicomponent:uicomponent:UnLockPriority": {
		"scope": "lua",
		"prefix": "uicomponent:UnLockPriority",
		"description": "uicomponent:UnLockPriority()\n-  -\n\nDeactivates a priority lock on the uicomponent.\n",
		"body": [
			"uicomponent:UnLockPriority()"
		],
	},
	"docgen:uicomponent:Priority": {
		"scope": "lua",
		"prefix": "Priority",
		"description": "uicomponent:Priority()\n-  -\n\nReturns the priority of this uicomponent.\n",
		"body": [
			"Priority()"
		],
	},
	"docgen:uicomponent:uicomponent:Priority": {
		"scope": "lua",
		"prefix": "uicomponent:Priority",
		"description": "uicomponent:Priority()\n-  -\n\nReturns the priority of this uicomponent.\n",
		"body": [
			"uicomponent:Priority()"
		],
	},
	"docgen:uicomponent:PropagatePriority": {
		"scope": "lua",
		"prefix": "PropagatePriority",
		"description": "uicomponent:PropagatePriority()\n-  -\n\nSets the component priority of this uicomponent and all its children to the supplied value.\n",
		"body": [
			"PropagatePriority(${1:number priority})"
		],
	},
	"docgen:uicomponent:uicomponent:PropagatePriority": {
		"scope": "lua",
		"prefix": "uicomponent:PropagatePriority",
		"description": "uicomponent:PropagatePriority()\n-  -\n\nSets the component priority of this uicomponent and all its children to the supplied value.\n",
		"body": [
			"uicomponent:PropagatePriority(${1:number priority})"
		],
	},
	"docgen:uicomponent:RegisterTopMost": {
		"scope": "lua",
		"prefix": "RegisterTopMost",
		"description": "uicomponent:RegisterTopMost()\n-  -\n\nRegisters this uicomponent to be drawn topmost.\n",
		"body": [
			"RegisterTopMost()"
		],
	},
	"docgen:uicomponent:uicomponent:RegisterTopMost": {
		"scope": "lua",
		"prefix": "uicomponent:RegisterTopMost",
		"description": "uicomponent:RegisterTopMost()\n-  -\n\nRegisters this uicomponent to be drawn topmost.\n",
		"body": [
			"uicomponent:RegisterTopMost()"
		],
	},
	"docgen:uicomponent:RemoveTopMost": {
		"scope": "lua",
		"prefix": "RemoveTopMost",
		"description": "uicomponent:RemoveTopMost()\n-  -\n\nDe-registers this uicomponent from being drawn topmost.\n",
		"body": [
			"RemoveTopMost()"
		],
	},
	"docgen:uicomponent:uicomponent:RemoveTopMost": {
		"scope": "lua",
		"prefix": "uicomponent:RemoveTopMost",
		"description": "uicomponent:RemoveTopMost()\n-  -\n\nDe-registers this uicomponent from being drawn topmost.\n",
		"body": [
			"uicomponent:RemoveTopMost()"
		],
	},
	"docgen:uicomponent:ShaderTechniqueSet": {
		"scope": "lua",
		"prefix": "ShaderTechniqueSet",
		"description": "uicomponent:ShaderTechniqueSet()\n-  -\n\nSets the active shader technique on the uicomponent, applying a custom graphical shader effect.\n",
		"body": [
			"ShaderTechniqueSet(${1:variable shader}, ${2:[opt=false] boolean all states}, ${3:[opt=true] boolean include text})"
		],
	},
	"docgen:uicomponent:uicomponent:ShaderTechniqueSet": {
		"scope": "lua",
		"prefix": "uicomponent:ShaderTechniqueSet",
		"description": "uicomponent:ShaderTechniqueSet()\n-  -\n\nSets the active shader technique on the uicomponent, applying a custom graphical shader effect.\n",
		"body": [
			"uicomponent:ShaderTechniqueSet(${1:variable shader}, ${2:[opt=false] boolean all states}, ${3:[opt=true] boolean include text})"
		],
	},
	"docgen:uicomponent:ShaderTechniqueGet": {
		"scope": "lua",
		"prefix": "ShaderTechniqueGet",
		"description": "uicomponent:ShaderTechniqueGet()\n-  -\n\nReturns the key of the shader currently active on the uicomponent.\n",
		"body": [
			"ShaderTechniqueGet()"
		],
	},
	"docgen:uicomponent:uicomponent:ShaderTechniqueGet": {
		"scope": "lua",
		"prefix": "uicomponent:ShaderTechniqueGet",
		"description": "uicomponent:ShaderTechniqueGet()\n-  -\n\nReturns the key of the shader currently active on the uicomponent.\n",
		"body": [
			"uicomponent:ShaderTechniqueGet()"
		],
	},
	"docgen:uicomponent:ShaderVarsSet": {
		"scope": "lua",
		"prefix": "ShaderVarsSet",
		"description": "uicomponent:ShaderVarsSet()\n-  -\n\nSets variables on the shader technique currently active on the uicomponent.\n",
		"body": [
			"ShaderVarsSet(${1:[opt=nil] number first value}, ${2:[opt=nil] number second value}, ${3:[opt=nil] number third value}, ${4:[opt=nil] number fourth value}, ${5:[opt=false] boolean all states}, ${6:[opt=true] boolean include text})"
		],
	},
	"docgen:uicomponent:uicomponent:ShaderVarsSet": {
		"scope": "lua",
		"prefix": "uicomponent:ShaderVarsSet",
		"description": "uicomponent:ShaderVarsSet()\n-  -\n\nSets variables on the shader technique currently active on the uicomponent.\n",
		"body": [
			"uicomponent:ShaderVarsSet(${1:[opt=nil] number first value}, ${2:[opt=nil] number second value}, ${3:[opt=nil] number third value}, ${4:[opt=nil] number fourth value}, ${5:[opt=false] boolean all states}, ${6:[opt=true] boolean include text})"
		],
	},
	"docgen:uicomponent:ShaderVarsGet": {
		"scope": "lua",
		"prefix": "ShaderVarsGet",
		"description": "uicomponent:ShaderVarsGet()\n-  -\n\nReturns the variables of the shader currently active on the uicomponent.\n",
		"body": [
			"ShaderVarsGet()"
		],
	},
	"docgen:uicomponent:uicomponent:ShaderVarsGet": {
		"scope": "lua",
		"prefix": "uicomponent:ShaderVarsGet",
		"description": "uicomponent:ShaderVarsGet()\n-  -\n\nReturns the variables of the shader currently active on the uicomponent.\n",
		"body": [
			"uicomponent:ShaderVarsGet()"
		],
	},
	"docgen:uicomponent:TextShaderTechniqueSet": {
		"scope": "lua",
		"prefix": "TextShaderTechniqueSet",
		"description": "uicomponent:TextShaderTechniqueSet()\n-  -\n\nSets the active shader technique on just the text of the uicomponent, applying a custom graphical shader effect.\n",
		"body": [
			"TextShaderTechniqueSet(${1:variable shader}, ${2:[opt=false] boolean all states})"
		],
	},
	"docgen:uicomponent:uicomponent:TextShaderTechniqueSet": {
		"scope": "lua",
		"prefix": "uicomponent:TextShaderTechniqueSet",
		"description": "uicomponent:TextShaderTechniqueSet()\n-  -\n\nSets the active shader technique on just the text of the uicomponent, applying a custom graphical shader effect.\n",
		"body": [
			"uicomponent:TextShaderTechniqueSet(${1:variable shader}, ${2:[opt=false] boolean all states})"
		],
	},
	"docgen:uicomponent:TextShaderVarsSet": {
		"scope": "lua",
		"prefix": "TextShaderVarsSet",
		"description": "uicomponent:TextShaderVarsSet()\n-  -\n\nSets variables on the text shader technique currently active on the uicomponent.\n",
		"body": [
			"TextShaderVarsSet(${1:number first value}, ${2:number second value}, ${3:number third value}, ${4:number fourth value}, ${5:[opt=false] boolean all states})"
		],
	},
	"docgen:uicomponent:uicomponent:TextShaderVarsSet": {
		"scope": "lua",
		"prefix": "uicomponent:TextShaderVarsSet",
		"description": "uicomponent:TextShaderVarsSet()\n-  -\n\nSets variables on the text shader technique currently active on the uicomponent.\n",
		"body": [
			"uicomponent:TextShaderVarsSet(${1:number first value}, ${2:number second value}, ${3:number third value}, ${4:number fourth value}, ${5:[opt=false] boolean all states})"
		],
	},
	"docgen:uicomponent:TextShaderVarsGet": {
		"scope": "lua",
		"prefix": "TextShaderVarsGet",
		"description": "uicomponent:TextShaderVarsGet()\n-  -\n\nReturns the variables of the text shader currently active on the uicomponent.\n",
		"body": [
			"TextShaderVarsGet()"
		],
	},
	"docgen:uicomponent:uicomponent:TextShaderVarsGet": {
		"scope": "lua",
		"prefix": "uicomponent:TextShaderVarsGet",
		"description": "uicomponent:TextShaderVarsGet()\n-  -\n\nReturns the variables of the text shader currently active on the uicomponent.\n",
		"body": [
			"uicomponent:TextShaderVarsGet()"
		],
	},
	"docgen:uicomponent:StealShortcutKey": {
		"scope": "lua",
		"prefix": "StealShortcutKey",
		"description": "uicomponent:StealShortcutKey()\n-  -\n\nInstructs this uicomponent to steal a game shortcut key, so that keypresses of that type are redirected to this uicomponent which will handle them.\n",
		"body": [
			"StealShortcutKey(${1:boolean should steal}, ${2:[opt=nil] string key type})"
		],
	},
	"docgen:uicomponent:uicomponent:StealShortcutKey": {
		"scope": "lua",
		"prefix": "uicomponent:StealShortcutKey",
		"description": "uicomponent:StealShortcutKey()\n-  -\n\nInstructs this uicomponent to steal a game shortcut key, so that keypresses of that type are redirected to this uicomponent which will handle them.\n",
		"body": [
			"uicomponent:StealShortcutKey(${1:boolean should steal}, ${2:[opt=nil] string key type})"
		],
	},
	"docgen:uicomponent:StealInputFocus": {
		"scope": "lua",
		"prefix": "StealInputFocus",
		"description": "uicomponent:StealInputFocus()\n-  -\n\nInstructs this uicomponent to steal all keyboard input.\n",
		"body": [
			"StealInputFocus(${1:boolean should steal})"
		],
	},
	"docgen:uicomponent:uicomponent:StealInputFocus": {
		"scope": "lua",
		"prefix": "uicomponent:StealInputFocus",
		"description": "uicomponent:StealInputFocus()\n-  -\n\nInstructs this uicomponent to steal all keyboard input.\n",
		"body": [
			"uicomponent:StealInputFocus(${1:boolean should steal})"
		],
	},
	"docgen:uicomponent:TriggerShortcut": {
		"scope": "lua",
		"prefix": "TriggerShortcut",
		"description": "uicomponent:TriggerShortcut()\n-  -\n\nTriggers a keyboard shortcut on the uicomponent, by name.\n",
		"body": [
			"TriggerShortcut(${1:string shortcut})"
		],
	},
	"docgen:uicomponent:uicomponent:TriggerShortcut": {
		"scope": "lua",
		"prefix": "uicomponent:TriggerShortcut",
		"description": "uicomponent:TriggerShortcut()\n-  -\n\nTriggers a keyboard shortcut on the uicomponent, by name.\n",
		"body": [
			"uicomponent:TriggerShortcut(${1:string shortcut})"
		],
	},
	"docgen:uicomponent:Highlight": {
		"scope": "lua",
		"prefix": "Highlight",
		"description": "uicomponent:Highlight()\n-  -\n\nHighlights or unhighlights the uicomponent to the player with a flashing ring.\n",
		"body": [
			"Highlight(${1:boolean should highlight}, ${2:boolean square}, ${3:[opt=0] number priority lock})"
		],
	},
	"docgen:uicomponent:uicomponent:Highlight": {
		"scope": "lua",
		"prefix": "uicomponent:Highlight",
		"description": "uicomponent:Highlight()\n-  -\n\nHighlights or unhighlights the uicomponent to the player with a flashing ring.\n",
		"body": [
			"uicomponent:Highlight(${1:boolean should highlight}, ${2:boolean square}, ${3:[opt=0] number priority lock})"
		],
	},
	"docgen:uicomponent:FullScreenHighlight": {
		"scope": "lua",
		"prefix": "FullScreenHighlight",
		"description": "uicomponent:FullScreenHighlight()\n-  -\n\nActivates a fullscreen highlight around the subject uicomponent.\n",
		"body": [
			"FullScreenHighlight(${1:[opt=nil] string highlight text}, ${2:[opt=false] boolean once only})"
		],
	},
	"docgen:uicomponent:uicomponent:FullScreenHighlight": {
		"scope": "lua",
		"prefix": "uicomponent:FullScreenHighlight",
		"description": "uicomponent:FullScreenHighlight()\n-  -\n\nActivates a fullscreen highlight around the subject uicomponent.\n",
		"body": [
			"uicomponent:FullScreenHighlight(${1:[opt=nil] string highlight text}, ${2:[opt=false] boolean once only})"
		],
	},
	"docgen:uicomponent:StartPulseHighlight": {
		"scope": "lua",
		"prefix": "StartPulseHighlight",
		"description": "uicomponent:StartPulseHighlight()\n-  -\n\nActivates a pulsing highlight effect on the subject uicomponent.\n",
		"body": [
			"StartPulseHighlight(${1:[opt=nil] number pulse strength}, ${2:[opt=nil] string state name})"
		],
	},
	"docgen:uicomponent:uicomponent:StartPulseHighlight": {
		"scope": "lua",
		"prefix": "uicomponent:StartPulseHighlight",
		"description": "uicomponent:StartPulseHighlight()\n-  -\n\nActivates a pulsing highlight effect on the subject uicomponent.\n",
		"body": [
			"uicomponent:StartPulseHighlight(${1:[opt=nil] number pulse strength}, ${2:[opt=nil] string state name})"
		],
	},
	"docgen:uicomponent:StopPulseHighlight": {
		"scope": "lua",
		"prefix": "StopPulseHighlight",
		"description": "uicomponent:StopPulseHighlight()\n-  -\n\nDeactivates a pulsing highlight effect on the subject uicomponent that was previously started with uicomponent:StartPulseHighlight.\n",
		"body": [
			"StopPulseHighlight(${1:[opt=nil] string state name})"
		],
	},
	"docgen:uicomponent:uicomponent:StopPulseHighlight": {
		"scope": "lua",
		"prefix": "uicomponent:StopPulseHighlight",
		"description": "uicomponent:StopPulseHighlight()\n-  -\n\nDeactivates a pulsing highlight effect on the subject uicomponent that was previously started with uicomponent:StartPulseHighlight.\n",
		"body": [
			"uicomponent:StopPulseHighlight(${1:[opt=nil] string state name})"
		],
	},
	"docgen:uicomponent:InterfaceFunction": {
		"scope": "lua",
		"prefix": "InterfaceFunction",
		"description": "uicomponent:InterfaceFunction()\n-  -\n\nCalls an interface function on the uicomponent, by string name.\n",
		"body": [
			"InterfaceFunction(${1:string function name}, ${2:... varargs})"
		],
	},
	"docgen:uicomponent:uicomponent:InterfaceFunction": {
		"scope": "lua",
		"prefix": "uicomponent:InterfaceFunction",
		"description": "uicomponent:InterfaceFunction()\n-  -\n\nCalls an interface function on the uicomponent, by string name.\n",
		"body": [
			"uicomponent:InterfaceFunction(${1:string function name}, ${2:... varargs})"
		],
	},
	"docgen:uicomponent:HasInterface": {
		"scope": "lua",
		"prefix": "HasInterface",
		"description": "uicomponent:HasInterface()\n-  -\n\nReturns whether this uicomponent provides any interface functions.\n",
		"body": [
			"HasInterface()"
		],
	},
	"docgen:uicomponent:uicomponent:HasInterface": {
		"scope": "lua",
		"prefix": "uicomponent:HasInterface",
		"description": "uicomponent:HasInterface()\n-  -\n\nReturns whether this uicomponent provides any interface functions.\n",
		"body": [
			"uicomponent:HasInterface()"
		],
	},
	"docgen:uicomponent:SimulateLClick": {
		"scope": "lua",
		"prefix": "SimulateLClick",
		"description": "uicomponent:SimulateLClick()\n-  -\n\nSimulates a left-click on the uicomponent.\n",
		"body": [
			"SimulateLClick(${1:[opt=nil] number x}, ${2:[opt=nil] number y})"
		],
	},
	"docgen:uicomponent:uicomponent:SimulateLClick": {
		"scope": "lua",
		"prefix": "uicomponent:SimulateLClick",
		"description": "uicomponent:SimulateLClick()\n-  -\n\nSimulates a left-click on the uicomponent.\n",
		"body": [
			"uicomponent:SimulateLClick(${1:[opt=nil] number x}, ${2:[opt=nil] number y})"
		],
	},
	"docgen:uicomponent:SimulateRClick": {
		"scope": "lua",
		"prefix": "SimulateRClick",
		"description": "uicomponent:SimulateRClick()\n-  -\n\nSimulates a right-click on the uicomponent.\n",
		"body": [
			"SimulateRClick(${1:[opt=nil] number x}, ${2:[opt=nil] number y})"
		],
	},
	"docgen:uicomponent:uicomponent:SimulateRClick": {
		"scope": "lua",
		"prefix": "uicomponent:SimulateRClick",
		"description": "uicomponent:SimulateRClick()\n-  -\n\nSimulates a right-click on the uicomponent.\n",
		"body": [
			"uicomponent:SimulateRClick(${1:[opt=nil] number x}, ${2:[opt=nil] number y})"
		],
	},
	"docgen:uicomponent:SimulateDblLClick": {
		"scope": "lua",
		"prefix": "SimulateDblLClick",
		"description": "uicomponent:SimulateDblLClick()\n-  -\n\nSimulates a double-left-click on the uicomponent.\n",
		"body": [
			"SimulateDblLClick(${1:[opt=nil] number x}, ${2:[opt=nil] number y})"
		],
	},
	"docgen:uicomponent:uicomponent:SimulateDblLClick": {
		"scope": "lua",
		"prefix": "uicomponent:SimulateDblLClick",
		"description": "uicomponent:SimulateDblLClick()\n-  -\n\nSimulates a double-left-click on the uicomponent.\n",
		"body": [
			"uicomponent:SimulateDblLClick(${1:[opt=nil] number x}, ${2:[opt=nil] number y})"
		],
	},
	"docgen:uicomponent:SimulateDblRClick": {
		"scope": "lua",
		"prefix": "SimulateDblRClick",
		"description": "uicomponent:SimulateDblRClick()\n-  -\n\nSimulates a double-left-click on the uicomponent.\n",
		"body": [
			"SimulateDblRClick(${1:[opt=nil] number x}, ${2:[opt=nil] number y})"
		],
	},
	"docgen:uicomponent:uicomponent:SimulateDblRClick": {
		"scope": "lua",
		"prefix": "uicomponent:SimulateDblRClick",
		"description": "uicomponent:SimulateDblRClick()\n-  -\n\nSimulates a double-left-click on the uicomponent.\n",
		"body": [
			"uicomponent:SimulateDblRClick(${1:[opt=nil] number x}, ${2:[opt=nil] number y})"
		],
	},
	"docgen:uicomponent:SimulateMouseOn": {
		"scope": "lua",
		"prefix": "SimulateMouseOn",
		"description": "uicomponent:SimulateMouseOn()\n-  -\n\nSimulates a mouse-on event on the uicomponent.\n",
		"body": [
			"SimulateMouseOn()"
		],
	},
	"docgen:uicomponent:uicomponent:SimulateMouseOn": {
		"scope": "lua",
		"prefix": "uicomponent:SimulateMouseOn",
		"description": "uicomponent:SimulateMouseOn()\n-  -\n\nSimulates a mouse-on event on the uicomponent.\n",
		"body": [
			"uicomponent:SimulateMouseOn()"
		],
	},
	"docgen:uicomponent:SimulateMouseOff": {
		"scope": "lua",
		"prefix": "SimulateMouseOff",
		"description": "uicomponent:SimulateMouseOff()\n-  -\n\nSimulates a mouse-off event on the uicomponent.\n",
		"body": [
			"SimulateMouseOff()"
		],
	},
	"docgen:uicomponent:uicomponent:SimulateMouseOff": {
		"scope": "lua",
		"prefix": "uicomponent:SimulateMouseOff",
		"description": "uicomponent:SimulateMouseOff()\n-  -\n\nSimulates a mouse-off event on the uicomponent.\n",
		"body": [
			"uicomponent:SimulateMouseOff()"
		],
	},
	"docgen:uicomponent:SimulateMouseMove": {
		"scope": "lua",
		"prefix": "SimulateMouseMove",
		"description": "uicomponent:SimulateMouseMove()\n-  -\n\nSimulates a mouse-move event on the uicomponent.\n",
		"body": [
			"SimulateMouseMove(${1:[opt=nil] number x}, ${2:[opt=nil] number y})"
		],
	},
	"docgen:uicomponent:uicomponent:SimulateMouseMove": {
		"scope": "lua",
		"prefix": "uicomponent:SimulateMouseMove",
		"description": "uicomponent:SimulateMouseMove()\n-  -\n\nSimulates a mouse-move event on the uicomponent.\n",
		"body": [
			"uicomponent:SimulateMouseMove(${1:[opt=nil] number x}, ${2:[opt=nil] number y})"
		],
	},
	"docgen:uicomponent:SimulateKey": {
		"scope": "lua",
		"prefix": "SimulateKey",
		"description": "uicomponent:SimulateKey()\n-  -\n\nSimulates a keypress on the uicomponent.\n",
		"body": [
			"SimulateKey(${1:string key id})"
		],
	},
	"docgen:uicomponent:uicomponent:SimulateKey": {
		"scope": "lua",
		"prefix": "uicomponent:SimulateKey",
		"description": "uicomponent:SimulateKey()\n-  -\n\nSimulates a keypress on the uicomponent.\n",
		"body": [
			"uicomponent:SimulateKey(${1:string key id})"
		],
	},
	"docgen:uicomponent:SimulateKeyDown": {
		"scope": "lua",
		"prefix": "SimulateKeyDown",
		"description": "uicomponent:SimulateKeyDown()\n-  -\n\nSimulates a keypress-down on the uicomponent.\n",
		"body": [
			"SimulateKeyDown(${1:string key id})"
		],
	},
	"docgen:uicomponent:uicomponent:SimulateKeyDown": {
		"scope": "lua",
		"prefix": "uicomponent:SimulateKeyDown",
		"description": "uicomponent:SimulateKeyDown()\n-  -\n\nSimulates a keypress-down on the uicomponent.\n",
		"body": [
			"uicomponent:SimulateKeyDown(${1:string key id})"
		],
	},
	"docgen:uicomponent:SimulateKeyUp": {
		"scope": "lua",
		"prefix": "SimulateKeyUp",
		"description": "uicomponent:SimulateKeyUp()\n-  -\n\nSimulates a keypress-up on the uicomponent.\n",
		"body": [
			"SimulateKeyUp(${1:string key id})"
		],
	},
	"docgen:uicomponent:uicomponent:SimulateKeyUp": {
		"scope": "lua",
		"prefix": "uicomponent:SimulateKeyUp",
		"description": "uicomponent:SimulateKeyUp()\n-  -\n\nSimulates a keypress-up on the uicomponent.\n",
		"body": [
			"uicomponent:SimulateKeyUp(${1:string key id})"
		],
	},
	"docgen:scriptedvalueregistry:new": {
		"scope": "lua",
		"prefix": "new",
		"description": "ScriptedValueRegistry:new()\n-  -\n\nCreates and returns a handle to the scripted value registry.\n",
		"body": [
			"new()"
		],
	},
	"docgen:scriptedvalueregistry:ScriptedValueRegistry:new": {
		"scope": "lua",
		"prefix": "ScriptedValueRegistry:new",
		"description": "ScriptedValueRegistry:new()\n-  -\n\nCreates and returns a handle to the scripted value registry.\n",
		"body": [
			"ScriptedValueRegistry:new()"
		],
	},
	"docgen:scriptedvalueregistry:SaveBool": {
		"scope": "lua",
		"prefix": "SaveBool",
		"description": "ScriptedValueRegistry:SaveBool()\n-  -\n\nSaves a boolean value with a string name into the scripted value registry.\n",
		"body": [
			"SaveBool(${1:string value name}, ${2:boolean value})"
		],
	},
	"docgen:scriptedvalueregistry:ScriptedValueRegistry:SaveBool": {
		"scope": "lua",
		"prefix": "ScriptedValueRegistry:SaveBool",
		"description": "ScriptedValueRegistry:SaveBool()\n-  -\n\nSaves a boolean value with a string name into the scripted value registry.\n",
		"body": [
			"ScriptedValueRegistry:SaveBool(${1:string value name}, ${2:boolean value})"
		],
	},
	"docgen:scriptedvalueregistry:LoadBool": {
		"scope": "lua",
		"prefix": "LoadBool",
		"description": "ScriptedValueRegistry:LoadBool()\n-  -\n\nReturns a boolean value corresponding to a supplied string name from the scripted value registry.\n",
		"body": [
			"LoadBool()"
		],
	},
	"docgen:scriptedvalueregistry:ScriptedValueRegistry:LoadBool": {
		"scope": "lua",
		"prefix": "ScriptedValueRegistry:LoadBool",
		"description": "ScriptedValueRegistry:LoadBool()\n-  -\n\nReturns a boolean value corresponding to a supplied string name from the scripted value registry.\n",
		"body": [
			"ScriptedValueRegistry:LoadBool()"
		],
	},
	"docgen:scriptedvalueregistry:SaveString": {
		"scope": "lua",
		"prefix": "SaveString",
		"description": "ScriptedValueRegistry:SaveString()\n-  -\n\nSaves a string value with a string name into the scripted value registry.\n",
		"body": [
			"SaveString(${1:string value name}, ${2:string value})"
		],
	},
	"docgen:scriptedvalueregistry:ScriptedValueRegistry:SaveString": {
		"scope": "lua",
		"prefix": "ScriptedValueRegistry:SaveString",
		"description": "ScriptedValueRegistry:SaveString()\n-  -\n\nSaves a string value with a string name into the scripted value registry.\n",
		"body": [
			"ScriptedValueRegistry:SaveString(${1:string value name}, ${2:string value})"
		],
	},
	"docgen:scriptedvalueregistry:LoadString": {
		"scope": "lua",
		"prefix": "LoadString",
		"description": "ScriptedValueRegistry:LoadString()\n-  -\n\nReturns a string value corresponding to a supplied string name from the scripted value registry.\n",
		"body": [
			"LoadString()"
		],
	},
	"docgen:scriptedvalueregistry:ScriptedValueRegistry:LoadString": {
		"scope": "lua",
		"prefix": "ScriptedValueRegistry:LoadString",
		"description": "ScriptedValueRegistry:LoadString()\n-  -\n\nReturns a string value corresponding to a supplied string name from the scripted value registry.\n",
		"body": [
			"ScriptedValueRegistry:LoadString()"
		],
	},
	"docgen:scriptedvalueregistry:SaveRegistryBool": {
		"scope": "lua",
		"prefix": "SaveRegistryBool",
		"description": "ScriptedValueRegistry:SaveRegistryBool()\n-  -\n\nSaves a boolean value with a string name into the operating system registry.\n",
		"body": [
			"SaveRegistryBool(${1:string value name}, ${2:boolean value})"
		],
	},
	"docgen:scriptedvalueregistry:ScriptedValueRegistry:SaveRegistryBool": {
		"scope": "lua",
		"prefix": "ScriptedValueRegistry:SaveRegistryBool",
		"description": "ScriptedValueRegistry:SaveRegistryBool()\n-  -\n\nSaves a boolean value with a string name into the operating system registry.\n",
		"body": [
			"ScriptedValueRegistry:SaveRegistryBool(${1:string value name}, ${2:boolean value})"
		],
	},
	"docgen:scriptedvalueregistry:LoadRegistryBool": {
		"scope": "lua",
		"prefix": "LoadRegistryBool",
		"description": "ScriptedValueRegistry:LoadRegistryBool()\n-  -\n\nReturns a boolean value corresponding to a supplied string name from the operating system registry.\n",
		"body": [
			"LoadRegistryBool()"
		],
	},
	"docgen:scriptedvalueregistry:ScriptedValueRegistry:LoadRegistryBool": {
		"scope": "lua",
		"prefix": "ScriptedValueRegistry:LoadRegistryBool",
		"description": "ScriptedValueRegistry:LoadRegistryBool()\n-  -\n\nReturns a boolean value corresponding to a supplied string name from the operating system registry.\n",
		"body": [
			"ScriptedValueRegistry:LoadRegistryBool()"
		],
	},
	"docgen:campaignui:ToggleScreenCover": {
		"scope": "lua",
		"prefix": "ToggleScreenCover",
		"description": "CampaignUI.ToggleScreenCover()\n-  -\n\nCreates or destroys a black screen cover (when not eyefinity).\n",
		"body": [
			"ToggleScreenCover(${1:boolean enable cover})"
		],
	},
	"docgen:campaignui:CampaignUI:ToggleScreenCover": {
		"scope": "lua",
		"prefix": "CampaignUI.ToggleScreenCover",
		"description": "CampaignUI.ToggleScreenCover()\n-  -\n\nCreates or destroys a black screen cover (when not eyefinity).\n",
		"body": [
			"CampaignUI.ToggleScreenCover(${1:boolean enable cover})"
		],
	},
	"docgen:campaignui:ToggleCinematicBorders": {
		"scope": "lua",
		"prefix": "ToggleCinematicBorders",
		"description": "CampaignUI.ToggleCinematicBorders()\n-  -\n\nCreates or destroys top and bottom cinematic borders.\n",
		"body": [
			"ToggleCinematicBorders(${1:boolean enable borders})"
		],
	},
	"docgen:campaignui:CampaignUI:ToggleCinematicBorders": {
		"scope": "lua",
		"prefix": "CampaignUI.ToggleCinematicBorders",
		"description": "CampaignUI.ToggleCinematicBorders()\n-  -\n\nCreates or destroys top and bottom cinematic borders.\n",
		"body": [
			"CampaignUI.ToggleCinematicBorders(${1:boolean enable borders})"
		],
	},
	"docgen:campaignui:ShowVictoryScreen": {
		"scope": "lua",
		"prefix": "ShowVictoryScreen",
		"description": "CampaignUI.ShowVictoryScreen()\n-  -\n\nShows the campaign victory screen, optionally corresponding to a specified mission.\n",
		"body": [
			"ShowVictoryScreen(${1:[opt=nil] boolean is victory}, ${2:[opt=nil] boolean can continue}, ${3:[opt=nil] string mission key})"
		],
	},
	"docgen:campaignui:CampaignUI:ShowVictoryScreen": {
		"scope": "lua",
		"prefix": "CampaignUI.ShowVictoryScreen",
		"description": "CampaignUI.ShowVictoryScreen()\n-  -\n\nShows the campaign victory screen, optionally corresponding to a specified mission.\n",
		"body": [
			"CampaignUI.ShowVictoryScreen(${1:[opt=nil] boolean is victory}, ${2:[opt=nil] boolean can continue}, ${3:[opt=nil] string mission key})"
		],
	},
	"docgen:campaignui:ClearSelection": {
		"scope": "lua",
		"prefix": "ClearSelection",
		"description": "CampaignUI.ClearSelection()\n-  -\n\nClears the current ui selection, ensuring that no settlements or characters are selected by the player.\n",
		"body": [
			"ClearSelection()"
		],
	},
	"docgen:campaignui:CampaignUI:ClearSelection": {
		"scope": "lua",
		"prefix": "CampaignUI.ClearSelection",
		"description": "CampaignUI.ClearSelection()\n-  -\n\nClears the current ui selection, ensuring that no settlements or characters are selected by the player.\n",
		"body": [
			"CampaignUI.ClearSelection()"
		],
	},
	"docgen:campaignui:UpdateTechButton": {
		"scope": "lua",
		"prefix": "UpdateTechButton",
		"description": "CampaignUI.UpdateTechButton()\n-  -\n\nUpdates the available technologies counter inset into the technology button the campaign interface.\n",
		"body": [
			"UpdateTechButton()"
		],
	},
	"docgen:campaignui:CampaignUI:UpdateTechButton": {
		"scope": "lua",
		"prefix": "CampaignUI.UpdateTechButton",
		"description": "CampaignUI.UpdateTechButton()\n-  -\n\nUpdates the available technologies counter inset into the technology button the campaign interface.\n",
		"body": [
			"CampaignUI.UpdateTechButton()"
		],
	},
	"docgen:campaignui:UpdateSettlementEffectIcons": {
		"scope": "lua",
		"prefix": "UpdateSettlementEffectIcons",
		"description": "CampaignUI.UpdateSettlementEffectIcons()\n-  -\n\nUpdates any settlement effect icons on the campaign interface.\n",
		"body": [
			"UpdateSettlementEffectIcons()"
		],
	},
	"docgen:campaignui:CampaignUI:UpdateSettlementEffectIcons": {
		"scope": "lua",
		"prefix": "CampaignUI.UpdateSettlementEffectIcons",
		"description": "CampaignUI.UpdateSettlementEffectIcons()\n-  -\n\nUpdates any settlement effect icons on the campaign interface.\n",
		"body": [
			"CampaignUI.UpdateSettlementEffectIcons()"
		],
	},
	"docgen:campaignui:OverrideLoadingScreenText": {
		"scope": "lua",
		"prefix": "OverrideLoadingScreenText",
		"description": "CampaignUI.OverrideLoadingScreenText()\n-  -\n\nSets a custom text entry for display on the next loading screen into battle.\n",
		"body": [
			"OverrideLoadingScreenText()"
		],
	},
	"docgen:campaignui:CampaignUI:OverrideLoadingScreenText": {
		"scope": "lua",
		"prefix": "CampaignUI.OverrideLoadingScreenText",
		"description": "CampaignUI.OverrideLoadingScreenText()\n-  -\n\nSets a custom text entry for display on the next loading screen into battle.\n",
		"body": [
			"CampaignUI.OverrideLoadingScreenText()"
		],
	},
	"docgen:campaignui:QuitToWindows": {
		"scope": "lua",
		"prefix": "QuitToWindows",
		"description": "CampaignUI.QuitToWindows()\n-  -\n\nExits the game.\n",
		"body": [
			"QuitToWindows()"
		],
	},
	"docgen:campaignui:CampaignUI:QuitToWindows": {
		"scope": "lua",
		"prefix": "CampaignUI.QuitToWindows",
		"description": "CampaignUI.QuitToWindows()\n-  -\n\nExits the game.\n",
		"body": [
			"CampaignUI.QuitToWindows()"
		],
	},
	"docgen:campaignui:SetOverlayVisible": {
		"scope": "lua",
		"prefix": "SetOverlayVisible",
		"description": "CampaignUI.SetOverlayVisible()\n-  -\n\nSets the campaign overlay to be visible or not.\n",
		"body": [
			"SetOverlayVisible(${1:boolean activate overlay})"
		],
	},
	"docgen:campaignui:CampaignUI:SetOverlayVisible": {
		"scope": "lua",
		"prefix": "CampaignUI.SetOverlayVisible",
		"description": "CampaignUI.SetOverlayVisible()\n-  -\n\nSets the campaign overlay to be visible or not.\n",
		"body": [
			"CampaignUI.SetOverlayVisible(${1:boolean activate overlay})"
		],
	},
	"docgen:campaignui:SetOverlayMode": {
		"scope": "lua",
		"prefix": "SetOverlayMode",
		"description": "CampaignUI.SetOverlayMode()\n-  -\n\nSets the overlay mode to display by numeric id, and one or more regions to display it across by region key.\n",
		"body": [
			"SetOverlayMode(${1:number overlay mode}, ${2:... region(s)})"
		],
	},
	"docgen:campaignui:CampaignUI:SetOverlayMode": {
		"scope": "lua",
		"prefix": "CampaignUI.SetOverlayMode",
		"description": "CampaignUI.SetOverlayMode()\n-  -\n\nSets the overlay mode to display by numeric id, and one or more regions to display it across by region key.\n",
		"body": [
			"CampaignUI.SetOverlayMode(${1:number overlay mode}, ${2:... region(s)})"
		],
	},
	"docgen:campaignui:SuppressAllEventTypesInUI": {
		"scope": "lua",
		"prefix": "SuppressAllEventTypesInUI",
		"description": "CampaignUI.SuppressAllEventTypesInUI()\n-  -\n\nEnables or disables a suppression lock that prevents any event messages being shown on the UI.\n",
		"body": [
			"SuppressAllEventTypesInUI(${1:boolean enable suppression})"
		],
	},
	"docgen:campaignui:CampaignUI:SuppressAllEventTypesInUI": {
		"scope": "lua",
		"prefix": "CampaignUI.SuppressAllEventTypesInUI",
		"description": "CampaignUI.SuppressAllEventTypesInUI()\n-  -\n\nEnables or disables a suppression lock that prevents any event messages being shown on the UI.\n",
		"body": [
			"CampaignUI.SuppressAllEventTypesInUI(${1:boolean enable suppression})"
		],
	},
	"docgen:campaignui:WhiteListEventTypeInUI": {
		"scope": "lua",
		"prefix": "WhiteListEventTypeInUI",
		"description": "CampaignUI.WhiteListEventTypeInUI()\n-  -\n\nWhitelists an event type to bypass suppression activated by campaignui:SuppressAllEventTypesInUI.\n",
		"body": [
			"WhiteListEventTypeInUI(${1:string event type})"
		],
	},
	"docgen:campaignui:CampaignUI:WhiteListEventTypeInUI": {
		"scope": "lua",
		"prefix": "CampaignUI.WhiteListEventTypeInUI",
		"description": "CampaignUI.WhiteListEventTypeInUI()\n-  -\n\nWhitelists an event type to bypass suppression activated by campaignui:SuppressAllEventTypesInUI.\n",
		"body": [
			"CampaignUI.WhiteListEventTypeInUI(${1:string event type})"
		],
	},
	"docgen:campaignui:DoesEventTypeExist": {
		"scope": "lua",
		"prefix": "DoesEventTypeExist",
		"description": "CampaignUI.DoesEventTypeExist()\n-  -\n\nReturns whether or not an event of the specified type exists in the display queue (i.\n",
		"body": [
			"DoesEventTypeExist(${1:string event type})"
		],
	},
	"docgen:campaignui:CampaignUI:DoesEventTypeExist": {
		"scope": "lua",
		"prefix": "CampaignUI.DoesEventTypeExist",
		"description": "CampaignUI.DoesEventTypeExist()\n-  -\n\nReturns whether or not an event of the specified type exists in the display queue (i.\n",
		"body": [
			"CampaignUI.DoesEventTypeExist(${1:string event type})"
		],
	},
	"docgen:campaignui:DoesEventTypeRequireResponse": {
		"scope": "lua",
		"prefix": "DoesEventTypeRequireResponse",
		"description": "CampaignUI.DoesEventTypeRequireResponse()\n-  -\n\nReturns whether or not an event of the specified type exists in the display queue (i.\n",
		"body": [
			"DoesEventTypeRequireResponse(${1:string event type})"
		],
	},
	"docgen:campaignui:CampaignUI:DoesEventTypeRequireResponse": {
		"scope": "lua",
		"prefix": "CampaignUI.DoesEventTypeRequireResponse",
		"description": "CampaignUI.DoesEventTypeRequireResponse()\n-  -\n\nReturns whether or not an event of the specified type exists in the display queue (i.\n",
		"body": [
			"CampaignUI.DoesEventTypeRequireResponse(${1:string event type})"
		],
	},
	"docgen:campaignui:TriggerIncident": {
		"scope": "lua",
		"prefix": "TriggerIncident",
		"description": "CampaignUI.TriggerIncident()\n-  -\n\nTriggers an incident for the local player, specified by incident key.\n",
		"body": [
			"TriggerIncident(${1:string incident key})"
		],
	},
	"docgen:campaignui:CampaignUI:TriggerIncident": {
		"scope": "lua",
		"prefix": "CampaignUI.TriggerIncident",
		"description": "CampaignUI.TriggerIncident()\n-  -\n\nTriggers an incident for the local player, specified by incident key.\n",
		"body": [
			"CampaignUI.TriggerIncident(${1:string incident key})"
		],
	},
	"docgen:campaignui:TriggerCampaignScriptEvent": {
		"scope": "lua",
		"prefix": "TriggerCampaignScriptEvent",
		"description": "CampaignUI.TriggerCampaignScriptEvent()\n-  -\n\nAllows the script running on one machine in a multiplayer game to cause a scripted event, <code>UITriggerScriptEvent</code>, to be triggered on all machines in that game.\n",
		"body": [
			"TriggerCampaignScriptEvent(${1:[opt=nil] string event id}, ${2:[opt=nil] number faction cqi})"
		],
	},
	"docgen:campaignui:CampaignUI:TriggerCampaignScriptEvent": {
		"scope": "lua",
		"prefix": "CampaignUI.TriggerCampaignScriptEvent",
		"description": "CampaignUI.TriggerCampaignScriptEvent()\n-  -\n\nAllows the script running on one machine in a multiplayer game to cause a scripted event, <code>UITriggerScriptEvent</code>, to be triggered on all machines in that game.\n",
		"body": [
			"CampaignUI.TriggerCampaignScriptEvent(${1:[opt=nil] string event id}, ${2:[opt=nil] number faction cqi})"
		],
	},
	"docgen:effect:ancillary": {
		"scope": "lua",
		"prefix": "ancillary",
		"description": "effect.ancillary()\n-  -\n\nPotentially adds the supplied ancillary to the character in the supplied context.\n",
		"body": [
			"ancillary(${1:string ancillary key}, ${2:number chance}, ${3:userdata context})"
		],
	},
	"docgen:effect:effect:ancillary": {
		"scope": "lua",
		"prefix": "effect.ancillary",
		"description": "effect.ancillary()\n-  -\n\nPotentially adds the supplied ancillary to the character in the supplied context.\n",
		"body": [
			"effect.ancillary(${1:string ancillary key}, ${2:number chance}, ${3:userdata context})"
		],
	},
	"docgen:effect:trait": {
		"scope": "lua",
		"prefix": "trait",
		"description": "effect.trait()\n-  -\n\nPotentially adds the supplied trait points to the trait-recipient in the supplied context.\n",
		"body": [
			"trait(${1:string trait key}, ${2:string applicable to}, ${3:number points}, ${4:number chance}, ${5:userdata context})"
		],
	},
	"docgen:effect:effect:trait": {
		"scope": "lua",
		"prefix": "effect.trait",
		"description": "effect.trait()\n-  -\n\nPotentially adds the supplied trait points to the trait-recipient in the supplied context.\n",
		"body": [
			"effect.trait(${1:string trait key}, ${2:string applicable to}, ${3:number points}, ${4:number chance}, ${5:userdata context})"
		],
	},
	"docgen:effect:OpenBrowser": {
		"scope": "lua",
		"prefix": "OpenBrowser",
		"description": "effect.OpenBrowser()\n-  -\n\nOpens the in-game web browser with the supplied encyclopedia url.\n",
		"body": [
			"OpenBrowser(${1:string encyclopedia url}, ${2:userdata context})"
		],
	},
	"docgen:effect:effect:OpenBrowser": {
		"scope": "lua",
		"prefix": "effect.OpenBrowser",
		"description": "effect.OpenBrowser()\n-  -\n\nOpens the in-game web browser with the supplied encyclopedia url.\n",
		"body": [
			"effect.OpenBrowser(${1:string encyclopedia url}, ${2:userdata context})"
		],
	},
	"docgen:effect:suspend_contextual_advice": {
		"scope": "lua",
		"prefix": "suspend_contextual_advice",
		"description": "effect.suspend_contextual_advice()\n-  -\n\nPrevents advice from being triggered with effect:advance_contextual_advice_thread.\n",
		"body": [
			"suspend_contextual_advice(${1:boolean should suspend})"
		],
	},
	"docgen:effect:effect:suspend_contextual_advice": {
		"scope": "lua",
		"prefix": "effect.suspend_contextual_advice",
		"description": "effect.suspend_contextual_advice()\n-  -\n\nPrevents advice from being triggered with effect:advance_contextual_advice_thread.\n",
		"body": [
			"effect.suspend_contextual_advice(${1:boolean should suspend})"
		],
	},
	"docgen:effect:advice": {
		"scope": "lua",
		"prefix": "advice",
		"description": "effect.advice()\n-  -\n\nDirects the advisor to display the supplied advice string.\n",
		"body": [
			"advice(${1:string text})"
		],
	},
	"docgen:effect:effect:advice": {
		"scope": "lua",
		"prefix": "effect.advice",
		"description": "effect.advice()\n-  -\n\nDirects the advisor to display the supplied advice string.\n",
		"body": [
			"effect.advice(${1:string text})"
		],
	},
	"docgen:effect:advance_scripted_advice_thread": {
		"scope": "lua",
		"prefix": "advance_scripted_advice_thread",
		"description": "effect.advance_scripted_advice_thread()\n-  -\n\nDirects the advisor to advance the specified thread by the supplied score increase.\n",
		"body": [
			"advance_scripted_advice_thread(${1:string advice key}, ${2:number score increase})"
		],
	},
	"docgen:effect:effect:advance_scripted_advice_thread": {
		"scope": "lua",
		"prefix": "effect.advance_scripted_advice_thread",
		"description": "effect.advance_scripted_advice_thread()\n-  -\n\nDirects the advisor to advance the specified thread by the supplied score increase.\n",
		"body": [
			"effect.advance_scripted_advice_thread(${1:string advice key}, ${2:number score increase})"
		],
	},
	"docgen:effect:advance_scripted_advice_thread_located": {
		"scope": "lua",
		"prefix": "advance_scripted_advice_thread_located",
		"description": "effect.advance_scripted_advice_thread_located()\n-  -\n",
		"body": [
			"advance_scripted_advice_thread_located(${1:string advice key}, ${2:number score increase}, ${3:number x}, ${4:number y})"
		],
	},
	"docgen:effect:effect:advance_scripted_advice_thread_located": {
		"scope": "lua",
		"prefix": "effect.advance_scripted_advice_thread_located",
		"description": "effect.advance_scripted_advice_thread_located()\n-  -\n",
		"body": [
			"effect.advance_scripted_advice_thread_located(${1:string advice key}, ${2:number score increase}, ${3:number x}, ${4:number y})"
		],
	},
	"docgen:effect:get_advice_thread_score": {
		"scope": "lua",
		"prefix": "get_advice_thread_score",
		"description": "effect.get_advice_thread_score()\n-  -\n\nReturns the advice thread score.\n",
		"body": [
			"get_advice_thread_score(${1:string thread key})"
		],
	},
	"docgen:effect:effect:get_advice_thread_score": {
		"scope": "lua",
		"prefix": "effect.get_advice_thread_score",
		"description": "effect.get_advice_thread_score()\n-  -\n\nReturns the advice thread score.\n",
		"body": [
			"effect.get_advice_thread_score(${1:string thread key})"
		],
	},
	"docgen:effect:increment_advice_thread_score": {
		"scope": "lua",
		"prefix": "increment_advice_thread_score",
		"description": "effect.increment_advice_thread_score()\n-  -\n\nIncrements the advice thread score by the supplied amount, without playing any advice.\n",
		"body": [
			"increment_advice_thread_score(${1:string thread key}, ${2:number score})"
		],
	},
	"docgen:effect:effect:increment_advice_thread_score": {
		"scope": "lua",
		"prefix": "effect.increment_advice_thread_score",
		"description": "effect.increment_advice_thread_score()\n-  -\n\nIncrements the advice thread score by the supplied amount, without playing any advice.\n",
		"body": [
			"effect.increment_advice_thread_score(${1:string thread key}, ${2:number score})"
		],
	},
	"docgen:effect:set_advice_history_string_seen": {
		"scope": "lua",
		"prefix": "set_advice_history_string_seen",
		"description": "effect.set_advice_history_string_seen()\n-  -\n\nStores a key in the advice history, which can subsequently be tested with effect:get_advice_history_string_seen.\n",
		"body": [
			"set_advice_history_string_seen(${1:string key})"
		],
	},
	"docgen:effect:effect:set_advice_history_string_seen": {
		"scope": "lua",
		"prefix": "effect.set_advice_history_string_seen",
		"description": "effect.set_advice_history_string_seen()\n-  -\n\nStores a key in the advice history, which can subsequently be tested with effect:get_advice_history_string_seen.\n",
		"body": [
			"effect.set_advice_history_string_seen(${1:string key})"
		],
	},
	"docgen:effect:get_advice_history_string_seen": {
		"scope": "lua",
		"prefix": "get_advice_history_string_seen",
		"description": "effect.get_advice_history_string_seen()\n-  -\n\nReturns whether a key has ever been set in the advice history with effect:set_advice_history_string_seen.\n",
		"body": [
			"get_advice_history_string_seen(${1:string key})"
		],
	},
	"docgen:effect:effect:get_advice_history_string_seen": {
		"scope": "lua",
		"prefix": "effect.get_advice_history_string_seen",
		"description": "effect.get_advice_history_string_seen()\n-  -\n\nReturns whether a key has ever been set in the advice history with effect:set_advice_history_string_seen.\n",
		"body": [
			"effect.get_advice_history_string_seen(${1:string key})"
		],
	},
	"docgen:effect:get_advice_level": {
		"scope": "lua",
		"prefix": "get_advice_level",
		"description": "effect.get_advice_level()\n-  -\n\nReturns the current advice level setting.\n",
		"body": [
			"get_advice_level()"
		],
	},
	"docgen:effect:effect:get_advice_level": {
		"scope": "lua",
		"prefix": "effect.get_advice_level",
		"description": "effect.get_advice_level()\n-  -\n\nReturns the current advice level setting.\n",
		"body": [
			"effect.get_advice_level()"
		],
	},
	"docgen:effect:clear_advice_session_history": {
		"scope": "lua",
		"prefix": "clear_advice_session_history",
		"description": "effect.clear_advice_session_history()\n-  -\n\nClears out the advice session history.\n",
		"body": [
			"clear_advice_session_history()"
		],
	},
	"docgen:effect:effect:clear_advice_session_history": {
		"scope": "lua",
		"prefix": "effect.clear_advice_session_history",
		"description": "effect.clear_advice_session_history()\n-  -\n\nClears out the advice session history.\n",
		"body": [
			"effect.clear_advice_session_history()"
		],
	},
	"docgen:effect:advance_contextual_advice_thread": {
		"scope": "lua",
		"prefix": "advance_contextual_advice_thread",
		"description": "effect.advance_contextual_advice_thread()\n-  -\n\nDirects the advisor to consider issuing advice on the supplied advice thread.\n",
		"body": [
			"advance_contextual_advice_thread(${1:string advice thread}, ${2:number points}, ${3:userdata context})"
		],
	},
	"docgen:effect:effect:advance_contextual_advice_thread": {
		"scope": "lua",
		"prefix": "effect.advance_contextual_advice_thread",
		"description": "effect.advance_contextual_advice_thread()\n-  -\n\nDirects the advisor to consider issuing advice on the supplied advice thread.\n",
		"body": [
			"effect.advance_contextual_advice_thread(${1:string advice thread}, ${2:number points}, ${3:userdata context})"
		],
	},
	"docgen:effect:is_advice_audio_playing": {
		"scope": "lua",
		"prefix": "is_advice_audio_playing",
		"description": "effect.is_advice_audio_playing()\n-  -\n\nReturns whether audio for any advice is currently playing.\n",
		"body": [
			"is_advice_audio_playing()"
		],
	},
	"docgen:effect:effect:is_advice_audio_playing": {
		"scope": "lua",
		"prefix": "effect.is_advice_audio_playing",
		"description": "effect.is_advice_audio_playing()\n-  -\n\nReturns whether audio for any advice is currently playing.\n",
		"body": [
			"effect.is_advice_audio_playing()"
		],
	},
	"docgen:effect:key_down": {
		"scope": "lua",
		"prefix": "key_down",
		"description": "effect.key_down()\n-  -\n\nTriggers a key down event.\n",
		"body": [
			"key_down(${1:string event})"
		],
	},
	"docgen:effect:effect:key_down": {
		"scope": "lua",
		"prefix": "effect.key_down",
		"description": "effect.key_down()\n-  -\n\nTriggers a key down event.\n",
		"body": [
			"effect.key_down(${1:string event})"
		],
	},
	"docgen:effect:key_up": {
		"scope": "lua",
		"prefix": "key_up",
		"description": "effect.key_up()\n-  -\n\nTriggers a key up event.\n",
		"body": [
			"key_up(${1:string event})"
		],
	},
	"docgen:effect:effect:key_up": {
		"scope": "lua",
		"prefix": "effect.key_up",
		"description": "effect.key_up()\n-  -\n\nTriggers a key up event.\n",
		"body": [
			"effect.key_up(${1:string event})"
		],
	},
	"docgen:effect:mouse_event": {
		"scope": "lua",
		"prefix": "mouse_event",
		"description": "effect.mouse_event()\n-  -\n\nTriggers a mouse event at a specified position.\n",
		"body": [
			"mouse_event(${1:string event}, ${2:number screen pos x}, ${3:number screen pos y})"
		],
	},
	"docgen:effect:effect:mouse_event": {
		"scope": "lua",
		"prefix": "effect.mouse_event",
		"description": "effect.mouse_event()\n-  -\n\nTriggers a mouse event at a specified position.\n",
		"body": [
			"effect.mouse_event(${1:string event}, ${2:number screen pos x}, ${3:number screen pos y})"
		],
	},
	"docgen:effect:pref_as_bool": {
		"scope": "lua",
		"prefix": "pref_as_bool",
		"description": "effect.pref_as_bool()\n-  -\n\nReturns whether the specified boolean user preference setting is true or not.\n",
		"body": [
			"pref_as_bool(${1:string preference key})"
		],
	},
	"docgen:effect:effect:pref_as_bool": {
		"scope": "lua",
		"prefix": "effect.pref_as_bool",
		"description": "effect.pref_as_bool()\n-  -\n\nReturns whether the specified boolean user preference setting is true or not.\n",
		"body": [
			"effect.pref_as_bool(${1:string preference key})"
		],
	},
	"docgen:effect:pref_as_float": {
		"scope": "lua",
		"prefix": "pref_as_float",
		"description": "effect.pref_as_float()\n-  -\n\nReturns the numeric value of the specified floating point user preference.\n",
		"body": [
			"pref_as_float(${1:string preference key})"
		],
	},
	"docgen:effect:effect:pref_as_float": {
		"scope": "lua",
		"prefix": "effect.pref_as_float",
		"description": "effect.pref_as_float()\n-  -\n\nReturns the numeric value of the specified floating point user preference.\n",
		"body": [
			"effect.pref_as_float(${1:string preference key})"
		],
	},
	"docgen:effect:pref_as_integer": {
		"scope": "lua",
		"prefix": "pref_as_integer",
		"description": "effect.pref_as_integer()\n-  -\n\nReturns the numeric value of the specified integer user preference.\n",
		"body": [
			"pref_as_integer(${1:string preference key})"
		],
	},
	"docgen:effect:effect:pref_as_integer": {
		"scope": "lua",
		"prefix": "effect.pref_as_integer",
		"description": "effect.pref_as_integer()\n-  -\n\nReturns the numeric value of the specified integer user preference.\n",
		"body": [
			"effect.pref_as_integer(${1:string preference key})"
		],
	},
	"docgen:effect:tweaker_value": {
		"scope": "lua",
		"prefix": "tweaker_value",
		"description": "effect.tweaker_value()\n-  -\n\nReturns the value of the specified tweaker as a string.\n",
		"body": [
			"tweaker_value(${1:string tweaker name})"
		],
	},
	"docgen:effect:effect:tweaker_value": {
		"scope": "lua",
		"prefix": "effect.tweaker_value",
		"description": "effect.tweaker_value()\n-  -\n\nReturns the value of the specified tweaker as a string.\n",
		"body": [
			"effect.tweaker_value(${1:string tweaker name})"
		],
	},
	"docgen:effect:game_version": {
		"scope": "lua",
		"prefix": "game_version",
		"description": "effect.game_version()\n-  -\n\nReturns the game version string.\n",
		"body": [
			"game_version()"
		],
	},
	"docgen:effect:effect:game_version": {
		"scope": "lua",
		"prefix": "effect.game_version",
		"description": "effect.game_version()\n-  -\n\nReturns the game version string.\n",
		"body": [
			"effect.game_version()"
		],
	},
	"docgen:effect:filesystem_lookup": {
		"scope": "lua",
		"prefix": "filesystem_lookup",
		"description": "effect.filesystem_lookup()\n-  -\n\nPerforms a VFS lookup in the specified relative path (root is data/) for files matching the supplied pattern.\n",
		"body": [
			"filesystem_lookup(${1:string path}, ${2:string pattern})"
		],
	},
	"docgen:effect:effect:filesystem_lookup": {
		"scope": "lua",
		"prefix": "effect.filesystem_lookup",
		"description": "effect.filesystem_lookup()\n-  -\n\nPerforms a VFS lookup in the specified relative path (root is data/) for files matching the supplied pattern.\n",
		"body": [
			"effect.filesystem_lookup(${1:string path}, ${2:string pattern})"
		],
	},
	"docgen:effect:PingIconPath": {
		"scope": "lua",
		"prefix": "PingIconPath",
		"description": "effect.PingIconPath()\n-  -\n\nReturns the icon path for the supplied ping icon type, specified by a numeric index.\n",
		"body": [
			"PingIconPath(${1:number ping type})"
		],
	},
	"docgen:effect:effect:PingIconPath": {
		"scope": "lua",
		"prefix": "effect.PingIconPath",
		"description": "effect.PingIconPath()\n-  -\n\nReturns the icon path for the supplied ping icon type, specified by a numeric index.\n",
		"body": [
			"effect.PingIconPath(${1:number ping type})"
		],
	},
	"docgen:effect:get_localised_string": {
		"scope": "lua",
		"prefix": "get_localised_string",
		"description": "effect.get_localised_string()\n-  -\n\nRetrieves a localised string from the database by its full localisation key.\n",
		"body": [
			"get_localised_string(${1:string localisation key})"
		],
	},
	"docgen:effect:effect:get_localised_string": {
		"scope": "lua",
		"prefix": "effect.get_localised_string",
		"description": "effect.get_localised_string()\n-  -\n\nRetrieves a localised string from the database by its full localisation key.\n",
		"body": [
			"effect.get_localised_string(${1:string localisation key})"
		],
	},
	"docgen:effect:subtitles_enabled": {
		"scope": "lua",
		"prefix": "subtitles_enabled",
		"description": "effect.subtitles_enabled()\n-  -\n\nReturns whether subtitles are enabled or not in the player's preferences.\n",
		"body": [
			"subtitles_enabled()"
		],
	},
	"docgen:effect:effect:subtitles_enabled": {
		"scope": "lua",
		"prefix": "effect.subtitles_enabled",
		"description": "effect.subtitles_enabled()\n-  -\n\nReturns whether subtitles are enabled or not in the player's preferences.\n",
		"body": [
			"effect.subtitles_enabled()"
		],
	},
	"docgen:effect:take_screenshot": {
		"scope": "lua",
		"prefix": "take_screenshot",
		"description": "effect.take_screenshot()\n-  -\n\nTakes a screenshot and writes a tga file with the supplied filename.\n",
		"body": [
			"take_screenshot(${1:string screenshot filename})"
		],
	},
	"docgen:effect:effect:take_screenshot": {
		"scope": "lua",
		"prefix": "effect.take_screenshot",
		"description": "effect.take_screenshot()\n-  -\n\nTakes a screenshot and writes a tga file with the supplied filename.\n",
		"body": [
			"effect.take_screenshot(${1:string screenshot filename})"
		],
	},
	"docgen:effect:get_appdata_screenshots_path": {
		"scope": "lua",
		"prefix": "get_appdata_screenshots_path",
		"description": "effect.get_appdata_screenshots_path()\n-  -\n\nReturns the full path to the screenshots directory in appdata.\n",
		"body": [
			"get_appdata_screenshots_path()"
		],
	},
	"docgen:effect:effect:get_appdata_screenshots_path": {
		"scope": "lua",
		"prefix": "effect.get_appdata_screenshots_path",
		"description": "effect.get_appdata_screenshots_path()\n-  -\n\nReturns the full path to the screenshots directory in appdata.\n",
		"body": [
			"effect.get_appdata_screenshots_path()"
		],
	},
	"docgen:effect:is_any_movie_playing": {
		"scope": "lua",
		"prefix": "is_any_movie_playing",
		"description": "effect.is_any_movie_playing()\n-  -\n\nReturns whether any movie is currently playing.\n",
		"body": [
			"is_any_movie_playing()"
		],
	},
	"docgen:effect:effect:is_any_movie_playing": {
		"scope": "lua",
		"prefix": "effect.is_any_movie_playing",
		"description": "effect.is_any_movie_playing()\n-  -\n\nReturns whether any movie is currently playing.\n",
		"body": [
			"effect.is_any_movie_playing()"
		],
	},
	"docgen:effect:stop_all_movies": {
		"scope": "lua",
		"prefix": "stop_all_movies",
		"description": "effect.stop_all_movies()\n-  -\n\nStops any currently playing movies.\n",
		"body": [
			"stop_all_movies()"
		],
	},
	"docgen:effect:effect:stop_all_movies": {
		"scope": "lua",
		"prefix": "effect.stop_all_movies",
		"description": "effect.stop_all_movies()\n-  -\n\nStops any currently playing movies.\n",
		"body": [
			"effect.stop_all_movies()"
		],
	},
	"docgen:effect:set_custom_loading_screen_key": {
		"scope": "lua",
		"prefix": "set_custom_loading_screen_key",
		"description": "effect.set_custom_loading_screen_key()\n-  -\n\nSets a record from the <code>custom_loading_screens</code> table to use for the next loading screen.\n",
		"body": [
			"set_custom_loading_screen_key(${1:string key})"
		],
	},
	"docgen:effect:effect:set_custom_loading_screen_key": {
		"scope": "lua",
		"prefix": "effect.set_custom_loading_screen_key",
		"description": "effect.set_custom_loading_screen_key()\n-  -\n\nSets a record from the <code>custom_loading_screens</code> table to use for the next loading screen.\n",
		"body": [
			"effect.set_custom_loading_screen_key(${1:string key})"
		],
	},
	"docgen:effect:set_context_value": {
		"scope": "lua",
		"prefix": "set_context_value",
		"description": "effect.set_context_value()\n-  -\n\nCreates or updates a CcoScriptObject data record within the UI context system with a specified value.\n",
		"body": [
			"set_context_value(${1:string id}, ${2:number/string value})"
		],
	},
	"docgen:effect:effect:set_context_value": {
		"scope": "lua",
		"prefix": "effect.set_context_value",
		"description": "effect.set_context_value()\n-  -\n\nCreates or updates a CcoScriptObject data record within the UI context system with a specified value.\n",
		"body": [
			"effect.set_context_value(${1:string id}, ${2:number/string value})"
		],
	},
	"docgen:effect:get_context_bool_value": {
		"scope": "lua",
		"prefix": "get_context_bool_value",
		"description": "effect.get_context_bool_value()\n-  -\n\nCalls a specified function on a specified context object.\n",
		"body": [
			"get_context_bool_value(${1:string object id}, ${2:string function id})"
		],
	},
	"docgen:effect:effect:get_context_bool_value": {
		"scope": "lua",
		"prefix": "effect.get_context_bool_value",
		"description": "effect.get_context_bool_value()\n-  -\n\nCalls a specified function on a specified context object.\n",
		"body": [
			"effect.get_context_bool_value(${1:string object id}, ${2:string function id})"
		],
	},
	"docgen:effect:get_context_numeric_value": {
		"scope": "lua",
		"prefix": "get_context_numeric_value",
		"description": "effect.get_context_numeric_value()\n-  -\n\nCalls a specified function on a specified context object.\n",
		"body": [
			"get_context_numeric_value(${1:string object id}, ${2:string function id})"
		],
	},
	"docgen:effect:effect:get_context_numeric_value": {
		"scope": "lua",
		"prefix": "effect.get_context_numeric_value",
		"description": "effect.get_context_numeric_value()\n-  -\n\nCalls a specified function on a specified context object.\n",
		"body": [
			"effect.get_context_numeric_value(${1:string object id}, ${2:string function id})"
		],
	},
	"docgen:effect:get_context_string_value": {
		"scope": "lua",
		"prefix": "get_context_string_value",
		"description": "effect.get_context_string_value()\n-  -\n\nCalls a specified function on a specified context object.\n",
		"body": [
			"get_context_string_value(${1:string object id}, ${2:string function id})"
		],
	},
	"docgen:effect:effect:get_context_string_value": {
		"scope": "lua",
		"prefix": "effect.get_context_string_value",
		"description": "effect.get_context_string_value()\n-  -\n\nCalls a specified function on a specified context object.\n",
		"body": [
			"effect.get_context_string_value(${1:string object id}, ${2:string function id})"
		],
	},
	"docgen:effect:get_context_vector4_value": {
		"scope": "lua",
		"prefix": "get_context_vector4_value",
		"description": "effect.get_context_vector4_value()\n-  -\n\nCalls a specified function on a specified context object.\n",
		"body": [
			"get_context_vector4_value(${1:string object id}, ${2:string function id})"
		],
	},
	"docgen:effect:effect:get_context_vector4_value": {
		"scope": "lua",
		"prefix": "effect.get_context_vector4_value",
		"description": "effect.get_context_vector4_value()\n-  -\n\nCalls a specified function on a specified context object.\n",
		"body": [
			"effect.get_context_vector4_value(${1:string object id}, ${2:string function id})"
		],
	},
	"docgen:effect:get_context_object_id": {
		"scope": "lua",
		"prefix": "get_context_object_id",
		"description": "effect.get_context_object_id()\n-  -\n\nCalls a specified function on a specified context object that returns a string name of another context object.\n",
		"body": [
			"get_context_object_id(${1:string object id}, ${2:string function id})"
		],
	},
	"docgen:effect:effect:get_context_object_id": {
		"scope": "lua",
		"prefix": "effect.get_context_object_id",
		"description": "effect.get_context_object_id()\n-  -\n\nCalls a specified function on a specified context object that returns a string name of another context object.\n",
		"body": [
			"effect.get_context_object_id(${1:string object id}, ${2:string function id})"
		],
	},
	"docgen:effect:call_context_command": {
		"scope": "lua",
		"prefix": "call_context_command",
		"description": "effect.call_context_command()\n-  -\n\nCalls a specified function on a specified context object that makes changes to the game.\n",
		"body": [
			"call_context_command(${1:string object id}, ${2:string function id})"
		],
	},
	"docgen:effect:effect:call_context_command": {
		"scope": "lua",
		"prefix": "effect.call_context_command",
		"description": "effect.call_context_command()\n-  -\n\nCalls a specified function on a specified context object that makes changes to the game.\n",
		"body": [
			"effect.call_context_command(${1:string object id}, ${2:string function id})"
		],
	},
	"docgen:frontend:start_named_battle": {
		"scope": "lua",
		"prefix": "start_named_battle",
		"description": "frontend.start_named_battle()\n-  -\n\nStarts a named battle specified by key from the <code>battles</code> table.\n",
		"body": [
			"start_named_battle(${1:string key})"
		],
	},
	"docgen:frontend:frontend:start_named_battle": {
		"scope": "lua",
		"prefix": "frontend.start_named_battle",
		"description": "frontend.start_named_battle()\n-  -\n\nStarts a named battle specified by key from the <code>battles</code> table.\n",
		"body": [
			"frontend.start_named_battle(${1:string key})"
		],
	},
	"docgen:frontend:start_campaign": {
		"scope": "lua",
		"prefix": "start_campaign",
		"description": "frontend.start_campaign()\n-  -\n\nStarts the specified campaign, by string key from the <code>campaigns</code> table.\n",
		"body": [
			"start_campaign(${1:string campaign key}, ${2:string faction key}, ${3:string political party key})"
		],
	},
	"docgen:frontend:frontend:start_campaign": {
		"scope": "lua",
		"prefix": "frontend.start_campaign",
		"description": "frontend.start_campaign()\n-  -\n\nStarts the specified campaign, by string key from the <code>campaigns</code> table.\n",
		"body": [
			"frontend.start_campaign(${1:string campaign key}, ${2:string faction key}, ${3:string political party key})"
		],
	},
	"docgen:frontend:load_campaign": {
		"scope": "lua",
		"prefix": "load_campaign",
		"description": "frontend.load_campaign()\n-  -\n\nLoads a campaign save file by name.\n",
		"body": [
			"load_campaign(${1:string file path}, ${2:[opt=false] boolean from cloud})"
		],
	},
	"docgen:frontend:frontend:load_campaign": {
		"scope": "lua",
		"prefix": "frontend.load_campaign",
		"description": "frontend.load_campaign()\n-  -\n\nLoads a campaign save file by name.\n",
		"body": [
			"frontend.load_campaign(${1:string file path}, ${2:[opt=false] boolean from cloud})"
		],
	},
	"docgen:frontend:continue_campaign": {
		"scope": "lua",
		"prefix": "continue_campaign",
		"description": "frontend.continue_campaign()\n-  -\n\nLoads the most recently saved campaign game.\n",
		"body": [
			"continue_campaign(${1:[opt=false] boolean from cloud})"
		],
	},
	"docgen:frontend:frontend:continue_campaign": {
		"scope": "lua",
		"prefix": "frontend.continue_campaign",
		"description": "frontend.continue_campaign()\n-  -\n\nLoads the most recently saved campaign game.\n",
		"body": [
			"frontend.continue_campaign(${1:[opt=false] boolean from cloud})"
		],
	},
	"docgen:frontend:campaign_saves_exist": {
		"scope": "lua",
		"prefix": "campaign_saves_exist",
		"description": "frontend.campaign_saves_exist()\n-  -\n\nReturns whether any singleplayer campaign save files exists.\n",
		"body": [
			"campaign_saves_exist()"
		],
	},
	"docgen:frontend:frontend:campaign_saves_exist": {
		"scope": "lua",
		"prefix": "frontend.campaign_saves_exist",
		"description": "frontend.campaign_saves_exist()\n-  -\n\nReturns whether any singleplayer campaign save files exists.\n",
		"body": [
			"frontend.campaign_saves_exist()"
		],
	},
	"docgen:frontend:campaign_saves_exist_mp": {
		"scope": "lua",
		"prefix": "campaign_saves_exist_mp",
		"description": "frontend.campaign_saves_exist_mp()\n-  -\n\nReturns whether any multiplayer campaign save files exists.\n",
		"body": [
			"campaign_saves_exist_mp()"
		],
	},
	"docgen:frontend:frontend:campaign_saves_exist_mp": {
		"scope": "lua",
		"prefix": "frontend.campaign_saves_exist_mp",
		"description": "frontend.campaign_saves_exist_mp()\n-  -\n\nReturns whether any multiplayer campaign save files exists.\n",
		"body": [
			"frontend.campaign_saves_exist_mp()"
		],
	},
	"docgen:episodic_scripting:is_new_game": {
		"scope": "lua",
		"prefix": "is_new_game",
		"description": "cm:is_new_game()\n-  -\n\nReturns <code>true</code> if this a new campaign game, or <code>false</code> otherwise.\n",
		"body": [
			"is_new_game()"
		],
	},
	"docgen:episodic_scripting:cm:is_new_game": {
		"scope": "lua",
		"prefix": "cm:is_new_game",
		"description": "cm:is_new_game()\n-  -\n\nReturns <code>true</code> if this a new campaign game, or <code>false</code> otherwise.\n",
		"body": [
			"cm:is_new_game()"
		],
	},
	"docgen:episodic_scripting:is_benchmark_mode": {
		"scope": "lua",
		"prefix": "is_benchmark_mode",
		"description": "cm:is_benchmark_mode()\n-  -\n\nReturns <code>true</code> if this campaign is running in benchmark mode, meaning it was launched from the benchmark section in the graphics options.\n",
		"body": [
			"is_benchmark_mode()"
		],
	},
	"docgen:episodic_scripting:cm:is_benchmark_mode": {
		"scope": "lua",
		"prefix": "cm:is_benchmark_mode",
		"description": "cm:is_benchmark_mode()\n-  -\n\nReturns <code>true</code> if this campaign is running in benchmark mode, meaning it was launched from the benchmark section in the graphics options.\n",
		"body": [
			"cm:is_benchmark_mode()"
		],
	},
	"docgen:episodic_scripting:model": {
		"scope": "lua",
		"prefix": "model",
		"description": "cm:model()\n-  -\n\nReturns a handle to the campaign model object.\n",
		"body": [
			"model()"
		],
	},
	"docgen:episodic_scripting:cm:model": {
		"scope": "lua",
		"prefix": "cm:model",
		"description": "cm:model()\n-  -\n\nReturns a handle to the campaign model object.\n",
		"body": [
			"cm:model()"
		],
	},
	"docgen:episodic_scripting:filesystem_lookup": {
		"scope": "lua",
		"prefix": "filesystem_lookup",
		"description": "cm:filesystem_lookup()\n-  -\n\nPerform a VFS lookup in the specified path (root is the data folder) for files matching the pattern.\n",
		"body": [
			"filesystem_lookup()"
		],
	},
	"docgen:episodic_scripting:cm:filesystem_lookup": {
		"scope": "lua",
		"prefix": "cm:filesystem_lookup",
		"description": "cm:filesystem_lookup()\n-  -\n\nPerform a VFS lookup in the specified path (root is the data folder) for files matching the pattern.\n",
		"body": [
			"cm:filesystem_lookup()"
		],
	},
	"docgen:episodic_scripting:compare_localised_string": {
		"scope": "lua",
		"prefix": "compare_localised_string",
		"description": "cm:compare_localised_string()\n-  -\n\nReturns whether the supplied label string matches the text of a supplied uicomponent, taking localisation into account.\n",
		"body": [
			"compare_localised_string(${1:uicomponent uicomponent}, ${2:string label string})"
		],
	},
	"docgen:episodic_scripting:cm:compare_localised_string": {
		"scope": "lua",
		"prefix": "cm:compare_localised_string",
		"description": "cm:compare_localised_string()\n-  -\n\nReturns whether the supplied label string matches the text of a supplied uicomponent, taking localisation into account.\n",
		"body": [
			"cm:compare_localised_string(${1:uicomponent uicomponent}, ${2:string label string})"
		],
	},
	"docgen:episodic_scripting:is_dlc_flag_enabled": {
		"scope": "lua",
		"prefix": "is_dlc_flag_enabled",
		"description": "cm:is_dlc_flag_enabled()\n-  -\n\nReturns whether the dlc with the specified key is activated.\n",
		"body": [
			"is_dlc_flag_enabled(${1:string dlc key})"
		],
	},
	"docgen:episodic_scripting:cm:is_dlc_flag_enabled": {
		"scope": "lua",
		"prefix": "cm:is_dlc_flag_enabled",
		"description": "cm:is_dlc_flag_enabled()\n-  -\n\nReturns whether the dlc with the specified key is activated.\n",
		"body": [
			"cm:is_dlc_flag_enabled(${1:string dlc key})"
		],
	},
	"docgen:episodic_scripting:save_named_value": {
		"scope": "lua",
		"prefix": "save_named_value",
		"description": "cm:save_named_value()\n-  -\n\nWrite a value to the savegame.\n",
		"body": [
			"save_named_value(${1:string value name}, ${2:data value to save}, ${3:context context object})"
		],
	},
	"docgen:episodic_scripting:cm:save_named_value": {
		"scope": "lua",
		"prefix": "cm:save_named_value",
		"description": "cm:save_named_value()\n-  -\n\nWrite a value to the savegame.\n",
		"body": [
			"cm:save_named_value(${1:string value name}, ${2:data value to save}, ${3:context context object})"
		],
	},
	"docgen:episodic_scripting:load_named_value": {
		"scope": "lua",
		"prefix": "load_named_value",
		"description": "cm:load_named_value()\n-  -\n\nReads a value from a loading game.\n",
		"body": [
			"load_named_value(${1:string value name}, ${2:data default value}, ${3:context context object})"
		],
	},
	"docgen:episodic_scripting:cm:load_named_value": {
		"scope": "lua",
		"prefix": "cm:load_named_value",
		"description": "cm:load_named_value()\n-  -\n\nReads a value from a loading game.\n",
		"body": [
			"cm:load_named_value(${1:string value name}, ${2:data default value}, ${3:context context object})"
		],
	},
	"docgen:episodic_scripting:disable_saving_game": {
		"scope": "lua",
		"prefix": "disable_saving_game",
		"description": "cm:disable_saving_game()\n-  -\n\nPrevents or allows the saving of the game.\n",
		"body": [
			"disable_saving_game(${1:boolean should disable})"
		],
	},
	"docgen:episodic_scripting:cm:disable_saving_game": {
		"scope": "lua",
		"prefix": "cm:disable_saving_game",
		"description": "cm:disable_saving_game()\n-  -\n\nPrevents or allows the saving of the game.\n",
		"body": [
			"cm:disable_saving_game(${1:boolean should disable})"
		],
	},
	"docgen:episodic_scripting:autosave_at_next_opportunity": {
		"scope": "lua",
		"prefix": "autosave_at_next_opportunity",
		"description": "cm:autosave_at_next_opportunity()\n-  -\n\nAutosave the game at the next opportunity.\n",
		"body": [
			"autosave_at_next_opportunity()"
		],
	},
	"docgen:episodic_scripting:cm:autosave_at_next_opportunity": {
		"scope": "lua",
		"prefix": "cm:autosave_at_next_opportunity",
		"description": "cm:autosave_at_next_opportunity()\n-  -\n\nAutosave the game at the next opportunity.\n",
		"body": [
			"cm:autosave_at_next_opportunity()"
		],
	},
	"docgen:episodic_scripting:add_time_trigger": {
		"scope": "lua",
		"prefix": "add_time_trigger",
		"description": "cm:add_time_trigger()\n-  -\n\nRegister a time trigger, in seconds.\n",
		"body": [
			"add_time_trigger(${1:string id}, ${2:number interval}, ${3:[opt=false] boolean repeat})"
		],
	},
	"docgen:episodic_scripting:cm:add_time_trigger": {
		"scope": "lua",
		"prefix": "cm:add_time_trigger",
		"description": "cm:add_time_trigger()\n-  -\n\nRegister a time trigger, in seconds.\n",
		"body": [
			"cm:add_time_trigger(${1:string id}, ${2:number interval}, ${3:[opt=false] boolean repeat})"
		],
	},
	"docgen:episodic_scripting:remove_time_trigger": {
		"scope": "lua",
		"prefix": "remove_time_trigger",
		"description": "cm:remove_time_trigger()\n-  -\n\nRemoves a time trigger by string id.\n",
		"body": [
			"remove_time_trigger(${1:string id})"
		],
	},
	"docgen:episodic_scripting:cm:remove_time_trigger": {
		"scope": "lua",
		"prefix": "cm:remove_time_trigger",
		"description": "cm:remove_time_trigger()\n-  -\n\nRemoves a time trigger by string id.\n",
		"body": [
			"cm:remove_time_trigger(${1:string id})"
		],
	},
	"docgen:episodic_scripting:disable_ending_turn": {
		"scope": "lua",
		"prefix": "disable_ending_turn",
		"description": "cm:disable_ending_turn()\n-  -\n\nPrevents or allows ending turn.\n",
		"body": [
			"disable_ending_turn(${1:boolean should disable})"
		],
	},
	"docgen:episodic_scripting:cm:disable_ending_turn": {
		"scope": "lua",
		"prefix": "cm:disable_ending_turn",
		"description": "cm:disable_ending_turn()\n-  -\n\nPrevents or allows ending turn.\n",
		"body": [
			"cm:disable_ending_turn(${1:boolean should disable})"
		],
	},
	"docgen:episodic_scripting:end_turn": {
		"scope": "lua",
		"prefix": "end_turn",
		"description": "cm:end_turn()\n-  -\n\nEnds the turn for the current faction, optionally forcing at the next opportunity.\n",
		"body": [
			"end_turn(${1:[opt=false] boolean force})"
		],
	},
	"docgen:episodic_scripting:cm:end_turn": {
		"scope": "lua",
		"prefix": "cm:end_turn",
		"description": "cm:end_turn()\n-  -\n\nEnds the turn for the current faction, optionally forcing at the next opportunity.\n",
		"body": [
			"cm:end_turn(${1:[opt=false] boolean force})"
		],
	},
	"docgen:episodic_scripting:set_ai_uses_human_display_speed": {
		"scope": "lua",
		"prefix": "set_ai_uses_human_display_speed",
		"description": "cm:set_ai_uses_human_display_speed()\n-  -\n\nForces or un-forces any characters visible to humans to move at normal speed during the end-turn sequence.\n",
		"body": [
			"set_ai_uses_human_display_speed(${1:boolean use human speed })"
		],
	},
	"docgen:episodic_scripting:cm:set_ai_uses_human_display_speed": {
		"scope": "lua",
		"prefix": "cm:set_ai_uses_human_display_speed",
		"description": "cm:set_ai_uses_human_display_speed()\n-  -\n\nForces or un-forces any characters visible to humans to move at normal speed during the end-turn sequence.\n",
		"body": [
			"cm:set_ai_uses_human_display_speed(${1:boolean use human speed })"
		],
	},
	"docgen:episodic_scripting:dismiss_advice": {
		"scope": "lua",
		"prefix": "dismiss_advice",
		"description": "cm:dismiss_advice()\n-  -\n\nDismisses the advisor panel.\n",
		"body": [
			"dismiss_advice()"
		],
	},
	"docgen:episodic_scripting:cm:dismiss_advice": {
		"scope": "lua",
		"prefix": "cm:dismiss_advice",
		"description": "cm:dismiss_advice()\n-  -\n\nDismisses the advisor panel.\n",
		"body": [
			"cm:dismiss_advice()"
		],
	},
	"docgen:episodic_scripting:dismiss_advice_at_end_turn": {
		"scope": "lua",
		"prefix": "dismiss_advice_at_end_turn",
		"description": "cm:dismiss_advice_at_end_turn()\n-  -\n\nSet whether or not advice should be dismissed on ending turn.\n",
		"body": [
			"dismiss_advice_at_end_turn(${1:boolean should dismiss})"
		],
	},
	"docgen:episodic_scripting:cm:dismiss_advice_at_end_turn": {
		"scope": "lua",
		"prefix": "cm:dismiss_advice_at_end_turn",
		"description": "cm:dismiss_advice_at_end_turn()\n-  -\n\nSet whether or not advice should be dismissed on ending turn.\n",
		"body": [
			"cm:dismiss_advice_at_end_turn(${1:boolean should dismiss})"
		],
	},
	"docgen:episodic_scripting:trigger_campaign_vo": {
		"scope": "lua",
		"prefix": "trigger_campaign_vo",
		"description": "cm:trigger_campaign_vo()\n-  -\n",
		"body": [
			"trigger_campaign_vo(${1:Triggers campaign voiceover audio at a character's 3D position. The character specified also partially specifies the path by which the voiceover sound is looked up.}, ${2:string sound event}, ${3:string character lookup}, ${4:number delay})"
		],
	},
	"docgen:episodic_scripting:cm:trigger_campaign_vo": {
		"scope": "lua",
		"prefix": "cm:trigger_campaign_vo",
		"description": "cm:trigger_campaign_vo()\n-  -\n",
		"body": [
			"cm:trigger_campaign_vo(${1:Triggers campaign voiceover audio at a character's 3D position. The character specified also partially specifies the path by which the voiceover sound is looked up.}, ${2:string sound event}, ${3:string character lookup}, ${4:number delay})"
		],
	},
	"docgen:episodic_scripting:set_camera_position": {
		"scope": "lua",
		"prefix": "set_camera_position",
		"description": "cm:set_camera_position()\n-  -\n\nRepositions the camera to the specified co-ordinates.\n",
		"body": [
			"set_camera_position(${1:number x}, ${2:number y}, ${3:number d}, ${4:number b}, ${5:number h})"
		],
	},
	"docgen:episodic_scripting:cm:set_camera_position": {
		"scope": "lua",
		"prefix": "cm:set_camera_position",
		"description": "cm:set_camera_position()\n-  -\n\nRepositions the camera to the specified co-ordinates.\n",
		"body": [
			"cm:set_camera_position(${1:number x}, ${2:number y}, ${3:number d}, ${4:number b}, ${5:number h})"
		],
	},
	"docgen:episodic_scripting:get_camera_position": {
		"scope": "lua",
		"prefix": "get_camera_position",
		"description": "cm:get_camera_position()\n-  -\n\nReturns the current position of the camera.\n",
		"body": [
			"get_camera_position()"
		],
	},
	"docgen:episodic_scripting:cm:get_camera_position": {
		"scope": "lua",
		"prefix": "cm:get_camera_position",
		"description": "cm:get_camera_position()\n-  -\n\nReturns the current position of the camera.\n",
		"body": [
			"cm:get_camera_position()"
		],
	},
	"docgen:episodic_scripting:scroll_camera_with_direction": {
		"scope": "lua",
		"prefix": "scroll_camera_with_direction",
		"description": "cm:scroll_camera_with_direction()\n-  -\n\nScroll the camera along a list of co-ordinates that define a spline.\n",
		"body": [
			"scroll_camera_with_direction(${1:boolean adjust endpoint}, ${2:number scroll time}, ${3:vararg co-ordinate list})"
		],
	},
	"docgen:episodic_scripting:cm:scroll_camera_with_direction": {
		"scope": "lua",
		"prefix": "cm:scroll_camera_with_direction",
		"description": "cm:scroll_camera_with_direction()\n-  -\n\nScroll the camera along a list of co-ordinates that define a spline.\n",
		"body": [
			"cm:scroll_camera_with_direction(${1:boolean adjust endpoint}, ${2:number scroll time}, ${3:vararg co-ordinate list})"
		],
	},
	"docgen:episodic_scripting:stop_camera": {
		"scope": "lua",
		"prefix": "stop_camera",
		"description": "cm:stop_camera()\n-  -\n\nStops a scrolling camera.\n",
		"body": [
			"stop_camera()"
		],
	},
	"docgen:episodic_scripting:cm:stop_camera": {
		"scope": "lua",
		"prefix": "cm:stop_camera",
		"description": "cm:stop_camera()\n-  -\n\nStops a scrolling camera.\n",
		"body": [
			"cm:stop_camera()"
		],
	},
	"docgen:episodic_scripting:fade_scene": {
		"scope": "lua",
		"prefix": "fade_scene",
		"description": "cm:fade_scene()\n-  -\n\nFades the scene to black or back to picture over a specified period.\n",
		"body": [
			"fade_scene(${1:number brightness}, ${2:number duration})"
		],
	},
	"docgen:episodic_scripting:cm:fade_scene": {
		"scope": "lua",
		"prefix": "cm:fade_scene",
		"description": "cm:fade_scene()\n-  -\n\nFades the scene to black or back to picture over a specified period.\n",
		"body": [
			"cm:fade_scene(${1:number brightness}, ${2:number duration})"
		],
	},
	"docgen:episodic_scripting:register_instant_movie": {
		"scope": "lua",
		"prefix": "register_instant_movie",
		"description": "cm:register_instant_movie()\n-  -\n\nPlays a fullscreen movie, by path from the <code>data/Movies</code> directory.\n",
		"body": [
			"register_instant_movie(${1:string movie path})"
		],
	},
	"docgen:episodic_scripting:cm:register_instant_movie": {
		"scope": "lua",
		"prefix": "cm:register_instant_movie",
		"description": "cm:register_instant_movie()\n-  -\n\nPlays a fullscreen movie, by path from the <code>data/Movies</code> directory.\n",
		"body": [
			"cm:register_instant_movie(${1:string movie path})"
		],
	},
	"docgen:episodic_scripting:register_outro_movie": {
		"scope": "lua",
		"prefix": "register_outro_movie",
		"description": "cm:register_outro_movie()\n-  -\n\nPlays a fullscreen movie for an outro, by path from the <code>data/Movies</code> directory.\n",
		"body": [
			"register_outro_movie(${1:string movie path})"
		],
	},
	"docgen:episodic_scripting:cm:register_outro_movie": {
		"scope": "lua",
		"prefix": "cm:register_outro_movie",
		"description": "cm:register_outro_movie()\n-  -\n\nPlays a fullscreen movie for an outro, by path from the <code>data/Movies</code> directory.\n",
		"body": [
			"cm:register_outro_movie(${1:string movie path})"
		],
	},
	"docgen:episodic_scripting:play_movie_in_ui": {
		"scope": "lua",
		"prefix": "play_movie_in_ui",
		"description": "cm:play_movie_in_ui()\n-  -\n\nPlays a movie in the movie panel, by path from the <code>data/Movies</code> directory.\n",
		"body": [
			"play_movie_in_ui(${1:string movie path})"
		],
	},
	"docgen:episodic_scripting:cm:play_movie_in_ui": {
		"scope": "lua",
		"prefix": "cm:play_movie_in_ui",
		"description": "cm:play_movie_in_ui()\n-  -\n\nPlays a movie in the movie panel, by path from the <code>data/Movies</code> directory.\n",
		"body": [
			"cm:play_movie_in_ui(${1:string movie path})"
		],
	},
	"docgen:episodic_scripting:cinematic": {
		"scope": "lua",
		"prefix": "cinematic",
		"description": "cm:cinematic()\n-  -\n\nReturns a cinematic script interface.\n",
		"body": [
			"cinematic()"
		],
	},
	"docgen:episodic_scripting:cm:cinematic": {
		"scope": "lua",
		"prefix": "cm:cinematic",
		"description": "cm:cinematic()\n-  -\n\nReturns a cinematic script interface.\n",
		"body": [
			"cm:cinematic()"
		],
	},
	"docgen:episodic_scripting:override_ui": {
		"scope": "lua",
		"prefix": "override_ui",
		"description": "cm:override_ui()\n-  -\n\nActivates or deactivates a ui override.\n",
		"body": [
			"override_ui(${1:string ui override name}, ${2:boolean activate override})"
		],
	},
	"docgen:episodic_scripting:cm:override_ui": {
		"scope": "lua",
		"prefix": "cm:override_ui",
		"description": "cm:override_ui()\n-  -\n\nActivates or deactivates a ui override.\n",
		"body": [
			"cm:override_ui(${1:string ui override name}, ${2:boolean activate override})"
		],
	},
	"docgen:episodic_scripting:stop_user_input": {
		"scope": "lua",
		"prefix": "stop_user_input",
		"description": "cm:stop_user_input()\n-  -\n\nStops or allows user input.\n",
		"body": [
			"stop_user_input(${1:boolean stop input})"
		],
	},
	"docgen:episodic_scripting:cm:stop_user_input": {
		"scope": "lua",
		"prefix": "cm:stop_user_input",
		"description": "cm:stop_user_input()\n-  -\n\nStops or allows user input.\n",
		"body": [
			"cm:stop_user_input(${1:boolean stop input})"
		],
	},
	"docgen:episodic_scripting:steal_user_input": {
		"scope": "lua",
		"prefix": "steal_user_input",
		"description": "cm:steal_user_input()\n-  -\n\nSteals user input, so that input notifications are redirected to script.\n",
		"body": [
			"steal_user_input(${1:boolean steal input})"
		],
	},
	"docgen:episodic_scripting:cm:steal_user_input": {
		"scope": "lua",
		"prefix": "cm:steal_user_input",
		"description": "cm:steal_user_input()\n-  -\n\nSteals user input, so that input notifications are redirected to script.\n",
		"body": [
			"cm:steal_user_input(${1:boolean steal input})"
		],
	},
	"docgen:episodic_scripting:steal_escape_key": {
		"scope": "lua",
		"prefix": "steal_escape_key",
		"description": "cm:steal_escape_key()\n-  -\n\nSteals the ESC key, so that keypresses on it are redirected to script.\n",
		"body": [
			"steal_escape_key(${1:boolean steal escape key})"
		],
	},
	"docgen:episodic_scripting:cm:steal_escape_key": {
		"scope": "lua",
		"prefix": "cm:steal_escape_key",
		"description": "cm:steal_escape_key()\n-  -\n\nSteals the ESC key, so that keypresses on it are redirected to script.\n",
		"body": [
			"cm:steal_escape_key(${1:boolean steal escape key})"
		],
	},
	"docgen:episodic_scripting:enable_ui": {
		"scope": "lua",
		"prefix": "enable_ui",
		"description": "cm:enable_ui()\n-  -\n\nEnables or disables the user interface.\n",
		"body": [
			"enable_ui(${1:boolean enable ui})"
		],
	},
	"docgen:episodic_scripting:cm:enable_ui": {
		"scope": "lua",
		"prefix": "cm:enable_ui",
		"description": "cm:enable_ui()\n-  -\n\nEnables or disables the user interface.\n",
		"body": [
			"cm:enable_ui(${1:boolean enable ui})"
		],
	},
	"docgen:episodic_scripting:disable_end_turn": {
		"scope": "lua",
		"prefix": "disable_end_turn",
		"description": "cm:disable_end_turn()\n-  -\n\nDisables or re-enables the local player's ability to end the turn.\n",
		"body": [
			"disable_end_turn()"
		],
	},
	"docgen:episodic_scripting:cm:disable_end_turn": {
		"scope": "lua",
		"prefix": "cm:disable_end_turn",
		"description": "cm:disable_end_turn()\n-  -\n\nDisables or re-enables the local player's ability to end the turn.\n",
		"body": [
			"cm:disable_end_turn()"
		],
	},
	"docgen:episodic_scripting:disable_shortcut": {
		"scope": "lua",
		"prefix": "disable_shortcut",
		"description": "cm:disable_shortcut()\n-  -\n\nDisables or re-enables a shortcut by name.\n",
		"body": [
			"disable_shortcut(${1:string component id}, ${2:string function id}, ${3:boolean should disable})"
		],
	},
	"docgen:episodic_scripting:cm:disable_shortcut": {
		"scope": "lua",
		"prefix": "cm:disable_shortcut",
		"description": "cm:disable_shortcut()\n-  -\n\nDisables or re-enables a shortcut by name.\n",
		"body": [
			"cm:disable_shortcut(${1:string component id}, ${2:string function id}, ${3:boolean should disable})"
		],
	},
	"docgen:episodic_scripting:add_unit_model_overrides": {
		"scope": "lua",
		"prefix": "add_unit_model_overrides",
		"description": "cm:add_unit_model_overrides()\n-  -\n\nSwap a model for a certain character.\n",
		"body": [
			"add_unit_model_overrides(${1:string character lookup}, ${2:string model key})"
		],
	},
	"docgen:episodic_scripting:cm:add_unit_model_overrides": {
		"scope": "lua",
		"prefix": "cm:add_unit_model_overrides",
		"description": "cm:add_unit_model_overrides()\n-  -\n\nSwap a model for a certain character.\n",
		"body": [
			"cm:add_unit_model_overrides(${1:string character lookup}, ${2:string model key})"
		],
	},
	"docgen:episodic_scripting:highlight_movement_extents": {
		"scope": "lua",
		"prefix": "highlight_movement_extents",
		"description": "cm:highlight_movement_extents()\n-  -\n\nCauses movement extents surrounded a selected character in the game to flash or not.\n",
		"body": [
			"highlight_movement_extents(${1:boolean should highlight})"
		],
	},
	"docgen:episodic_scripting:cm:highlight_movement_extents": {
		"scope": "lua",
		"prefix": "cm:highlight_movement_extents",
		"description": "cm:highlight_movement_extents()\n-  -\n\nCauses movement extents surrounded a selected character in the game to flash or not.\n",
		"body": [
			"cm:highlight_movement_extents(${1:boolean should highlight})"
		],
	},
	"docgen:episodic_scripting:highlight_selected_character_zoc": {
		"scope": "lua",
		"prefix": "highlight_selected_character_zoc",
		"description": "cm:highlight_selected_character_zoc()\n-  -\n\nCauses the zone of control surrounding a selected character in the game to flash or not.\n",
		"body": [
			"highlight_selected_character_zoc(${1:boolean should highlight})"
		],
	},
	"docgen:episodic_scripting:cm:highlight_selected_character_zoc": {
		"scope": "lua",
		"prefix": "cm:highlight_selected_character_zoc",
		"description": "cm:highlight_selected_character_zoc()\n-  -\n\nCauses the zone of control surrounding a selected character in the game to flash or not.\n",
		"body": [
			"cm:highlight_selected_character_zoc(${1:boolean should highlight})"
		],
	},
	"docgen:episodic_scripting:add_marker": {
		"scope": "lua",
		"prefix": "add_marker",
		"description": "cm:add_marker()\n-  -\n\nAdd a marker at a specified display position, using a specified marker type.\n",
		"body": [
			"add_marker(${1:string marker id}, ${2:string marker type}, ${3:number x}, ${4:number y}, ${5:number height})"
		],
	},
	"docgen:episodic_scripting:cm:add_marker": {
		"scope": "lua",
		"prefix": "cm:add_marker",
		"description": "cm:add_marker()\n-  -\n\nAdd a marker at a specified display position, using a specified marker type.\n",
		"body": [
			"cm:add_marker(${1:string marker id}, ${2:string marker type}, ${3:number x}, ${4:number y}, ${5:number height})"
		],
	},
	"docgen:episodic_scripting:remove_marker": {
		"scope": "lua",
		"prefix": "remove_marker",
		"description": "cm:remove_marker()\n-  -\n\nRemoves a marker previously added using episodic_scripting:add_marker, by marker id.\n",
		"body": [
			"remove_marker(${1:string marker id})"
		],
	},
	"docgen:episodic_scripting:cm:remove_marker": {
		"scope": "lua",
		"prefix": "cm:remove_marker",
		"description": "cm:remove_marker()\n-  -\n\nRemoves a marker previously added using episodic_scripting:add_marker, by marker id.\n",
		"body": [
			"cm:remove_marker(${1:string marker id})"
		],
	},
	"docgen:episodic_scripting:add_interactable_campaign_marker": {
		"scope": "lua",
		"prefix": "add_interactable_campaign_marker",
		"description": "cm:add_interactable_campaign_marker()\n-  -\n\nAdd an interactable campaign marker of a specified type to the campaign map at a specified location.\n",
		"body": [
			"add_interactable_campaign_marker(${1:string unique id}, ${2:string marker info}, ${3:number x}, ${4:number y}, ${5:number radius}, ${6:string faction key}, ${7:string subculture key})"
		],
	},
	"docgen:episodic_scripting:cm:add_interactable_campaign_marker": {
		"scope": "lua",
		"prefix": "cm:add_interactable_campaign_marker",
		"description": "cm:add_interactable_campaign_marker()\n-  -\n\nAdd an interactable campaign marker of a specified type to the campaign map at a specified location.\n",
		"body": [
			"cm:add_interactable_campaign_marker(${1:string unique id}, ${2:string marker info}, ${3:number x}, ${4:number y}, ${5:number radius}, ${6:string faction key}, ${7:string subculture key})"
		],
	},
	"docgen:episodic_scripting:remove_interactable_campaign_marker": {
		"scope": "lua",
		"prefix": "remove_interactable_campaign_marker",
		"description": "cm:remove_interactable_campaign_marker()\n-  -\n\nRemoves an interactable campaign marker that was previously added with episodic_scripting:add_interactable_campaign_marker, by unique id.\n",
		"body": [
			"remove_interactable_campaign_marker(${1:string unique id})"
		],
	},
	"docgen:episodic_scripting:cm:remove_interactable_campaign_marker": {
		"scope": "lua",
		"prefix": "cm:remove_interactable_campaign_marker",
		"description": "cm:remove_interactable_campaign_marker()\n-  -\n\nRemoves an interactable campaign marker that was previously added with episodic_scripting:add_interactable_campaign_marker, by unique id.\n",
		"body": [
			"cm:remove_interactable_campaign_marker(${1:string unique id})"
		],
	},
	"docgen:episodic_scripting:add_vfx": {
		"scope": "lua",
		"prefix": "add_vfx",
		"description": "cm:add_vfx()\n-  -\n\nAdds a vfx of a specified type at a specified display position.\n",
		"body": [
			"add_vfx(${1:string vfx id}, ${2:string vfx}, ${3:number x}, ${4:number y}, ${5:number height})"
		],
	},
	"docgen:episodic_scripting:cm:add_vfx": {
		"scope": "lua",
		"prefix": "cm:add_vfx",
		"description": "cm:add_vfx()\n-  -\n\nAdds a vfx of a specified type at a specified display position.\n",
		"body": [
			"cm:add_vfx(${1:string vfx id}, ${2:string vfx}, ${3:number x}, ${4:number y}, ${5:number height})"
		],
	},
	"docgen:episodic_scripting:remove_vfx": {
		"scope": "lua",
		"prefix": "remove_vfx",
		"description": "cm:remove_vfx()\n-  -\n\nRemoves a vfx previously added with episodic_scripting:add_vfx, by vfx id.\n",
		"body": [
			"remove_vfx(${1:string vfx id})"
		],
	},
	"docgen:episodic_scripting:cm:remove_vfx": {
		"scope": "lua",
		"prefix": "cm:remove_vfx",
		"description": "cm:remove_vfx()\n-  -\n\nRemoves a vfx previously added with episodic_scripting:add_vfx, by vfx id.\n",
		"body": [
			"cm:remove_vfx(${1:string vfx id})"
		],
	},
	"docgen:episodic_scripting:add_character_vfx": {
		"scope": "lua",
		"prefix": "add_character_vfx",
		"description": "cm:add_character_vfx()\n-  -\n\nAdds a vfx to a specified character.\n",
		"body": [
			"add_character_vfx(${1:number character cqi}, ${2:string vfx}, ${3:boolean show in shroud})"
		],
	},
	"docgen:episodic_scripting:cm:add_character_vfx": {
		"scope": "lua",
		"prefix": "cm:add_character_vfx",
		"description": "cm:add_character_vfx()\n-  -\n\nAdds a vfx to a specified character.\n",
		"body": [
			"cm:add_character_vfx(${1:number character cqi}, ${2:string vfx}, ${3:boolean show in shroud})"
		],
	},
	"docgen:episodic_scripting:remove_character_vfx": {
		"scope": "lua",
		"prefix": "remove_character_vfx",
		"description": "cm:remove_character_vfx()\n-  -\n\nRemoves a vfx from a specified character.\n",
		"body": [
			"remove_character_vfx(${1:number character cqi}, ${2:string vfx})"
		],
	},
	"docgen:episodic_scripting:cm:remove_character_vfx": {
		"scope": "lua",
		"prefix": "cm:remove_character_vfx",
		"description": "cm:remove_character_vfx()\n-  -\n\nRemoves a vfx from a specified character.\n",
		"body": [
			"cm:remove_character_vfx(${1:number character cqi}, ${2:string vfx})"
		],
	},
	"docgen:episodic_scripting:add_garrison_residence_vfx": {
		"scope": "lua",
		"prefix": "add_garrison_residence_vfx",
		"description": "cm:add_garrison_residence_vfx()\n-  -\n\nAdds a vfx to a specified garrison residence/settlement.\n",
		"body": [
			"add_garrison_residence_vfx(${1:number garrison residence cqi}, ${2:string vfx}, ${3:boolean show in shroud})"
		],
	},
	"docgen:episodic_scripting:cm:add_garrison_residence_vfx": {
		"scope": "lua",
		"prefix": "cm:add_garrison_residence_vfx",
		"description": "cm:add_garrison_residence_vfx()\n-  -\n\nAdds a vfx to a specified garrison residence/settlement.\n",
		"body": [
			"cm:add_garrison_residence_vfx(${1:number garrison residence cqi}, ${2:string vfx}, ${3:boolean show in shroud})"
		],
	},
	"docgen:episodic_scripting:remove_garrison_residence_vfx": {
		"scope": "lua",
		"prefix": "remove_garrison_residence_vfx",
		"description": "cm:remove_garrison_residence_vfx()\n-  -\n\nRemoves a vfx from a specified character.\n",
		"body": [
			"remove_garrison_residence_vfx(${1:number character cqi}, ${2:string vfx})"
		],
	},
	"docgen:episodic_scripting:cm:remove_garrison_residence_vfx": {
		"scope": "lua",
		"prefix": "cm:remove_garrison_residence_vfx",
		"description": "cm:remove_garrison_residence_vfx()\n-  -\n\nRemoves a vfx from a specified character.\n",
		"body": [
			"cm:remove_garrison_residence_vfx(${1:number character cqi}, ${2:string vfx})"
		],
	},
	"docgen:episodic_scripting:add_scripted_composite_scene_to_logical_position": {
		"scope": "lua",
		"prefix": "add_scripted_composite_scene_to_logical_position",
		"description": "cm:add_scripted_composite_scene_to_logical_position()\n-  -\n\nAdds a composite scene at a specified logical position.\n",
		"body": [
			"add_scripted_composite_scene_to_logical_position(${1:string name}, ${2:string composite scene}, ${3:number x}, ${4:number x}, ${5:number facing x}, ${6:number facing y}, ${7:boolean one shot}, ${8:boolean show in seen shroud}, ${9:boolean show in unseen shroud})"
		],
	},
	"docgen:episodic_scripting:cm:add_scripted_composite_scene_to_logical_position": {
		"scope": "lua",
		"prefix": "cm:add_scripted_composite_scene_to_logical_position",
		"description": "cm:add_scripted_composite_scene_to_logical_position()\n-  -\n\nAdds a composite scene at a specified logical position.\n",
		"body": [
			"cm:add_scripted_composite_scene_to_logical_position(${1:string name}, ${2:string composite scene}, ${3:number x}, ${4:number x}, ${5:number facing x}, ${6:number facing y}, ${7:boolean one shot}, ${8:boolean show in seen shroud}, ${9:boolean show in unseen shroud})"
		],
	},
	"docgen:episodic_scripting:add_scripted_composite_scene_to_settlement": {
		"scope": "lua",
		"prefix": "add_scripted_composite_scene_to_settlement",
		"description": "cm:add_scripted_composite_scene_to_settlement()\n-  -\n\nAdds a composite scene to a specified settlement.\n",
		"body": [
			"add_scripted_composite_scene_to_settlement(${1:string name}, ${2:string composite scene}, ${3:string settlement key}, ${4:number facing x}, ${5:number facing y}, ${6:boolean one shot}, ${7:boolean show in seen shroud}, ${8:boolean show in unseen shroud})"
		],
	},
	"docgen:episodic_scripting:cm:add_scripted_composite_scene_to_settlement": {
		"scope": "lua",
		"prefix": "cm:add_scripted_composite_scene_to_settlement",
		"description": "cm:add_scripted_composite_scene_to_settlement()\n-  -\n\nAdds a composite scene to a specified settlement.\n",
		"body": [
			"cm:add_scripted_composite_scene_to_settlement(${1:string name}, ${2:string composite scene}, ${3:string settlement key}, ${4:number facing x}, ${5:number facing y}, ${6:boolean one shot}, ${7:boolean show in seen shroud}, ${8:boolean show in unseen shroud})"
		],
	},
	"docgen:episodic_scripting:add_scripted_composite_scene_to_settlement_port": {
		"scope": "lua",
		"prefix": "add_scripted_composite_scene_to_settlement_port",
		"description": "cm:add_scripted_composite_scene_to_settlement_port()\n-  -\n\nAdds a composite scene to the port slot of a specified settlement.\n",
		"body": [
			"add_scripted_composite_scene_to_settlement_port(${1:string name}, ${2:string composite scene}, ${3:string settlement key}, ${4:number facing x}, ${5:number facing y}, ${6:boolean one shot}, ${7:boolean show in seen shroud}, ${8:boolean show in unseen shroud})"
		],
	},
	"docgen:episodic_scripting:cm:add_scripted_composite_scene_to_settlement_port": {
		"scope": "lua",
		"prefix": "cm:add_scripted_composite_scene_to_settlement_port",
		"description": "cm:add_scripted_composite_scene_to_settlement_port()\n-  -\n\nAdds a composite scene to the port slot of a specified settlement.\n",
		"body": [
			"cm:add_scripted_composite_scene_to_settlement_port(${1:string name}, ${2:string composite scene}, ${3:string settlement key}, ${4:number facing x}, ${5:number facing y}, ${6:boolean one shot}, ${7:boolean show in seen shroud}, ${8:boolean show in unseen shroud})"
		],
	},
	"docgen:episodic_scripting:remove_scripted_composite_scene": {
		"scope": "lua",
		"prefix": "remove_scripted_composite_scene",
		"description": "cm:remove_scripted_composite_scene()\n-  -\n\nRemoves a composite scene previously added by script, by the unique name given.\n",
		"body": [
			"remove_scripted_composite_scene(${1:string name})"
		],
	},
	"docgen:episodic_scripting:cm:remove_scripted_composite_scene": {
		"scope": "lua",
		"prefix": "cm:remove_scripted_composite_scene",
		"description": "cm:remove_scripted_composite_scene()\n-  -\n\nRemoves a composite scene previously added by script, by the unique name given.\n",
		"body": [
			"cm:remove_scripted_composite_scene(${1:string name})"
		],
	},
	"docgen:episodic_scripting:show_shroud": {
		"scope": "lua",
		"prefix": "show_shroud",
		"description": "cm:show_shroud()\n-  -\n\nEnables or disables the shroud.\n",
		"body": [
			"show_shroud(${1:boolean show})"
		],
	},
	"docgen:episodic_scripting:cm:show_shroud": {
		"scope": "lua",
		"prefix": "cm:show_shroud",
		"description": "cm:show_shroud()\n-  -\n\nEnables or disables the shroud.\n",
		"body": [
			"cm:show_shroud(${1:boolean show})"
		],
	},
	"docgen:episodic_scripting:take_shroud_snapshot": {
		"scope": "lua",
		"prefix": "take_shroud_snapshot",
		"description": "cm:take_shroud_snapshot()\n-  -\n\nCaches the state of the shroud across the map, so that it may later be recalled with episodic_scripting:restore_shroud_from_snapshot.\n",
		"body": [
			"take_shroud_snapshot()"
		],
	},
	"docgen:episodic_scripting:cm:take_shroud_snapshot": {
		"scope": "lua",
		"prefix": "cm:take_shroud_snapshot",
		"description": "cm:take_shroud_snapshot()\n-  -\n\nCaches the state of the shroud across the map, so that it may later be recalled with episodic_scripting:restore_shroud_from_snapshot.\n",
		"body": [
			"cm:take_shroud_snapshot()"
		],
	},
	"docgen:episodic_scripting:restore_shroud_from_snapshot": {
		"scope": "lua",
		"prefix": "restore_shroud_from_snapshot",
		"description": "cm:restore_shroud_from_snapshot()\n-  -\n\nRestores the state of the shroud across the map after it has been cached with episodic_scripting:take_shroud_snapshot.\n",
		"body": [
			"restore_shroud_from_snapshot()"
		],
	},
	"docgen:episodic_scripting:cm:restore_shroud_from_snapshot": {
		"scope": "lua",
		"prefix": "cm:restore_shroud_from_snapshot",
		"description": "cm:restore_shroud_from_snapshot()\n-  -\n\nRestores the state of the shroud across the map after it has been cached with episodic_scripting:take_shroud_snapshot.\n",
		"body": [
			"cm:restore_shroud_from_snapshot()"
		],
	},
	"docgen:episodic_scripting:make_neighbouring_regions_visible_in_shroud": {
		"scope": "lua",
		"prefix": "make_neighbouring_regions_visible_in_shroud",
		"description": "cm:make_neighbouring_regions_visible_in_shroud()\n-  -\n\nMakes all neighbouring regions visible in the shroud, for all factions.\n",
		"body": [
			"make_neighbouring_regions_visible_in_shroud()"
		],
	},
	"docgen:episodic_scripting:cm:make_neighbouring_regions_visible_in_shroud": {
		"scope": "lua",
		"prefix": "cm:make_neighbouring_regions_visible_in_shroud",
		"description": "cm:make_neighbouring_regions_visible_in_shroud()\n-  -\n\nMakes all neighbouring regions visible in the shroud, for all factions.\n",
		"body": [
			"cm:make_neighbouring_regions_visible_in_shroud()"
		],
	},
	"docgen:episodic_scripting:make_neighbouring_regions_seen_in_shroud": {
		"scope": "lua",
		"prefix": "make_neighbouring_regions_seen_in_shroud",
		"description": "cm:make_neighbouring_regions_seen_in_shroud()\n-  -\n\nMakes all neighbouring regions seen in the shroud, for all factions.\n",
		"body": [
			"make_neighbouring_regions_seen_in_shroud()"
		],
	},
	"docgen:episodic_scripting:cm:make_neighbouring_regions_seen_in_shroud": {
		"scope": "lua",
		"prefix": "cm:make_neighbouring_regions_seen_in_shroud",
		"description": "cm:make_neighbouring_regions_seen_in_shroud()\n-  -\n\nMakes all neighbouring regions seen in the shroud, for all factions.\n",
		"body": [
			"cm:make_neighbouring_regions_seen_in_shroud()"
		],
	},
	"docgen:episodic_scripting:make_region_visible_in_shroud": {
		"scope": "lua",
		"prefix": "make_region_visible_in_shroud",
		"description": "cm:make_region_visible_in_shroud()\n-  -\n\nRemoves the shroud from a specified land region for a specific faction.\n",
		"body": [
			"make_region_visible_in_shroud(${1:string faction key}, ${2:string region key})"
		],
	},
	"docgen:episodic_scripting:cm:make_region_visible_in_shroud": {
		"scope": "lua",
		"prefix": "cm:make_region_visible_in_shroud",
		"description": "cm:make_region_visible_in_shroud()\n-  -\n\nRemoves the shroud from a specified land region for a specific faction.\n",
		"body": [
			"cm:make_region_visible_in_shroud(${1:string faction key}, ${2:string region key})"
		],
	},
	"docgen:episodic_scripting:make_region_seen_in_shroud": {
		"scope": "lua",
		"prefix": "make_region_seen_in_shroud",
		"description": "cm:make_region_seen_in_shroud()\n-  -\n\nSets the shroud state of a specified land region to seen, for a specific faction.\n",
		"body": [
			"make_region_seen_in_shroud(${1:string faction key}, ${2:string region key})"
		],
	},
	"docgen:episodic_scripting:cm:make_region_seen_in_shroud": {
		"scope": "lua",
		"prefix": "cm:make_region_seen_in_shroud",
		"description": "cm:make_region_seen_in_shroud()\n-  -\n\nSets the shroud state of a specified land region to seen, for a specific faction.\n",
		"body": [
			"cm:make_region_seen_in_shroud(${1:string faction key}, ${2:string region key})"
		],
	},
	"docgen:episodic_scripting:make_sea_region_visible_in_shroud": {
		"scope": "lua",
		"prefix": "make_sea_region_visible_in_shroud",
		"description": "cm:make_sea_region_visible_in_shroud()\n-  -\n\nRemoves the shroud from a specified sea region for all factions.\n",
		"body": [
			"make_sea_region_visible_in_shroud(${1:string region key})"
		],
	},
	"docgen:episodic_scripting:cm:make_sea_region_visible_in_shroud": {
		"scope": "lua",
		"prefix": "cm:make_sea_region_visible_in_shroud",
		"description": "cm:make_sea_region_visible_in_shroud()\n-  -\n\nRemoves the shroud from a specified sea region for all factions.\n",
		"body": [
			"cm:make_sea_region_visible_in_shroud(${1:string region key})"
		],
	},
	"docgen:episodic_scripting:make_sea_region_seen_in_shroud": {
		"scope": "lua",
		"prefix": "make_sea_region_seen_in_shroud",
		"description": "cm:make_sea_region_seen_in_shroud()\n-  -\n\nSets the shroud state of a specified sea region for all factions to seen.\n",
		"body": [
			"make_sea_region_seen_in_shroud(${1:string region key})"
		],
	},
	"docgen:episodic_scripting:cm:make_sea_region_seen_in_shroud": {
		"scope": "lua",
		"prefix": "cm:make_sea_region_seen_in_shroud",
		"description": "cm:make_sea_region_seen_in_shroud()\n-  -\n\nSets the shroud state of a specified sea region for all factions to seen.\n",
		"body": [
			"cm:make_sea_region_seen_in_shroud(${1:string region key})"
		],
	},
	"docgen:episodic_scripting:disable_movement_for_ai_under_shroud": {
		"scope": "lua",
		"prefix": "disable_movement_for_ai_under_shroud",
		"description": "cm:disable_movement_for_ai_under_shroud()\n-  -\n\nRemoves all action points for characters from the specified target faction if they are hidden under the shroud of the specified player faction.\n",
		"body": [
			"disable_movement_for_ai_under_shroud(${1:string player faction key}, ${2:string ai faction key})"
		],
	},
	"docgen:episodic_scripting:cm:disable_movement_for_ai_under_shroud": {
		"scope": "lua",
		"prefix": "cm:disable_movement_for_ai_under_shroud",
		"description": "cm:disable_movement_for_ai_under_shroud()\n-  -\n\nRemoves all action points for characters from the specified target faction if they are hidden under the shroud of the specified player faction.\n",
		"body": [
			"cm:disable_movement_for_ai_under_shroud(${1:string player faction key}, ${2:string ai faction key})"
		],
	},
	"docgen:episodic_scripting:disable_shopping_for_ai_under_shroud": {
		"scope": "lua",
		"prefix": "disable_shopping_for_ai_under_shroud",
		"description": "cm:disable_shopping_for_ai_under_shroud()\n-  -\n\nPrevents all factions hidden under the shroud from constructing or repairing buildings.\n",
		"body": [
			"disable_shopping_for_ai_under_shroud(${1:boolean should disable})"
		],
	},
	"docgen:episodic_scripting:cm:disable_shopping_for_ai_under_shroud": {
		"scope": "lua",
		"prefix": "cm:disable_shopping_for_ai_under_shroud",
		"description": "cm:disable_shopping_for_ai_under_shroud()\n-  -\n\nPrevents all factions hidden under the shroud from constructing or repairing buildings.\n",
		"body": [
			"cm:disable_shopping_for_ai_under_shroud(${1:boolean should disable})"
		],
	},
	"docgen:episodic_scripting:create_force": {
		"scope": "lua",
		"prefix": "create_force",
		"description": "cm:create_force()\n-  -\n\nCreates an army or a navy at the specified position, belonging to the specified faction, with the specified list of units.\n",
		"body": [
			"create_force(${1:string faction key}, ${2:string unit list}, ${3:string region key}, ${4:number x}, ${5:number y}, ${6:string id}, ${7:boolean exclude unique characters}, ${8:boolean command queue})"
		],
	},
	"docgen:episodic_scripting:cm:create_force": {
		"scope": "lua",
		"prefix": "cm:create_force",
		"description": "cm:create_force()\n-  -\n\nCreates an army or a navy at the specified position, belonging to the specified faction, with the specified list of units.\n",
		"body": [
			"cm:create_force(${1:string faction key}, ${2:string unit list}, ${3:string region key}, ${4:number x}, ${5:number y}, ${6:string id}, ${7:boolean exclude unique characters}, ${8:boolean command queue})"
		],
	},
	"docgen:episodic_scripting:create_force_with_general": {
		"scope": "lua",
		"prefix": "create_force_with_general",
		"description": "cm:create_force_with_general()\n-  -\n\nCreates an army or a navy commanded by a specified character at the specified position, belonging to the specified faction, with the specified list of units.\n",
		"body": [
			"create_force_with_general(${1:string faction key}, ${2:string unit list}, ${3:string region key}, ${4:number x}, ${5:number y}, ${6:string character type}, ${7:string character subtype}, ${8:string forename}, ${9:string clanname}, ${10:string surname}, ${11:string other name}, ${12:string id}, ${13:boolean make faction leader})"
		],
	},
	"docgen:episodic_scripting:cm:create_force_with_general": {
		"scope": "lua",
		"prefix": "cm:create_force_with_general",
		"description": "cm:create_force_with_general()\n-  -\n\nCreates an army or a navy commanded by a specified character at the specified position, belonging to the specified faction, with the specified list of units.\n",
		"body": [
			"cm:create_force_with_general(${1:string faction key}, ${2:string unit list}, ${3:string region key}, ${4:number x}, ${5:number y}, ${6:string character type}, ${7:string character subtype}, ${8:string forename}, ${9:string clanname}, ${10:string surname}, ${11:string other name}, ${12:string id}, ${13:boolean make faction leader})"
		],
	},
	"docgen:episodic_scripting:create_force_with_existing_general": {
		"scope": "lua",
		"prefix": "create_force_with_existing_general",
		"description": "cm:create_force_with_existing_general()\n-  -\n\nCreates an army or a navy commanded by a specified existing character at the specified position, belonging to the specified faction, with the specified list of units.\n",
		"body": [
			"create_force_with_existing_general(${1:string character lookup}, ${2:string faction key}, ${3:string unit list}, ${4:string region key}, ${5:number x}, ${6:number y}, ${7:string id})"
		],
	},
	"docgen:episodic_scripting:cm:create_force_with_existing_general": {
		"scope": "lua",
		"prefix": "cm:create_force_with_existing_general",
		"description": "cm:create_force_with_existing_general()\n-  -\n\nCreates an army or a navy commanded by a specified existing character at the specified position, belonging to the specified faction, with the specified list of units.\n",
		"body": [
			"cm:create_force_with_existing_general(${1:string character lookup}, ${2:string faction key}, ${3:string unit list}, ${4:string region key}, ${5:number x}, ${6:number y}, ${7:string id})"
		],
	},
	"docgen:episodic_scripting:create_force_with_full_diplomatic_discovery": {
		"scope": "lua",
		"prefix": "create_force_with_full_diplomatic_discovery",
		"description": "cm:create_force_with_full_diplomatic_discovery()\n-  -\n\nCreates an army or a navy commanded by a specified existing character at the specified position, belonging to the specified faction, with the specified list of units.\n",
		"body": [
			"create_force_with_full_diplomatic_discovery(${1:string faction key}, ${2:string unit list}, ${3:string region key}, ${4:number x}, ${5:number y}, ${6:string id}, ${7:boolean exclude unique characters}, ${8:boolean command queue})"
		],
	},
	"docgen:episodic_scripting:cm:create_force_with_full_diplomatic_discovery": {
		"scope": "lua",
		"prefix": "cm:create_force_with_full_diplomatic_discovery",
		"description": "cm:create_force_with_full_diplomatic_discovery()\n-  -\n\nCreates an army or a navy commanded by a specified existing character at the specified position, belonging to the specified faction, with the specified list of units.\n",
		"body": [
			"cm:create_force_with_full_diplomatic_discovery(${1:string faction key}, ${2:string unit list}, ${3:string region key}, ${4:number x}, ${5:number y}, ${6:string id}, ${7:boolean exclude unique characters}, ${8:boolean command queue})"
		],
	},
	"docgen:episodic_scripting:create_agent": {
		"scope": "lua",
		"prefix": "create_agent",
		"description": "cm:create_agent()\n-  -\n\nCreate an agent/hero character at a specified position.\n",
		"body": [
			"create_agent(${1:string faction key}, ${2:string agent type}, ${3:string agent subtype}, ${4:number x}, ${5:number y}, ${6:string id}, ${7:boolean command queue})"
		],
	},
	"docgen:episodic_scripting:cm:create_agent": {
		"scope": "lua",
		"prefix": "cm:create_agent",
		"description": "cm:create_agent()\n-  -\n\nCreate an agent/hero character at a specified position.\n",
		"body": [
			"cm:create_agent(${1:string faction key}, ${2:string agent type}, ${3:string agent subtype}, ${4:number x}, ${5:number y}, ${6:string id}, ${7:boolean command queue})"
		],
	},
	"docgen:episodic_scripting:spawn_agent_at_position": {
		"scope": "lua",
		"prefix": "spawn_agent_at_position",
		"description": "cm:spawn_agent_at_position()\n-  -\n\nSpawns an agent of the specified type at the specified logical position.\n",
		"body": [
			"spawn_agent_at_position(${1:FACTION_SCRIPT_INTERFACE faction}, ${2:number x}, ${3:number y}, ${4:string agent type}, ${5:[opt=\"\"] string agent subtype})"
		],
	},
	"docgen:episodic_scripting:cm:spawn_agent_at_position": {
		"scope": "lua",
		"prefix": "cm:spawn_agent_at_position",
		"description": "cm:spawn_agent_at_position()\n-  -\n\nSpawns an agent of the specified type at the specified logical position.\n",
		"body": [
			"cm:spawn_agent_at_position(${1:FACTION_SCRIPT_INTERFACE faction}, ${2:number x}, ${3:number y}, ${4:string agent type}, ${5:[opt=\"\"] string agent subtype})"
		],
	},
	"docgen:episodic_scripting:spawn_agent_at_settlement": {
		"scope": "lua",
		"prefix": "spawn_agent_at_settlement",
		"description": "cm:spawn_agent_at_settlement()\n-  -\n\nSpawns an agent of the specified type next to the specified settlement.\n",
		"body": [
			"spawn_agent_at_settlement(${1:FACTION_SCRIPT_INTERFACE faction}, ${2:SETTLEMENT_SCRIPT_INTERFACE settlement}, ${3:string agent type}, ${4:[opt=\"\"] string agent subtype})"
		],
	},
	"docgen:episodic_scripting:cm:spawn_agent_at_settlement": {
		"scope": "lua",
		"prefix": "cm:spawn_agent_at_settlement",
		"description": "cm:spawn_agent_at_settlement()\n-  -\n\nSpawns an agent of the specified type next to the specified settlement.\n",
		"body": [
			"cm:spawn_agent_at_settlement(${1:FACTION_SCRIPT_INTERFACE faction}, ${2:SETTLEMENT_SCRIPT_INTERFACE settlement}, ${3:string agent type}, ${4:[opt=\"\"] string agent subtype})"
		],
	},
	"docgen:episodic_scripting:spawn_agent_at_military_force": {
		"scope": "lua",
		"prefix": "spawn_agent_at_military_force",
		"description": "cm:spawn_agent_at_military_force()\n-  -\n\nSpawns an agent of the specified type next to the specified military force.\n",
		"body": [
			"spawn_agent_at_military_force(${1:FACTION_SCRIPT_INTERFACE faction}, ${2:MILITARY_FORCE_SCRIPT_INTERFACE force}, ${3:string agent type}, ${4:[opt=\"\"] string agent subtype})"
		],
	},
	"docgen:episodic_scripting:cm:spawn_agent_at_military_force": {
		"scope": "lua",
		"prefix": "cm:spawn_agent_at_military_force",
		"description": "cm:spawn_agent_at_military_force()\n-  -\n\nSpawns an agent of the specified type next to the specified military force.\n",
		"body": [
			"cm:spawn_agent_at_military_force(${1:FACTION_SCRIPT_INTERFACE faction}, ${2:MILITARY_FORCE_SCRIPT_INTERFACE force}, ${3:string agent type}, ${4:[opt=\"\"] string agent subtype})"
		],
	},
	"docgen:episodic_scripting:embed_agent_in_force": {
		"scope": "lua",
		"prefix": "embed_agent_in_force",
		"description": "cm:embed_agent_in_force()\n-  -\n\nInstantly embed the specified agent in the specified force.\n",
		"body": [
			"embed_agent_in_force(${1:CHARACTER_SCRIPT_INTERFACE agent}, ${2:MILITARY_FORCE_SCRIPT_INTERFACE military force})"
		],
	},
	"docgen:episodic_scripting:cm:embed_agent_in_force": {
		"scope": "lua",
		"prefix": "cm:embed_agent_in_force",
		"description": "cm:embed_agent_in_force()\n-  -\n\nInstantly embed the specified agent in the specified force.\n",
		"body": [
			"cm:embed_agent_in_force(${1:CHARACTER_SCRIPT_INTERFACE agent}, ${2:MILITARY_FORCE_SCRIPT_INTERFACE military force})"
		],
	},
	"docgen:episodic_scripting:spawn_unique_agent": {
		"scope": "lua",
		"prefix": "spawn_unique_agent",
		"description": "cm:spawn_unique_agent()\n-  -\n\nCreates a unique agent.\n",
		"body": [
			"spawn_unique_agent(${1:number faction cqi}, ${2:string agent key}, ${3:boolean force})"
		],
	},
	"docgen:episodic_scripting:cm:spawn_unique_agent": {
		"scope": "lua",
		"prefix": "cm:spawn_unique_agent",
		"description": "cm:spawn_unique_agent()\n-  -\n\nCreates a unique agent.\n",
		"body": [
			"cm:spawn_unique_agent(${1:number faction cqi}, ${2:string agent key}, ${3:boolean force})"
		],
	},
	"docgen:episodic_scripting:spawn_unique_agent_at_region": {
		"scope": "lua",
		"prefix": "spawn_unique_agent_at_region",
		"description": "cm:spawn_unique_agent_at_region()\n-  -\n\nCreates a unique agent in a specified region.\n",
		"body": [
			"spawn_unique_agent_at_region(${1:number faction cqi}, ${2:string agent key}, ${3:number region cqi}, ${4:boolean force})"
		],
	},
	"docgen:episodic_scripting:cm:spawn_unique_agent_at_region": {
		"scope": "lua",
		"prefix": "cm:spawn_unique_agent_at_region",
		"description": "cm:spawn_unique_agent_at_region()\n-  -\n\nCreates a unique agent in a specified region.\n",
		"body": [
			"cm:spawn_unique_agent_at_region(${1:number faction cqi}, ${2:string agent key}, ${3:number region cqi}, ${4:boolean force})"
		],
	},
	"docgen:episodic_scripting:spawn_unique_agent_at_character": {
		"scope": "lua",
		"prefix": "spawn_unique_agent_at_character",
		"description": "cm:spawn_unique_agent_at_character()\n-  -\n\nCreates a unique agent at or near the position of a specified character.\n",
		"body": [
			"spawn_unique_agent_at_character(${1:number faction cqi}, ${2:string agent key}, ${3:number character cqi}, ${4:boolean force})"
		],
	},
	"docgen:episodic_scripting:cm:spawn_unique_agent_at_character": {
		"scope": "lua",
		"prefix": "cm:spawn_unique_agent_at_character",
		"description": "cm:spawn_unique_agent_at_character()\n-  -\n\nCreates a unique agent at or near the position of a specified character.\n",
		"body": [
			"cm:spawn_unique_agent_at_character(${1:number faction cqi}, ${2:string agent key}, ${3:number character cqi}, ${4:boolean force})"
		],
	},
	"docgen:episodic_scripting:spawn_rogue_army": {
		"scope": "lua",
		"prefix": "spawn_rogue_army",
		"description": "cm:spawn_rogue_army()\n-  -\n\nSpawns a rogue army of a specified rogue army faction, at a specified position.\n",
		"body": [
			"spawn_rogue_army(${1:number x}, ${2:number y})"
		],
	},
	"docgen:episodic_scripting:cm:spawn_rogue_army": {
		"scope": "lua",
		"prefix": "cm:spawn_rogue_army",
		"description": "cm:spawn_rogue_army()\n-  -\n\nSpawns a rogue army of a specified rogue army faction, at a specified position.\n",
		"body": [
			"cm:spawn_rogue_army(${1:number x}, ${2:number y})"
		],
	},
	"docgen:episodic_scripting:spawn_character_to_pool": {
		"scope": "lua",
		"prefix": "spawn_character_to_pool",
		"description": "cm:spawn_character_to_pool()\n-  -\n\nSpawns a new character in the specified faction's recruitment pool.\n",
		"body": [
			"spawn_character_to_pool(${1:string faction}, ${2:string forename}, ${3:string surname}, ${4:string clanname}, ${5:string othername}, ${6:number age}, ${7:boolean male}, ${8:string agent key}, ${9:string agent subtype key}, ${10:boolean immortal}, ${11:string art set})"
		],
	},
	"docgen:episodic_scripting:cm:spawn_character_to_pool": {
		"scope": "lua",
		"prefix": "cm:spawn_character_to_pool",
		"description": "cm:spawn_character_to_pool()\n-  -\n\nSpawns a new character in the specified faction's recruitment pool.\n",
		"body": [
			"cm:spawn_character_to_pool(${1:string faction}, ${2:string forename}, ${3:string surname}, ${4:string clanname}, ${5:string othername}, ${6:number age}, ${7:boolean male}, ${8:string agent key}, ${9:string agent subtype key}, ${10:boolean immortal}, ${11:string art set})"
		],
	},
	"docgen:episodic_scripting:spawn_character_into_family_tree": {
		"scope": "lua",
		"prefix": "spawn_character_into_family_tree",
		"description": "cm:spawn_character_into_family_tree()\n-  -\n\nSpawns a new character into a position in the family tree of the specified faction.\n",
		"body": [
			"spawn_character_into_family_tree(${1:string faction}, ${2:string forename}, ${3:string surname}, ${4:string clanname}, ${5:string othername}, ${6:number age}, ${7:boolean male}, ${8:string father}, ${9:string mother}, ${10:boolean immortal}, ${11:string art set}, ${12:boolean make heir})"
		],
	},
	"docgen:episodic_scripting:cm:spawn_character_into_family_tree": {
		"scope": "lua",
		"prefix": "cm:spawn_character_into_family_tree",
		"description": "cm:spawn_character_into_family_tree()\n-  -\n\nSpawns a new character into a position in the family tree of the specified faction.\n",
		"body": [
			"cm:spawn_character_into_family_tree(${1:string faction}, ${2:string forename}, ${3:string surname}, ${4:string clanname}, ${5:string othername}, ${6:number age}, ${7:boolean male}, ${8:string father}, ${9:string mother}, ${10:boolean immortal}, ${11:string art set}, ${12:boolean make heir})"
		],
	},
	"docgen:episodic_scripting:find_valid_spawn_location_for_character_from_settlement": {
		"scope": "lua",
		"prefix": "find_valid_spawn_location_for_character_from_settlement",
		"description": "cm:find_valid_spawn_location_for_character_from_settlement()\n-  -\n\nUtilises the pathfinder to locate and return a valid spawn point for a character, based around a settlement.\n",
		"body": [
			"find_valid_spawn_location_for_character_from_settlement(${1:string faction key}, ${2:string region key}, ${3:boolean on sea}, ${4:boolean in same region}, ${5:[opt=0] number preferred spawn distance})"
		],
	},
	"docgen:episodic_scripting:cm:find_valid_spawn_location_for_character_from_settlement": {
		"scope": "lua",
		"prefix": "cm:find_valid_spawn_location_for_character_from_settlement",
		"description": "cm:find_valid_spawn_location_for_character_from_settlement()\n-  -\n\nUtilises the pathfinder to locate and return a valid spawn point for a character, based around a settlement.\n",
		"body": [
			"cm:find_valid_spawn_location_for_character_from_settlement(${1:string faction key}, ${2:string region key}, ${3:boolean on sea}, ${4:boolean in same region}, ${5:[opt=0] number preferred spawn distance})"
		],
	},
	"docgen:episodic_scripting:find_valid_spawn_location_for_character_from_position": {
		"scope": "lua",
		"prefix": "find_valid_spawn_location_for_character_from_position",
		"description": "cm:find_valid_spawn_location_for_character_from_position()\n-  -\n\nUtilises the pathfinder to locate and return a valid spawn point for a character, based around a position.\n",
		"body": [
			"find_valid_spawn_location_for_character_from_position(${1:string faction key}, ${2:number x}, ${3:number y}, ${4:boolean in same region}, ${5:[opt=0] number preferred distance})"
		],
	},
	"docgen:episodic_scripting:cm:find_valid_spawn_location_for_character_from_position": {
		"scope": "lua",
		"prefix": "cm:find_valid_spawn_location_for_character_from_position",
		"description": "cm:find_valid_spawn_location_for_character_from_position()\n-  -\n\nUtilises the pathfinder to locate and return a valid spawn point for a character, based around a position.\n",
		"body": [
			"cm:find_valid_spawn_location_for_character_from_position(${1:string faction key}, ${2:number x}, ${3:number y}, ${4:boolean in same region}, ${5:[opt=0] number preferred distance})"
		],
	},
	"docgen:episodic_scripting:find_valid_spawn_location_for_character_from_character": {
		"scope": "lua",
		"prefix": "find_valid_spawn_location_for_character_from_character",
		"description": "cm:find_valid_spawn_location_for_character_from_character()\n-  -\n\nUtilises the pathfinder to locate and return a valid logical spawn point for a character, based around another character.\n",
		"body": [
			"find_valid_spawn_location_for_character_from_character(${1:string faction key}, ${2:string character lookup}, ${3:boolean in same region}, ${4:[opt=0] number preferred distance})"
		],
	},
	"docgen:episodic_scripting:cm:find_valid_spawn_location_for_character_from_character": {
		"scope": "lua",
		"prefix": "cm:find_valid_spawn_location_for_character_from_character",
		"description": "cm:find_valid_spawn_location_for_character_from_character()\n-  -\n\nUtilises the pathfinder to locate and return a valid logical spawn point for a character, based around another character.\n",
		"body": [
			"cm:find_valid_spawn_location_for_character_from_character(${1:string faction key}, ${2:string character lookup}, ${3:boolean in same region}, ${4:[opt=0] number preferred distance})"
		],
	},
	"docgen:episodic_scripting:appoint_character_to_most_expensive_force": {
		"scope": "lua",
		"prefix": "appoint_character_to_most_expensive_force",
		"description": "cm:appoint_character_to_most_expensive_force()\n-  -\n\nAppoints the specified character to the command of the most expensive military force in their faction.\n",
		"body": [
			"appoint_character_to_most_expensive_force(${1:string character lookup})"
		],
	},
	"docgen:episodic_scripting:cm:appoint_character_to_most_expensive_force": {
		"scope": "lua",
		"prefix": "cm:appoint_character_to_most_expensive_force",
		"description": "cm:appoint_character_to_most_expensive_force()\n-  -\n\nAppoints the specified character to the command of the most expensive military force in their faction.\n",
		"body": [
			"cm:appoint_character_to_most_expensive_force(${1:string character lookup})"
		],
	},
	"docgen:episodic_scripting:lock_starting_general_recruitment": {
		"scope": "lua",
		"prefix": "lock_starting_general_recruitment",
		"description": "cm:lock_starting_general_recruitment()\n-  -\n\nLocks recruitment of a starting general, preventing them from being created from the recruitment pool.\n",
		"body": [
			"lock_starting_general_recruitment(${1:string startpos id}, ${2:string faction key})"
		],
	},
	"docgen:episodic_scripting:cm:lock_starting_general_recruitment": {
		"scope": "lua",
		"prefix": "cm:lock_starting_general_recruitment",
		"description": "cm:lock_starting_general_recruitment()\n-  -\n\nLocks recruitment of a starting general, preventing them from being created from the recruitment pool.\n",
		"body": [
			"cm:lock_starting_general_recruitment(${1:string startpos id}, ${2:string faction key})"
		],
	},
	"docgen:episodic_scripting:unlock_starting_general_recruitment": {
		"scope": "lua",
		"prefix": "unlock_starting_general_recruitment",
		"description": "cm:unlock_starting_general_recruitment()\n-  -\n\nUnlocks recruitment of a starting general, allowing them to be recruited.\n",
		"body": [
			"unlock_starting_general_recruitment(${1:string startpos id}, ${2:string faction key})"
		],
	},
	"docgen:episodic_scripting:cm:unlock_starting_general_recruitment": {
		"scope": "lua",
		"prefix": "cm:unlock_starting_general_recruitment",
		"description": "cm:unlock_starting_general_recruitment()\n-  -\n\nUnlocks recruitment of a starting general, allowing them to be recruited.\n",
		"body": [
			"cm:unlock_starting_general_recruitment(${1:string startpos id}, ${2:string faction key})"
		],
	},
	"docgen:episodic_scripting:add_units_to_faction_mercenary_pool": {
		"scope": "lua",
		"prefix": "add_units_to_faction_mercenary_pool",
		"description": "cm:add_units_to_faction_mercenary_pool()\n-  -\n\nAdds one or more of a specified unit to the specified faction's mercenary pool.\n",
		"body": [
			"add_units_to_faction_mercenary_pool(${1:number faction cqi}, ${2:string unit key}, ${3:number count})"
		],
	},
	"docgen:episodic_scripting:cm:add_units_to_faction_mercenary_pool": {
		"scope": "lua",
		"prefix": "cm:add_units_to_faction_mercenary_pool",
		"description": "cm:add_units_to_faction_mercenary_pool()\n-  -\n\nAdds one or more of a specified unit to the specified faction's mercenary pool.\n",
		"body": [
			"cm:add_units_to_faction_mercenary_pool(${1:number faction cqi}, ${2:string unit key}, ${3:number count})"
		],
	},
	"docgen:episodic_scripting:add_units_to_province_mercenary_pool_by_region": {
		"scope": "lua",
		"prefix": "add_units_to_province_mercenary_pool_by_region",
		"description": "cm:add_units_to_province_mercenary_pool_by_region()\n-  -\n\nAdds one or more of a specified unit to the specified province mercenary pool.\n",
		"body": [
			"add_units_to_province_mercenary_pool_by_region(${1:string region key}, ${2:string unit key}, ${3:number count})"
		],
	},
	"docgen:episodic_scripting:cm:add_units_to_province_mercenary_pool_by_region": {
		"scope": "lua",
		"prefix": "cm:add_units_to_province_mercenary_pool_by_region",
		"description": "cm:add_units_to_province_mercenary_pool_by_region()\n-  -\n\nAdds one or more of a specified unit to the specified province mercenary pool.\n",
		"body": [
			"cm:add_units_to_province_mercenary_pool_by_region(${1:string region key}, ${2:string unit key}, ${3:number count})"
		],
	},
	"docgen:episodic_scripting:add_agent_experience": {
		"scope": "lua",
		"prefix": "add_agent_experience",
		"description": "cm:add_agent_experience()\n-  -\n\nAdds experience points to a specified character.\n",
		"body": [
			"add_agent_experience(${1:string character lookup}, ${2:number points})"
		],
	},
	"docgen:episodic_scripting:cm:add_agent_experience": {
		"scope": "lua",
		"prefix": "cm:add_agent_experience",
		"description": "cm:add_agent_experience()\n-  -\n\nAdds experience points to a specified character.\n",
		"body": [
			"cm:add_agent_experience(${1:string character lookup}, ${2:number points})"
		],
	},
	"docgen:episodic_scripting:add_experience_to_units_commanded_by_character": {
		"scope": "lua",
		"prefix": "add_experience_to_units_commanded_by_character",
		"description": "cm:add_experience_to_units_commanded_by_character()\n-  -\n\nIncreases the experience of all units commanded by a specified character, by a specified level.\n",
		"body": [
			"add_experience_to_units_commanded_by_character(${1:string character lookup}, ${2:number level})"
		],
	},
	"docgen:episodic_scripting:cm:add_experience_to_units_commanded_by_character": {
		"scope": "lua",
		"prefix": "cm:add_experience_to_units_commanded_by_character",
		"description": "cm:add_experience_to_units_commanded_by_character()\n-  -\n\nIncreases the experience of all units commanded by a specified character, by a specified level.\n",
		"body": [
			"cm:add_experience_to_units_commanded_by_character(${1:string character lookup}, ${2:number level})"
		],
	},
	"docgen:episodic_scripting:set_character_experience_disabled": {
		"scope": "lua",
		"prefix": "set_character_experience_disabled",
		"description": "cm:set_character_experience_disabled()\n-  -\n\nDisables or re-enables characters gaining experience across the whole campaign.\n",
		"body": [
			"set_character_experience_disabled(${1:boolean disable})"
		],
	},
	"docgen:episodic_scripting:cm:set_character_experience_disabled": {
		"scope": "lua",
		"prefix": "cm:set_character_experience_disabled",
		"description": "cm:set_character_experience_disabled()\n-  -\n\nDisables or re-enables characters gaining experience across the whole campaign.\n",
		"body": [
			"cm:set_character_experience_disabled(${1:boolean disable})"
		],
	},
	"docgen:episodic_scripting:grant_unit_to_character": {
		"scope": "lua",
		"prefix": "grant_unit_to_character",
		"description": "cm:grant_unit_to_character()\n-  -\n\nCreate and add a specifiec unit to a military force commanded by a specified character.\n",
		"body": [
			"grant_unit_to_character(${1:string character lookup}, ${2:string unit key})"
		],
	},
	"docgen:episodic_scripting:cm:grant_unit_to_character": {
		"scope": "lua",
		"prefix": "cm:grant_unit_to_character",
		"description": "cm:grant_unit_to_character()\n-  -\n\nCreate and add a specifiec unit to a military force commanded by a specified character.\n",
		"body": [
			"cm:grant_unit_to_character(${1:string character lookup}, ${2:string unit key})"
		],
	},
	"docgen:episodic_scripting:move_to": {
		"scope": "lua",
		"prefix": "move_to",
		"description": "cm:move_to()\n-  -\n\nOrders the specified character to move to a specified logical position.\n",
		"body": [
			"move_to(${1:string character lookup}, ${2:number x}, ${3:number y}, ${4:boolean command queue})"
		],
	},
	"docgen:episodic_scripting:cm:move_to": {
		"scope": "lua",
		"prefix": "cm:move_to",
		"description": "cm:move_to()\n-  -\n\nOrders the specified character to move to a specified logical position.\n",
		"body": [
			"cm:move_to(${1:string character lookup}, ${2:number x}, ${3:number y}, ${4:boolean command queue})"
		],
	},
	"docgen:episodic_scripting:cancel_actions_for": {
		"scope": "lua",
		"prefix": "cancel_actions_for",
		"description": "cm:cancel_actions_for()\n-  -\n\nImmediately cancels the current actions of a specified character.\n",
		"body": [
			"cancel_actions_for(${1:string character lookup})"
		],
	},
	"docgen:episodic_scripting:cm:cancel_actions_for": {
		"scope": "lua",
		"prefix": "cm:cancel_actions_for",
		"description": "cm:cancel_actions_for()\n-  -\n\nImmediately cancels the current actions of a specified character.\n",
		"body": [
			"cm:cancel_actions_for(${1:string character lookup})"
		],
	},
	"docgen:episodic_scripting:teleport_to": {
		"scope": "lua",
		"prefix": "teleport_to",
		"description": "cm:teleport_to()\n-  -\n\nOrders the specified character to immediately teleport to a specified logical position.\n",
		"body": [
			"teleport_to(${1:string character lookup}, ${2:number x}, ${3:number y}, ${4:boolean command queue})"
		],
	},
	"docgen:episodic_scripting:cm:teleport_to": {
		"scope": "lua",
		"prefix": "cm:teleport_to",
		"description": "cm:teleport_to()\n-  -\n\nOrders the specified character to immediately teleport to a specified logical position.\n",
		"body": [
			"cm:teleport_to(${1:string character lookup}, ${2:number x}, ${3:number y}, ${4:boolean command queue})"
		],
	},
	"docgen:episodic_scripting:join_garrison": {
		"scope": "lua",
		"prefix": "join_garrison",
		"description": "cm:join_garrison()\n-  -\n\nOrders the specified character to move into a specified garrison residence.\n",
		"body": [
			"join_garrison(${1:string character lookup}, ${2:string settlement})"
		],
	},
	"docgen:episodic_scripting:cm:join_garrison": {
		"scope": "lua",
		"prefix": "cm:join_garrison",
		"description": "cm:join_garrison()\n-  -\n\nOrders the specified character to move into a specified garrison residence.\n",
		"body": [
			"cm:join_garrison(${1:string character lookup}, ${2:string settlement})"
		],
	},
	"docgen:episodic_scripting:leave_garrison": {
		"scope": "lua",
		"prefix": "leave_garrison",
		"description": "cm:leave_garrison()\n-  -\n\nMake the specified garrisoned character leave their garrison and move to a specified logical positon.\n",
		"body": [
			"leave_garrison(${1:string character lookup}, ${2:string settlement})"
		],
	},
	"docgen:episodic_scripting:cm:leave_garrison": {
		"scope": "lua",
		"prefix": "cm:leave_garrison",
		"description": "cm:leave_garrison()\n-  -\n\nMake the specified garrisoned character leave their garrison and move to a specified logical positon.\n",
		"body": [
			"cm:leave_garrison(${1:string character lookup}, ${2:string settlement})"
		],
	},
	"docgen:episodic_scripting:attack": {
		"scope": "lua",
		"prefix": "attack",
		"description": "cm:attack()\n-  -\n\nOrders the specified character to attack a target character.\n",
		"body": [
			"attack(${1:string character lookup}, ${2:string target character lookup}, ${3:boolean command queue})"
		],
	},
	"docgen:episodic_scripting:cm:attack": {
		"scope": "lua",
		"prefix": "cm:attack",
		"description": "cm:attack()\n-  -\n\nOrders the specified character to attack a target character.\n",
		"body": [
			"cm:attack(${1:string character lookup}, ${2:string target character lookup}, ${3:boolean command queue})"
		],
	},
	"docgen:episodic_scripting:attack_region": {
		"scope": "lua",
		"prefix": "attack_region",
		"description": "cm:attack_region()\n-  -\n\nOrders the specified character to initiate an attack on the settlement in a target region.\n",
		"body": [
			"attack_region(${1:string character lookup}, ${2:string region key}, ${3:boolean command queue})"
		],
	},
	"docgen:episodic_scripting:cm:attack_region": {
		"scope": "lua",
		"prefix": "cm:attack_region",
		"description": "cm:attack_region()\n-  -\n\nOrders the specified character to initiate an attack on the settlement in a target region.\n",
		"body": [
			"cm:attack_region(${1:string character lookup}, ${2:string region key}, ${3:boolean command queue})"
		],
	},
	"docgen:episodic_scripting:force_attack_of_opportunity": {
		"scope": "lua",
		"prefix": "force_attack_of_opportunity",
		"description": "cm:force_attack_of_opportunity()\n-  -\n\nOrders the specified character to attack a target character through an attack of opportunity - either an interception or an ambush.\n",
		"body": [
			"force_attack_of_opportunity(${1:number attacker cqi}, ${2:number target cqi}, ${3:boolean is ambush})"
		],
	},
	"docgen:episodic_scripting:cm:force_attack_of_opportunity": {
		"scope": "lua",
		"prefix": "cm:force_attack_of_opportunity",
		"description": "cm:force_attack_of_opportunity()\n-  -\n\nOrders the specified character to attack a target character through an attack of opportunity - either an interception or an ambush.\n",
		"body": [
			"cm:force_attack_of_opportunity(${1:number attacker cqi}, ${2:number target cqi}, ${3:boolean is ambush})"
		],
	},
	"docgen:episodic_scripting:seek_exchange": {
		"scope": "lua",
		"prefix": "seek_exchange",
		"description": "cm:seek_exchange()\n-  -\n\nOrders one character to seek a unit exchange with a target character, allowing troops to be swapped between the two armies they command.\n",
		"body": [
			"seek_exchange(${1:string character lookup}, ${2:string target character lookup}, ${3:boolean show ui}, ${4:boolean command queue})"
		],
	},
	"docgen:episodic_scripting:cm:seek_exchange": {
		"scope": "lua",
		"prefix": "cm:seek_exchange",
		"description": "cm:seek_exchange()\n-  -\n\nOrders one character to seek a unit exchange with a target character, allowing troops to be swapped between the two armies they command.\n",
		"body": [
			"cm:seek_exchange(${1:string character lookup}, ${2:string target character lookup}, ${3:boolean show ui}, ${4:boolean command queue})"
		],
	},
	"docgen:episodic_scripting:replenish_action_points": {
		"scope": "lua",
		"prefix": "replenish_action_points",
		"description": "cm:replenish_action_points()\n-  -\n\nReplenishes the action points of a specified character.\n",
		"body": [
			"replenish_action_points(${1:string character lookup})"
		],
	},
	"docgen:episodic_scripting:cm:replenish_action_points": {
		"scope": "lua",
		"prefix": "cm:replenish_action_points",
		"description": "cm:replenish_action_points()\n-  -\n\nReplenishes the action points of a specified character.\n",
		"body": [
			"cm:replenish_action_points(${1:string character lookup})"
		],
	},
	"docgen:episodic_scripting:zero_action_points": {
		"scope": "lua",
		"prefix": "zero_action_points",
		"description": "cm:zero_action_points()\n-  -\n\nRemoves all action points from a specified character.\n",
		"body": [
			"zero_action_points(${1:string character lookup})"
		],
	},
	"docgen:episodic_scripting:cm:zero_action_points": {
		"scope": "lua",
		"prefix": "cm:zero_action_points",
		"description": "cm:zero_action_points()\n-  -\n\nRemoves all action points from a specified character.\n",
		"body": [
			"cm:zero_action_points(${1:string character lookup})"
		],
	},
	"docgen:episodic_scripting:kill_character": {
		"scope": "lua",
		"prefix": "kill_character",
		"description": "cm:kill_character()\n-  -\n\nKills a specified character, and optionally also the entire military force they command.\n",
		"body": [
			"kill_character(${1:string character lookup}, ${2:boolean destroy force}, ${3:boolean command queue})"
		],
	},
	"docgen:episodic_scripting:cm:kill_character": {
		"scope": "lua",
		"prefix": "cm:kill_character",
		"description": "cm:kill_character()\n-  -\n\nKills a specified character, and optionally also the entire military force they command.\n",
		"body": [
			"cm:kill_character(${1:string character lookup}, ${2:boolean destroy force}, ${3:boolean command queue})"
		],
	},
	"docgen:episodic_scripting:kill_character_and_commanded_unit": {
		"scope": "lua",
		"prefix": "kill_character_and_commanded_unit",
		"description": "cm:kill_character_and_commanded_unit()\n-  -\n\nKills a specified character and their associated unit, and optionally also the entire military force they command.\n",
		"body": [
			"kill_character_and_commanded_unit(${1:string character lookup}, ${2:boolean destroy force}, ${3:boolean command queue})"
		],
	},
	"docgen:episodic_scripting:cm:kill_character_and_commanded_unit": {
		"scope": "lua",
		"prefix": "cm:kill_character_and_commanded_unit",
		"description": "cm:kill_character_and_commanded_unit()\n-  -\n\nKills a specified character and their associated unit, and optionally also the entire military force they command.\n",
		"body": [
			"cm:kill_character_and_commanded_unit(${1:string character lookup}, ${2:boolean destroy force}, ${3:boolean command queue})"
		],
	},
	"docgen:episodic_scripting:wound_character": {
		"scope": "lua",
		"prefix": "wound_character",
		"description": "cm:wound_character()\n-  -\n\nWounds a specified character, forcing them to convalesce for a specified number of turns before they can be re-appointed.\n",
		"body": [
			"wound_character(${1:string character lookup}, ${2:number convalescence time}, ${3:boolean command queue})"
		],
	},
	"docgen:episodic_scripting:cm:wound_character": {
		"scope": "lua",
		"prefix": "cm:wound_character",
		"description": "cm:wound_character()\n-  -\n\nWounds a specified character, forcing them to convalesce for a specified number of turns before they can be re-appointed.\n",
		"body": [
			"cm:wound_character(${1:string character lookup}, ${2:number convalescence time}, ${3:boolean command queue})"
		],
	},
	"docgen:episodic_scripting:force_agent_action_success_for_human": {
		"scope": "lua",
		"prefix": "force_agent_action_success_for_human",
		"description": "cm:force_agent_action_success_for_human()\n-  -\n\nForce the local player's faction to succeed at all agent actions.\n",
		"body": [
			"force_agent_action_success_for_human(${1:boolean force success})"
		],
	},
	"docgen:episodic_scripting:cm:force_agent_action_success_for_human": {
		"scope": "lua",
		"prefix": "cm:force_agent_action_success_for_human",
		"description": "cm:force_agent_action_success_for_human()\n-  -\n\nForce the local player's faction to succeed at all agent actions.\n",
		"body": [
			"cm:force_agent_action_success_for_human(${1:boolean force success})"
		],
	},
	"docgen:episodic_scripting:force_character_force_into_stance": {
		"scope": "lua",
		"prefix": "force_character_force_into_stance",
		"description": "cm:force_character_force_into_stance()\n-  -\n\nForces the military force commanded by the specified character into the specified stance.\n",
		"body": [
			"force_character_force_into_stance(${1:string character lookup}, ${2:string stance key})"
		],
	},
	"docgen:episodic_scripting:cm:force_character_force_into_stance": {
		"scope": "lua",
		"prefix": "cm:force_character_force_into_stance",
		"description": "cm:force_character_force_into_stance()\n-  -\n\nForces the military force commanded by the specified character into the specified stance.\n",
		"body": [
			"cm:force_character_force_into_stance(${1:string character lookup}, ${2:string stance key})"
		],
	},
	"docgen:episodic_scripting:set_only_allow_basic_recruit_stance": {
		"scope": "lua",
		"prefix": "set_only_allow_basic_recruit_stance",
		"description": "cm:set_only_allow_basic_recruit_stance()\n-  -\n\nStops all military forces from entering non-default recruitment stances, such as raiding camp stance.\n",
		"body": [
			"set_only_allow_basic_recruit_stance(${1:boolean force basic recruitment stances})"
		],
	},
	"docgen:episodic_scripting:cm:set_only_allow_basic_recruit_stance": {
		"scope": "lua",
		"prefix": "cm:set_only_allow_basic_recruit_stance",
		"description": "cm:set_only_allow_basic_recruit_stance()\n-  -\n\nStops all military forces from entering non-default recruitment stances, such as raiding camp stance.\n",
		"body": [
			"cm:set_only_allow_basic_recruit_stance(${1:boolean force basic recruitment stances})"
		],
	},
	"docgen:episodic_scripting:remove_unit_from_character": {
		"scope": "lua",
		"prefix": "remove_unit_from_character",
		"description": "cm:remove_unit_from_character()\n-  -\n\nRemove the first instance of the specified unit from the force commanded by the specified character.\n",
		"body": [
			"remove_unit_from_character(${1:string character lookup}, ${2:string unit key})"
		],
	},
	"docgen:episodic_scripting:cm:remove_unit_from_character": {
		"scope": "lua",
		"prefix": "cm:remove_unit_from_character",
		"description": "cm:remove_unit_from_character()\n-  -\n\nRemove the first instance of the specified unit from the force commanded by the specified character.\n",
		"body": [
			"cm:remove_unit_from_character(${1:string character lookup}, ${2:string unit key})"
		],
	},
	"docgen:episodic_scripting:set_character_immortality": {
		"scope": "lua",
		"prefix": "set_character_immortality",
		"description": "cm:set_character_immortality()\n-  -\n\nSets whether the specified character can die or not.\n",
		"body": [
			"set_character_immortality(${1:string character lookup}, ${2:boolean is immortal})"
		],
	},
	"docgen:episodic_scripting:cm:set_character_immortality": {
		"scope": "lua",
		"prefix": "cm:set_character_immortality",
		"description": "cm:set_character_immortality()\n-  -\n\nSets whether the specified character can die or not.\n",
		"body": [
			"cm:set_character_immortality(${1:string character lookup}, ${2:boolean is immortal})"
		],
	},
	"docgen:episodic_scripting:set_character_unique": {
		"scope": "lua",
		"prefix": "set_character_unique",
		"description": "cm:set_character_unique()\n-  -\n\nSets whether the specified character is unique or not.\n",
		"body": [
			"set_character_unique(${1:string character lookup}, ${2:boolean is unique})"
		],
	},
	"docgen:episodic_scripting:cm:set_character_unique": {
		"scope": "lua",
		"prefix": "cm:set_character_unique",
		"description": "cm:set_character_unique()\n-  -\n\nSets whether the specified character is unique or not.\n",
		"body": [
			"cm:set_character_unique(${1:string character lookup}, ${2:boolean is unique})"
		],
	},
	"docgen:episodic_scripting:stop_character_convalescing": {
		"scope": "lua",
		"prefix": "stop_character_convalescing",
		"description": "cm:stop_character_convalescing()\n-  -\n\nInstantly returns a convalescing (wounded) character to the available pool of recruitable characters for their faction.\n",
		"body": [
			"stop_character_convalescing(${1:number character cqi})"
		],
	},
	"docgen:episodic_scripting:cm:stop_character_convalescing": {
		"scope": "lua",
		"prefix": "cm:stop_character_convalescing",
		"description": "cm:stop_character_convalescing()\n-  -\n\nInstantly returns a convalescing (wounded) character to the available pool of recruitable characters for their faction.\n",
		"body": [
			"cm:stop_character_convalescing(${1:number character cqi})"
		],
	},
	"docgen:episodic_scripting:modify_character_personal_loyalty_factor": {
		"scope": "lua",
		"prefix": "modify_character_personal_loyalty_factor",
		"description": "cm:modify_character_personal_loyalty_factor()\n-  -\n\nModifies the loyalty of a specified character.\n",
		"body": [
			"modify_character_personal_loyalty_factor(${1:string character lookup}, ${2:number loyalty modifier})"
		],
	},
	"docgen:episodic_scripting:cm:modify_character_personal_loyalty_factor": {
		"scope": "lua",
		"prefix": "cm:modify_character_personal_loyalty_factor",
		"description": "cm:modify_character_personal_loyalty_factor()\n-  -\n\nModifies the loyalty of a specified character.\n",
		"body": [
			"cm:modify_character_personal_loyalty_factor(${1:string character lookup}, ${2:number loyalty modifier})"
		],
	},
	"docgen:episodic_scripting:add_attack_of_opportunity_overrides": {
		"scope": "lua",
		"prefix": "add_attack_of_opportunity_overrides",
		"description": "cm:add_attack_of_opportunity_overrides()\n-  -\n\nForces a specified character to always or never perform an attack of opportunity, meaning they will always/never intercept when they get the chance.\n",
		"body": [
			"add_attack_of_opportunity_overrides(${1:string character lookup}, ${2:boolean force attack})"
		],
	},
	"docgen:episodic_scripting:cm:add_attack_of_opportunity_overrides": {
		"scope": "lua",
		"prefix": "cm:add_attack_of_opportunity_overrides",
		"description": "cm:add_attack_of_opportunity_overrides()\n-  -\n\nForces a specified character to always or never perform an attack of opportunity, meaning they will always/never intercept when they get the chance.\n",
		"body": [
			"cm:add_attack_of_opportunity_overrides(${1:string character lookup}, ${2:boolean force attack})"
		],
	},
	"docgen:episodic_scripting:remove_attack_of_opportunity_overrides": {
		"scope": "lua",
		"prefix": "remove_attack_of_opportunity_overrides",
		"description": "cm:remove_attack_of_opportunity_overrides()\n-  -\n\nRemoves any attack of opportunity override previously placed on the target character with episodic_scripting:add_attack_of_opportunity_overrides.\n",
		"body": [
			"remove_attack_of_opportunity_overrides(${1:string character lookup})"
		],
	},
	"docgen:episodic_scripting:cm:remove_attack_of_opportunity_overrides": {
		"scope": "lua",
		"prefix": "cm:remove_attack_of_opportunity_overrides",
		"description": "cm:remove_attack_of_opportunity_overrides()\n-  -\n\nRemoves any attack of opportunity override previously placed on the target character with episodic_scripting:add_attack_of_opportunity_overrides.\n",
		"body": [
			"cm:remove_attack_of_opportunity_overrides(${1:string character lookup})"
		],
	},
	"docgen:episodic_scripting:convert_force_to_type": {
		"scope": "lua",
		"prefix": "convert_force_to_type",
		"description": "cm:convert_force_to_type()\n-  -\n\nConverts a military force to a specific type.\n",
		"body": [
			"convert_force_to_type(${1:MILITARY_FORCE_SCRIPT_INTERFACE force}, ${2:string type})"
		],
	},
	"docgen:episodic_scripting:cm:convert_force_to_type": {
		"scope": "lua",
		"prefix": "cm:convert_force_to_type",
		"description": "cm:convert_force_to_type()\n-  -\n\nConverts a military force to a specific type.\n",
		"body": [
			"cm:convert_force_to_type(${1:MILITARY_FORCE_SCRIPT_INTERFACE force}, ${2:string type})"
		],
	},
	"docgen:episodic_scripting:add_circle_area_trigger": {
		"scope": "lua",
		"prefix": "add_circle_area_trigger",
		"description": "cm:add_circle_area_trigger()\n-  -\n\nEstablishes a circular area trigger monitor around a specified display position, with a specified character lookup string filter.\n",
		"body": [
			"add_circle_area_trigger(${1:number x}, ${2:number y}, ${3:number radius}, ${4:string trigger name}, ${5:string character lookup}, ${6:boolean trigger on enter}, ${7:boolean trigger on exit}, ${8:boolean trigger once})"
		],
	},
	"docgen:episodic_scripting:cm:add_circle_area_trigger": {
		"scope": "lua",
		"prefix": "cm:add_circle_area_trigger",
		"description": "cm:add_circle_area_trigger()\n-  -\n\nEstablishes a circular area trigger monitor around a specified display position, with a specified character lookup string filter.\n",
		"body": [
			"cm:add_circle_area_trigger(${1:number x}, ${2:number y}, ${3:number radius}, ${4:string trigger name}, ${5:string character lookup}, ${6:boolean trigger on enter}, ${7:boolean trigger on exit}, ${8:boolean trigger once})"
		],
	},
	"docgen:episodic_scripting:add_outline_area_trigger": {
		"scope": "lua",
		"prefix": "add_outline_area_trigger",
		"description": "cm:add_outline_area_trigger()\n-  -\n\nEstablishes a area trigger monitor around a specified display position, with a specified character lookup string filter.\n",
		"body": [
			"add_outline_area_trigger(${1:string trigger name}, ${2:string character lookup}, ${3:boolean trigger on enter}, ${4:boolean trigger on exit}, ${5:boolean trigger once}, ${6:... co-ordinates})"
		],
	},
	"docgen:episodic_scripting:cm:add_outline_area_trigger": {
		"scope": "lua",
		"prefix": "cm:add_outline_area_trigger",
		"description": "cm:add_outline_area_trigger()\n-  -\n\nEstablishes a area trigger monitor around a specified display position, with a specified character lookup string filter.\n",
		"body": [
			"cm:add_outline_area_trigger(${1:string trigger name}, ${2:string character lookup}, ${3:boolean trigger on enter}, ${4:boolean trigger on exit}, ${5:boolean trigger once}, ${6:... co-ordinates})"
		],
	},
	"docgen:episodic_scripting:remove_area_trigger": {
		"scope": "lua",
		"prefix": "remove_area_trigger",
		"description": "cm:remove_area_trigger()\n-  -\n\nRemoves any area triggers established with episodic_scripting:add_circle_area_trigger or episodic_scripting:add_outline_area_trigger with the supplied name.\n",
		"body": [
			"remove_area_trigger(${1:string trigger name})"
		],
	},
	"docgen:episodic_scripting:cm:remove_area_trigger": {
		"scope": "lua",
		"prefix": "cm:remove_area_trigger",
		"description": "cm:remove_area_trigger()\n-  -\n\nRemoves any area triggers established with episodic_scripting:add_circle_area_trigger or episodic_scripting:add_outline_area_trigger with the supplied name.\n",
		"body": [
			"cm:remove_area_trigger(${1:string trigger name})"
		],
	},
	"docgen:episodic_scripting:add_hex_area_trigger": {
		"scope": "lua",
		"prefix": "add_hex_area_trigger",
		"description": "cm:add_hex_area_trigger()\n-  -\n\nEstablishes a area trigger monitor around a specified logical position, with a faction or subculture filter.\n",
		"body": [
			"add_hex_area_trigger(${1:string trigger name}, ${2:number x}, ${3:number y}, ${4:number radius}, ${5:[opt=\"\"] string faction key}, ${6:[opt=\"\"] string subculture key})"
		],
	},
	"docgen:episodic_scripting:cm:add_hex_area_trigger": {
		"scope": "lua",
		"prefix": "cm:add_hex_area_trigger",
		"description": "cm:add_hex_area_trigger()\n-  -\n\nEstablishes a area trigger monitor around a specified logical position, with a faction or subculture filter.\n",
		"body": [
			"cm:add_hex_area_trigger(${1:string trigger name}, ${2:number x}, ${3:number y}, ${4:number radius}, ${5:[opt=\"\"] string faction key}, ${6:[opt=\"\"] string subculture key})"
		],
	},
	"docgen:episodic_scripting:remove_hex_area_trigger": {
		"scope": "lua",
		"prefix": "remove_hex_area_trigger",
		"description": "cm:remove_hex_area_trigger()\n-  -\n\nRemoves any area triggers established with episodic_scripting:add_hex_area_trigger with the supplied trigger name.\n",
		"body": [
			"remove_hex_area_trigger(${1:string trigger name})"
		],
	},
	"docgen:episodic_scripting:cm:remove_hex_area_trigger": {
		"scope": "lua",
		"prefix": "cm:remove_hex_area_trigger",
		"description": "cm:remove_hex_area_trigger()\n-  -\n\nRemoves any area triggers established with episodic_scripting:add_hex_area_trigger with the supplied trigger name.\n",
		"body": [
			"cm:remove_hex_area_trigger(${1:string trigger name})"
		],
	},
	"docgen:episodic_scripting:force_add_trait": {
		"scope": "lua",
		"prefix": "force_add_trait",
		"description": "cm:force_add_trait()\n-  -\n\nGrant the specified trait to the specified character.\n",
		"body": [
			"force_add_trait(${1:string character lookup}, ${2:string trait key}, ${3:[opt=1] number trait points}, ${4:[opt=true] boolean command queue})"
		],
	},
	"docgen:episodic_scripting:cm:force_add_trait": {
		"scope": "lua",
		"prefix": "cm:force_add_trait",
		"description": "cm:force_add_trait()\n-  -\n\nGrant the specified trait to the specified character.\n",
		"body": [
			"cm:force_add_trait(${1:string character lookup}, ${2:string trait key}, ${3:[opt=1] number trait points}, ${4:[opt=true] boolean command queue})"
		],
	},
	"docgen:episodic_scripting:force_remove_trait": {
		"scope": "lua",
		"prefix": "force_remove_trait",
		"description": "cm:force_remove_trait()\n-  -\n\nRemoves the specified trait from the specified character.\n",
		"body": [
			"force_remove_trait(${1:string character lookup}, ${2:string trait key})"
		],
	},
	"docgen:episodic_scripting:cm:force_remove_trait": {
		"scope": "lua",
		"prefix": "cm:force_remove_trait",
		"description": "cm:force_remove_trait()\n-  -\n\nRemoves the specified trait from the specified character.\n",
		"body": [
			"cm:force_remove_trait(${1:string character lookup}, ${2:string trait key})"
		],
	},
	"docgen:episodic_scripting:force_add_ancillary": {
		"scope": "lua",
		"prefix": "force_add_ancillary",
		"description": "cm:force_add_ancillary()\n-  -\n\nGrant the specified ancillary to the specified character.\n",
		"body": [
			"force_add_ancillary(${1:CHARACTER_SCRIPT_INTERFACE target_character}, ${2:string ancillary key}, ${3:boolean force equip}, ${4:boolean suppress event feed})"
		],
	},
	"docgen:episodic_scripting:cm:force_add_ancillary": {
		"scope": "lua",
		"prefix": "cm:force_add_ancillary",
		"description": "cm:force_add_ancillary()\n-  -\n\nGrant the specified ancillary to the specified character.\n",
		"body": [
			"cm:force_add_ancillary(${1:CHARACTER_SCRIPT_INTERFACE target_character}, ${2:string ancillary key}, ${3:boolean force equip}, ${4:boolean suppress event feed})"
		],
	},
	"docgen:episodic_scripting:force_remove_ancillary": {
		"scope": "lua",
		"prefix": "force_remove_ancillary",
		"description": "cm:force_remove_ancillary()\n-  -\n\nRemove the specified ancilliary from the specified character.\n",
		"body": [
			"force_remove_ancillary(${1:CHARACTER_SCRIPT_INTERFACE target_character}, ${2:string ancillary key}, ${3:boolean remove to pool}, ${4:boolean suppress event feed})"
		],
	},
	"docgen:episodic_scripting:cm:force_remove_ancillary": {
		"scope": "lua",
		"prefix": "cm:force_remove_ancillary",
		"description": "cm:force_remove_ancillary()\n-  -\n\nRemove the specified ancilliary from the specified character.\n",
		"body": [
			"cm:force_remove_ancillary(${1:CHARACTER_SCRIPT_INTERFACE target_character}, ${2:string ancillary key}, ${3:boolean remove to pool}, ${4:boolean suppress event feed})"
		],
	},
	"docgen:episodic_scripting:add_ancillary_to_faction": {
		"scope": "lua",
		"prefix": "add_ancillary_to_faction",
		"description": "cm:add_ancillary_to_faction()\n-  -\n\nGrants the specified ancillary to the specified faction.\n",
		"body": [
			"add_ancillary_to_faction(${1:FACTION_SCRIPT_INTERFACE target faction}, ${2:string ancillary key}, ${3:boolean suppress event feed})"
		],
	},
	"docgen:episodic_scripting:cm:add_ancillary_to_faction": {
		"scope": "lua",
		"prefix": "cm:add_ancillary_to_faction",
		"description": "cm:add_ancillary_to_faction()\n-  -\n\nGrants the specified ancillary to the specified faction.\n",
		"body": [
			"cm:add_ancillary_to_faction(${1:FACTION_SCRIPT_INTERFACE target faction}, ${2:string ancillary key}, ${3:boolean suppress event feed})"
		],
	},
	"docgen:episodic_scripting:force_remove_ancillary_from_faction": {
		"scope": "lua",
		"prefix": "force_remove_ancillary_from_faction",
		"description": "cm:force_remove_ancillary_from_faction()\n-  -\n\nRemove all instances of the specified ancillary from every character, and the shared ancillary pool, of the specified faction.\n",
		"body": [
			"force_remove_ancillary_from_faction(${1:FACTION_SCRIPT_INTERFACE faction}, ${2:string ancillary key})"
		],
	},
	"docgen:episodic_scripting:cm:force_remove_ancillary_from_faction": {
		"scope": "lua",
		"prefix": "cm:force_remove_ancillary_from_faction",
		"description": "cm:force_remove_ancillary_from_faction()\n-  -\n\nRemove all instances of the specified ancillary from every character, and the shared ancillary pool, of the specified faction.\n",
		"body": [
			"cm:force_remove_ancillary_from_faction(${1:FACTION_SCRIPT_INTERFACE faction}, ${2:string ancillary key})"
		],
	},
	"docgen:episodic_scripting:force_add_skill": {
		"scope": "lua",
		"prefix": "force_add_skill",
		"description": "cm:force_add_skill()\n-  -\n\nGrant the specified skill to the specified character, or adds a point if they already have it.\n",
		"body": [
			"force_add_skill(${1:string character lookup}, ${2:string skill key})"
		],
	},
	"docgen:episodic_scripting:cm:force_add_skill": {
		"scope": "lua",
		"prefix": "cm:force_add_skill",
		"description": "cm:force_add_skill()\n-  -\n\nGrant the specified skill to the specified character, or adds a point if they already have it.\n",
		"body": [
			"cm:force_add_skill(${1:string character lookup}, ${2:string skill key})"
		],
	},
	"docgen:episodic_scripting:remove_skill_point": {
		"scope": "lua",
		"prefix": "remove_skill_point",
		"description": "cm:remove_skill_point()\n-  -\n\nRemove a skill point from the specified character and skill.\n",
		"body": [
			"remove_skill_point(${1:string character lookup}, ${2:string skill key})"
		],
	},
	"docgen:episodic_scripting:cm:remove_skill_point": {
		"scope": "lua",
		"prefix": "cm:remove_skill_point",
		"description": "cm:remove_skill_point()\n-  -\n\nRemove a skill point from the specified character and skill.\n",
		"body": [
			"cm:remove_skill_point(${1:string character lookup}, ${2:string skill key})"
		],
	},
	"docgen:episodic_scripting:force_reset_skills": {
		"scope": "lua",
		"prefix": "force_reset_skills",
		"description": "cm:force_reset_skills()\n-  -\n\nCompletely resets the skill points of the target character.\n",
		"body": [
			"force_reset_skills(${1:string character lookup})"
		],
	},
	"docgen:episodic_scripting:cm:force_reset_skills": {
		"scope": "lua",
		"prefix": "cm:force_reset_skills",
		"description": "cm:force_reset_skills()\n-  -\n\nCompletely resets the skill points of the target character.\n",
		"body": [
			"cm:force_reset_skills(${1:string character lookup})"
		],
	},
	"docgen:episodic_scripting:remove_all_background_skills": {
		"scope": "lua",
		"prefix": "remove_all_background_skills",
		"description": "cm:remove_all_background_skills()\n-  -\n\nForcibly remove all background skills for the specified character.\n",
		"body": [
			"remove_all_background_skills(${1:string character lookup})"
		],
	},
	"docgen:episodic_scripting:cm:remove_all_background_skills": {
		"scope": "lua",
		"prefix": "cm:remove_all_background_skills",
		"description": "cm:remove_all_background_skills()\n-  -\n\nForcibly remove all background skills for the specified character.\n",
		"body": [
			"cm:remove_all_background_skills(${1:string character lookup})"
		],
	},
	"docgen:episodic_scripting:set_non_scripted_traits_disabled": {
		"scope": "lua",
		"prefix": "set_non_scripted_traits_disabled",
		"description": "cm:set_non_scripted_traits_disabled()\n-  -\n\nPrevents or allows the application of traits by effect:trait, which is intended to be the general-purpose trait-adding function.\n",
		"body": [
			"set_non_scripted_traits_disabled(${1:boolean disable})"
		],
	},
	"docgen:episodic_scripting:cm:set_non_scripted_traits_disabled": {
		"scope": "lua",
		"prefix": "cm:set_non_scripted_traits_disabled",
		"description": "cm:set_non_scripted_traits_disabled()\n-  -\n\nPrevents or allows the application of traits by effect:trait, which is intended to be the general-purpose trait-adding function.\n",
		"body": [
			"cm:set_non_scripted_traits_disabled(${1:boolean disable})"
		],
	},
	"docgen:episodic_scripting:set_non_scripted_ancillaries_disabled": {
		"scope": "lua",
		"prefix": "set_non_scripted_ancillaries_disabled",
		"description": "cm:set_non_scripted_ancillaries_disabled()\n-  -\n\nPrevents or allows the application of ancillaries by effect:ancillary, which is intended to be the general-purpose ancillary-adding function.\n",
		"body": [
			"set_non_scripted_ancillaries_disabled(${1:boolean disable})"
		],
	},
	"docgen:episodic_scripting:cm:set_non_scripted_ancillaries_disabled": {
		"scope": "lua",
		"prefix": "cm:set_non_scripted_ancillaries_disabled",
		"description": "cm:set_non_scripted_ancillaries_disabled()\n-  -\n\nPrevents or allows the application of ancillaries by effect:ancillary, which is intended to be the general-purpose ancillary-adding function.\n",
		"body": [
			"cm:set_non_scripted_ancillaries_disabled(${1:boolean disable})"
		],
	},
	"docgen:episodic_scripting:set_tax_rate": {
		"scope": "lua",
		"prefix": "set_tax_rate",
		"description": "cm:set_tax_rate()\n-  -\n\nSets the tax rate for a specified faction.\n",
		"body": [
			"set_tax_rate(${1:string faction key}, ${2:number tax rate})"
		],
	},
	"docgen:episodic_scripting:cm:set_tax_rate": {
		"scope": "lua",
		"prefix": "cm:set_tax_rate",
		"description": "cm:set_tax_rate()\n-  -\n\nSets the tax rate for a specified faction.\n",
		"body": [
			"cm:set_tax_rate(${1:string faction key}, ${2:number tax rate})"
		],
	},
	"docgen:episodic_scripting:exempt_region_from_tax": {
		"scope": "lua",
		"prefix": "exempt_region_from_tax",
		"description": "cm:exempt_region_from_tax()\n-  -\n\nExempts, or un-exempts, the province containing specified region from tax contributions.\n",
		"body": [
			"exempt_region_from_tax(${1:string region key}, ${2:boolean exempt})"
		],
	},
	"docgen:episodic_scripting:cm:exempt_region_from_tax": {
		"scope": "lua",
		"prefix": "cm:exempt_region_from_tax",
		"description": "cm:exempt_region_from_tax()\n-  -\n\nExempts, or un-exempts, the province containing specified region from tax contributions.\n",
		"body": [
			"cm:exempt_region_from_tax(${1:string region key}, ${2:boolean exempt})"
		],
	},
	"docgen:episodic_scripting:exempt_province_from_tax_for_all_factions_and_set_default": {
		"scope": "lua",
		"prefix": "exempt_province_from_tax_for_all_factions_and_set_default",
		"description": "cm:exempt_province_from_tax_for_all_factions_and_set_default()\n-  -\n\nExempt the province containing specified region from tax for all factions that own a settlement within it, and set the default for future factions.\n",
		"body": [
			"exempt_province_from_tax_for_all_factions_and_set_default(${1:string region key}, ${2:boolean exempt})"
		],
	},
	"docgen:episodic_scripting:cm:exempt_province_from_tax_for_all_factions_and_set_default": {
		"scope": "lua",
		"prefix": "cm:exempt_province_from_tax_for_all_factions_and_set_default",
		"description": "cm:exempt_province_from_tax_for_all_factions_and_set_default()\n-  -\n\nExempt the province containing specified region from tax for all factions that own a settlement within it, and set the default for future factions.\n",
		"body": [
			"cm:exempt_province_from_tax_for_all_factions_and_set_default(${1:string region key}, ${2:boolean exempt})"
		],
	},
	"docgen:episodic_scripting:disable_rebellions_worldwide": {
		"scope": "lua",
		"prefix": "disable_rebellions_worldwide",
		"description": "cm:disable_rebellions_worldwide()\n-  -\n\nDisables or re-enables all rebellions across the map.\n",
		"body": [
			"disable_rebellions_worldwide(${1:boolean disable})"
		],
	},
	"docgen:episodic_scripting:cm:disable_rebellions_worldwide": {
		"scope": "lua",
		"prefix": "cm:disable_rebellions_worldwide",
		"description": "cm:disable_rebellions_worldwide()\n-  -\n\nDisables or re-enables all rebellions across the map.\n",
		"body": [
			"cm:disable_rebellions_worldwide(${1:boolean disable})"
		],
	},
	"docgen:episodic_scripting:force_rebellion_in_region": {
		"scope": "lua",
		"prefix": "force_rebellion_in_region",
		"description": "cm:force_rebellion_in_region()\n-  -\n\nForce a rebellion of a specified size in the specified region.\n",
		"body": [
			"force_rebellion_in_region(${1:string region key}, ${2:number units}, ${3:number x}, ${4:number y}, ${5:boolean suppress message})"
		],
	},
	"docgen:episodic_scripting:cm:force_rebellion_in_region": {
		"scope": "lua",
		"prefix": "cm:force_rebellion_in_region",
		"description": "cm:force_rebellion_in_region()\n-  -\n\nForce a rebellion of a specified size in the specified region.\n",
		"body": [
			"cm:force_rebellion_in_region(${1:string region key}, ${2:number units}, ${3:number x}, ${4:number y}, ${5:boolean suppress message})"
		],
	},
	"docgen:episodic_scripting:treasury_mod": {
		"scope": "lua",
		"prefix": "treasury_mod",
		"description": "cm:treasury_mod()\n-  -\n\nImmediately modifies the treasury of the specified faction by the specified amount.\n",
		"body": [
			"treasury_mod(${1:string faction key}, ${2:number amount})"
		],
	},
	"docgen:episodic_scripting:cm:treasury_mod": {
		"scope": "lua",
		"prefix": "cm:treasury_mod",
		"description": "cm:treasury_mod()\n-  -\n\nImmediately modifies the treasury of the specified faction by the specified amount.\n",
		"body": [
			"cm:treasury_mod(${1:string faction key}, ${2:number amount})"
		],
	},
	"docgen:episodic_scripting:set_public_order_of_province_for_region": {
		"scope": "lua",
		"prefix": "set_public_order_of_province_for_region",
		"description": "cm:set_public_order_of_province_for_region()\n-  -\n\nSets the public order value for the province containing the specified region.\n",
		"body": [
			"set_public_order_of_province_for_region(${1:string region key}, ${2:number public order})"
		],
	},
	"docgen:episodic_scripting:cm:set_public_order_of_province_for_region": {
		"scope": "lua",
		"prefix": "cm:set_public_order_of_province_for_region",
		"description": "cm:set_public_order_of_province_for_region()\n-  -\n\nSets the public order value for the province containing the specified region.\n",
		"body": [
			"cm:set_public_order_of_province_for_region(${1:string region key}, ${2:number public order})"
		],
	},
	"docgen:episodic_scripting:set_public_order_disabled_for_province_for_region": {
		"scope": "lua",
		"prefix": "set_public_order_disabled_for_province_for_region",
		"description": "cm:set_public_order_disabled_for_province_for_region()\n-  -\n\nDisables or re-enables public order in the province containing the specified region.\n",
		"body": [
			"set_public_order_disabled_for_province_for_region(${1:string region key}, ${2:boolean disable})"
		],
	},
	"docgen:episodic_scripting:cm:set_public_order_disabled_for_province_for_region": {
		"scope": "lua",
		"prefix": "cm:set_public_order_disabled_for_province_for_region",
		"description": "cm:set_public_order_disabled_for_province_for_region()\n-  -\n\nDisables or re-enables public order in the province containing the specified region.\n",
		"body": [
			"cm:set_public_order_disabled_for_province_for_region(${1:string region key}, ${2:boolean disable})"
		],
	},
	"docgen:episodic_scripting:set_public_order_disabled_for_province_for_region_for_all_factions_and_set_default": {
		"scope": "lua",
		"prefix": "set_public_order_disabled_for_province_for_region_for_all_factions_and_set_default",
		"description": "cm:set_public_order_disabled_for_province_for_region_for_all_factions_and_set_default()\n-  -\n\nDisables or re-enables public order in the province containing the specified region, for all factions that own settlements within the province, including factions that capture territory there in the future.\n",
		"body": [
			"set_public_order_disabled_for_province_for_region_for_all_factions_and_set_default(${1:string region key}, ${2:boolean disable})"
		],
	},
	"docgen:episodic_scripting:cm:set_public_order_disabled_for_province_for_region_for_all_factions_and_set_default": {
		"scope": "lua",
		"prefix": "cm:set_public_order_disabled_for_province_for_region_for_all_factions_and_set_default",
		"description": "cm:set_public_order_disabled_for_province_for_region_for_all_factions_and_set_default()\n-  -\n\nDisables or re-enables public order in the province containing the specified region, for all factions that own settlements within the province, including factions that capture territory there in the future.\n",
		"body": [
			"cm:set_public_order_disabled_for_province_for_region_for_all_factions_and_set_default(${1:string region key}, ${2:boolean disable})"
		],
	},
	"docgen:episodic_scripting:add_development_points_to_region": {
		"scope": "lua",
		"prefix": "add_development_points_to_region",
		"description": "cm:add_development_points_to_region()\n-  -\n\nAdds development points to the province containing the specified region.\n",
		"body": [
			"add_development_points_to_region(${1:string region key}, ${2:number development points})"
		],
	},
	"docgen:episodic_scripting:cm:add_development_points_to_region": {
		"scope": "lua",
		"prefix": "cm:add_development_points_to_region",
		"description": "cm:add_development_points_to_region()\n-  -\n\nAdds development points to the province containing the specified region.\n",
		"body": [
			"cm:add_development_points_to_region(${1:string region key}, ${2:number development points})"
		],
	},
	"docgen:episodic_scripting:set_imperium_level_change_disabled": {
		"scope": "lua",
		"prefix": "set_imperium_level_change_disabled",
		"description": "cm:set_imperium_level_change_disabled()\n-  -\n\nDisables or re-enables imperium level changes across the whole campaign.\n",
		"body": [
			"set_imperium_level_change_disabled(${1:boolean disable})"
		],
	},
	"docgen:episodic_scripting:cm:set_imperium_level_change_disabled": {
		"scope": "lua",
		"prefix": "cm:set_imperium_level_change_disabled",
		"description": "cm:set_imperium_level_change_disabled()\n-  -\n\nDisables or re-enables imperium level changes across the whole campaign.\n",
		"body": [
			"cm:set_imperium_level_change_disabled(${1:boolean disable})"
		],
	},
	"docgen:episodic_scripting:set_region_abandoned": {
		"scope": "lua",
		"prefix": "set_region_abandoned",
		"description": "cm:set_region_abandoned()\n-  -\n\nImmediately sets the specified to be abandoned.\n",
		"body": [
			"set_region_abandoned(${1:string region key})"
		],
	},
	"docgen:episodic_scripting:cm:set_region_abandoned": {
		"scope": "lua",
		"prefix": "cm:set_region_abandoned",
		"description": "cm:set_region_abandoned()\n-  -\n\nImmediately sets the specified to be abandoned.\n",
		"body": [
			"cm:set_region_abandoned(${1:string region key})"
		],
	},
	"docgen:episodic_scripting:transfer_region_to_faction": {
		"scope": "lua",
		"prefix": "transfer_region_to_faction",
		"description": "cm:transfer_region_to_faction()\n-  -\n\nImmediately transfers ownership of the specified region to the specified faction.\n",
		"body": [
			"transfer_region_to_faction(${1:string region key}, ${2:string faction key})"
		],
	},
	"docgen:episodic_scripting:cm:transfer_region_to_faction": {
		"scope": "lua",
		"prefix": "cm:transfer_region_to_faction",
		"description": "cm:transfer_region_to_faction()\n-  -\n\nImmediately transfers ownership of the specified region to the specified faction.\n",
		"body": [
			"cm:transfer_region_to_faction(${1:string region key}, ${2:string faction key})"
		],
	},
	"docgen:episodic_scripting:create_storm_for_region": {
		"scope": "lua",
		"prefix": "create_storm_for_region",
		"description": "cm:create_storm_for_region()\n-  -\n\nCreates a storm of a given type in a given region.\n",
		"body": [
			"create_storm_for_region(${1:string region key}, ${2:number storm strength}, ${3:number duration}, ${4:[opt=false] string storm type})"
		],
	},
	"docgen:episodic_scripting:cm:create_storm_for_region": {
		"scope": "lua",
		"prefix": "cm:create_storm_for_region",
		"description": "cm:create_storm_for_region()\n-  -\n\nCreates a storm of a given type in a given region.\n",
		"body": [
			"cm:create_storm_for_region(${1:string region key}, ${2:number storm strength}, ${3:number duration}, ${4:[opt=false] string storm type})"
		],
	},
	"docgen:episodic_scripting:heal_garrison": {
		"scope": "lua",
		"prefix": "heal_garrison",
		"description": "cm:heal_garrison()\n-  -\n\nHeals the garrison army (and navy, where applicable) in the specified region back to full health.\n",
		"body": [
			"heal_garrison(${1:number region cqi})"
		],
	},
	"docgen:episodic_scripting:cm:heal_garrison": {
		"scope": "lua",
		"prefix": "cm:heal_garrison",
		"description": "cm:heal_garrison()\n-  -\n\nHeals the garrison army (and navy, where applicable) in the specified region back to full health.\n",
		"body": [
			"cm:heal_garrison(${1:number region cqi})"
		],
	},
	"docgen:episodic_scripting:set_liberation_options_disabled": {
		"scope": "lua",
		"prefix": "set_liberation_options_disabled",
		"description": "cm:set_liberation_options_disabled()\n-  -\n\nDisables or re-enables post-battle liberation options for the player.\n",
		"body": [
			"set_liberation_options_disabled(${1:boolean disable})"
		],
	},
	"docgen:episodic_scripting:cm:set_liberation_options_disabled": {
		"scope": "lua",
		"prefix": "cm:set_liberation_options_disabled",
		"description": "cm:set_liberation_options_disabled()\n-  -\n\nDisables or re-enables post-battle liberation options for the player.\n",
		"body": [
			"cm:set_liberation_options_disabled(${1:boolean disable})"
		],
	},
	"docgen:episodic_scripting:force_religion_factors": {
		"scope": "lua",
		"prefix": "force_religion_factors",
		"description": "cm:force_religion_factors()\n-  -\n\nForces the balance of religions in a specified province to specified values.\n",
		"body": [
			"force_religion_factors(${1:string region key}, ${2:string religion key}, ${3:number religion proportion}, ${4:... extra religions})"
		],
	},
	"docgen:episodic_scripting:cm:force_religion_factors": {
		"scope": "lua",
		"prefix": "cm:force_religion_factors",
		"description": "cm:force_religion_factors()\n-  -\n\nForces the balance of religions in a specified province to specified values.\n",
		"body": [
			"cm:force_religion_factors(${1:string region key}, ${2:string religion key}, ${3:number religion proportion}, ${4:... extra religions})"
		],
	},
	"docgen:episodic_scripting:add_unit_to_faction_mercenary_pool": {
		"scope": "lua",
		"prefix": "add_unit_to_faction_mercenary_pool",
		"description": "cm:add_unit_to_faction_mercenary_pool()\n-  -\n\nAdds one or more units of a specified type to a faction's mercenary pool.\n",
		"body": [
			"add_unit_to_faction_mercenary_pool(${1:FACTION_SCRIPT_INTERFACE faction}, ${2:string unit}, ${3:number count}, ${4:number replenishment chance}, ${5:number max units}, ${6:number max per turn}, ${7:number xp}, ${8:string faction restriction}, ${9:string subculture restriction}, ${10:string tech restriction})"
		],
	},
	"docgen:episodic_scripting:cm:add_unit_to_faction_mercenary_pool": {
		"scope": "lua",
		"prefix": "cm:add_unit_to_faction_mercenary_pool",
		"description": "cm:add_unit_to_faction_mercenary_pool()\n-  -\n\nAdds one or more units of a specified type to a faction's mercenary pool.\n",
		"body": [
			"cm:add_unit_to_faction_mercenary_pool(${1:FACTION_SCRIPT_INTERFACE faction}, ${2:string unit}, ${3:number count}, ${4:number replenishment chance}, ${5:number max units}, ${6:number max per turn}, ${7:number xp}, ${8:string faction restriction}, ${9:string subculture restriction}, ${10:string tech restriction})"
		],
	},
	"docgen:episodic_scripting:add_unit_to_province_mercenary_pool": {
		"scope": "lua",
		"prefix": "add_unit_to_province_mercenary_pool",
		"description": "cm:add_unit_to_province_mercenary_pool()\n-  -\n\nAdds one or more units of a specified type to the mercenary pool in a province.\n",
		"body": [
			"add_unit_to_province_mercenary_pool(${1:REGION_SCRIPT_INTERFACE region}, ${2:string unit}, ${3:number count}, ${4:number replenishment chance}, ${5:number max units}, ${6:number max per turn}, ${7:number xp}, ${8:string faction restriction}, ${9:string subculture restriction}, ${10:string tech restriction})"
		],
	},
	"docgen:episodic_scripting:cm:add_unit_to_province_mercenary_pool": {
		"scope": "lua",
		"prefix": "cm:add_unit_to_province_mercenary_pool",
		"description": "cm:add_unit_to_province_mercenary_pool()\n-  -\n\nAdds one or more units of a specified type to the mercenary pool in a province.\n",
		"body": [
			"cm:add_unit_to_province_mercenary_pool(${1:REGION_SCRIPT_INTERFACE region}, ${2:string unit}, ${3:number count}, ${4:number replenishment chance}, ${5:number max units}, ${6:number max per turn}, ${7:number xp}, ${8:string faction restriction}, ${9:string subculture restriction}, ${10:string tech restriction})"
		],
	},
	"docgen:episodic_scripting:trigger_mission": {
		"scope": "lua",
		"prefix": "trigger_mission",
		"description": "cm:trigger_mission()\n-  -\n\nInstructs the campaign director to attempt to trigger a mission of a particular type, based on a mission record from the database.\n",
		"body": [
			"trigger_mission(${1:string faction key}, ${2:string mission key}, ${3:boolean fire immediately}, ${4:[opt=false] boolean use command queue})"
		],
	},
	"docgen:episodic_scripting:cm:trigger_mission": {
		"scope": "lua",
		"prefix": "cm:trigger_mission",
		"description": "cm:trigger_mission()\n-  -\n\nInstructs the campaign director to attempt to trigger a mission of a particular type, based on a mission record from the database.\n",
		"body": [
			"cm:trigger_mission(${1:string faction key}, ${2:string mission key}, ${3:boolean fire immediately}, ${4:[opt=false] boolean use command queue})"
		],
	},
	"docgen:episodic_scripting:trigger_custom_mission": {
		"scope": "lua",
		"prefix": "trigger_custom_mission",
		"description": "cm:trigger_custom_mission()\n-  -\n\nTriggers a specific custom mission from its database record key.\n",
		"body": [
			"trigger_custom_mission(${1:string faction key}, ${2:string mission key}, ${3:[opt=false] boolean use command queue})"
		],
	},
	"docgen:episodic_scripting:cm:trigger_custom_mission": {
		"scope": "lua",
		"prefix": "cm:trigger_custom_mission",
		"description": "cm:trigger_custom_mission()\n-  -\n\nTriggers a specific custom mission from its database record key.\n",
		"body": [
			"cm:trigger_custom_mission(${1:string faction key}, ${2:string mission key}, ${3:[opt=false] boolean use command queue})"
		],
	},
	"docgen:episodic_scripting:trigger_custom_mission_from_string": {
		"scope": "lua",
		"prefix": "trigger_custom_mission_from_string",
		"description": "cm:trigger_custom_mission_from_string()\n-  -\n\nTriggers a custom mission from a string passed into the function.\n",
		"body": [
			"trigger_custom_mission_from_string(${1:string faction key}, ${2:string mission}, ${3:[opt=false] boolean use command queue})"
		],
	},
	"docgen:episodic_scripting:cm:trigger_custom_mission_from_string": {
		"scope": "lua",
		"prefix": "cm:trigger_custom_mission_from_string",
		"description": "cm:trigger_custom_mission_from_string()\n-  -\n\nTriggers a custom mission from a string passed into the function.\n",
		"body": [
			"cm:trigger_custom_mission_from_string(${1:string faction key}, ${2:string mission}, ${3:[opt=false] boolean use command queue})"
		],
	},
	"docgen:episodic_scripting:cancel_custom_mission": {
		"scope": "lua",
		"prefix": "cancel_custom_mission",
		"description": "cm:cancel_custom_mission()\n-  -\n\nCancels an active custom mission.\n",
		"body": [
			"cancel_custom_mission(${1:string faction key}, ${2:string mission key}, ${3:[opt=false] boolean use command queue})"
		],
	},
	"docgen:episodic_scripting:cm:cancel_custom_mission": {
		"scope": "lua",
		"prefix": "cm:cancel_custom_mission",
		"description": "cm:cancel_custom_mission()\n-  -\n\nCancels an active custom mission.\n",
		"body": [
			"cm:cancel_custom_mission(${1:string faction key}, ${2:string mission key}, ${3:[opt=false] boolean use command queue})"
		],
	},
	"docgen:episodic_scripting:trigger_mission_with_targets": {
		"scope": "lua",
		"prefix": "trigger_mission_with_targets",
		"description": "cm:trigger_mission_with_targets()\n-  -\n\nAttempts to trigger a mission from database records with one or more target game objects.\n",
		"body": [
			"trigger_mission_with_targets(${1:number faction cqi}, ${2:string mission key}, ${3:string target faction cqi}, ${4:string secondary faction cqi}, ${5:string character cqi}, ${6:string military force cqi}, ${7:string region cqi}, ${8:string settlement cqi})"
		],
	},
	"docgen:episodic_scripting:cm:trigger_mission_with_targets": {
		"scope": "lua",
		"prefix": "cm:trigger_mission_with_targets",
		"description": "cm:trigger_mission_with_targets()\n-  -\n\nAttempts to trigger a mission from database records with one or more target game objects.\n",
		"body": [
			"cm:trigger_mission_with_targets(${1:number faction cqi}, ${2:string mission key}, ${3:string target faction cqi}, ${4:string secondary faction cqi}, ${5:string character cqi}, ${6:string military force cqi}, ${7:string region cqi}, ${8:string settlement cqi})"
		],
	},
	"docgen:episodic_scripting:toggle_mission_generation": {
		"scope": "lua",
		"prefix": "toggle_mission_generation",
		"description": "cm:toggle_mission_generation()\n-  -\n\nSets whether the campaign director system can generate missions or not.\n",
		"body": [
			"toggle_mission_generation(${1:boolean can generate})"
		],
	},
	"docgen:episodic_scripting:cm:toggle_mission_generation": {
		"scope": "lua",
		"prefix": "cm:toggle_mission_generation",
		"description": "cm:toggle_mission_generation()\n-  -\n\nSets whether the campaign director system can generate missions or not.\n",
		"body": [
			"cm:toggle_mission_generation(${1:boolean can generate})"
		],
	},
	"docgen:episodic_scripting:set_scripted_mission_text": {
		"scope": "lua",
		"prefix": "set_scripted_mission_text",
		"description": "cm:set_scripted_mission_text()\n-  -\n\nUpdates the text shown for a particular objective of a specified scripted mission.\n",
		"body": [
			"set_scripted_mission_text(${1:string mission key}, ${2:string script key}, ${3:string text key})"
		],
	},
	"docgen:episodic_scripting:cm:set_scripted_mission_text": {
		"scope": "lua",
		"prefix": "cm:set_scripted_mission_text",
		"description": "cm:set_scripted_mission_text()\n-  -\n\nUpdates the text shown for a particular objective of a specified scripted mission.\n",
		"body": [
			"cm:set_scripted_mission_text(${1:string mission key}, ${2:string script key}, ${3:string text key})"
		],
	},
	"docgen:episodic_scripting:set_scripted_mission_position": {
		"scope": "lua",
		"prefix": "set_scripted_mission_position",
		"description": "cm:set_scripted_mission_position()\n-  -\n\nUpdates the map position related to a particular objective of a specified scripted mission.\n",
		"body": [
			"set_scripted_mission_position(${1:string mission key}, ${2:string script key}, ${3:number x}, ${4:number y})"
		],
	},
	"docgen:episodic_scripting:cm:set_scripted_mission_position": {
		"scope": "lua",
		"prefix": "cm:set_scripted_mission_position",
		"description": "cm:set_scripted_mission_position()\n-  -\n\nUpdates the map position related to a particular objective of a specified scripted mission.\n",
		"body": [
			"cm:set_scripted_mission_position(${1:string mission key}, ${2:string script key}, ${3:number x}, ${4:number y})"
		],
	},
	"docgen:episodic_scripting:complete_scripted_mission_objective": {
		"scope": "lua",
		"prefix": "complete_scripted_mission_objective",
		"description": "cm:complete_scripted_mission_objective()\n-  -\n\nMarks a particular objective associated with a specified scripted mission as either succeeded or failed.\n",
		"body": [
			"complete_scripted_mission_objective(${1:string mission key}, ${2:string script key}, ${3:boolean is success})"
		],
	},
	"docgen:episodic_scripting:cm:complete_scripted_mission_objective": {
		"scope": "lua",
		"prefix": "cm:complete_scripted_mission_objective",
		"description": "cm:complete_scripted_mission_objective()\n-  -\n\nMarks a particular objective associated with a specified scripted mission as either succeeded or failed.\n",
		"body": [
			"cm:complete_scripted_mission_objective(${1:string mission key}, ${2:string script key}, ${3:boolean is success})"
		],
	},
	"docgen:episodic_scripting:trigger_incident": {
		"scope": "lua",
		"prefix": "trigger_incident",
		"description": "cm:trigger_incident()\n-  -\n\nInstructs the campaign director to attempt to trigger a specified incident, based on record from the database.\n",
		"body": [
			"trigger_incident(${1:string faction key}, ${2:string incident key}, ${3:boolean fire immediately})"
		],
	},
	"docgen:episodic_scripting:cm:trigger_incident": {
		"scope": "lua",
		"prefix": "cm:trigger_incident",
		"description": "cm:trigger_incident()\n-  -\n\nInstructs the campaign director to attempt to trigger a specified incident, based on record from the database.\n",
		"body": [
			"cm:trigger_incident(${1:string faction key}, ${2:string incident key}, ${3:boolean fire immediately})"
		],
	},
	"docgen:episodic_scripting:trigger_custom_incident": {
		"scope": "lua",
		"prefix": "trigger_custom_incident",
		"description": "cm:trigger_custom_incident()\n-  -\n\nForces an incident to trigger.\n",
		"body": [
			"trigger_custom_incident(${1:string faction key}, ${2:string incident key}, ${3:boolean fire immediately}, ${4:string payload})"
		],
	},
	"docgen:episodic_scripting:cm:trigger_custom_incident": {
		"scope": "lua",
		"prefix": "cm:trigger_custom_incident",
		"description": "cm:trigger_custom_incident()\n-  -\n\nForces an incident to trigger.\n",
		"body": [
			"cm:trigger_custom_incident(${1:string faction key}, ${2:string incident key}, ${3:boolean fire immediately}, ${4:string payload})"
		],
	},
	"docgen:episodic_scripting:trigger_incident_with_targets": {
		"scope": "lua",
		"prefix": "trigger_incident_with_targets",
		"description": "cm:trigger_incident_with_targets()\n-  -\n\nAttempts to trigger an incident from database records with one or more target game objects.\n",
		"body": [
			"trigger_incident_with_targets(${1:number faction cqi}, ${2:string incident key}, ${3:string target faction cqi}, ${4:string secondary faction cqi}, ${5:string character cqi}, ${6:string military force cqi}, ${7:string region cqi}, ${8:string settlement cqi})"
		],
	},
	"docgen:episodic_scripting:cm:trigger_incident_with_targets": {
		"scope": "lua",
		"prefix": "cm:trigger_incident_with_targets",
		"description": "cm:trigger_incident_with_targets()\n-  -\n\nAttempts to trigger an incident from database records with one or more target game objects.\n",
		"body": [
			"cm:trigger_incident_with_targets(${1:number faction cqi}, ${2:string incident key}, ${3:string target faction cqi}, ${4:string secondary faction cqi}, ${5:string character cqi}, ${6:string military force cqi}, ${7:string region cqi}, ${8:string settlement cqi})"
		],
	},
	"docgen:episodic_scripting:toggle_incident_generation": {
		"scope": "lua",
		"prefix": "toggle_incident_generation",
		"description": "cm:toggle_incident_generation()\n-  -\n\nSets whether the campaign director system can generate dilemmas or not.\n",
		"body": [
			"toggle_incident_generation(${1:boolean can generate})"
		],
	},
	"docgen:episodic_scripting:cm:toggle_incident_generation": {
		"scope": "lua",
		"prefix": "cm:toggle_incident_generation",
		"description": "cm:toggle_incident_generation()\n-  -\n\nSets whether the campaign director system can generate dilemmas or not.\n",
		"body": [
			"cm:toggle_incident_generation(${1:boolean can generate})"
		],
	},
	"docgen:episodic_scripting:trigger_dilemma": {
		"scope": "lua",
		"prefix": "trigger_dilemma",
		"description": "cm:trigger_dilemma()\n-  -\n\nInstructs the campaign director to attempt to trigger a dilemma with a particular key, based on dilemma records from the database.\n",
		"body": [
			"trigger_dilemma(${1:string faction key}, ${2:string dilemma key}, ${3:boolean fire immediately})"
		],
	},
	"docgen:episodic_scripting:cm:trigger_dilemma": {
		"scope": "lua",
		"prefix": "cm:trigger_dilemma",
		"description": "cm:trigger_dilemma()\n-  -\n\nInstructs the campaign director to attempt to trigger a dilemma with a particular key, based on dilemma records from the database.\n",
		"body": [
			"cm:trigger_dilemma(${1:string faction key}, ${2:string dilemma key}, ${3:boolean fire immediately})"
		],
	},
	"docgen:episodic_scripting:trigger_custom_dilemma": {
		"scope": "lua",
		"prefix": "trigger_custom_dilemma",
		"description": "cm:trigger_custom_dilemma()\n-  -\n\nTriggers a custom dilemma with two choices, with the specified faction as the dilemma target.\n",
		"body": [
			"trigger_custom_dilemma(${1:string faction key}, ${2:string dilemma key}, ${3:string first choice payload}, ${4:string second choice payload})"
		],
	},
	"docgen:episodic_scripting:cm:trigger_custom_dilemma": {
		"scope": "lua",
		"prefix": "cm:trigger_custom_dilemma",
		"description": "cm:trigger_custom_dilemma()\n-  -\n\nTriggers a custom dilemma with two choices, with the specified faction as the dilemma target.\n",
		"body": [
			"cm:trigger_custom_dilemma(${1:string faction key}, ${2:string dilemma key}, ${3:string first choice payload}, ${4:string second choice payload})"
		],
	},
	"docgen:episodic_scripting:trigger_custom_dilemma_for_character": {
		"scope": "lua",
		"prefix": "trigger_custom_dilemma_for_character",
		"description": "cm:trigger_custom_dilemma_for_character()\n-  -\n\nTriggers a custom dilemma with two choices, with the specified character as the dilemma target.\n",
		"body": [
			"trigger_custom_dilemma_for_character(${1:string character lookup}, ${2:string dilemma key}, ${3:string first choice payload}, ${4:string second choice payload})"
		],
	},
	"docgen:episodic_scripting:cm:trigger_custom_dilemma_for_character": {
		"scope": "lua",
		"prefix": "cm:trigger_custom_dilemma_for_character",
		"description": "cm:trigger_custom_dilemma_for_character()\n-  -\n\nTriggers a custom dilemma with two choices, with the specified character as the dilemma target.\n",
		"body": [
			"cm:trigger_custom_dilemma_for_character(${1:string character lookup}, ${2:string dilemma key}, ${3:string first choice payload}, ${4:string second choice payload})"
		],
	},
	"docgen:episodic_scripting:trigger_dilemma_with_targets": {
		"scope": "lua",
		"prefix": "trigger_dilemma_with_targets",
		"description": "cm:trigger_dilemma_with_targets()\n-  -\n\nAttempts to trigger a dilemma from database records with one or more target game objects.\n",
		"body": [
			"trigger_dilemma_with_targets(${1:number faction cqi}, ${2:string dilemma key}, ${3:number target faction cqi}, ${4:number secondary faction cqi}, ${5:number character cqi}, ${6:number military force cqi}, ${7:number region cqi}, ${8:number settlement cqi})"
		],
	},
	"docgen:episodic_scripting:cm:trigger_dilemma_with_targets": {
		"scope": "lua",
		"prefix": "cm:trigger_dilemma_with_targets",
		"description": "cm:trigger_dilemma_with_targets()\n-  -\n\nAttempts to trigger a dilemma from database records with one or more target game objects.\n",
		"body": [
			"cm:trigger_dilemma_with_targets(${1:number faction cqi}, ${2:string dilemma key}, ${3:number target faction cqi}, ${4:number secondary faction cqi}, ${5:number character cqi}, ${6:number military force cqi}, ${7:number region cqi}, ${8:number settlement cqi})"
		],
	},
	"docgen:episodic_scripting:toggle_dilemma_generation": {
		"scope": "lua",
		"prefix": "toggle_dilemma_generation",
		"description": "cm:toggle_dilemma_generation()\n-  -\n\nSets whether the campaign director system can generate dilemmas or not.\n",
		"body": [
			"toggle_dilemma_generation(${1:boolean can generate})"
		],
	},
	"docgen:episodic_scripting:cm:toggle_dilemma_generation": {
		"scope": "lua",
		"prefix": "cm:toggle_dilemma_generation",
		"description": "cm:toggle_dilemma_generation()\n-  -\n\nSets whether the campaign director system can generate dilemmas or not.\n",
		"body": [
			"cm:toggle_dilemma_generation(${1:boolean can generate})"
		],
	},
	"docgen:episodic_scripting:trigger_intrigue": {
		"scope": "lua",
		"prefix": "trigger_intrigue",
		"description": "cm:trigger_intrigue()\n-  -\n\nTriggers an intrigue (the High Elf game mechanic) incident which improves or worsens diplomatic relations between two supplied factions.\n",
		"body": [
			"trigger_intrigue(${1:string issuing faction}, ${2:string faction a key}, ${3:string faction b key}, ${4:boolean improve}, ${5:boolean exempt from cost})"
		],
	},
	"docgen:episodic_scripting:cm:trigger_intrigue": {
		"scope": "lua",
		"prefix": "cm:trigger_intrigue",
		"description": "cm:trigger_intrigue()\n-  -\n\nTriggers an intrigue (the High Elf game mechanic) incident which improves or worsens diplomatic relations between two supplied factions.\n",
		"body": [
			"cm:trigger_intrigue(${1:string issuing faction}, ${2:string faction a key}, ${3:string faction b key}, ${4:boolean improve}, ${5:boolean exempt from cost})"
		],
	},
	"docgen:episodic_scripting:set_event_generation_enabled": {
		"scope": "lua",
		"prefix": "set_event_generation_enabled",
		"description": "cm:set_event_generation_enabled()\n-  -\n\nEnables or disables random event generation by the campaign director system.\n",
		"body": [
			"set_event_generation_enabled(${1:boolean enable})"
		],
	},
	"docgen:episodic_scripting:cm:set_event_generation_enabled": {
		"scope": "lua",
		"prefix": "cm:set_event_generation_enabled",
		"description": "cm:set_event_generation_enabled()\n-  -\n\nEnables or disables random event generation by the campaign director system.\n",
		"body": [
			"cm:set_event_generation_enabled(${1:boolean enable})"
		],
	},
	"docgen:episodic_scripting:show_message_event": {
		"scope": "lua",
		"prefix": "show_message_event",
		"description": "cm:show_message_event()\n-  -\n\nConstructs and displays an event message.\n",
		"body": [
			"show_message_event(${1:string faction key}, ${2:string title loc key}, ${3:string primary loc key}, ${4:string secondary loc key}, ${5:boolean persistent}, ${6:number index})"
		],
	},
	"docgen:episodic_scripting:cm:show_message_event": {
		"scope": "lua",
		"prefix": "cm:show_message_event",
		"description": "cm:show_message_event()\n-  -\n\nConstructs and displays an event message.\n",
		"body": [
			"cm:show_message_event(${1:string faction key}, ${2:string title loc key}, ${3:string primary loc key}, ${4:string secondary loc key}, ${5:boolean persistent}, ${6:number index})"
		],
	},
	"docgen:episodic_scripting:show_message_event_located": {
		"scope": "lua",
		"prefix": "show_message_event_located",
		"description": "cm:show_message_event_located()\n-  -\n\nConstructs and displays a event message with a zoom-to location.\n",
		"body": [
			"show_message_event_located(${1:string faction key}, ${2:string title loc key}, ${3:string primary loc key}, ${4:string secondary loc key}, ${5:number x}, ${6:number y}, ${7:boolean persistent}, ${8:number index})"
		],
	},
	"docgen:episodic_scripting:cm:show_message_event_located": {
		"scope": "lua",
		"prefix": "cm:show_message_event_located",
		"description": "cm:show_message_event_located()\n-  -\n\nConstructs and displays a event message with a zoom-to location.\n",
		"body": [
			"cm:show_message_event_located(${1:string faction key}, ${2:string title loc key}, ${3:string primary loc key}, ${4:string secondary loc key}, ${5:number x}, ${6:number y}, ${7:boolean persistent}, ${8:number index})"
		],
	},
	"docgen:episodic_scripting:suppress_all_event_feed_event_types": {
		"scope": "lua",
		"prefix": "suppress_all_event_feed_event_types",
		"description": "cm:suppress_all_event_feed_event_types()\n-  -\n\nActivates or deactivates the episodic scripting event feed suppression system.\n",
		"body": [
			"suppress_all_event_feed_event_types(${1:boolean activate suppression})"
		],
	},
	"docgen:episodic_scripting:cm:suppress_all_event_feed_event_types": {
		"scope": "lua",
		"prefix": "cm:suppress_all_event_feed_event_types",
		"description": "cm:suppress_all_event_feed_event_types()\n-  -\n\nActivates or deactivates the episodic scripting event feed suppression system.\n",
		"body": [
			"cm:suppress_all_event_feed_event_types(${1:boolean activate suppression})"
		],
	},
	"docgen:episodic_scripting:whitelist_event_feed_event_type": {
		"scope": "lua",
		"prefix": "whitelist_event_feed_event_type",
		"description": "cm:whitelist_event_feed_event_type()\n-  -\n\nWhitelists an event type, allowing it to be shown despite suppression being activated with episodic_scripting:suppress_all_event_feed_event_types.\n",
		"body": [
			"whitelist_event_feed_event_type(${1:string event type})"
		],
	},
	"docgen:episodic_scripting:cm:whitelist_event_feed_event_type": {
		"scope": "lua",
		"prefix": "cm:whitelist_event_feed_event_type",
		"description": "cm:whitelist_event_feed_event_type()\n-  -\n\nWhitelists an event type, allowing it to be shown despite suppression being activated with episodic_scripting:suppress_all_event_feed_event_types.\n",
		"body": [
			"cm:whitelist_event_feed_event_type(${1:string event type})"
		],
	},
	"docgen:episodic_scripting:event_feed_event_type_pending": {
		"scope": "lua",
		"prefix": "event_feed_event_type_pending",
		"description": "cm:event_feed_event_type_pending()\n-  -\n\nReturns whether any event messages of the supplied type are currently being blocked/withheld by event feed suppression.\n",
		"body": [
			"event_feed_event_type_pending(${1:string event type})"
		],
	},
	"docgen:episodic_scripting:cm:event_feed_event_type_pending": {
		"scope": "lua",
		"prefix": "cm:event_feed_event_type_pending",
		"description": "cm:event_feed_event_type_pending()\n-  -\n\nReturns whether any event messages of the supplied type are currently being blocked/withheld by event feed suppression.\n",
		"body": [
			"cm:event_feed_event_type_pending(${1:string event type})"
		],
	},
	"docgen:episodic_scripting:disable_event_feed_events": {
		"scope": "lua",
		"prefix": "disable_event_feed_events",
		"description": "cm:disable_event_feed_events()\n-  -\n\nEnable or disable event feed events by category, subcategory or event.\n",
		"body": [
			"disable_event_feed_events(${1:boolean should disable}, ${2:string category}, ${3:string subcategory}, ${4:string subcategory})"
		],
	},
	"docgen:episodic_scripting:cm:disable_event_feed_events": {
		"scope": "lua",
		"prefix": "cm:disable_event_feed_events",
		"description": "cm:disable_event_feed_events()\n-  -\n\nEnable or disable event feed events by category, subcategory or event.\n",
		"body": [
			"cm:disable_event_feed_events(${1:boolean should disable}, ${2:string category}, ${3:string subcategory}, ${4:string subcategory})"
		],
	},
	"docgen:episodic_scripting:instantly_dismantle_building": {
		"scope": "lua",
		"prefix": "instantly_dismantle_building",
		"description": "cm:instantly_dismantle_building()\n-  -\n\nInstantly dismantle the building in the specified slot.\n",
		"body": [
			"instantly_dismantle_building(${1:string slot key})"
		],
	},
	"docgen:episodic_scripting:cm:instantly_dismantle_building": {
		"scope": "lua",
		"prefix": "cm:instantly_dismantle_building",
		"description": "cm:instantly_dismantle_building()\n-  -\n\nInstantly dismantle the building in the specified slot.\n",
		"body": [
			"cm:instantly_dismantle_building(${1:string slot key})"
		],
	},
	"docgen:episodic_scripting:instantly_upgrade_building": {
		"scope": "lua",
		"prefix": "instantly_upgrade_building",
		"description": "cm:instantly_upgrade_building()\n-  -\n\nInstantly upgrade the building in the specified slot to the specified building key.\n",
		"body": [
			"instantly_upgrade_building(${1:slot_script_interface slot}, ${2:string building key})"
		],
	},
	"docgen:episodic_scripting:cm:instantly_upgrade_building": {
		"scope": "lua",
		"prefix": "cm:instantly_upgrade_building",
		"description": "cm:instantly_upgrade_building()\n-  -\n\nInstantly upgrade the building in the specified slot to the specified building key.\n",
		"body": [
			"cm:instantly_upgrade_building(${1:slot_script_interface slot}, ${2:string building key})"
		],
	},
	"docgen:episodic_scripting:instantly_repair_building": {
		"scope": "lua",
		"prefix": "instantly_repair_building",
		"description": "cm:instantly_repair_building()\n-  -\n\nInstantly repair the building in the specified slot.\n",
		"body": [
			"instantly_repair_building(${1:string slot key})"
		],
	},
	"docgen:episodic_scripting:cm:instantly_repair_building": {
		"scope": "lua",
		"prefix": "cm:instantly_repair_building",
		"description": "cm:instantly_repair_building()\n-  -\n\nInstantly repair the building in the specified slot.\n",
		"body": [
			"cm:instantly_repair_building(${1:string slot key})"
		],
	},
	"docgen:episodic_scripting:region_slot_instantly_repair_building": {
		"scope": "lua",
		"prefix": "region_slot_instantly_repair_building",
		"description": "cm:region_slot_instantly_repair_building()\n-  -\n\nInstantly repair the building in the specified slot.\n",
		"body": [
			"region_slot_instantly_repair_building(${1:SLOT_SCRIPT_INTERFACE slot})"
		],
	},
	"docgen:episodic_scripting:cm:region_slot_instantly_repair_building": {
		"scope": "lua",
		"prefix": "cm:region_slot_instantly_repair_building",
		"description": "cm:region_slot_instantly_repair_building()\n-  -\n\nInstantly repair the building in the specified slot.\n",
		"body": [
			"cm:region_slot_instantly_repair_building(${1:SLOT_SCRIPT_INTERFACE slot})"
		],
	},
	"docgen:episodic_scripting:instant_set_building_health_percent": {
		"scope": "lua",
		"prefix": "instant_set_building_health_percent",
		"description": "cm:instant_set_building_health_percent()\n-  -\n\nInstantly set the health of a building.\n",
		"body": [
			"instant_set_building_health_percent(${1:string region key}, ${2:string building key}, ${3:number health percent})"
		],
	},
	"docgen:episodic_scripting:cm:instant_set_building_health_percent": {
		"scope": "lua",
		"prefix": "cm:instant_set_building_health_percent",
		"description": "cm:instant_set_building_health_percent()\n-  -\n\nInstantly set the health of a building.\n",
		"body": [
			"cm:instant_set_building_health_percent(${1:string region key}, ${2:string building key}, ${3:number health percent})"
		],
	},
	"docgen:episodic_scripting:override_building_chain_display": {
		"scope": "lua",
		"prefix": "override_building_chain_display",
		"description": "cm:override_building_chain_display()\n-  -\n\nOverride the display of a building chain so that it appears as another building chain in the ui.\n",
		"body": [
			"override_building_chain_display(${1:string building chain key}, ${2:string override chain key}, ${3:[opt=nil] string region key})"
		],
	},
	"docgen:episodic_scripting:cm:override_building_chain_display": {
		"scope": "lua",
		"prefix": "cm:override_building_chain_display",
		"description": "cm:override_building_chain_display()\n-  -\n\nOverride the display of a building chain so that it appears as another building chain in the ui.\n",
		"body": [
			"cm:override_building_chain_display(${1:string building chain key}, ${2:string override chain key}, ${3:[opt=nil] string region key})"
		],
	},
	"docgen:episodic_scripting:add_building_to_force": {
		"scope": "lua",
		"prefix": "add_building_to_force",
		"description": "cm:add_building_to_force()\n-  -\n\nAttempts to add a horde building to a military force.\n",
		"body": [
			"add_building_to_force(${1:number force cqi}, ${2:string building key}, ${3:boolean operation was successful})"
		],
	},
	"docgen:episodic_scripting:cm:add_building_to_force": {
		"scope": "lua",
		"prefix": "cm:add_building_to_force",
		"description": "cm:add_building_to_force()\n-  -\n\nAttempts to add a horde building to a military force.\n",
		"body": [
			"cm:add_building_to_force(${1:number force cqi}, ${2:string building key}, ${3:boolean operation was successful})"
		],
	},
	"docgen:episodic_scripting:add_building_to_settlement": {
		"scope": "lua",
		"prefix": "add_building_to_settlement",
		"description": "cm:add_building_to_settlement()\n-  -\n\nAttempts to add a building to a settlement.\n",
		"body": [
			"add_building_to_settlement(${1:string region key}, ${2:string building key}, ${3:boolean operation was successful})"
		],
	},
	"docgen:episodic_scripting:cm:add_building_to_settlement": {
		"scope": "lua",
		"prefix": "cm:add_building_to_settlement",
		"description": "cm:add_building_to_settlement()\n-  -\n\nAttempts to add a building to a settlement.\n",
		"body": [
			"cm:add_building_to_settlement(${1:string region key}, ${2:string building key}, ${3:boolean operation was successful})"
		],
	},
	"docgen:episodic_scripting:add_foreign_slot_set_to_region_for_faction": {
		"scope": "lua",
		"prefix": "add_foreign_slot_set_to_region_for_faction",
		"description": "cm:add_foreign_slot_set_to_region_for_faction()\n-  -\n\nAdds the specified foreign slot set to the target region, for the target faction.\n",
		"body": [
			"add_foreign_slot_set_to_region_for_faction(${1:number faction cqi}, ${2:number region cqi}, ${3:string slot set key})"
		],
	},
	"docgen:episodic_scripting:cm:add_foreign_slot_set_to_region_for_faction": {
		"scope": "lua",
		"prefix": "cm:add_foreign_slot_set_to_region_for_faction",
		"description": "cm:add_foreign_slot_set_to_region_for_faction()\n-  -\n\nAdds the specified foreign slot set to the target region, for the target faction.\n",
		"body": [
			"cm:add_foreign_slot_set_to_region_for_faction(${1:number faction cqi}, ${2:number region cqi}, ${3:string slot set key})"
		],
	},
	"docgen:episodic_scripting:remove_faction_foreign_slots_from_region": {
		"scope": "lua",
		"prefix": "remove_faction_foreign_slots_from_region",
		"description": "cm:remove_faction_foreign_slots_from_region()\n-  -\n\nRemoves the specified foreign slot set from the target region, for the target faction.\n",
		"body": [
			"remove_faction_foreign_slots_from_region(${1:number faction cqi}, ${2:number region cqi})"
		],
	},
	"docgen:episodic_scripting:cm:remove_faction_foreign_slots_from_region": {
		"scope": "lua",
		"prefix": "cm:remove_faction_foreign_slots_from_region",
		"description": "cm:remove_faction_foreign_slots_from_region()\n-  -\n\nRemoves the specified foreign slot set from the target region, for the target faction.\n",
		"body": [
			"cm:remove_faction_foreign_slots_from_region(${1:number faction cqi}, ${2:number region cqi})"
		],
	},
	"docgen:episodic_scripting:foreign_slot_instantly_upgrade_building": {
		"scope": "lua",
		"prefix": "foreign_slot_instantly_upgrade_building",
		"description": "cm:foreign_slot_instantly_upgrade_building()\n-  -\n\nInstantly upgrades the building in the specified foreign slot.\n",
		"body": [
			"foreign_slot_instantly_upgrade_building(${1:number foreign slot cqi}, ${2:string building key})"
		],
	},
	"docgen:episodic_scripting:cm:foreign_slot_instantly_upgrade_building": {
		"scope": "lua",
		"prefix": "cm:foreign_slot_instantly_upgrade_building",
		"description": "cm:foreign_slot_instantly_upgrade_building()\n-  -\n\nInstantly upgrades the building in the specified foreign slot.\n",
		"body": [
			"cm:foreign_slot_instantly_upgrade_building(${1:number foreign slot cqi}, ${2:string building key})"
		],
	},
	"docgen:episodic_scripting:foreign_slot_instantly_dismantle_building": {
		"scope": "lua",
		"prefix": "foreign_slot_instantly_dismantle_building",
		"description": "cm:foreign_slot_instantly_dismantle_building()\n-  -\n\nInstantly dismantles the building in the specified foreign slot.\n",
		"body": [
			"foreign_slot_instantly_dismantle_building(${1:number foreign slot cqi})"
		],
	},
	"docgen:episodic_scripting:cm:foreign_slot_instantly_dismantle_building": {
		"scope": "lua",
		"prefix": "cm:foreign_slot_instantly_dismantle_building",
		"description": "cm:foreign_slot_instantly_dismantle_building()\n-  -\n\nInstantly dismantles the building in the specified foreign slot.\n",
		"body": [
			"cm:foreign_slot_instantly_dismantle_building(${1:number foreign slot cqi})"
		],
	},
	"docgen:episodic_scripting:region_slot_instantly_dismantle_building": {
		"scope": "lua",
		"prefix": "region_slot_instantly_dismantle_building",
		"description": "cm:region_slot_instantly_dismantle_building()\n-  -\n\nInstantly dismantle the building in the supplied region slot.\n",
		"body": [
			"region_slot_instantly_dismantle_building()"
		],
	},
	"docgen:episodic_scripting:cm:region_slot_instantly_dismantle_building": {
		"scope": "lua",
		"prefix": "cm:region_slot_instantly_dismantle_building",
		"description": "cm:region_slot_instantly_dismantle_building()\n-  -\n\nInstantly dismantle the building in the supplied region slot.\n",
		"body": [
			"cm:region_slot_instantly_dismantle_building()"
		],
	},
	"docgen:episodic_scripting:region_slot_instantly_upgrade_building": {
		"scope": "lua",
		"prefix": "region_slot_instantly_upgrade_building",
		"description": "cm:region_slot_instantly_upgrade_building()\n-  -\n\nInstantly upgrade the building in the supplied region slot to the supplied building.\n",
		"body": [
			"region_slot_instantly_upgrade_building()"
		],
	},
	"docgen:episodic_scripting:cm:region_slot_instantly_upgrade_building": {
		"scope": "lua",
		"prefix": "cm:region_slot_instantly_upgrade_building",
		"description": "cm:region_slot_instantly_upgrade_building()\n-  -\n\nInstantly upgrade the building in the supplied region slot to the supplied building.\n",
		"body": [
			"cm:region_slot_instantly_upgrade_building()"
		],
	},
	"docgen:episodic_scripting:instantly_set_settlement_primary_slot_level": {
		"scope": "lua",
		"prefix": "instantly_set_settlement_primary_slot_level",
		"description": "cm:instantly_set_settlement_primary_slot_level()\n-  -\n\nInstantly sets the primary slot level of the supplied settlement.\n",
		"body": [
			"instantly_set_settlement_primary_slot_level()"
		],
	},
	"docgen:episodic_scripting:cm:instantly_set_settlement_primary_slot_level": {
		"scope": "lua",
		"prefix": "cm:instantly_set_settlement_primary_slot_level",
		"description": "cm:instantly_set_settlement_primary_slot_level()\n-  -\n\nInstantly sets the primary slot level of the supplied settlement.\n",
		"body": [
			"cm:instantly_set_settlement_primary_slot_level()"
		],
	},
	"docgen:episodic_scripting:apply_effect_bundle": {
		"scope": "lua",
		"prefix": "apply_effect_bundle",
		"description": "cm:apply_effect_bundle()\n-  -\n\nApply an effect bundle to a faction for a number of turns, or indefinitely.\n",
		"body": [
			"apply_effect_bundle(${1:string effect bundle key}, ${2:string faction key}, ${3:number turns})"
		],
	},
	"docgen:episodic_scripting:cm:apply_effect_bundle": {
		"scope": "lua",
		"prefix": "cm:apply_effect_bundle",
		"description": "cm:apply_effect_bundle()\n-  -\n\nApply an effect bundle to a faction for a number of turns, or indefinitely.\n",
		"body": [
			"cm:apply_effect_bundle(${1:string effect bundle key}, ${2:string faction key}, ${3:number turns})"
		],
	},
	"docgen:episodic_scripting:remove_effect_bundle": {
		"scope": "lua",
		"prefix": "remove_effect_bundle",
		"description": "cm:remove_effect_bundle()\n-  -\n\nRemoves a previously-applied effect bundle from a faction.\n",
		"body": [
			"remove_effect_bundle(${1:string effect bundle key}, ${2:string faction key})"
		],
	},
	"docgen:episodic_scripting:cm:remove_effect_bundle": {
		"scope": "lua",
		"prefix": "cm:remove_effect_bundle",
		"description": "cm:remove_effect_bundle()\n-  -\n\nRemoves a previously-applied effect bundle from a faction.\n",
		"body": [
			"cm:remove_effect_bundle(${1:string effect bundle key}, ${2:string faction key})"
		],
	},
	"docgen:episodic_scripting:apply_effect_bundle_to_force": {
		"scope": "lua",
		"prefix": "apply_effect_bundle_to_force",
		"description": "cm:apply_effect_bundle_to_force()\n-  -\n\nApply an effect bundle to a military force for a number of turns, or indefinitely.\n",
		"body": [
			"apply_effect_bundle_to_force(${1:string effect bundle key}, ${2:number force cqi}, ${3:number turns})"
		],
	},
	"docgen:episodic_scripting:cm:apply_effect_bundle_to_force": {
		"scope": "lua",
		"prefix": "cm:apply_effect_bundle_to_force",
		"description": "cm:apply_effect_bundle_to_force()\n-  -\n\nApply an effect bundle to a military force for a number of turns, or indefinitely.\n",
		"body": [
			"cm:apply_effect_bundle_to_force(${1:string effect bundle key}, ${2:number force cqi}, ${3:number turns})"
		],
	},
	"docgen:episodic_scripting:remove_effect_bundle_from_force": {
		"scope": "lua",
		"prefix": "remove_effect_bundle_from_force",
		"description": "cm:remove_effect_bundle_from_force()\n-  -\n\nRemoves a previously-applied effect bundle from a military force.\n",
		"body": [
			"remove_effect_bundle_from_force(${1:string effect bundle key}, ${2:number force cqi})"
		],
	},
	"docgen:episodic_scripting:cm:remove_effect_bundle_from_force": {
		"scope": "lua",
		"prefix": "cm:remove_effect_bundle_from_force",
		"description": "cm:remove_effect_bundle_from_force()\n-  -\n\nRemoves a previously-applied effect bundle from a military force.\n",
		"body": [
			"cm:remove_effect_bundle_from_force(${1:string effect bundle key}, ${2:number force cqi})"
		],
	},
	"docgen:episodic_scripting:apply_effect_bundle_to_characters_force": {
		"scope": "lua",
		"prefix": "apply_effect_bundle_to_characters_force",
		"description": "cm:apply_effect_bundle_to_characters_force()\n-  -\n\nApply an effect bundle to a military force for a number of turns, or indefinitely.\n",
		"body": [
			"apply_effect_bundle_to_characters_force(${1:string effect bundle key}, ${2:number character cqi}, ${3:number turns}, ${4:boolean command queue})"
		],
	},
	"docgen:episodic_scripting:cm:apply_effect_bundle_to_characters_force": {
		"scope": "lua",
		"prefix": "cm:apply_effect_bundle_to_characters_force",
		"description": "cm:apply_effect_bundle_to_characters_force()\n-  -\n\nApply an effect bundle to a military force for a number of turns, or indefinitely.\n",
		"body": [
			"cm:apply_effect_bundle_to_characters_force(${1:string effect bundle key}, ${2:number character cqi}, ${3:number turns}, ${4:boolean command queue})"
		],
	},
	"docgen:episodic_scripting:remove_effect_bundle_from_characters_force": {
		"scope": "lua",
		"prefix": "remove_effect_bundle_from_characters_force",
		"description": "cm:remove_effect_bundle_from_characters_force()\n-  -\n\nRemoves a previously-applied effect bundle from a military force, specified by its commanding character.\n",
		"body": [
			"remove_effect_bundle_from_characters_force(${1:string effect bundle key}, ${2:number character cqi})"
		],
	},
	"docgen:episodic_scripting:cm:remove_effect_bundle_from_characters_force": {
		"scope": "lua",
		"prefix": "cm:remove_effect_bundle_from_characters_force",
		"description": "cm:remove_effect_bundle_from_characters_force()\n-  -\n\nRemoves a previously-applied effect bundle from a military force, specified by its commanding character.\n",
		"body": [
			"cm:remove_effect_bundle_from_characters_force(${1:string effect bundle key}, ${2:number character cqi})"
		],
	},
	"docgen:episodic_scripting:apply_effect_bundle_to_character": {
		"scope": "lua",
		"prefix": "apply_effect_bundle_to_character",
		"description": "cm:apply_effect_bundle_to_character()\n-  -\n\nApplies an effect bundle to a character.\n",
		"body": [
			"apply_effect_bundle_to_character(${1:string effect bundle}, ${2:CHARACTER_SCRIPT_INTERFACE character}, ${3:number turns})"
		],
	},
	"docgen:episodic_scripting:cm:apply_effect_bundle_to_character": {
		"scope": "lua",
		"prefix": "cm:apply_effect_bundle_to_character",
		"description": "cm:apply_effect_bundle_to_character()\n-  -\n\nApplies an effect bundle to a character.\n",
		"body": [
			"cm:apply_effect_bundle_to_character(${1:string effect bundle}, ${2:CHARACTER_SCRIPT_INTERFACE character}, ${3:number turns})"
		],
	},
	"docgen:episodic_scripting:remove_effect_bundle_from_character": {
		"scope": "lua",
		"prefix": "remove_effect_bundle_from_character",
		"description": "cm:remove_effect_bundle_from_character()\n-  -\n\nRemoves an effect bundle from a character.\n",
		"body": [
			"remove_effect_bundle_from_character(${1:string effect bundle}, ${2:CHARACTER_SCRIPT_INTERFACE character})"
		],
	},
	"docgen:episodic_scripting:cm:remove_effect_bundle_from_character": {
		"scope": "lua",
		"prefix": "cm:remove_effect_bundle_from_character",
		"description": "cm:remove_effect_bundle_from_character()\n-  -\n\nRemoves an effect bundle from a character.\n",
		"body": [
			"cm:remove_effect_bundle_from_character(${1:string effect bundle}, ${2:CHARACTER_SCRIPT_INTERFACE character})"
		],
	},
	"docgen:episodic_scripting:apply_effect_bundle_to_region": {
		"scope": "lua",
		"prefix": "apply_effect_bundle_to_region",
		"description": "cm:apply_effect_bundle_to_region()\n-  -\n\nApply an effect bundle to a campaign map region for a number of turns, or indefinitely.\n",
		"body": [
			"apply_effect_bundle_to_region(${1:string effect bundle key}, ${2:string region key}, ${3:number turns})"
		],
	},
	"docgen:episodic_scripting:cm:apply_effect_bundle_to_region": {
		"scope": "lua",
		"prefix": "cm:apply_effect_bundle_to_region",
		"description": "cm:apply_effect_bundle_to_region()\n-  -\n\nApply an effect bundle to a campaign map region for a number of turns, or indefinitely.\n",
		"body": [
			"cm:apply_effect_bundle_to_region(${1:string effect bundle key}, ${2:string region key}, ${3:number turns})"
		],
	},
	"docgen:episodic_scripting:remove_effect_bundle_from_region": {
		"scope": "lua",
		"prefix": "remove_effect_bundle_from_region",
		"description": "cm:remove_effect_bundle_from_region()\n-  -\n\nRemoves a previously-applied effect bundle from a campaign map region.\n",
		"body": [
			"remove_effect_bundle_from_region(${1:string effect bundle key}, ${2:string region key})"
		],
	},
	"docgen:episodic_scripting:cm:remove_effect_bundle_from_region": {
		"scope": "lua",
		"prefix": "cm:remove_effect_bundle_from_region",
		"description": "cm:remove_effect_bundle_from_region()\n-  -\n\nRemoves a previously-applied effect bundle from a campaign map region.\n",
		"body": [
			"cm:remove_effect_bundle_from_region(${1:string effect bundle key}, ${2:string region key})"
		],
	},
	"docgen:episodic_scripting:apply_effect_bundle_to_faction_province": {
		"scope": "lua",
		"prefix": "apply_effect_bundle_to_faction_province",
		"description": "cm:apply_effect_bundle_to_faction_province()\n-  -\n\nApplies an effect bundle to a province.\n",
		"body": [
			"apply_effect_bundle_to_faction_province(${1:string effect bundle}, ${2:REGION_SCRIPT_INTERFACE region}, ${3:number turns})"
		],
	},
	"docgen:episodic_scripting:cm:apply_effect_bundle_to_faction_province": {
		"scope": "lua",
		"prefix": "cm:apply_effect_bundle_to_faction_province",
		"description": "cm:apply_effect_bundle_to_faction_province()\n-  -\n\nApplies an effect bundle to a province.\n",
		"body": [
			"cm:apply_effect_bundle_to_faction_province(${1:string effect bundle}, ${2:REGION_SCRIPT_INTERFACE region}, ${3:number turns})"
		],
	},
	"docgen:episodic_scripting:remove_effect_bundle_from_faction_province": {
		"scope": "lua",
		"prefix": "remove_effect_bundle_from_faction_province",
		"description": "cm:remove_effect_bundle_from_faction_province()\n-  -\n\nRemoves an effect bundle from a province.\n",
		"body": [
			"remove_effect_bundle_from_faction_province(${1:string effect bundle}, ${2:REGION_SCRIPT_INTERFACE region})"
		],
	},
	"docgen:episodic_scripting:cm:remove_effect_bundle_from_faction_province": {
		"scope": "lua",
		"prefix": "cm:remove_effect_bundle_from_faction_province",
		"description": "cm:remove_effect_bundle_from_faction_province()\n-  -\n\nRemoves an effect bundle from a province.\n",
		"body": [
			"cm:remove_effect_bundle_from_faction_province(${1:string effect bundle}, ${2:REGION_SCRIPT_INTERFACE region})"
		],
	},
	"docgen:episodic_scripting:create_new_custom_effect_bundle": {
		"scope": "lua",
		"prefix": "create_new_custom_effect_bundle",
		"description": "cm:create_new_custom_effect_bundle()\n-  -\n\nCreates a new custom effect bundle, using the specified effect bundle record as a base.\n",
		"body": [
			"create_new_custom_effect_bundle(${1:string base effect bundle})"
		],
	},
	"docgen:episodic_scripting:cm:create_new_custom_effect_bundle": {
		"scope": "lua",
		"prefix": "cm:create_new_custom_effect_bundle",
		"description": "cm:create_new_custom_effect_bundle()\n-  -\n\nCreates a new custom effect bundle, using the specified effect bundle record as a base.\n",
		"body": [
			"cm:create_new_custom_effect_bundle(${1:string base effect bundle})"
		],
	},
	"docgen:episodic_scripting:apply_custom_effect_bundle_to_region": {
		"scope": "lua",
		"prefix": "apply_custom_effect_bundle_to_region",
		"description": "cm:apply_custom_effect_bundle_to_region()\n-  -\n\nApplies a custom effect bundle to a region.\n",
		"body": [
			"apply_custom_effect_bundle_to_region(${1:CUSTOM_EFFECT_BUNDLE_SCRIPT_INTERFACE custom effect bundle}, ${2:REGION_SCRIPT_INTERFACE region})"
		],
	},
	"docgen:episodic_scripting:cm:apply_custom_effect_bundle_to_region": {
		"scope": "lua",
		"prefix": "cm:apply_custom_effect_bundle_to_region",
		"description": "cm:apply_custom_effect_bundle_to_region()\n-  -\n\nApplies a custom effect bundle to a region.\n",
		"body": [
			"cm:apply_custom_effect_bundle_to_region(${1:CUSTOM_EFFECT_BUNDLE_SCRIPT_INTERFACE custom effect bundle}, ${2:REGION_SCRIPT_INTERFACE region})"
		],
	},
	"docgen:episodic_scripting:apply_custom_effect_bundle_to_faction": {
		"scope": "lua",
		"prefix": "apply_custom_effect_bundle_to_faction",
		"description": "cm:apply_custom_effect_bundle_to_faction()\n-  -\n\nApplies a custom effect bundle to a faction.\n",
		"body": [
			"apply_custom_effect_bundle_to_faction(${1:CUSTOM_EFFECT_BUNDLE_SCRIPT_INTERFACE custom effect bundle}, ${2:FACTION_SCRIPT_INTERFACE faction})"
		],
	},
	"docgen:episodic_scripting:cm:apply_custom_effect_bundle_to_faction": {
		"scope": "lua",
		"prefix": "cm:apply_custom_effect_bundle_to_faction",
		"description": "cm:apply_custom_effect_bundle_to_faction()\n-  -\n\nApplies a custom effect bundle to a faction.\n",
		"body": [
			"cm:apply_custom_effect_bundle_to_faction(${1:CUSTOM_EFFECT_BUNDLE_SCRIPT_INTERFACE custom effect bundle}, ${2:FACTION_SCRIPT_INTERFACE faction})"
		],
	},
	"docgen:episodic_scripting:apply_custom_effect_bundle_to_character": {
		"scope": "lua",
		"prefix": "apply_custom_effect_bundle_to_character",
		"description": "cm:apply_custom_effect_bundle_to_character()\n-  -\n\nApplies a custom effect bundle to a character.\n",
		"body": [
			"apply_custom_effect_bundle_to_character(${1:CUSTOM_EFFECT_BUNDLE_SCRIPT_INTERFACE custom effect bundle}, ${2:CHARACTER_SCRIPT_INTERFACE character})"
		],
	},
	"docgen:episodic_scripting:cm:apply_custom_effect_bundle_to_character": {
		"scope": "lua",
		"prefix": "cm:apply_custom_effect_bundle_to_character",
		"description": "cm:apply_custom_effect_bundle_to_character()\n-  -\n\nApplies a custom effect bundle to a character.\n",
		"body": [
			"cm:apply_custom_effect_bundle_to_character(${1:CUSTOM_EFFECT_BUNDLE_SCRIPT_INTERFACE custom effect bundle}, ${2:CHARACTER_SCRIPT_INTERFACE character})"
		],
	},
	"docgen:episodic_scripting:apply_custom_effect_bundle_to_force": {
		"scope": "lua",
		"prefix": "apply_custom_effect_bundle_to_force",
		"description": "cm:apply_custom_effect_bundle_to_force()\n-  -\n\nApplies a custom effect bundle to a military force.\n",
		"body": [
			"apply_custom_effect_bundle_to_force(${1:CUSTOM_EFFECT_BUNDLE_SCRIPT_INTERFACE custom effect bundle}, ${2:MILITARY_FORCE_SCRIPT_INTERFACE military force})"
		],
	},
	"docgen:episodic_scripting:cm:apply_custom_effect_bundle_to_force": {
		"scope": "lua",
		"prefix": "cm:apply_custom_effect_bundle_to_force",
		"description": "cm:apply_custom_effect_bundle_to_force()\n-  -\n\nApplies a custom effect bundle to a military force.\n",
		"body": [
			"cm:apply_custom_effect_bundle_to_force(${1:CUSTOM_EFFECT_BUNDLE_SCRIPT_INTERFACE custom effect bundle}, ${2:MILITARY_FORCE_SCRIPT_INTERFACE military force})"
		],
	},
	"docgen:episodic_scripting:apply_custom_effect_bundle_to_faction_province": {
		"scope": "lua",
		"prefix": "apply_custom_effect_bundle_to_faction_province",
		"description": "cm:apply_custom_effect_bundle_to_faction_province()\n-  -\n\nApplies a custom effect bundle to a province.\n",
		"body": [
			"apply_custom_effect_bundle_to_faction_province(${1:CUSTOM_EFFECT_BUNDLE_SCRIPT_INTERFACE custom effect bundle}, ${2:REGION_SCRIPT_INTERFACE region})"
		],
	},
	"docgen:episodic_scripting:cm:apply_custom_effect_bundle_to_faction_province": {
		"scope": "lua",
		"prefix": "cm:apply_custom_effect_bundle_to_faction_province",
		"description": "cm:apply_custom_effect_bundle_to_faction_province()\n-  -\n\nApplies a custom effect bundle to a province.\n",
		"body": [
			"cm:apply_custom_effect_bundle_to_faction_province(${1:CUSTOM_EFFECT_BUNDLE_SCRIPT_INTERFACE custom effect bundle}, ${2:REGION_SCRIPT_INTERFACE region})"
		],
	},
	"docgen:episodic_scripting:apply_custom_effect_bundle_to_characters_force": {
		"scope": "lua",
		"prefix": "apply_custom_effect_bundle_to_characters_force",
		"description": "cm:apply_custom_effect_bundle_to_characters_force()\n-  -\n\nApplies a custom effect bundle to a character's military force.\n",
		"body": [
			"apply_custom_effect_bundle_to_characters_force(${1:CUSTOM_EFFECT_BUNDLE_SCRIPT_INTERFACE custom effect bundle}, ${2:CHARACTER_SCRIPT_INTERFACE character})"
		],
	},
	"docgen:episodic_scripting:cm:apply_custom_effect_bundle_to_characters_force": {
		"scope": "lua",
		"prefix": "cm:apply_custom_effect_bundle_to_characters_force",
		"description": "cm:apply_custom_effect_bundle_to_characters_force()\n-  -\n\nApplies a custom effect bundle to a character's military force.\n",
		"body": [
			"cm:apply_custom_effect_bundle_to_characters_force(${1:CUSTOM_EFFECT_BUNDLE_SCRIPT_INTERFACE custom effect bundle}, ${2:CHARACTER_SCRIPT_INTERFACE character})"
		],
	},
	"docgen:episodic_scripting:force_diplomacy_new": {
		"scope": "lua",
		"prefix": "force_diplomacy_new",
		"description": "cm:force_diplomacy_new()\n-  -\n\nDisables or re-enables availability of a set of diplomacy types between factions described in the faction and target specifiers.\n",
		"body": [
			"force_diplomacy_new(${1:string source faction}, ${2:string target faction}, ${3:number bitmask}, ${4:boolean can offer}, ${5:boolean can accept})"
		],
	},
	"docgen:episodic_scripting:cm:force_diplomacy_new": {
		"scope": "lua",
		"prefix": "cm:force_diplomacy_new",
		"description": "cm:force_diplomacy_new()\n-  -\n\nDisables or re-enables availability of a set of diplomacy types between factions described in the faction and target specifiers.\n",
		"body": [
			"cm:force_diplomacy_new(${1:string source faction}, ${2:string target faction}, ${3:number bitmask}, ${4:boolean can offer}, ${5:boolean can accept})"
		],
	},
	"docgen:episodic_scripting:force_declare_war": {
		"scope": "lua",
		"prefix": "force_declare_war",
		"description": "cm:force_declare_war()\n-  -\n\nForces one faction to declare war on another.\n",
		"body": [
			"force_declare_war(${1:string attacking faction key}, ${2:string target faction key}, ${3:boolean invite attacker allies}, ${4:boolean invite defender allies}, ${5:[opt=true] boolean use command queue})"
		],
	},
	"docgen:episodic_scripting:cm:force_declare_war": {
		"scope": "lua",
		"prefix": "cm:force_declare_war",
		"description": "cm:force_declare_war()\n-  -\n\nForces one faction to declare war on another.\n",
		"body": [
			"cm:force_declare_war(${1:string attacking faction key}, ${2:string target faction key}, ${3:boolean invite attacker allies}, ${4:boolean invite defender allies}, ${5:[opt=true] boolean use command queue})"
		],
	},
	"docgen:episodic_scripting:force_make_vassal": {
		"scope": "lua",
		"prefix": "force_make_vassal",
		"description": "cm:force_make_vassal()\n-  -\n\nForce one faction to vassalise another faction.\n",
		"body": [
			"force_make_vassal(${1:string vassalising faction key}, ${2:string vassal faction key})"
		],
	},
	"docgen:episodic_scripting:cm:force_make_vassal": {
		"scope": "lua",
		"prefix": "cm:force_make_vassal",
		"description": "cm:force_make_vassal()\n-  -\n\nForce one faction to vassalise another faction.\n",
		"body": [
			"cm:force_make_vassal(${1:string vassalising faction key}, ${2:string vassal faction key})"
		],
	},
	"docgen:episodic_scripting:force_alliance": {
		"scope": "lua",
		"prefix": "force_alliance",
		"description": "cm:force_alliance()\n-  -\n\nForce two factions to become defensive or military allies.\n",
		"body": [
			"force_alliance(${1:string first faction key}, ${2:string second faction key}, ${3:boolean is military alliance})"
		],
	},
	"docgen:episodic_scripting:cm:force_alliance": {
		"scope": "lua",
		"prefix": "cm:force_alliance",
		"description": "cm:force_alliance()\n-  -\n\nForce two factions to become defensive or military allies.\n",
		"body": [
			"cm:force_alliance(${1:string first faction key}, ${2:string second faction key}, ${3:boolean is military alliance})"
		],
	},
	"docgen:episodic_scripting:force_grant_military_access": {
		"scope": "lua",
		"prefix": "force_grant_military_access",
		"description": "cm:force_grant_military_access()\n-  -\n\nForce one faction to grant another faction military access to its territory.\n",
		"body": [
			"force_grant_military_access(${1:string granting faction key}, ${2:string recipient faction key}, ${3:boolean is hard access})"
		],
	},
	"docgen:episodic_scripting:cm:force_grant_military_access": {
		"scope": "lua",
		"prefix": "cm:force_grant_military_access",
		"description": "cm:force_grant_military_access()\n-  -\n\nForce one faction to grant another faction military access to its territory.\n",
		"body": [
			"cm:force_grant_military_access(${1:string granting faction key}, ${2:string recipient faction key}, ${3:boolean is hard access})"
		],
	},
	"docgen:episodic_scripting:force_make_peace": {
		"scope": "lua",
		"prefix": "force_make_peace",
		"description": "cm:force_make_peace()\n-  -\n\nForces peace between two warring factions.\n",
		"body": [
			"force_make_peace(${1:string first faction key}, ${2:string second faction key})"
		],
	},
	"docgen:episodic_scripting:cm:force_make_peace": {
		"scope": "lua",
		"prefix": "cm:force_make_peace",
		"description": "cm:force_make_peace()\n-  -\n\nForces peace between two warring factions.\n",
		"body": [
			"cm:force_make_peace(${1:string first faction key}, ${2:string second faction key})"
		],
	},
	"docgen:episodic_scripting:force_confederation": {
		"scope": "lua",
		"prefix": "force_confederation",
		"description": "cm:force_confederation()\n-  -\n\nForces a proposing faction to subsume a target faction into its confederation.\n",
		"body": [
			"force_confederation(${1:string proposing faction key}, ${2:string target faction key})"
		],
	},
	"docgen:episodic_scripting:cm:force_confederation": {
		"scope": "lua",
		"prefix": "cm:force_confederation",
		"description": "cm:force_confederation()\n-  -\n\nForces a proposing faction to subsume a target faction into its confederation.\n",
		"body": [
			"cm:force_confederation(${1:string proposing faction key}, ${2:string target faction key})"
		],
	},
	"docgen:episodic_scripting:force_make_trade_agreement": {
		"scope": "lua",
		"prefix": "force_make_trade_agreement",
		"description": "cm:force_make_trade_agreement()\n-  -\n\nForces a trade agreement between two specified factions.\n",
		"body": [
			"force_make_trade_agreement(${1:string first faction key}, ${2:string second faction key})"
		],
	},
	"docgen:episodic_scripting:cm:force_make_trade_agreement": {
		"scope": "lua",
		"prefix": "cm:force_make_trade_agreement",
		"description": "cm:force_make_trade_agreement()\n-  -\n\nForces a trade agreement between two specified factions.\n",
		"body": [
			"cm:force_make_trade_agreement(${1:string first faction key}, ${2:string second faction key})"
		],
	},
	"docgen:episodic_scripting:make_diplomacy_available": {
		"scope": "lua",
		"prefix": "make_diplomacy_available",
		"description": "cm:make_diplomacy_available()\n-  -\n\nMakes diplomacy available between two factions, as if they had discovered each other on the campaign map.\n",
		"body": [
			"make_diplomacy_available(${1:string first faction key}, ${2:string second faction key})"
		],
	},
	"docgen:episodic_scripting:cm:make_diplomacy_available": {
		"scope": "lua",
		"prefix": "cm:make_diplomacy_available",
		"description": "cm:make_diplomacy_available()\n-  -\n\nMakes diplomacy available between two factions, as if they had discovered each other on the campaign map.\n",
		"body": [
			"cm:make_diplomacy_available(${1:string first faction key}, ${2:string second faction key})"
		],
	},
	"docgen:episodic_scripting:faction_offers_peace_to_other_faction": {
		"scope": "lua",
		"prefix": "faction_offers_peace_to_other_faction",
		"description": "cm:faction_offers_peace_to_other_faction()\n-  -\n\nCompels one faction to offer peace to another faction that it's at war with.\n",
		"body": [
			"faction_offers_peace_to_other_faction(${1:string proposing faction key}, ${2:string target faction key})"
		],
	},
	"docgen:episodic_scripting:cm:faction_offers_peace_to_other_faction": {
		"scope": "lua",
		"prefix": "cm:faction_offers_peace_to_other_faction",
		"description": "cm:faction_offers_peace_to_other_faction()\n-  -\n\nCompels one faction to offer peace to another faction that it's at war with.\n",
		"body": [
			"cm:faction_offers_peace_to_other_faction(${1:string proposing faction key}, ${2:string target faction key})"
		],
	},
	"docgen:episodic_scripting:apply_dilemma_diplomatic_bonus": {
		"scope": "lua",
		"prefix": "apply_dilemma_diplomatic_bonus",
		"description": "cm:apply_dilemma_diplomatic_bonus()\n-  -\n\nDirectly applies a diplomatic bonus or penalty between two factions, as if it had come from a dilemma.\n",
		"body": [
			"apply_dilemma_diplomatic_bonus(${1:string faction a key}, ${2:string faction a key}, ${3:number bonus value})"
		],
	},
	"docgen:episodic_scripting:cm:apply_dilemma_diplomatic_bonus": {
		"scope": "lua",
		"prefix": "cm:apply_dilemma_diplomatic_bonus",
		"description": "cm:apply_dilemma_diplomatic_bonus()\n-  -\n\nDirectly applies a diplomatic bonus or penalty between two factions, as if it had come from a dilemma.\n",
		"body": [
			"cm:apply_dilemma_diplomatic_bonus(${1:string faction a key}, ${2:string faction a key}, ${3:number bonus value})"
		],
	},
	"docgen:episodic_scripting:add_event_restricted_unit_record": {
		"scope": "lua",
		"prefix": "add_event_restricted_unit_record",
		"description": "cm:add_event_restricted_unit_record()\n-  -\n\nAdds a restriction preventing a specified unit from being a recruitment option for any faction.\n",
		"body": [
			"add_event_restricted_unit_record(${1:string unit key}, ${2:[opt=nil] string tooltip key, Key of localised text in full [table]_[field]_[key] string tooltip key})"
		],
	},
	"docgen:episodic_scripting:cm:add_event_restricted_unit_record": {
		"scope": "lua",
		"prefix": "cm:add_event_restricted_unit_record",
		"description": "cm:add_event_restricted_unit_record()\n-  -\n\nAdds a restriction preventing a specified unit from being a recruitment option for any faction.\n",
		"body": [
			"cm:add_event_restricted_unit_record(${1:string unit key}, ${2:[opt=nil] string tooltip key, Key of localised text in full [table]_[field]_[key] string tooltip key})"
		],
	},
	"docgen:episodic_scripting:remove_event_restricted_unit_record": {
		"scope": "lua",
		"prefix": "remove_event_restricted_unit_record",
		"description": "cm:remove_event_restricted_unit_record()\n-  -\n\nRemoves a restriction previously added with episodic_scripting:add_event_restricted_unit_record.\n",
		"body": [
			"remove_event_restricted_unit_record(${1:string unit key})"
		],
	},
	"docgen:episodic_scripting:cm:remove_event_restricted_unit_record": {
		"scope": "lua",
		"prefix": "cm:remove_event_restricted_unit_record",
		"description": "cm:remove_event_restricted_unit_record()\n-  -\n\nRemoves a restriction previously added with episodic_scripting:add_event_restricted_unit_record.\n",
		"body": [
			"cm:remove_event_restricted_unit_record(${1:string unit key})"
		],
	},
	"docgen:episodic_scripting:add_event_restricted_unit_record_for_faction": {
		"scope": "lua",
		"prefix": "add_event_restricted_unit_record_for_faction",
		"description": "cm:add_event_restricted_unit_record_for_faction()\n-  -\n\nAdds a restriction preventing a specified unit from being a recruitment option for a specified faction.\n",
		"body": [
			"add_event_restricted_unit_record_for_faction(${1:string unit key}, ${2:string faction key}, ${3:[opt=nil] string tooltip key, Key of localised text in full [table]_[field]_[key] string tooltip key})"
		],
	},
	"docgen:episodic_scripting:cm:add_event_restricted_unit_record_for_faction": {
		"scope": "lua",
		"prefix": "cm:add_event_restricted_unit_record_for_faction",
		"description": "cm:add_event_restricted_unit_record_for_faction()\n-  -\n\nAdds a restriction preventing a specified unit from being a recruitment option for a specified faction.\n",
		"body": [
			"cm:add_event_restricted_unit_record_for_faction(${1:string unit key}, ${2:string faction key}, ${3:[opt=nil] string tooltip key, Key of localised text in full [table]_[field]_[key] string tooltip key})"
		],
	},
	"docgen:episodic_scripting:remove_event_restricted_unit_record_for_faction": {
		"scope": "lua",
		"prefix": "remove_event_restricted_unit_record_for_faction",
		"description": "cm:remove_event_restricted_unit_record_for_faction()\n-  -\n\nRemoves a restriction previously added with episodic_scripting:add_event_restricted_unit_record_for_faction.\n",
		"body": [
			"remove_event_restricted_unit_record_for_faction(${1:string unit key}, ${2:string faction key})"
		],
	},
	"docgen:episodic_scripting:cm:remove_event_restricted_unit_record_for_faction": {
		"scope": "lua",
		"prefix": "cm:remove_event_restricted_unit_record_for_faction",
		"description": "cm:remove_event_restricted_unit_record_for_faction()\n-  -\n\nRemoves a restriction previously added with episodic_scripting:add_event_restricted_unit_record_for_faction.\n",
		"body": [
			"cm:remove_event_restricted_unit_record_for_faction(${1:string unit key}, ${2:string faction key})"
		],
	},
	"docgen:episodic_scripting:add_event_restricted_building_record": {
		"scope": "lua",
		"prefix": "add_event_restricted_building_record",
		"description": "cm:add_event_restricted_building_record()\n-  -\n\nAdds a restriction preventing a specified building from being a construction option for any faction.\n",
		"body": [
			"add_event_restricted_building_record(${1:string building key}, ${2:[opt=nil] string tooltip key, Key of localised text in full [table]_[field]_[key] string tooltip key})"
		],
	},
	"docgen:episodic_scripting:cm:add_event_restricted_building_record": {
		"scope": "lua",
		"prefix": "cm:add_event_restricted_building_record",
		"description": "cm:add_event_restricted_building_record()\n-  -\n\nAdds a restriction preventing a specified building from being a construction option for any faction.\n",
		"body": [
			"cm:add_event_restricted_building_record(${1:string building key}, ${2:[opt=nil] string tooltip key, Key of localised text in full [table]_[field]_[key] string tooltip key})"
		],
	},
	"docgen:episodic_scripting:remove_event_restricted_building_record": {
		"scope": "lua",
		"prefix": "remove_event_restricted_building_record",
		"description": "cm:remove_event_restricted_building_record()\n-  -\n\nRemoves a restriction previously added with episodic_scripting:add_event_restricted_building_record.\n",
		"body": [
			"remove_event_restricted_building_record(${1:string building key})"
		],
	},
	"docgen:episodic_scripting:cm:remove_event_restricted_building_record": {
		"scope": "lua",
		"prefix": "cm:remove_event_restricted_building_record",
		"description": "cm:remove_event_restricted_building_record()\n-  -\n\nRemoves a restriction previously added with episodic_scripting:add_event_restricted_building_record.\n",
		"body": [
			"cm:remove_event_restricted_building_record(${1:string building key})"
		],
	},
	"docgen:episodic_scripting:add_event_restricted_building_record_for_faction": {
		"scope": "lua",
		"prefix": "add_event_restricted_building_record_for_faction",
		"description": "cm:add_event_restricted_building_record_for_faction()\n-  -\n\nAdds a restriction preventing a specified building from being a construction option for a specified faction.\n",
		"body": [
			"add_event_restricted_building_record_for_faction(${1:string building key}, ${2:string faction key}, ${3:[opt=nil] string tooltip key, Key of localised text in full [table]_[field]_[key] string tooltip key})"
		],
	},
	"docgen:episodic_scripting:cm:add_event_restricted_building_record_for_faction": {
		"scope": "lua",
		"prefix": "cm:add_event_restricted_building_record_for_faction",
		"description": "cm:add_event_restricted_building_record_for_faction()\n-  -\n\nAdds a restriction preventing a specified building from being a construction option for a specified faction.\n",
		"body": [
			"cm:add_event_restricted_building_record_for_faction(${1:string building key}, ${2:string faction key}, ${3:[opt=nil] string tooltip key, Key of localised text in full [table]_[field]_[key] string tooltip key})"
		],
	},
	"docgen:episodic_scripting:remove_event_restricted_building_record_for_faction": {
		"scope": "lua",
		"prefix": "remove_event_restricted_building_record_for_faction",
		"description": "cm:remove_event_restricted_building_record_for_faction()\n-  -\n\nRemoves a restriction previously added with episodic_scripting:add_event_restricted_building_record_for_faction.\n",
		"body": [
			"remove_event_restricted_building_record_for_faction(${1:string building key}, ${2:string faction key})"
		],
	},
	"docgen:episodic_scripting:cm:remove_event_restricted_building_record_for_faction": {
		"scope": "lua",
		"prefix": "cm:remove_event_restricted_building_record_for_faction",
		"description": "cm:remove_event_restricted_building_record_for_faction()\n-  -\n\nRemoves a restriction previously added with episodic_scripting:add_event_restricted_building_record_for_faction.\n",
		"body": [
			"cm:remove_event_restricted_building_record_for_faction(${1:string building key}, ${2:string faction key})"
		],
	},
	"docgen:episodic_scripting:lock_technology": {
		"scope": "lua",
		"prefix": "lock_technology",
		"description": "cm:lock_technology()\n-  -\n\nLock a specified technology and all technologies that are children of it, for a specified faction.\n",
		"body": [
			"lock_technology(${1:string faction key}, ${2:string technology key})"
		],
	},
	"docgen:episodic_scripting:cm:lock_technology": {
		"scope": "lua",
		"prefix": "cm:lock_technology",
		"description": "cm:lock_technology()\n-  -\n\nLock a specified technology and all technologies that are children of it, for a specified faction.\n",
		"body": [
			"cm:lock_technology(${1:string faction key}, ${2:string technology key})"
		],
	},
	"docgen:episodic_scripting:unlock_technology": {
		"scope": "lua",
		"prefix": "unlock_technology",
		"description": "cm:unlock_technology()\n-  -\n\nRemoves a lock previously placed with episodic_scripting:lock_technology.\n",
		"body": [
			"unlock_technology(${1:string faction key}, ${2:string technology key})"
		],
	},
	"docgen:episodic_scripting:cm:unlock_technology": {
		"scope": "lua",
		"prefix": "cm:unlock_technology",
		"description": "cm:unlock_technology()\n-  -\n\nRemoves a lock previously placed with episodic_scripting:lock_technology.\n",
		"body": [
			"cm:unlock_technology(${1:string faction key}, ${2:string technology key})"
		],
	},
	"docgen:episodic_scripting:disable_movement_for_character": {
		"scope": "lua",
		"prefix": "disable_movement_for_character",
		"description": "cm:disable_movement_for_character()\n-  -\n\nPrevents the specified character from moving, regardless of where the move order comes from, until movement is subsequently re-enabled with episodic_scripting:enable_movement_for_faction or episodic_scripting:enable_movement_for_character.\n",
		"body": [
			"disable_movement_for_character(${1:string character lookup})"
		],
	},
	"docgen:episodic_scripting:cm:disable_movement_for_character": {
		"scope": "lua",
		"prefix": "cm:disable_movement_for_character",
		"description": "cm:disable_movement_for_character()\n-  -\n\nPrevents the specified character from moving, regardless of where the move order comes from, until movement is subsequently re-enabled with episodic_scripting:enable_movement_for_faction or episodic_scripting:enable_movement_for_character.\n",
		"body": [
			"cm:disable_movement_for_character(${1:string character lookup})"
		],
	},
	"docgen:episodic_scripting:disable_movement_for_faction": {
		"scope": "lua",
		"prefix": "disable_movement_for_faction",
		"description": "cm:disable_movement_for_faction()\n-  -\n\nPrevents all characters in the specified faction from moving, regardless of where the move order comes from, until movement is subsequently re-enabled with episodic_scripting:enable_movement_for_faction or episodic_scripting:enable_movement_for_character.\n",
		"body": [
			"disable_movement_for_faction(${1:string faction key})"
		],
	},
	"docgen:episodic_scripting:cm:disable_movement_for_faction": {
		"scope": "lua",
		"prefix": "cm:disable_movement_for_faction",
		"description": "cm:disable_movement_for_faction()\n-  -\n\nPrevents all characters in the specified faction from moving, regardless of where the move order comes from, until movement is subsequently re-enabled with episodic_scripting:enable_movement_for_faction or episodic_scripting:enable_movement_for_character.\n",
		"body": [
			"cm:disable_movement_for_faction(${1:string faction key})"
		],
	},
	"docgen:episodic_scripting:enable_movement_for_character": {
		"scope": "lua",
		"prefix": "enable_movement_for_character",
		"description": "cm:enable_movement_for_character()\n-  -\n\nRe-enables movement for a specified character after it has been disabled with episodic_scripting:disable_movement_for_character or episodic_scripting:disable_movement_for_faction.\n",
		"body": [
			"enable_movement_for_character(${1:string character lookup})"
		],
	},
	"docgen:episodic_scripting:cm:enable_movement_for_character": {
		"scope": "lua",
		"prefix": "cm:enable_movement_for_character",
		"description": "cm:enable_movement_for_character()\n-  -\n\nRe-enables movement for a specified character after it has been disabled with episodic_scripting:disable_movement_for_character or episodic_scripting:disable_movement_for_faction.\n",
		"body": [
			"cm:enable_movement_for_character(${1:string character lookup})"
		],
	},
	"docgen:episodic_scripting:enable_movement_for_faction": {
		"scope": "lua",
		"prefix": "enable_movement_for_faction",
		"description": "cm:enable_movement_for_faction()\n-  -\n\nRe-enables movement for every character in the specified faction after it has been disabled with episodic_scripting:disable_movement_for_character or episodic_scripting:disable_movement_for_faction.\n",
		"body": [
			"enable_movement_for_faction(${1:string faction key})"
		],
	},
	"docgen:episodic_scripting:cm:enable_movement_for_faction": {
		"scope": "lua",
		"prefix": "cm:enable_movement_for_faction",
		"description": "cm:enable_movement_for_faction()\n-  -\n\nRe-enables movement for every character in the specified faction after it has been disabled with episodic_scripting:disable_movement_for_character or episodic_scripting:disable_movement_for_faction.\n",
		"body": [
			"cm:enable_movement_for_faction(${1:string faction key})"
		],
	},
	"docgen:episodic_scripting:disable_pathfinding_restriction": {
		"scope": "lua",
		"prefix": "disable_pathfinding_restriction",
		"description": "cm:disable_pathfinding_restriction()\n-  -\n\nDisables a pathfinding restriction layer.\n",
		"body": [
			"disable_pathfinding_restriction(${1:number id})"
		],
	},
	"docgen:episodic_scripting:cm:disable_pathfinding_restriction": {
		"scope": "lua",
		"prefix": "cm:disable_pathfinding_restriction",
		"description": "cm:disable_pathfinding_restriction()\n-  -\n\nDisables a pathfinding restriction layer.\n",
		"body": [
			"cm:disable_pathfinding_restriction(${1:number id})"
		],
	},
	"docgen:episodic_scripting:modify_faction_slaves_in_a_faction": {
		"scope": "lua",
		"prefix": "modify_faction_slaves_in_a_faction",
		"description": "cm:modify_faction_slaves_in_a_faction()\n-  -\n\nModify the number of faction slaves in the specified faction.\n",
		"body": [
			"modify_faction_slaves_in_a_faction(${1:string faction key}, ${2:number change})"
		],
	},
	"docgen:episodic_scripting:cm:modify_faction_slaves_in_a_faction": {
		"scope": "lua",
		"prefix": "cm:modify_faction_slaves_in_a_faction",
		"description": "cm:modify_faction_slaves_in_a_faction()\n-  -\n\nModify the number of faction slaves in the specified faction.\n",
		"body": [
			"cm:modify_faction_slaves_in_a_faction(${1:string faction key}, ${2:number change})"
		],
	},
	"docgen:episodic_scripting:modify_faction_slaves_in_a_faction_province": {
		"scope": "lua",
		"prefix": "modify_faction_slaves_in_a_faction_province",
		"description": "cm:modify_faction_slaves_in_a_faction_province()\n-  -\n\nModify the number of faction slaves in the province containing a specified region.\n",
		"body": [
			"modify_faction_slaves_in_a_faction_province(${1:string region key}, ${2:number change})"
		],
	},
	"docgen:episodic_scripting:cm:modify_faction_slaves_in_a_faction_province": {
		"scope": "lua",
		"prefix": "cm:modify_faction_slaves_in_a_faction_province",
		"description": "cm:modify_faction_slaves_in_a_faction_province()\n-  -\n\nModify the number of faction slaves in the province containing a specified region.\n",
		"body": [
			"cm:modify_faction_slaves_in_a_faction_province(${1:string region key}, ${2:number change})"
		],
	},
	"docgen:episodic_scripting:faction_set_food_factor_multiplier": {
		"scope": "lua",
		"prefix": "faction_set_food_factor_multiplier",
		"description": "cm:faction_set_food_factor_multiplier()\n-  -\n\nSets the multiplier of a scripted food type for a specified faction.\n",
		"body": [
			"faction_set_food_factor_multiplier(${1:string faction key}, ${2:string food factor key}, ${3:number multiplier})"
		],
	},
	"docgen:episodic_scripting:cm:faction_set_food_factor_multiplier": {
		"scope": "lua",
		"prefix": "cm:faction_set_food_factor_multiplier",
		"description": "cm:faction_set_food_factor_multiplier()\n-  -\n\nSets the multiplier of a scripted food type for a specified faction.\n",
		"body": [
			"cm:faction_set_food_factor_multiplier(${1:string faction key}, ${2:string food factor key}, ${3:number multiplier})"
		],
	},
	"docgen:episodic_scripting:faction_set_food_factor_value": {
		"scope": "lua",
		"prefix": "faction_set_food_factor_value",
		"description": "cm:faction_set_food_factor_value()\n-  -\n\nSets the per-turn modifier of a scripted food type for a specified faction.\n",
		"body": [
			"faction_set_food_factor_value(${1:string faction key}, ${2:string food factor key}, ${3:number modifier})"
		],
	},
	"docgen:episodic_scripting:cm:faction_set_food_factor_value": {
		"scope": "lua",
		"prefix": "cm:faction_set_food_factor_value",
		"description": "cm:faction_set_food_factor_value()\n-  -\n\nSets the per-turn modifier of a scripted food type for a specified faction.\n",
		"body": [
			"cm:faction_set_food_factor_value(${1:string faction key}, ${2:string food factor key}, ${3:number modifier})"
		],
	},
	"docgen:episodic_scripting:faction_mod_food_factor_value": {
		"scope": "lua",
		"prefix": "faction_mod_food_factor_value",
		"description": "cm:faction_mod_food_factor_value()\n-  -\n\nModifies the per-turn modifier of a scripted food type for a specified faction.\n",
		"body": [
			"faction_mod_food_factor_value(${1:string faction key}, ${2:string food factor key}, ${3:number modifier})"
		],
	},
	"docgen:episodic_scripting:cm:faction_mod_food_factor_value": {
		"scope": "lua",
		"prefix": "cm:faction_mod_food_factor_value",
		"description": "cm:faction_mod_food_factor_value()\n-  -\n\nModifies the per-turn modifier of a scripted food type for a specified faction.\n",
		"body": [
			"cm:faction_mod_food_factor_value(${1:string faction key}, ${2:string food factor key}, ${3:number modifier})"
		],
	},
	"docgen:episodic_scripting:faction_add_pooled_resource": {
		"scope": "lua",
		"prefix": "faction_add_pooled_resource",
		"description": "cm:faction_add_pooled_resource()\n-  -\n\nAdd the specified amount to the specified resource pool (type of resource), as the specified factor (type of change).\n",
		"body": [
			"faction_add_pooled_resource(${1:string faction key}, ${2:string resource key}, ${3:string factor key}, ${4:number amount})"
		],
	},
	"docgen:episodic_scripting:cm:faction_add_pooled_resource": {
		"scope": "lua",
		"prefix": "cm:faction_add_pooled_resource",
		"description": "cm:faction_add_pooled_resource()\n-  -\n\nAdd the specified amount to the specified resource pool (type of resource), as the specified factor (type of change).\n",
		"body": [
			"cm:faction_add_pooled_resource(${1:string faction key}, ${2:string resource key}, ${3:string factor key}, ${4:number amount})"
		],
	},
	"docgen:episodic_scripting:perform_ritual": {
		"scope": "lua",
		"prefix": "perform_ritual",
		"description": "cm:perform_ritual()\n-  -\n\nPerform a ritual for a faction.\n",
		"body": [
			"perform_ritual(${1:string performing faction key}, ${2:string target faction key}, ${3:string ritual key}, ${4:string ritual chain key})"
		],
	},
	"docgen:episodic_scripting:cm:perform_ritual": {
		"scope": "lua",
		"prefix": "cm:perform_ritual",
		"description": "cm:perform_ritual()\n-  -\n\nPerform a ritual for a faction.\n",
		"body": [
			"cm:perform_ritual(${1:string performing faction key}, ${2:string target faction key}, ${3:string ritual key}, ${4:string ritual chain key})"
		],
	},
	"docgen:episodic_scripting:rollback_linked_ritual_chain": {
		"scope": "lua",
		"prefix": "rollback_linked_ritual_chain",
		"description": "cm:rollback_linked_ritual_chain()\n-  -\n\nRolls back a linked ritual chain to the specified stage.\n",
		"body": [
			"rollback_linked_ritual_chain(${1:string ritual chain key}, ${2:number stage})"
		],
	},
	"docgen:episodic_scripting:cm:rollback_linked_ritual_chain": {
		"scope": "lua",
		"prefix": "cm:rollback_linked_ritual_chain",
		"description": "cm:rollback_linked_ritual_chain()\n-  -\n\nRolls back a linked ritual chain to the specified stage.\n",
		"body": [
			"cm:rollback_linked_ritual_chain(${1:string ritual chain key}, ${2:number stage})"
		],
	},
	"docgen:episodic_scripting:set_ritual_unlocked": {
		"scope": "lua",
		"prefix": "set_ritual_unlocked",
		"description": "cm:set_ritual_unlocked()\n-  -\n\nLocks or unlocks the specified ritual for the specified faction.\n",
		"body": [
			"set_ritual_unlocked(${1:number faction cqi}, ${2:string ritual key}, ${3:boolean should unlock})"
		],
	},
	"docgen:episodic_scripting:cm:set_ritual_unlocked": {
		"scope": "lua",
		"prefix": "cm:set_ritual_unlocked",
		"description": "cm:set_ritual_unlocked()\n-  -\n\nLocks or unlocks the specified ritual for the specified faction.\n",
		"body": [
			"cm:set_ritual_unlocked(${1:number faction cqi}, ${2:string ritual key}, ${3:boolean should unlock})"
		],
	},
	"docgen:episodic_scripting:set_ritual_chain_unlocked": {
		"scope": "lua",
		"prefix": "set_ritual_chain_unlocked",
		"description": "cm:set_ritual_chain_unlocked()\n-  -\n\nLocks or unlocks the specified ritual chain for the specified faction.\n",
		"body": [
			"set_ritual_chain_unlocked(${1:number faction cqi}, ${2:string ritual chain key}, ${3:boolean should unlock})"
		],
	},
	"docgen:episodic_scripting:cm:set_ritual_chain_unlocked": {
		"scope": "lua",
		"prefix": "cm:set_ritual_chain_unlocked",
		"description": "cm:set_ritual_chain_unlocked()\n-  -\n\nLocks or unlocks the specified ritual chain for the specified faction.\n",
		"body": [
			"cm:set_ritual_chain_unlocked(${1:number faction cqi}, ${2:string ritual chain key}, ${3:boolean should unlock})"
		],
	},
	"docgen:episodic_scripting:set_ritual_in_chain_unlocked": {
		"scope": "lua",
		"prefix": "set_ritual_in_chain_unlocked",
		"description": "cm:set_ritual_in_chain_unlocked()\n-  -\n\nUnlock a ritual in a chain for the specified faction.\n",
		"body": [
			"set_ritual_in_chain_unlocked(${1:number faction cqi}, ${2:string ritual key}, ${3:string ritual chain key}, ${4:boolean should unlock})"
		],
	},
	"docgen:episodic_scripting:cm:set_ritual_in_chain_unlocked": {
		"scope": "lua",
		"prefix": "cm:set_ritual_in_chain_unlocked",
		"description": "cm:set_ritual_in_chain_unlocked()\n-  -\n\nUnlock a ritual in a chain for the specified faction.\n",
		"body": [
			"cm:set_ritual_in_chain_unlocked(${1:number faction cqi}, ${2:string ritual key}, ${3:string ritual chain key}, ${4:boolean should unlock})"
		],
	},
	"docgen:episodic_scripting:add_custom_battlefield": {
		"scope": "lua",
		"prefix": "add_custom_battlefield",
		"description": "cm:add_custom_battlefield()\n-  -\n\nAdds a record which modifies or completely overrides a battle involving the local player generated from campaign, if that battle happens within a certain supplied radius of a supplied campaign anchor position.\n",
		"body": [
			"add_custom_battlefield(${1:string id}, ${2:number x}, ${3:number y}, ${4:number radius}, ${5:boolean dump campaign}, ${6:string loading screen override}, ${7:string script override}, ${8:string whole battle override}, ${9:number human alliance}, ${10:boolean launch immediately}, ${11:boolean is land battle}, ${12:boolean force autoresolve result})"
		],
	},
	"docgen:episodic_scripting:cm:add_custom_battlefield": {
		"scope": "lua",
		"prefix": "cm:add_custom_battlefield",
		"description": "cm:add_custom_battlefield()\n-  -\n\nAdds a record which modifies or completely overrides a battle involving the local player generated from campaign, if that battle happens within a certain supplied radius of a supplied campaign anchor position.\n",
		"body": [
			"cm:add_custom_battlefield(${1:string id}, ${2:number x}, ${3:number y}, ${4:number radius}, ${5:boolean dump campaign}, ${6:string loading screen override}, ${7:string script override}, ${8:string whole battle override}, ${9:number human alliance}, ${10:boolean launch immediately}, ${11:boolean is land battle}, ${12:boolean force autoresolve result})"
		],
	},
	"docgen:episodic_scripting:remove_custom_battlefield": {
		"scope": "lua",
		"prefix": "remove_custom_battlefield",
		"description": "cm:remove_custom_battlefield()\n-  -\n\nRemoves a custom battle override previously set with episodic_scripting:add_custom_battlefield.\n",
		"body": [
			"remove_custom_battlefield(${1:string id})"
		],
	},
	"docgen:episodic_scripting:cm:remove_custom_battlefield": {
		"scope": "lua",
		"prefix": "cm:remove_custom_battlefield",
		"description": "cm:remove_custom_battlefield()\n-  -\n\nRemoves a custom battle override previously set with episodic_scripting:add_custom_battlefield.\n",
		"body": [
			"cm:remove_custom_battlefield(${1:string id})"
		],
	},
	"docgen:episodic_scripting:win_next_autoresolve_battle": {
		"scope": "lua",
		"prefix": "win_next_autoresolve_battle",
		"description": "cm:win_next_autoresolve_battle()\n-  -\n\nThe specified faction will win the next autoresolve battle.\n",
		"body": [
			"win_next_autoresolve_battle(${1:string faction key})"
		],
	},
	"docgen:episodic_scripting:cm:win_next_autoresolve_battle": {
		"scope": "lua",
		"prefix": "cm:win_next_autoresolve_battle",
		"description": "cm:win_next_autoresolve_battle()\n-  -\n\nThe specified faction will win the next autoresolve battle.\n",
		"body": [
			"cm:win_next_autoresolve_battle(${1:string faction key})"
		],
	},
	"docgen:episodic_scripting:modify_next_autoresolve_battle": {
		"scope": "lua",
		"prefix": "modify_next_autoresolve_battle",
		"description": "cm:modify_next_autoresolve_battle()\n-  -\n\nModifies the result of the next autoresolved battle.\n",
		"body": [
			"modify_next_autoresolve_battle(${1:number attacker win chance}, ${2:number defender win chance}, ${3:number attacker losses modifier}, ${4:number defender losses modifier}, ${5:boolean kill loser})"
		],
	},
	"docgen:episodic_scripting:cm:modify_next_autoresolve_battle": {
		"scope": "lua",
		"prefix": "cm:modify_next_autoresolve_battle",
		"description": "cm:modify_next_autoresolve_battle()\n-  -\n\nModifies the result of the next autoresolved battle.\n",
		"body": [
			"cm:modify_next_autoresolve_battle(${1:number attacker win chance}, ${2:number defender win chance}, ${3:number attacker losses modifier}, ${4:number defender losses modifier}, ${5:boolean kill loser})"
		],
	},
	"docgen:episodic_scripting:skip_winds_of_magic_gambler": {
		"scope": "lua",
		"prefix": "skip_winds_of_magic_gambler",
		"description": "cm:skip_winds_of_magic_gambler()\n-  -\n\nSets whether the winds of magic gambler panel should be shown in the next player battle or not.\n",
		"body": [
			"skip_winds_of_magic_gambler(${1:boolean should skip})"
		],
	},
	"docgen:episodic_scripting:cm:skip_winds_of_magic_gambler": {
		"scope": "lua",
		"prefix": "cm:skip_winds_of_magic_gambler",
		"description": "cm:skip_winds_of_magic_gambler()\n-  -\n\nSets whether the winds of magic gambler panel should be shown in the next player battle or not.\n",
		"body": [
			"cm:skip_winds_of_magic_gambler(${1:boolean should skip})"
		],
	},
	"docgen:episodic_scripting:override_attacker_win_chance_prediction": {
		"scope": "lua",
		"prefix": "override_attacker_win_chance_prediction",
		"description": "cm:override_attacker_win_chance_prediction()\n-  -\n\nSet the attackers predicted win chance percentage for the next battle, affecting the balance of power shown on the pre-battle screen.\n",
		"body": [
			"override_attacker_win_chance_prediction(${1:number chance})"
		],
	},
	"docgen:episodic_scripting:cm:override_attacker_win_chance_prediction": {
		"scope": "lua",
		"prefix": "cm:override_attacker_win_chance_prediction",
		"description": "cm:override_attacker_win_chance_prediction()\n-  -\n\nSet the attackers predicted win chance percentage for the next battle, affecting the balance of power shown on the pre-battle screen.\n",
		"body": [
			"cm:override_attacker_win_chance_prediction(${1:number chance})"
		],
	},
	"docgen:episodic_scripting:pending_battle_add_scripted_tile_upgrade_tag": {
		"scope": "lua",
		"prefix": "pending_battle_add_scripted_tile_upgrade_tag",
		"description": "cm:pending_battle_add_scripted_tile_upgrade_tag()\n-  -\n\nAdds the specified tile upgrade to the currently active pending battle.\n",
		"body": [
			"pending_battle_add_scripted_tile_upgrade_tag(${1:string tile upgrade key})"
		],
	},
	"docgen:episodic_scripting:cm:pending_battle_add_scripted_tile_upgrade_tag": {
		"scope": "lua",
		"prefix": "cm:pending_battle_add_scripted_tile_upgrade_tag",
		"description": "cm:pending_battle_add_scripted_tile_upgrade_tag()\n-  -\n\nAdds the specified tile upgrade to the currently active pending battle.\n",
		"body": [
			"cm:pending_battle_add_scripted_tile_upgrade_tag(${1:string tile upgrade key})"
		],
	},
	"docgen:episodic_scripting:pending_battle_remove_scripted_tile_upgrade_tags": {
		"scope": "lua",
		"prefix": "pending_battle_remove_scripted_tile_upgrade_tags",
		"description": "cm:pending_battle_remove_scripted_tile_upgrade_tags()\n-  -\n\nRemoves the specified tile upgrade from the currently active pending battle.\n",
		"body": [
			"pending_battle_remove_scripted_tile_upgrade_tags(${1:string tile upgrade key})"
		],
	},
	"docgen:episodic_scripting:cm:pending_battle_remove_scripted_tile_upgrade_tags": {
		"scope": "lua",
		"prefix": "cm:pending_battle_remove_scripted_tile_upgrade_tags",
		"description": "cm:pending_battle_remove_scripted_tile_upgrade_tags()\n-  -\n\nRemoves the specified tile upgrade from the currently active pending battle.\n",
		"body": [
			"cm:pending_battle_remove_scripted_tile_upgrade_tags(${1:string tile upgrade key})"
		],
	},
	"docgen:episodic_scripting:force_change_cai_faction_personality": {
		"scope": "lua",
		"prefix": "force_change_cai_faction_personality",
		"description": "cm:force_change_cai_faction_personality()\n-  -\n\nForce the specified faction to adopt the specified AI personality.\n",
		"body": [
			"force_change_cai_faction_personality(${1:string faction key}, ${2:string personality key})"
		],
	},
	"docgen:episodic_scripting:cm:force_change_cai_faction_personality": {
		"scope": "lua",
		"prefix": "cm:force_change_cai_faction_personality",
		"description": "cm:force_change_cai_faction_personality()\n-  -\n\nForce the specified faction to adopt the specified AI personality.\n",
		"body": [
			"cm:force_change_cai_faction_personality(${1:string faction key}, ${2:string personality key})"
		],
	},
	"docgen:episodic_scripting:cai_strategic_stance_manager_block_all_stances_but_that_specified_towards_target_faction": {
		"scope": "lua",
		"prefix": "cai_strategic_stance_manager_block_all_stances_but_that_specified_towards_target_faction",
		"description": "cm:cai_strategic_stance_manager_block_all_stances_but_that_specified_towards_target_faction()\n-  -\n\nSets one faction's stance towards another to the supplied strategic stance.\n",
		"body": [
			"cai_strategic_stance_manager_block_all_stances_but_that_specified_towards_target_faction(${1:string faction key}, ${2:string target faction key}, ${3:string strategic stance key})"
		],
	},
	"docgen:episodic_scripting:cm:cai_strategic_stance_manager_block_all_stances_but_that_specified_towards_target_faction": {
		"scope": "lua",
		"prefix": "cm:cai_strategic_stance_manager_block_all_stances_but_that_specified_towards_target_faction",
		"description": "cm:cai_strategic_stance_manager_block_all_stances_but_that_specified_towards_target_faction()\n-  -\n\nSets one faction's stance towards another to the supplied strategic stance.\n",
		"body": [
			"cm:cai_strategic_stance_manager_block_all_stances_but_that_specified_towards_target_faction(${1:string faction key}, ${2:string target faction key}, ${3:string strategic stance key})"
		],
	},
	"docgen:episodic_scripting:cai_strategic_stance_manager_promote_specified_stance_towards_target_faction": {
		"scope": "lua",
		"prefix": "cai_strategic_stance_manager_promote_specified_stance_towards_target_faction",
		"description": "cm:cai_strategic_stance_manager_promote_specified_stance_towards_target_faction()\n-  -\n\nMakes it much more likely that one faction's stance towards another will be the supplied strategic stance.\n",
		"body": [
			"cai_strategic_stance_manager_promote_specified_stance_towards_target_faction(${1:string faction key}, ${2:string target faction key}, ${3:string strategic stance key})"
		],
	},
	"docgen:episodic_scripting:cm:cai_strategic_stance_manager_promote_specified_stance_towards_target_faction": {
		"scope": "lua",
		"prefix": "cm:cai_strategic_stance_manager_promote_specified_stance_towards_target_faction",
		"description": "cm:cai_strategic_stance_manager_promote_specified_stance_towards_target_faction()\n-  -\n\nMakes it much more likely that one faction's stance towards another will be the supplied strategic stance.\n",
		"body": [
			"cm:cai_strategic_stance_manager_promote_specified_stance_towards_target_faction(${1:string faction key}, ${2:string target faction key}, ${3:string strategic stance key})"
		],
	},
	"docgen:episodic_scripting:cai_force_personality_change": {
		"scope": "lua",
		"prefix": "cai_force_personality_change",
		"description": "cm:cai_force_personality_change()\n-  -\n\nForces the specified faction to pick a new AI personality from their available pool.\n",
		"body": [
			"cai_force_personality_change(${1:string faction key})"
		],
	},
	"docgen:episodic_scripting:cm:cai_force_personality_change": {
		"scope": "lua",
		"prefix": "cm:cai_force_personality_change",
		"description": "cm:cai_force_personality_change()\n-  -\n\nForces the specified faction to pick a new AI personality from their available pool.\n",
		"body": [
			"cm:cai_force_personality_change(${1:string faction key})"
		],
	},
	"docgen:episodic_scripting:cai_force_personality_change_with_override_round_number": {
		"scope": "lua",
		"prefix": "cai_force_personality_change_with_override_round_number",
		"description": "cm:cai_force_personality_change_with_override_round_number()\n-  -\n\nWithin the ai personality assignment system it is possible to set up weightings between rounds and personalities, allowing for certain personalities to be more or less likely to be chosen depending on the turn number (so the AI changes behaviour over time).\n",
		"body": [
			"cai_force_personality_change_with_override_round_number(${1:string faction key}, ${2:number round number})"
		],
	},
	"docgen:episodic_scripting:cm:cai_force_personality_change_with_override_round_number": {
		"scope": "lua",
		"prefix": "cm:cai_force_personality_change_with_override_round_number",
		"description": "cm:cai_force_personality_change_with_override_round_number()\n-  -\n\nWithin the ai personality assignment system it is possible to set up weightings between rounds and personalities, allowing for certain personalities to be more or less likely to be chosen depending on the turn number (so the AI changes behaviour over time).\n",
		"body": [
			"cm:cai_force_personality_change_with_override_round_number(${1:string faction key}, ${2:number round number})"
		],
	},
	"docgen:episodic_scripting:cai_strategic_stance_manager_force_stance_update_between_factions": {
		"scope": "lua",
		"prefix": "cai_strategic_stance_manager_force_stance_update_between_factions",
		"description": "cm:cai_strategic_stance_manager_force_stance_update_between_factions()\n-  -\n\nForces a stance update from one faction to another faction.\n",
		"body": [
			"cai_strategic_stance_manager_force_stance_update_between_factions(${1:string faction key}, ${2:string target faction key})"
		],
	},
	"docgen:episodic_scripting:cm:cai_strategic_stance_manager_force_stance_update_between_factions": {
		"scope": "lua",
		"prefix": "cm:cai_strategic_stance_manager_force_stance_update_between_factions",
		"description": "cm:cai_strategic_stance_manager_force_stance_update_between_factions()\n-  -\n\nForces a stance update from one faction to another faction.\n",
		"body": [
			"cm:cai_strategic_stance_manager_force_stance_update_between_factions(${1:string faction key}, ${2:string target faction key})"
		],
	},
	"docgen:episodic_scripting:cai_strategic_stance_manager_set_stance_promotion_between_factions_for_a_given_stance": {
		"scope": "lua",
		"prefix": "cai_strategic_stance_manager_set_stance_promotion_between_factions_for_a_given_stance",
		"description": "cm:cai_strategic_stance_manager_set_stance_promotion_between_factions_for_a_given_stance()\n-  -\n\nSets up a process which promotes a particular strategic stance from one faction to a target faction over a number of turns.\n",
		"body": [
			"cai_strategic_stance_manager_set_stance_promotion_between_factions_for_a_given_stance(${1:string faction key}, ${2:string target faction key}, ${3:string strategic stance key}, ${4:number start round}, ${5:number start level}, ${6:number end round}, ${7:number end level})"
		],
	},
	"docgen:episodic_scripting:cm:cai_strategic_stance_manager_set_stance_promotion_between_factions_for_a_given_stance": {
		"scope": "lua",
		"prefix": "cm:cai_strategic_stance_manager_set_stance_promotion_between_factions_for_a_given_stance",
		"description": "cm:cai_strategic_stance_manager_set_stance_promotion_between_factions_for_a_given_stance()\n-  -\n\nSets up a process which promotes a particular strategic stance from one faction to a target faction over a number of turns.\n",
		"body": [
			"cm:cai_strategic_stance_manager_set_stance_promotion_between_factions_for_a_given_stance(${1:string faction key}, ${2:string target faction key}, ${3:string strategic stance key}, ${4:number start round}, ${5:number start level}, ${6:number end round}, ${7:number end level})"
		],
	},
	"docgen:episodic_scripting:cai_strategic_stance_manager_clear_all_promotions_between_factions": {
		"scope": "lua",
		"prefix": "cai_strategic_stance_manager_clear_all_promotions_between_factions",
		"description": "cm:cai_strategic_stance_manager_clear_all_promotions_between_factions()\n-  -\n\nClears any existing scripted stance promotions from one faction to a target faction.\n",
		"body": [
			"cai_strategic_stance_manager_clear_all_promotions_between_factions(${1:string faction key}, ${2:string target faction key})"
		],
	},
	"docgen:episodic_scripting:cm:cai_strategic_stance_manager_clear_all_promotions_between_factions": {
		"scope": "lua",
		"prefix": "cm:cai_strategic_stance_manager_clear_all_promotions_between_factions",
		"description": "cm:cai_strategic_stance_manager_clear_all_promotions_between_factions()\n-  -\n\nClears any existing scripted stance promotions from one faction to a target faction.\n",
		"body": [
			"cm:cai_strategic_stance_manager_clear_all_promotions_between_factions(${1:string faction key}, ${2:string target faction key})"
		],
	},
	"docgen:episodic_scripting:cai_strategic_stance_manager_set_stance_blocking_between_factions_for_a_given_stance": {
		"scope": "lua",
		"prefix": "cai_strategic_stance_manager_set_stance_blocking_between_factions_for_a_given_stance",
		"description": "cm:cai_strategic_stance_manager_set_stance_blocking_between_factions_for_a_given_stance()\n-  -\n\nBlocks a specific strategic stance from one faction to another faction until a specified round number.\n",
		"body": [
			"cai_strategic_stance_manager_set_stance_blocking_between_factions_for_a_given_stance(${1:string faction key}, ${2:string target faction key}, ${3:string strategic stance key}, ${4:number round number})"
		],
	},
	"docgen:episodic_scripting:cm:cai_strategic_stance_manager_set_stance_blocking_between_factions_for_a_given_stance": {
		"scope": "lua",
		"prefix": "cm:cai_strategic_stance_manager_set_stance_blocking_between_factions_for_a_given_stance",
		"description": "cm:cai_strategic_stance_manager_set_stance_blocking_between_factions_for_a_given_stance()\n-  -\n\nBlocks a specific strategic stance from one faction to another faction until a specified round number.\n",
		"body": [
			"cm:cai_strategic_stance_manager_set_stance_blocking_between_factions_for_a_given_stance(${1:string faction key}, ${2:string target faction key}, ${3:string strategic stance key}, ${4:number round number})"
		],
	},
	"docgen:episodic_scripting:cai_strategic_stance_manager_clear_all_blocking_between_factions": {
		"scope": "lua",
		"prefix": "cai_strategic_stance_manager_clear_all_blocking_between_factions",
		"description": "cm:cai_strategic_stance_manager_clear_all_blocking_between_factions()\n-  -\n\nClears any existing scripted stance promotions between one faction and a target.\n",
		"body": [
			"cai_strategic_stance_manager_clear_all_blocking_between_factions(${1:string faction key}, ${2:string target faction key})"
		],
	},
	"docgen:episodic_scripting:cm:cai_strategic_stance_manager_clear_all_blocking_between_factions": {
		"scope": "lua",
		"prefix": "cm:cai_strategic_stance_manager_clear_all_blocking_between_factions",
		"description": "cm:cai_strategic_stance_manager_clear_all_blocking_between_factions()\n-  -\n\nClears any existing scripted stance promotions between one faction and a target.\n",
		"body": [
			"cm:cai_strategic_stance_manager_clear_all_blocking_between_factions(${1:string faction key}, ${2:string target faction key})"
		],
	},
	"docgen:episodic_scripting:cai_disable_movement_for_character": {
		"scope": "lua",
		"prefix": "cai_disable_movement_for_character",
		"description": "cm:cai_disable_movement_for_character()\n-  -\n\nPrevents the AI from being able to move a character.\n",
		"body": [
			"cai_disable_movement_for_character(${1:string character lookup})"
		],
	},
	"docgen:episodic_scripting:cm:cai_disable_movement_for_character": {
		"scope": "lua",
		"prefix": "cm:cai_disable_movement_for_character",
		"description": "cm:cai_disable_movement_for_character()\n-  -\n\nPrevents the AI from being able to move a character.\n",
		"body": [
			"cm:cai_disable_movement_for_character(${1:string character lookup})"
		],
	},
	"docgen:episodic_scripting:cai_enable_movement_for_character": {
		"scope": "lua",
		"prefix": "cai_enable_movement_for_character",
		"description": "cm:cai_enable_movement_for_character()\n-  -\n\nAllows the AI to move a character again after it was previously blocked with episodic_scripting:cai_disable_movement_for_character.\n",
		"body": [
			"cai_enable_movement_for_character(${1:string character lookup})"
		],
	},
	"docgen:episodic_scripting:cm:cai_enable_movement_for_character": {
		"scope": "lua",
		"prefix": "cm:cai_enable_movement_for_character",
		"description": "cm:cai_enable_movement_for_character()\n-  -\n\nAllows the AI to move a character again after it was previously blocked with episodic_scripting:cai_disable_movement_for_character.\n",
		"body": [
			"cm:cai_enable_movement_for_character(${1:string character lookup})"
		],
	},
	"docgen:episodic_scripting:cai_disable_movement_for_faction": {
		"scope": "lua",
		"prefix": "cai_disable_movement_for_faction",
		"description": "cm:cai_disable_movement_for_faction()\n-  -\n\nPrevents the AI from being able to move any characters in a faction.\n",
		"body": [
			"cai_disable_movement_for_faction(${1:string faction key})"
		],
	},
	"docgen:episodic_scripting:cm:cai_disable_movement_for_faction": {
		"scope": "lua",
		"prefix": "cm:cai_disable_movement_for_faction",
		"description": "cm:cai_disable_movement_for_faction()\n-  -\n\nPrevents the AI from being able to move any characters in a faction.\n",
		"body": [
			"cm:cai_disable_movement_for_faction(${1:string faction key})"
		],
	},
	"docgen:episodic_scripting:cai_enable_movement_for_faction": {
		"scope": "lua",
		"prefix": "cai_enable_movement_for_faction",
		"description": "cm:cai_enable_movement_for_faction()\n-  -\n\nAllows the AI to move characters in a faction again after it was previously blocked with episodic_scripting:cai_disable_movement_for_faction.\n",
		"body": [
			"cai_enable_movement_for_faction(${1:string faction key})"
		],
	},
	"docgen:episodic_scripting:cm:cai_enable_movement_for_faction": {
		"scope": "lua",
		"prefix": "cm:cai_enable_movement_for_faction",
		"description": "cm:cai_enable_movement_for_faction()\n-  -\n\nAllows the AI to move characters in a faction again after it was previously blocked with episodic_scripting:cai_disable_movement_for_faction.\n",
		"body": [
			"cm:cai_enable_movement_for_faction(${1:string faction key})"
		],
	},
	"docgen:episodic_scripting:cai_disable_command_assignment_for_character": {
		"scope": "lua",
		"prefix": "cai_disable_command_assignment_for_character",
		"description": "cm:cai_disable_command_assignment_for_character()\n-  -\n\nPrevents the AI from assigning the specified character to a position of command.\n",
		"body": [
			"cai_disable_command_assignment_for_character(${1:string character lookup})"
		],
	},
	"docgen:episodic_scripting:cm:cai_disable_command_assignment_for_character": {
		"scope": "lua",
		"prefix": "cm:cai_disable_command_assignment_for_character",
		"description": "cm:cai_disable_command_assignment_for_character()\n-  -\n\nPrevents the AI from assigning the specified character to a position of command.\n",
		"body": [
			"cm:cai_disable_command_assignment_for_character(${1:string character lookup})"
		],
	},
	"docgen:episodic_scripting:cai_enable_command_assignment_for_character": {
		"scope": "lua",
		"prefix": "cai_enable_command_assignment_for_character",
		"description": "cm:cai_enable_command_assignment_for_character()\n-  -\n\nAllows the AI to assigning the specified character to a position of command again after it was previously blocked with episodic_scripting:cai_disable_command_assignment_for_character.\n",
		"body": [
			"cai_enable_command_assignment_for_character(${1:string character lookup})"
		],
	},
	"docgen:episodic_scripting:cm:cai_enable_command_assignment_for_character": {
		"scope": "lua",
		"prefix": "cm:cai_enable_command_assignment_for_character",
		"description": "cm:cai_enable_command_assignment_for_character()\n-  -\n\nAllows the AI to assigning the specified character to a position of command again after it was previously blocked with episodic_scripting:cai_disable_command_assignment_for_character.\n",
		"body": [
			"cm:cai_enable_command_assignment_for_character(${1:string character lookup})"
		],
	},
	"docgen:cinematics:cindy_preload": {
		"scope": "lua",
		"prefix": "cindy_preload",
		"description": "cinematics:cindy_preload()\n-  -\n\nPreload the assets related to a cindy file, so there is no visible stutter when it is actually played.\n",
		"body": [
			"cindy_preload(${1:string path})"
		],
	},
	"docgen:cinematics:cinematics:cindy_preload": {
		"scope": "lua",
		"prefix": "cinematics:cindy_preload",
		"description": "cinematics:cindy_preload()\n-  -\n\nPreload the assets related to a cindy file, so there is no visible stutter when it is actually played.\n",
		"body": [
			"cinematics:cindy_preload(${1:string path})"
		],
	},
	"docgen:cinematics:cindy_playback": {
		"scope": "lua",
		"prefix": "cindy_playback",
		"description": "cinematics:cindy_playback()\n-  -\n\nStarts playback of a cindy scene.\n",
		"body": [
			"cindy_playback(${1:string filepath}, ${2:[opt=nil] number blend in duration}, ${3:[opt=nil] number blend out duration})"
		],
	},
	"docgen:cinematics:cinematics:cindy_playback": {
		"scope": "lua",
		"prefix": "cinematics:cindy_playback",
		"description": "cinematics:cindy_playback()\n-  -\n\nStarts playback of a cindy scene.\n",
		"body": [
			"cinematics:cindy_playback(${1:string filepath}, ${2:[opt=nil] number blend in duration}, ${3:[opt=nil] number blend out duration})"
		],
	},
	"docgen:cinematics:stop_cindy_playback": {
		"scope": "lua",
		"prefix": "stop_cindy_playback",
		"description": "cinematics:stop_cindy_playback()\n-  -\n\nStops any running cindy scene started with cinematics:cindy_playback.\n",
		"body": [
			"stop_cindy_playback(${1:[opt=false] boolean clear scenes})"
		],
	},
	"docgen:cinematics:cinematics:stop_cindy_playback": {
		"scope": "lua",
		"prefix": "cinematics:stop_cindy_playback",
		"description": "cinematics:stop_cindy_playback()\n-  -\n\nStops any running cindy scene started with cinematics:cindy_playback.\n",
		"body": [
			"cinematics:stop_cindy_playback(${1:[opt=false] boolean clear scenes})"
		],
	},
	"docgen:cinematics:cindy_playback_no_camera": {
		"scope": "lua",
		"prefix": "cindy_playback_no_camera",
		"description": "cinematics:cindy_playback_no_camera()\n-  -\n\nStarts a cindy scene with no camera track.\n",
		"body": [
			"cindy_playback_no_camera(${1:string path}, ${2:boolean clear scenes on completion}, ${3:[opt=true] boolean save into replay})"
		],
	},
	"docgen:cinematics:cinematics:cindy_playback_no_camera": {
		"scope": "lua",
		"prefix": "cinematics:cindy_playback_no_camera",
		"description": "cinematics:cindy_playback_no_camera()\n-  -\n\nStarts a cindy scene with no camera track.\n",
		"body": [
			"cinematics:cindy_playback_no_camera(${1:string path}, ${2:boolean clear scenes on completion}, ${3:[opt=true] boolean save into replay})"
		],
	},
	"docgen:cinematics:stop_cindy_playback_no_camera": {
		"scope": "lua",
		"prefix": "stop_cindy_playback_no_camera",
		"description": "cinematics:stop_cindy_playback_no_camera()\n-  -\n\nStops any running cindy scene started with cinematics:cindy_playback_no_camera.\n",
		"body": [
			"stop_cindy_playback_no_camera(${1:[opt=false] boolean clear scenes})"
		],
	},
	"docgen:cinematics:cinematics:stop_cindy_playback_no_camera": {
		"scope": "lua",
		"prefix": "cinematics:stop_cindy_playback_no_camera",
		"description": "cinematics:stop_cindy_playback_no_camera()\n-  -\n\nStops any running cindy scene started with cinematics:cindy_playback_no_camera.\n",
		"body": [
			"cinematics:stop_cindy_playback_no_camera(${1:[opt=false] boolean clear scenes})"
		],
	},
}